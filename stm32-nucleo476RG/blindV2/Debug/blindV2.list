
blindV2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000022ac  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08002434  08002434  00012434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002498  08002498  00012498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080024a0  080024a0  000124a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080024a4  080024a4  000124a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  080024a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000ec  2000000c  080024b4  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200000f8  080024b4  000200f8  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000e68f  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001d81  00000000  00000000  0002e6cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00007bc7  00000000  00000000  0003044c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000009c8  00000000  00000000  00038018  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000b20  00000000  00000000  000389e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000056a2  00000000  00000000  00039500  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00003aab  00000000  00000000  0003eba2  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0004264d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001bb8  00000000  00000000  000426cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800241c 	.word	0x0800241c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800241c 	.word	0x0800241c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b97a 	b.w	80004d4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	468c      	mov	ip, r1
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	9e08      	ldr	r6, [sp, #32]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d151      	bne.n	80002ac <__udivmoddi4+0xb4>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d96d      	bls.n	80002ea <__udivmoddi4+0xf2>
 800020e:	fab2 fe82 	clz	lr, r2
 8000212:	f1be 0f00 	cmp.w	lr, #0
 8000216:	d00b      	beq.n	8000230 <__udivmoddi4+0x38>
 8000218:	f1ce 0c20 	rsb	ip, lr, #32
 800021c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000220:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000224:	fa02 f70e 	lsl.w	r7, r2, lr
 8000228:	ea4c 0c05 	orr.w	ip, ip, r5
 800022c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000230:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000234:	0c25      	lsrs	r5, r4, #16
 8000236:	fbbc f8fa 	udiv	r8, ip, sl
 800023a:	fa1f f987 	uxth.w	r9, r7
 800023e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000242:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000246:	fb08 f309 	mul.w	r3, r8, r9
 800024a:	42ab      	cmp	r3, r5
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x6c>
 800024e:	19ed      	adds	r5, r5, r7
 8000250:	f108 32ff 	add.w	r2, r8, #4294967295
 8000254:	f080 8123 	bcs.w	800049e <__udivmoddi4+0x2a6>
 8000258:	42ab      	cmp	r3, r5
 800025a:	f240 8120 	bls.w	800049e <__udivmoddi4+0x2a6>
 800025e:	f1a8 0802 	sub.w	r8, r8, #2
 8000262:	443d      	add	r5, r7
 8000264:	1aed      	subs	r5, r5, r3
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb5 f0fa 	udiv	r0, r5, sl
 800026c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000270:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000274:	fb00 f909 	mul.w	r9, r0, r9
 8000278:	45a1      	cmp	r9, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x98>
 800027c:	19e4      	adds	r4, r4, r7
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 810a 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000286:	45a1      	cmp	r9, r4
 8000288:	f240 8107 	bls.w	800049a <__udivmoddi4+0x2a2>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	eba4 0409 	sub.w	r4, r4, r9
 8000294:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000298:	2100      	movs	r1, #0
 800029a:	2e00      	cmp	r6, #0
 800029c:	d061      	beq.n	8000362 <__udivmoddi4+0x16a>
 800029e:	fa24 f40e 	lsr.w	r4, r4, lr
 80002a2:	2300      	movs	r3, #0
 80002a4:	6034      	str	r4, [r6, #0]
 80002a6:	6073      	str	r3, [r6, #4]
 80002a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d907      	bls.n	80002c0 <__udivmoddi4+0xc8>
 80002b0:	2e00      	cmp	r6, #0
 80002b2:	d054      	beq.n	800035e <__udivmoddi4+0x166>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	f040 808e 	bne.w	80003e6 <__udivmoddi4+0x1ee>
 80002ca:	42ab      	cmp	r3, r5
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xdc>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2d0>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb65 0503 	sbc.w	r5, r5, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	46ac      	mov	ip, r5
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d03f      	beq.n	8000362 <__udivmoddi4+0x16a>
 80002e2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b912      	cbnz	r2, 80002f2 <__udivmoddi4+0xfa>
 80002ec:	2701      	movs	r7, #1
 80002ee:	fbb7 f7f2 	udiv	r7, r7, r2
 80002f2:	fab7 fe87 	clz	lr, r7
 80002f6:	f1be 0f00 	cmp.w	lr, #0
 80002fa:	d134      	bne.n	8000366 <__udivmoddi4+0x16e>
 80002fc:	1beb      	subs	r3, r5, r7
 80002fe:	0c3a      	lsrs	r2, r7, #16
 8000300:	fa1f fc87 	uxth.w	ip, r7
 8000304:	2101      	movs	r1, #1
 8000306:	fbb3 f8f2 	udiv	r8, r3, r2
 800030a:	0c25      	lsrs	r5, r4, #16
 800030c:	fb02 3318 	mls	r3, r2, r8, r3
 8000310:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000314:	fb0c f308 	mul.w	r3, ip, r8
 8000318:	42ab      	cmp	r3, r5
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x134>
 800031c:	19ed      	adds	r5, r5, r7
 800031e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x132>
 8000324:	42ab      	cmp	r3, r5
 8000326:	f200 80d1 	bhi.w	80004cc <__udivmoddi4+0x2d4>
 800032a:	4680      	mov	r8, r0
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb5 f0f2 	udiv	r0, r5, r2
 8000334:	fb02 5510 	mls	r5, r2, r0, r5
 8000338:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800033c:	fb0c fc00 	mul.w	ip, ip, r0
 8000340:	45a4      	cmp	ip, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x15c>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x15a>
 800034c:	45a4      	cmp	ip, r4
 800034e:	f200 80b8 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 040c 	sub.w	r4, r4, ip
 8000358:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800035c:	e79d      	b.n	800029a <__udivmoddi4+0xa2>
 800035e:	4631      	mov	r1, r6
 8000360:	4630      	mov	r0, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	f1ce 0420 	rsb	r4, lr, #32
 800036a:	fa05 f30e 	lsl.w	r3, r5, lr
 800036e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000372:	fa20 f804 	lsr.w	r8, r0, r4
 8000376:	0c3a      	lsrs	r2, r7, #16
 8000378:	fa25 f404 	lsr.w	r4, r5, r4
 800037c:	ea48 0803 	orr.w	r8, r8, r3
 8000380:	fbb4 f1f2 	udiv	r1, r4, r2
 8000384:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000388:	fb02 4411 	mls	r4, r2, r1, r4
 800038c:	fa1f fc87 	uxth.w	ip, r7
 8000390:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000394:	fb01 f30c 	mul.w	r3, r1, ip
 8000398:	42ab      	cmp	r3, r5
 800039a:	fa00 f40e 	lsl.w	r4, r0, lr
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x1bc>
 80003a0:	19ed      	adds	r5, r5, r7
 80003a2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003a6:	f080 808a 	bcs.w	80004be <__udivmoddi4+0x2c6>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	f240 8087 	bls.w	80004be <__udivmoddi4+0x2c6>
 80003b0:	3902      	subs	r1, #2
 80003b2:	443d      	add	r5, r7
 80003b4:	1aeb      	subs	r3, r5, r3
 80003b6:	fa1f f588 	uxth.w	r5, r8
 80003ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80003be:	fb02 3310 	mls	r3, r2, r0, r3
 80003c2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003c6:	fb00 f30c 	mul.w	r3, r0, ip
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x1e6>
 80003ce:	19ed      	adds	r5, r5, r7
 80003d0:	f100 38ff 	add.w	r8, r0, #4294967295
 80003d4:	d26f      	bcs.n	80004b6 <__udivmoddi4+0x2be>
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d96d      	bls.n	80004b6 <__udivmoddi4+0x2be>
 80003da:	3802      	subs	r0, #2
 80003dc:	443d      	add	r5, r7
 80003de:	1aeb      	subs	r3, r5, r3
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	e78f      	b.n	8000306 <__udivmoddi4+0x10e>
 80003e6:	f1c1 0720 	rsb	r7, r1, #32
 80003ea:	fa22 f807 	lsr.w	r8, r2, r7
 80003ee:	408b      	lsls	r3, r1
 80003f0:	fa05 f401 	lsl.w	r4, r5, r1
 80003f4:	ea48 0303 	orr.w	r3, r8, r3
 80003f8:	fa20 fe07 	lsr.w	lr, r0, r7
 80003fc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000400:	40fd      	lsrs	r5, r7
 8000402:	ea4e 0e04 	orr.w	lr, lr, r4
 8000406:	fbb5 f9fc 	udiv	r9, r5, ip
 800040a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800040e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000412:	fa1f f883 	uxth.w	r8, r3
 8000416:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800041a:	fb09 f408 	mul.w	r4, r9, r8
 800041e:	42ac      	cmp	r4, r5
 8000420:	fa02 f201 	lsl.w	r2, r2, r1
 8000424:	fa00 fa01 	lsl.w	sl, r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x244>
 800042a:	18ed      	adds	r5, r5, r3
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d243      	bcs.n	80004ba <__udivmoddi4+0x2c2>
 8000432:	42ac      	cmp	r4, r5
 8000434:	d941      	bls.n	80004ba <__udivmoddi4+0x2c2>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	441d      	add	r5, r3
 800043c:	1b2d      	subs	r5, r5, r4
 800043e:	fa1f fe8e 	uxth.w	lr, lr
 8000442:	fbb5 f0fc 	udiv	r0, r5, ip
 8000446:	fb0c 5510 	mls	r5, ip, r0, r5
 800044a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45a0      	cmp	r8, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x26e>
 8000456:	18e4      	adds	r4, r4, r3
 8000458:	f100 35ff 	add.w	r5, r0, #4294967295
 800045c:	d229      	bcs.n	80004b2 <__udivmoddi4+0x2ba>
 800045e:	45a0      	cmp	r8, r4
 8000460:	d927      	bls.n	80004b2 <__udivmoddi4+0x2ba>
 8000462:	3802      	subs	r0, #2
 8000464:	441c      	add	r4, r3
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba4 0408 	sub.w	r4, r4, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454c      	cmp	r4, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	464d      	mov	r5, r9
 8000478:	d315      	bcc.n	80004a6 <__udivmoddi4+0x2ae>
 800047a:	d012      	beq.n	80004a2 <__udivmoddi4+0x2aa>
 800047c:	b156      	cbz	r6, 8000494 <__udivmoddi4+0x29c>
 800047e:	ebba 030e 	subs.w	r3, sl, lr
 8000482:	eb64 0405 	sbc.w	r4, r4, r5
 8000486:	fa04 f707 	lsl.w	r7, r4, r7
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431f      	orrs	r7, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	6037      	str	r7, [r6, #0]
 8000492:	6074      	str	r4, [r6, #4]
 8000494:	2100      	movs	r1, #0
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	4618      	mov	r0, r3
 800049c:	e6f8      	b.n	8000290 <__udivmoddi4+0x98>
 800049e:	4690      	mov	r8, r2
 80004a0:	e6e0      	b.n	8000264 <__udivmoddi4+0x6c>
 80004a2:	45c2      	cmp	sl, r8
 80004a4:	d2ea      	bcs.n	800047c <__udivmoddi4+0x284>
 80004a6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004aa:	eb69 0503 	sbc.w	r5, r9, r3
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7e4      	b.n	800047c <__udivmoddi4+0x284>
 80004b2:	4628      	mov	r0, r5
 80004b4:	e7d7      	b.n	8000466 <__udivmoddi4+0x26e>
 80004b6:	4640      	mov	r0, r8
 80004b8:	e791      	b.n	80003de <__udivmoddi4+0x1e6>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e7be      	b.n	800043c <__udivmoddi4+0x244>
 80004be:	4601      	mov	r1, r0
 80004c0:	e778      	b.n	80003b4 <__udivmoddi4+0x1bc>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	e745      	b.n	8000354 <__udivmoddi4+0x15c>
 80004c8:	4608      	mov	r0, r1
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xe6>
 80004cc:	f1a8 0802 	sub.w	r8, r8, #2
 80004d0:	443d      	add	r5, r7
 80004d2:	e72b      	b.n	800032c <__udivmoddi4+0x134>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004d8:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 80004da:	4b0f      	ldr	r3, [pc, #60]	; (8000518 <HAL_InitTick+0x40>)
{
 80004dc:	4605      	mov	r5, r0
  if (uwTickFreq != 0U)
 80004de:	6818      	ldr	r0, [r3, #0]
 80004e0:	b908      	cbnz	r0, 80004e6 <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 80004e2:	2001      	movs	r0, #1
 80004e4:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80004e6:	4a0d      	ldr	r2, [pc, #52]	; (800051c <HAL_InitTick+0x44>)
 80004e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004ec:	fbb3 f3f0 	udiv	r3, r3, r0
 80004f0:	6810      	ldr	r0, [r2, #0]
 80004f2:	fbb0 f0f3 	udiv	r0, r0, r3
 80004f6:	f000 f897 	bl	8000628 <HAL_SYSTICK_Config>
 80004fa:	4604      	mov	r4, r0
 80004fc:	2800      	cmp	r0, #0
 80004fe:	d1f0      	bne.n	80004e2 <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000500:	2d0f      	cmp	r5, #15
 8000502:	d8ee      	bhi.n	80004e2 <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000504:	4602      	mov	r2, r0
 8000506:	4629      	mov	r1, r5
 8000508:	f04f 30ff 	mov.w	r0, #4294967295
 800050c:	f000 f858 	bl	80005c0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000510:	4b03      	ldr	r3, [pc, #12]	; (8000520 <HAL_InitTick+0x48>)
 8000512:	4620      	mov	r0, r4
 8000514:	601d      	str	r5, [r3, #0]
  }

  /* Return function status */
  return status;
}
 8000516:	bd38      	pop	{r3, r4, r5, pc}
 8000518:	20000000 	.word	0x20000000
 800051c:	20000008 	.word	0x20000008
 8000520:	20000004 	.word	0x20000004

08000524 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000524:	4a09      	ldr	r2, [pc, #36]	; (800054c <HAL_Init+0x28>)
 8000526:	6813      	ldr	r3, [r2, #0]
 8000528:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 800052c:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800052e:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000530:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000532:	f000 f833 	bl	800059c <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000536:	2000      	movs	r0, #0
 8000538:	f7ff ffce 	bl	80004d8 <HAL_InitTick>
 800053c:	4604      	mov	r4, r0
 800053e:	b918      	cbnz	r0, 8000548 <HAL_Init+0x24>
    HAL_MspInit();
 8000540:	f001 fe68 	bl	8002214 <HAL_MspInit>
}
 8000544:	4620      	mov	r0, r4
 8000546:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8000548:	2401      	movs	r4, #1
 800054a:	e7fb      	b.n	8000544 <HAL_Init+0x20>
 800054c:	40022000 	.word	0x40022000

08000550 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000550:	4a03      	ldr	r2, [pc, #12]	; (8000560 <HAL_IncTick+0x10>)
 8000552:	4904      	ldr	r1, [pc, #16]	; (8000564 <HAL_IncTick+0x14>)
 8000554:	6813      	ldr	r3, [r2, #0]
 8000556:	6809      	ldr	r1, [r1, #0]
 8000558:	440b      	add	r3, r1
 800055a:	6013      	str	r3, [r2, #0]
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	20000028 	.word	0x20000028
 8000564:	20000000 	.word	0x20000000

08000568 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000568:	4b01      	ldr	r3, [pc, #4]	; (8000570 <HAL_GetTick+0x8>)
 800056a:	6818      	ldr	r0, [r3, #0]
}
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop
 8000570:	20000028 	.word	0x20000028

08000574 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000574:	b538      	push	{r3, r4, r5, lr}
 8000576:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000578:	f7ff fff6 	bl	8000568 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800057c:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800057e:	bf1c      	itt	ne
 8000580:	4b05      	ldrne	r3, [pc, #20]	; (8000598 <HAL_Delay+0x24>)
 8000582:	681b      	ldrne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000584:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000586:	bf18      	it	ne
 8000588:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800058a:	f7ff ffed 	bl	8000568 <HAL_GetTick>
 800058e:	1b40      	subs	r0, r0, r5
 8000590:	4284      	cmp	r4, r0
 8000592:	d8fa      	bhi.n	800058a <HAL_Delay+0x16>
  {
  }
}
 8000594:	bd38      	pop	{r3, r4, r5, pc}
 8000596:	bf00      	nop
 8000598:	20000000 	.word	0x20000000

0800059c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800059c:	4a07      	ldr	r2, [pc, #28]	; (80005bc <HAL_NVIC_SetPriorityGrouping+0x20>)
 800059e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005a0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80005a4:	041b      	lsls	r3, r3, #16
 80005a6:	0c1b      	lsrs	r3, r3, #16
 80005a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005ac:	0200      	lsls	r0, r0, #8
 80005ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005b2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80005b6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80005b8:	60d3      	str	r3, [r2, #12]
 80005ba:	4770      	bx	lr
 80005bc:	e000ed00 	.word	0xe000ed00

080005c0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005c0:	4b17      	ldr	r3, [pc, #92]	; (8000620 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	68dc      	ldr	r4, [r3, #12]
 80005c6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005ca:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005ce:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005d0:	2b04      	cmp	r3, #4
 80005d2:	bf28      	it	cs
 80005d4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005d6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005d8:	f04f 0501 	mov.w	r5, #1
 80005dc:	fa05 f303 	lsl.w	r3, r5, r3
 80005e0:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005e4:	bf8c      	ite	hi
 80005e6:	3c03      	subhi	r4, #3
 80005e8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005ea:	4019      	ands	r1, r3
 80005ec:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005ee:	fa05 f404 	lsl.w	r4, r5, r4
 80005f2:	3c01      	subs	r4, #1
 80005f4:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 80005f6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005f8:	ea42 0201 	orr.w	r2, r2, r1
 80005fc:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000600:	bfad      	iteet	ge
 8000602:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000606:	f000 000f 	andlt.w	r0, r0, #15
 800060a:	4b06      	ldrlt	r3, [pc, #24]	; (8000624 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800060c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000610:	bfb5      	itete	lt
 8000612:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000614:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000616:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000618:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800061c:	bd30      	pop	{r4, r5, pc}
 800061e:	bf00      	nop
 8000620:	e000ed00 	.word	0xe000ed00
 8000624:	e000ed14 	.word	0xe000ed14

08000628 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000628:	3801      	subs	r0, #1
 800062a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800062e:	d20a      	bcs.n	8000646 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000630:	4b06      	ldr	r3, [pc, #24]	; (800064c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000632:	4a07      	ldr	r2, [pc, #28]	; (8000650 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000634:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000636:	21f0      	movs	r1, #240	; 0xf0
 8000638:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800063c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800063e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000640:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000646:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	e000e010 	.word	0xe000e010
 8000650:	e000ed00 	.word	0xe000ed00

08000654 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000658:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800065a:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800065c:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8000808 <HAL_GPIO_Init+0x1b4>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000660:	4c67      	ldr	r4, [pc, #412]	; (8000800 <HAL_GPIO_Init+0x1ac>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000662:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00u;
 8000664:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000666:	9a01      	ldr	r2, [sp, #4]
 8000668:	40da      	lsrs	r2, r3
 800066a:	d102      	bne.n	8000672 <HAL_GPIO_Init+0x1e>
      }
    }

    position++;
  }
}
 800066c:	b005      	add	sp, #20
 800066e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000672:	2601      	movs	r6, #1
    if (iocurrent != 0x00u)
 8000674:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000676:	409e      	lsls	r6, r3
    if (iocurrent != 0x00u)
 8000678:	ea12 0e06 	ands.w	lr, r2, r6
 800067c:	f000 80b1 	beq.w	80007e2 <HAL_GPIO_Init+0x18e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000680:	684a      	ldr	r2, [r1, #4]
 8000682:	f022 0710 	bic.w	r7, r2, #16
 8000686:	2f02      	cmp	r7, #2
 8000688:	d116      	bne.n	80006b8 <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3u];
 800068a:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 800068e:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000692:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8000696:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800069a:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 800069e:	f04f 0c0f 	mov.w	ip, #15
 80006a2:	fa0c fc0a 	lsl.w	ip, ip, sl
 80006a6:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80006aa:	690d      	ldr	r5, [r1, #16]
 80006ac:	fa05 f50a 	lsl.w	r5, r5, sl
 80006b0:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3u] = temp;
 80006b4:	f8c9 5020 	str.w	r5, [r9, #32]
 80006b8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80006bc:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80006be:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80006c2:	fa05 f50c 	lsl.w	r5, r5, ip
 80006c6:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80006c8:	f002 0a03 	and.w	sl, r2, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80006cc:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80006d0:	fa0a f90c 	lsl.w	r9, sl, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006d4:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80006d6:	ea49 090b 	orr.w	r9, r9, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006da:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80006dc:	f8c0 9000 	str.w	r9, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006e0:	d811      	bhi.n	8000706 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 80006e2:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80006e4:	ea05 0907 	and.w	r9, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 80006e8:	68cf      	ldr	r7, [r1, #12]
 80006ea:	fa07 f70c 	lsl.w	r7, r7, ip
 80006ee:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 80006f2:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80006f4:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80006f6:	ea27 0906 	bic.w	r9, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80006fa:	f3c2 1700 	ubfx	r7, r2, #4, #1
 80006fe:	409f      	lsls	r7, r3
 8000700:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OTYPER = temp;
 8000704:	6047      	str	r7, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000706:	f1ba 0f03 	cmp.w	sl, #3
 800070a:	d107      	bne.n	800071c <HAL_GPIO_Init+0xc8>
        temp = GPIOx->ASCR;
 800070c:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800070e:	ea27 0606 	bic.w	r6, r7, r6
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000712:	f3c2 07c0 	ubfx	r7, r2, #3, #1
 8000716:	409f      	lsls	r7, r3
 8000718:	433e      	orrs	r6, r7
        GPIOx->ASCR = temp;
 800071a:	62c6      	str	r6, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 800071c:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800071e:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000720:	688e      	ldr	r6, [r1, #8]
 8000722:	fa06 f60c 	lsl.w	r6, r6, ip
 8000726:	4335      	orrs	r5, r6
      GPIOx->PUPDR = temp;
 8000728:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800072a:	00d5      	lsls	r5, r2, #3
 800072c:	d559      	bpl.n	80007e2 <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800072e:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 8000732:	f045 0501 	orr.w	r5, r5, #1
 8000736:	f8c8 5060 	str.w	r5, [r8, #96]	; 0x60
 800073a:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 800073e:	f023 0603 	bic.w	r6, r3, #3
 8000742:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8000746:	f005 0501 	and.w	r5, r5, #1
 800074a:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 800074e:	9503      	str	r5, [sp, #12]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000750:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000754:	9d03      	ldr	r5, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 8000756:	68b5      	ldr	r5, [r6, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000758:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800075c:	270f      	movs	r7, #15
 800075e:	fa07 f70c 	lsl.w	r7, r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000762:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000766:	ea25 0707 	bic.w	r7, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800076a:	d03c      	beq.n	80007e6 <HAL_GPIO_Init+0x192>
 800076c:	4d25      	ldr	r5, [pc, #148]	; (8000804 <HAL_GPIO_Init+0x1b0>)
 800076e:	42a8      	cmp	r0, r5
 8000770:	d03b      	beq.n	80007ea <HAL_GPIO_Init+0x196>
 8000772:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000776:	42a8      	cmp	r0, r5
 8000778:	d039      	beq.n	80007ee <HAL_GPIO_Init+0x19a>
 800077a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800077e:	42a8      	cmp	r0, r5
 8000780:	d037      	beq.n	80007f2 <HAL_GPIO_Init+0x19e>
 8000782:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000786:	42a8      	cmp	r0, r5
 8000788:	d035      	beq.n	80007f6 <HAL_GPIO_Init+0x1a2>
 800078a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800078e:	42a8      	cmp	r0, r5
 8000790:	d033      	beq.n	80007fa <HAL_GPIO_Init+0x1a6>
 8000792:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000796:	42a8      	cmp	r0, r5
 8000798:	bf14      	ite	ne
 800079a:	2507      	movne	r5, #7
 800079c:	2506      	moveq	r5, #6
 800079e:	fa05 f50c 	lsl.w	r5, r5, ip
 80007a2:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 80007a4:	60b5      	str	r5, [r6, #8]
        temp = EXTI->IMR1;
 80007a6:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 80007a8:	ea6f 060e 	mvn.w	r6, lr
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80007ac:	03d7      	lsls	r7, r2, #15
        temp &= ~(iocurrent);
 80007ae:	bf54      	ite	pl
 80007b0:	4035      	andpl	r5, r6
          temp |= iocurrent;
 80007b2:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->IMR1 = temp;
 80007b6:	6025      	str	r5, [r4, #0]
        temp = EXTI->EMR1;
 80007b8:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80007ba:	0397      	lsls	r7, r2, #14
        temp &= ~(iocurrent);
 80007bc:	bf54      	ite	pl
 80007be:	4035      	andpl	r5, r6
          temp |= iocurrent;
 80007c0:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->EMR1 = temp;
 80007c4:	6065      	str	r5, [r4, #4]
        temp = EXTI->RTSR1;
 80007c6:	68a5      	ldr	r5, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80007c8:	02d7      	lsls	r7, r2, #11
        temp &= ~(iocurrent);
 80007ca:	bf54      	ite	pl
 80007cc:	4035      	andpl	r5, r6
          temp |= iocurrent;
 80007ce:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->RTSR1 = temp;
 80007d2:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 80007d4:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80007d6:	0292      	lsls	r2, r2, #10
        temp &= ~(iocurrent);
 80007d8:	bf54      	ite	pl
 80007da:	4035      	andpl	r5, r6
          temp |= iocurrent;
 80007dc:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->FTSR1 = temp;
 80007e0:	60e5      	str	r5, [r4, #12]
    position++;
 80007e2:	3301      	adds	r3, #1
 80007e4:	e73f      	b.n	8000666 <HAL_GPIO_Init+0x12>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80007e6:	2500      	movs	r5, #0
 80007e8:	e7d9      	b.n	800079e <HAL_GPIO_Init+0x14a>
 80007ea:	2501      	movs	r5, #1
 80007ec:	e7d7      	b.n	800079e <HAL_GPIO_Init+0x14a>
 80007ee:	2502      	movs	r5, #2
 80007f0:	e7d5      	b.n	800079e <HAL_GPIO_Init+0x14a>
 80007f2:	2503      	movs	r5, #3
 80007f4:	e7d3      	b.n	800079e <HAL_GPIO_Init+0x14a>
 80007f6:	2504      	movs	r5, #4
 80007f8:	e7d1      	b.n	800079e <HAL_GPIO_Init+0x14a>
 80007fa:	2505      	movs	r5, #5
 80007fc:	e7cf      	b.n	800079e <HAL_GPIO_Init+0x14a>
 80007fe:	bf00      	nop
 8000800:	40010400 	.word	0x40010400
 8000804:	48000400 	.word	0x48000400
 8000808:	40021000 	.word	0x40021000

0800080c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800080c:	b10a      	cbz	r2, 8000812 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800080e:	6181      	str	r1, [r0, #24]
 8000810:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000812:	6281      	str	r1, [r0, #40]	; 0x28
 8000814:	4770      	bx	lr

08000816 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8000816:	6803      	ldr	r3, [r0, #0]
 8000818:	699a      	ldr	r2, [r3, #24]
 800081a:	0791      	lsls	r1, r2, #30
  {
    hi2c->Instance->TXDR = 0x00U;
 800081c:	bf44      	itt	mi
 800081e:	2200      	movmi	r2, #0
 8000820:	629a      	strmi	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000822:	699a      	ldr	r2, [r3, #24]
 8000824:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8000826:	bf5e      	ittt	pl
 8000828:	699a      	ldrpl	r2, [r3, #24]
 800082a:	f042 0201 	orrpl.w	r2, r2, #1
 800082e:	619a      	strpl	r2, [r3, #24]
 8000830:	4770      	bx	lr

08000832 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8000832:	b530      	push	{r4, r5, lr}
 8000834:	9c03      	ldr	r4, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8000836:	6805      	ldr	r5, [r0, #0]
 8000838:	4323      	orrs	r3, r4
 800083a:	0d64      	lsrs	r4, r4, #21
 800083c:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8000840:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 8000844:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8000848:	6868      	ldr	r0, [r5, #4]
 800084a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800084e:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8000852:	4319      	orrs	r1, r3
 8000854:	f044 0403 	orr.w	r4, r4, #3
 8000858:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800085c:	ea20 0404 	bic.w	r4, r0, r4
 8000860:	4321      	orrs	r1, r4
 8000862:	6069      	str	r1, [r5, #4]
 8000864:	bd30      	pop	{r4, r5, pc}

08000866 <I2C_WaitOnFlagUntilTimeout>:
{
 8000866:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800086a:	9f06      	ldr	r7, [sp, #24]
 800086c:	4604      	mov	r4, r0
 800086e:	4688      	mov	r8, r1
 8000870:	4616      	mov	r6, r2
 8000872:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000874:	6822      	ldr	r2, [r4, #0]
 8000876:	6993      	ldr	r3, [r2, #24]
 8000878:	ea38 0303 	bics.w	r3, r8, r3
 800087c:	bf0c      	ite	eq
 800087e:	2301      	moveq	r3, #1
 8000880:	2300      	movne	r3, #0
 8000882:	42b3      	cmp	r3, r6
 8000884:	d002      	beq.n	800088c <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8000886:	2000      	movs	r0, #0
}
 8000888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 800088c:	1c6b      	adds	r3, r5, #1
 800088e:	d0f2      	beq.n	8000876 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000890:	f7ff fe6a 	bl	8000568 <HAL_GetTick>
 8000894:	1bc0      	subs	r0, r0, r7
 8000896:	4285      	cmp	r5, r0
 8000898:	d301      	bcc.n	800089e <I2C_WaitOnFlagUntilTimeout+0x38>
 800089a:	2d00      	cmp	r5, #0
 800089c:	d1ea      	bne.n	8000874 <I2C_WaitOnFlagUntilTimeout+0xe>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800089e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80008a0:	f043 0320 	orr.w	r3, r3, #32
 80008a4:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80008a6:	2320      	movs	r3, #32
 80008a8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80008ac:	2300      	movs	r3, #0
 80008ae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80008b2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80008b6:	2001      	movs	r0, #1
 80008b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080008bc <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80008bc:	6803      	ldr	r3, [r0, #0]
{
 80008be:	b570      	push	{r4, r5, r6, lr}
 80008c0:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80008c2:	6998      	ldr	r0, [r3, #24]
 80008c4:	f010 0010 	ands.w	r0, r0, #16
{
 80008c8:	460d      	mov	r5, r1
 80008ca:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80008cc:	d116      	bne.n	80008fc <I2C_IsAcknowledgeFailed+0x40>
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 80008d0:	1c69      	adds	r1, r5, #1
 80008d2:	d014      	beq.n	80008fe <I2C_IsAcknowledgeFailed+0x42>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80008d4:	f7ff fe48 	bl	8000568 <HAL_GetTick>
 80008d8:	1b80      	subs	r0, r0, r6
 80008da:	4285      	cmp	r5, r0
 80008dc:	d300      	bcc.n	80008e0 <I2C_IsAcknowledgeFailed+0x24>
 80008de:	b96d      	cbnz	r5, 80008fc <I2C_IsAcknowledgeFailed+0x40>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80008e0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80008e2:	f043 0320 	orr.w	r3, r3, #32
 80008e6:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80008e8:	2320      	movs	r3, #32
 80008ea:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80008ee:	2300      	movs	r3, #0
 80008f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 80008f4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 80008f8:	2001      	movs	r0, #1
}
 80008fa:	bd70      	pop	{r4, r5, r6, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80008fc:	6823      	ldr	r3, [r4, #0]
 80008fe:	6999      	ldr	r1, [r3, #24]
 8000900:	068a      	lsls	r2, r1, #26
 8000902:	d5e5      	bpl.n	80008d0 <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000904:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000906:	2520      	movs	r5, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000908:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 800090a:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800090c:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 800090e:	f7ff ff82 	bl	8000816 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8000912:	6822      	ldr	r2, [r4, #0]
 8000914:	6853      	ldr	r3, [r2, #4]
 8000916:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800091a:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800091e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8000922:	f023 0301 	bic.w	r3, r3, #1
 8000926:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8000928:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800092a:	f043 0304 	orr.w	r3, r3, #4
 800092e:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8000930:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
 8000934:	e7db      	b.n	80008ee <I2C_IsAcknowledgeFailed+0x32>

08000936 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8000936:	b570      	push	{r4, r5, r6, lr}
 8000938:	4604      	mov	r4, r0
 800093a:	460d      	mov	r5, r1
 800093c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800093e:	6823      	ldr	r3, [r4, #0]
 8000940:	699b      	ldr	r3, [r3, #24]
 8000942:	079b      	lsls	r3, r3, #30
 8000944:	d501      	bpl.n	800094a <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8000946:	2000      	movs	r0, #0
 8000948:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800094a:	4632      	mov	r2, r6
 800094c:	4629      	mov	r1, r5
 800094e:	4620      	mov	r0, r4
 8000950:	f7ff ffb4 	bl	80008bc <I2C_IsAcknowledgeFailed>
 8000954:	b9a0      	cbnz	r0, 8000980 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8000956:	1c6a      	adds	r2, r5, #1
 8000958:	d0f1      	beq.n	800093e <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800095a:	f7ff fe05 	bl	8000568 <HAL_GetTick>
 800095e:	1b80      	subs	r0, r0, r6
 8000960:	4285      	cmp	r5, r0
 8000962:	d301      	bcc.n	8000968 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8000964:	2d00      	cmp	r5, #0
 8000966:	d1ea      	bne.n	800093e <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000968:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800096a:	f043 0320 	orr.w	r3, r3, #32
 800096e:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000970:	2320      	movs	r3, #32
 8000972:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000976:	2300      	movs	r3, #0
 8000978:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800097c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8000980:	2001      	movs	r0, #1
}
 8000982:	bd70      	pop	{r4, r5, r6, pc}

08000984 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8000984:	b570      	push	{r4, r5, r6, lr}
 8000986:	4604      	mov	r4, r0
 8000988:	460d      	mov	r5, r1
 800098a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800098c:	6823      	ldr	r3, [r4, #0]
 800098e:	699b      	ldr	r3, [r3, #24]
 8000990:	069b      	lsls	r3, r3, #26
 8000992:	d501      	bpl.n	8000998 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8000994:	2000      	movs	r0, #0
 8000996:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000998:	4632      	mov	r2, r6
 800099a:	4629      	mov	r1, r5
 800099c:	4620      	mov	r0, r4
 800099e:	f7ff ff8d 	bl	80008bc <I2C_IsAcknowledgeFailed>
 80009a2:	b990      	cbnz	r0, 80009ca <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80009a4:	f7ff fde0 	bl	8000568 <HAL_GetTick>
 80009a8:	1b80      	subs	r0, r0, r6
 80009aa:	4285      	cmp	r5, r0
 80009ac:	d301      	bcc.n	80009b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 80009ae:	2d00      	cmp	r5, #0
 80009b0:	d1ec      	bne.n	800098c <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80009b2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80009b4:	f043 0320 	orr.w	r3, r3, #32
 80009b8:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80009ba:	2320      	movs	r3, #32
 80009bc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80009c0:	2300      	movs	r3, #0
 80009c2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80009c6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80009ca:	2001      	movs	r0, #1
}
 80009cc:	bd70      	pop	{r4, r5, r6, pc}

080009ce <HAL_I2C_Init>:
{
 80009ce:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 80009d0:	4604      	mov	r4, r0
 80009d2:	2800      	cmp	r0, #0
 80009d4:	d04a      	beq.n	8000a6c <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80009d6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80009da:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80009de:	b91b      	cbnz	r3, 80009e8 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 80009e0:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 80009e4:	f001 fc2e 	bl	8002244 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80009e8:	2324      	movs	r3, #36	; 0x24
 80009ea:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80009ee:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80009f0:	68e1      	ldr	r1, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 80009f2:	681a      	ldr	r2, [r3, #0]
 80009f4:	f022 0201 	bic.w	r2, r2, #1
 80009f8:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80009fa:	6862      	ldr	r2, [r4, #4]
 80009fc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000a00:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000a02:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000a04:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000a06:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000a0a:	609a      	str	r2, [r3, #8]
 8000a0c:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000a0e:	d124      	bne.n	8000a5a <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000a10:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000a14:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000a16:	685a      	ldr	r2, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000a18:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000a1a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8000a1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000a22:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000a24:	68da      	ldr	r2, [r3, #12]
 8000a26:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000a2a:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000a2c:	6922      	ldr	r2, [r4, #16]
 8000a2e:	430a      	orrs	r2, r1
 8000a30:	69a1      	ldr	r1, [r4, #24]
 8000a32:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000a36:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000a38:	6a21      	ldr	r1, [r4, #32]
 8000a3a:	69e2      	ldr	r2, [r4, #28]
 8000a3c:	430a      	orrs	r2, r1
 8000a3e:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8000a40:	681a      	ldr	r2, [r3, #0]
 8000a42:	f042 0201 	orr.w	r2, r2, #1
 8000a46:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000a48:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8000a4a:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000a4c:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000a4e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000a52:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000a54:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 8000a58:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000a5a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000a5e:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000a60:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000a62:	bf04      	itt	eq
 8000a64:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8000a68:	605a      	streq	r2, [r3, #4]
 8000a6a:	e7d4      	b.n	8000a16 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8000a6c:	2001      	movs	r0, #1
}
 8000a6e:	bd10      	pop	{r4, pc}

08000a70 <HAL_I2C_Master_Transmit>:
{
 8000a70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8000a74:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000a76:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000a7a:	2b20      	cmp	r3, #32
{
 8000a7c:	4604      	mov	r4, r0
 8000a7e:	460e      	mov	r6, r1
 8000a80:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000a82:	f040 8084 	bne.w	8000b8e <HAL_I2C_Master_Transmit+0x11e>
    __HAL_LOCK(hi2c);
 8000a86:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000a8a:	2b01      	cmp	r3, #1
 8000a8c:	d07f      	beq.n	8000b8e <HAL_I2C_Master_Transmit+0x11e>
 8000a8e:	2701      	movs	r7, #1
 8000a90:	f880 7040 	strb.w	r7, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8000a94:	f7ff fd68 	bl	8000568 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000a98:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8000a9a:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000a9c:	9000      	str	r0, [sp, #0]
 8000a9e:	463a      	mov	r2, r7
 8000aa0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000aa4:	4620      	mov	r0, r4
 8000aa6:	f7ff fede 	bl	8000866 <I2C_WaitOnFlagUntilTimeout>
 8000aaa:	b118      	cbz	r0, 8000ab4 <HAL_I2C_Master_Transmit+0x44>
      return HAL_ERROR;
 8000aac:	2001      	movs	r0, #1
}
 8000aae:	b003      	add	sp, #12
 8000ab0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000ab4:	2321      	movs	r3, #33	; 0x21
 8000ab6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000aba:	2310      	movs	r3, #16
 8000abc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ac0:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8000ac2:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000ac6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 8000ac8:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000acc:	b29b      	uxth	r3, r3
 8000ace:	2bff      	cmp	r3, #255	; 0xff
    hi2c->XferISR   = NULL;
 8000ad0:	6360      	str	r0, [r4, #52]	; 0x34
 8000ad2:	4b30      	ldr	r3, [pc, #192]	; (8000b94 <HAL_I2C_Master_Transmit+0x124>)
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000ad4:	d926      	bls.n	8000b24 <HAL_I2C_Master_Transmit+0xb4>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000ad6:	22ff      	movs	r2, #255	; 0xff
 8000ad8:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8000ada:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000adc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000ae0:	4631      	mov	r1, r6
 8000ae2:	4620      	mov	r0, r4
 8000ae4:	f7ff fea5 	bl	8000832 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8000ae8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000aea:	990a      	ldr	r1, [sp, #40]	; 0x28
    while (hi2c->XferCount > 0U)
 8000aec:	b29b      	uxth	r3, r3
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000aee:	462a      	mov	r2, r5
 8000af0:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8000af2:	b9fb      	cbnz	r3, 8000b34 <HAL_I2C_Master_Transmit+0xc4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000af4:	f7ff ff46 	bl	8000984 <I2C_WaitOnSTOPFlagUntilTimeout>
 8000af8:	2800      	cmp	r0, #0
 8000afa:	d1d7      	bne.n	8000aac <HAL_I2C_Master_Transmit+0x3c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000afc:	6823      	ldr	r3, [r4, #0]
 8000afe:	2120      	movs	r1, #32
 8000b00:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8000b02:	685a      	ldr	r2, [r3, #4]
 8000b04:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8000b08:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8000b0c:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8000b10:	f022 0201 	bic.w	r2, r2, #1
 8000b14:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8000b16:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000b1a:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000b1e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8000b22:	e7c4      	b.n	8000aae <HAL_I2C_Master_Transmit+0x3e>
      hi2c->XferSize = hi2c->XferCount;
 8000b24:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8000b26:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8000b28:	b292      	uxth	r2, r2
 8000b2a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000b2c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000b30:	b2d2      	uxtb	r2, r2
 8000b32:	e7d5      	b.n	8000ae0 <HAL_I2C_Master_Transmit+0x70>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000b34:	f7ff feff 	bl	8000936 <I2C_WaitOnTXISFlagUntilTimeout>
 8000b38:	2800      	cmp	r0, #0
 8000b3a:	d1b7      	bne.n	8000aac <HAL_I2C_Master_Transmit+0x3c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000b3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000b3e:	6822      	ldr	r2, [r4, #0]
 8000b40:	f813 1b01 	ldrb.w	r1, [r3], #1
 8000b44:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8000b46:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8000b48:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000b4a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8000b4c:	3b01      	subs	r3, #1
 8000b4e:	b29b      	uxth	r3, r3
 8000b50:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000b52:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000b54:	3a01      	subs	r2, #1
 8000b56:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000b58:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8000b5a:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d0c3      	beq.n	8000ae8 <HAL_I2C_Master_Transmit+0x78>
 8000b60:	2a00      	cmp	r2, #0
 8000b62:	d1c1      	bne.n	8000ae8 <HAL_I2C_Master_Transmit+0x78>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000b64:	9500      	str	r5, [sp, #0]
 8000b66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000b68:	2180      	movs	r1, #128	; 0x80
 8000b6a:	4620      	mov	r0, r4
 8000b6c:	f7ff fe7b 	bl	8000866 <I2C_WaitOnFlagUntilTimeout>
 8000b70:	2800      	cmp	r0, #0
 8000b72:	d19b      	bne.n	8000aac <HAL_I2C_Master_Transmit+0x3c>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000b74:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000b76:	b29b      	uxth	r3, r3
 8000b78:	2bff      	cmp	r3, #255	; 0xff
 8000b7a:	d903      	bls.n	8000b84 <HAL_I2C_Master_Transmit+0x114>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000b7c:	22ff      	movs	r2, #255	; 0xff
 8000b7e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000b80:	9000      	str	r0, [sp, #0]
 8000b82:	e7ab      	b.n	8000adc <HAL_I2C_Master_Transmit+0x6c>
          hi2c->XferSize = hi2c->XferCount;
 8000b84:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000b86:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8000b88:	b292      	uxth	r2, r2
 8000b8a:	8522      	strh	r2, [r4, #40]	; 0x28
 8000b8c:	e7ce      	b.n	8000b2c <HAL_I2C_Master_Transmit+0xbc>
    return HAL_BUSY;
 8000b8e:	2002      	movs	r0, #2
 8000b90:	e78d      	b.n	8000aae <HAL_I2C_Master_Transmit+0x3e>
 8000b92:	bf00      	nop
 8000b94:	80002000 	.word	0x80002000

08000b98 <HAL_I2C_IsDeviceReady>:
{
 8000b98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000b9c:	461d      	mov	r5, r3
  __IO uint32_t I2C_Trials = 0UL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000ba2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000ba6:	2b20      	cmp	r3, #32
{
 8000ba8:	4604      	mov	r4, r0
 8000baa:	4690      	mov	r8, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000bac:	d17d      	bne.n	8000caa <HAL_I2C_IsDeviceReady+0x112>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8000bae:	6803      	ldr	r3, [r0, #0]
 8000bb0:	699b      	ldr	r3, [r3, #24]
 8000bb2:	f413 4300 	ands.w	r3, r3, #32768	; 0x8000
 8000bb6:	d178      	bne.n	8000caa <HAL_I2C_IsDeviceReady+0x112>
    __HAL_LOCK(hi2c);
 8000bb8:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8000bbc:	2a01      	cmp	r2, #1
 8000bbe:	d074      	beq.n	8000caa <HAL_I2C_IsDeviceReady+0x112>
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
 8000bc6:	f3c1 0609 	ubfx	r6, r1, #0, #10
    hi2c->State = HAL_I2C_STATE_BUSY;
 8000bca:	2224      	movs	r2, #36	; 0x24
 8000bcc:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8000bd0:	f446 5920 	orr.w	r9, r6, #10240	; 0x2800
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000bd4:	6443      	str	r3, [r0, #68]	; 0x44
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8000bd6:	68e3      	ldr	r3, [r4, #12]
 8000bd8:	6822      	ldr	r2, [r4, #0]
 8000bda:	2b01      	cmp	r3, #1
 8000bdc:	bf06      	itte	eq
 8000bde:	f046 7300 	orreq.w	r3, r6, #33554432	; 0x2000000
 8000be2:	f443 5300 	orreq.w	r3, r3, #8192	; 0x2000
 8000be6:	464b      	movne	r3, r9
 8000be8:	6053      	str	r3, [r2, #4]
      tickstart = HAL_GetTick();
 8000bea:	f7ff fcbd 	bl	8000568 <HAL_GetTick>
 8000bee:	4607      	mov	r7, r0
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8000bf0:	6823      	ldr	r3, [r4, #0]
 8000bf2:	699a      	ldr	r2, [r3, #24]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8000bf4:	699b      	ldr	r3, [r3, #24]
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8000bf6:	f3c2 1240 	ubfx	r2, r2, #5, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8000bfa:	f3c3 1300 	ubfx	r3, r3, #4, #1
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8000bfe:	b902      	cbnz	r2, 8000c02 <HAL_I2C_IsDeviceReady+0x6a>
 8000c00:	b16b      	cbz	r3, 8000c1e <HAL_I2C_IsDeviceReady+0x86>
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8000c02:	6823      	ldr	r3, [r4, #0]
 8000c04:	699a      	ldr	r2, [r3, #24]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8000c06:	9700      	str	r7, [sp, #0]
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8000c08:	f012 0210 	ands.w	r2, r2, #16
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8000c0c:	462b      	mov	r3, r5
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8000c0e:	d124      	bne.n	8000c5a <HAL_I2C_IsDeviceReady+0xc2>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8000c10:	2120      	movs	r1, #32
 8000c12:	4620      	mov	r0, r4
 8000c14:	f7ff fe27 	bl	8000866 <I2C_WaitOnFlagUntilTimeout>
 8000c18:	b1a8      	cbz	r0, 8000c46 <HAL_I2C_IsDeviceReady+0xae>
    return HAL_ERROR;
 8000c1a:	2001      	movs	r0, #1
 8000c1c:	e01a      	b.n	8000c54 <HAL_I2C_IsDeviceReady+0xbc>
        if (Timeout != HAL_MAX_DELAY)
 8000c1e:	1c6b      	adds	r3, r5, #1
 8000c20:	d0e6      	beq.n	8000bf0 <HAL_I2C_IsDeviceReady+0x58>
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8000c22:	f7ff fca1 	bl	8000568 <HAL_GetTick>
 8000c26:	1bc0      	subs	r0, r0, r7
 8000c28:	4285      	cmp	r5, r0
 8000c2a:	d301      	bcc.n	8000c30 <HAL_I2C_IsDeviceReady+0x98>
 8000c2c:	2d00      	cmp	r5, #0
 8000c2e:	d1df      	bne.n	8000bf0 <HAL_I2C_IsDeviceReady+0x58>
    hi2c->State = HAL_I2C_STATE_READY;
 8000c30:	2320      	movs	r3, #32
 8000c32:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000c36:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000c38:	f043 0320 	orr.w	r3, r3, #32
 8000c3c:	6463      	str	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 8000c3e:	2300      	movs	r3, #0
 8000c40:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8000c44:	e7e9      	b.n	8000c1a <HAL_I2C_IsDeviceReady+0x82>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000c46:	6822      	ldr	r2, [r4, #0]
 8000c48:	2320      	movs	r3, #32
 8000c4a:	61d3      	str	r3, [r2, #28]
        hi2c->State = HAL_I2C_STATE_READY;
 8000c4c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        __HAL_UNLOCK(hi2c);
 8000c50:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 8000c54:	b004      	add	sp, #16
 8000c56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2120      	movs	r1, #32
 8000c5e:	4620      	mov	r0, r4
 8000c60:	f7ff fe01 	bl	8000866 <I2C_WaitOnFlagUntilTimeout>
 8000c64:	4602      	mov	r2, r0
 8000c66:	2800      	cmp	r0, #0
 8000c68:	d1d7      	bne.n	8000c1a <HAL_I2C_IsDeviceReady+0x82>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000c6a:	6823      	ldr	r3, [r4, #0]
 8000c6c:	2110      	movs	r1, #16
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000c6e:	f04f 0a20 	mov.w	sl, #32
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000c72:	61d9      	str	r1, [r3, #28]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000c74:	f8c3 a01c 	str.w	sl, [r3, #28]
      if (I2C_Trials == Trials)
 8000c78:	9903      	ldr	r1, [sp, #12]
 8000c7a:	4541      	cmp	r1, r8
 8000c7c:	d10e      	bne.n	8000c9c <HAL_I2C_IsDeviceReady+0x104>
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8000c7e:	6859      	ldr	r1, [r3, #4]
 8000c80:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8000c84:	6059      	str	r1, [r3, #4]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8000c86:	4620      	mov	r0, r4
 8000c88:	9700      	str	r7, [sp, #0]
 8000c8a:	462b      	mov	r3, r5
 8000c8c:	4651      	mov	r1, sl
 8000c8e:	f7ff fdea 	bl	8000866 <I2C_WaitOnFlagUntilTimeout>
 8000c92:	2800      	cmp	r0, #0
 8000c94:	d1c1      	bne.n	8000c1a <HAL_I2C_IsDeviceReady+0x82>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000c96:	6823      	ldr	r3, [r4, #0]
 8000c98:	f8c3 a01c 	str.w	sl, [r3, #28]
      I2C_Trials++;
 8000c9c:	9b03      	ldr	r3, [sp, #12]
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	9303      	str	r3, [sp, #12]
    while (I2C_Trials < Trials);
 8000ca2:	9b03      	ldr	r3, [sp, #12]
 8000ca4:	4598      	cmp	r8, r3
 8000ca6:	d896      	bhi.n	8000bd6 <HAL_I2C_IsDeviceReady+0x3e>
 8000ca8:	e7c2      	b.n	8000c30 <HAL_I2C_IsDeviceReady+0x98>
    return HAL_BUSY;
 8000caa:	2002      	movs	r0, #2
 8000cac:	e7d2      	b.n	8000c54 <HAL_I2C_IsDeviceReady+0xbc>

08000cae <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000cae:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8000cb2:	b2d2      	uxtb	r2, r2
 8000cb4:	2a20      	cmp	r2, #32
{
 8000cb6:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000cb8:	d11d      	bne.n	8000cf6 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000cba:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d019      	beq.n	8000cf6 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000cc2:	2324      	movs	r3, #36	; 0x24
 8000cc4:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000cc8:	6803      	ldr	r3, [r0, #0]
 8000cca:	681c      	ldr	r4, [r3, #0]
 8000ccc:	f024 0401 	bic.w	r4, r4, #1
 8000cd0:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000cd2:	681c      	ldr	r4, [r3, #0]
 8000cd4:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8000cd8:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8000cda:	681c      	ldr	r4, [r3, #0]
 8000cdc:	4321      	orrs	r1, r4
 8000cde:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000ce0:	6819      	ldr	r1, [r3, #0]
 8000ce2:	f041 0101 	orr.w	r1, r1, #1
 8000ce6:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000ce8:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000cea:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000cee:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8000cf6:	2002      	movs	r0, #2
  }
}
 8000cf8:	bd10      	pop	{r4, pc}

08000cfa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000cfa:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000cfc:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8000d00:	b2e4      	uxtb	r4, r4
 8000d02:	2c20      	cmp	r4, #32
 8000d04:	d11c      	bne.n	8000d40 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000d06:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000d0a:	2b01      	cmp	r3, #1
 8000d0c:	d018      	beq.n	8000d40 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000d0e:	2324      	movs	r3, #36	; 0x24
 8000d10:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000d14:	6803      	ldr	r3, [r0, #0]
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	f022 0201 	bic.w	r2, r2, #1
 8000d1c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8000d1e:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8000d20:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8000d24:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8000d28:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	f042 0201 	orr.w	r2, r2, #1
 8000d30:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000d32:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000d34:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000d38:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8000d40:	2002      	movs	r0, #2
  }
}
 8000d42:	bd10      	pop	{r4, pc}

08000d44 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000d44:	4b02      	ldr	r3, [pc, #8]	; (8000d50 <HAL_PWREx_GetVoltageRange+0xc>)
 8000d46:	6818      	ldr	r0, [r3, #0]
#endif
}
 8000d48:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	40007000 	.word	0x40007000

08000d54 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000d54:	4b17      	ldr	r3, [pc, #92]	; (8000db4 <HAL_PWREx_ControlVoltageScaling+0x60>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000d56:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000d58:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000d5c:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000d60:	d11c      	bne.n	8000d9c <HAL_PWREx_ControlVoltageScaling+0x48>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000d62:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8000d66:	d015      	beq.n	8000d94 <HAL_PWREx_ControlVoltageScaling+0x40>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8000d6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000d72:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000d74:	4a10      	ldr	r2, [pc, #64]	; (8000db8 <HAL_PWREx_ControlVoltageScaling+0x64>)
 8000d76:	6811      	ldr	r1, [r2, #0]
 8000d78:	2232      	movs	r2, #50	; 0x32
 8000d7a:	434a      	muls	r2, r1
 8000d7c:	490f      	ldr	r1, [pc, #60]	; (8000dbc <HAL_PWREx_ControlVoltageScaling+0x68>)
 8000d7e:	fbb2 f2f1 	udiv	r2, r2, r1
 8000d82:	4619      	mov	r1, r3
 8000d84:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d86:	6958      	ldr	r0, [r3, #20]
 8000d88:	0540      	lsls	r0, r0, #21
 8000d8a:	d500      	bpl.n	8000d8e <HAL_PWREx_ControlVoltageScaling+0x3a>
 8000d8c:	b922      	cbnz	r2, 8000d98 <HAL_PWREx_ControlVoltageScaling+0x44>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000d8e:	694b      	ldr	r3, [r1, #20]
 8000d90:	055b      	lsls	r3, r3, #21
 8000d92:	d40d      	bmi.n	8000db0 <HAL_PWREx_ControlVoltageScaling+0x5c>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000d94:	2000      	movs	r0, #0
 8000d96:	4770      	bx	lr
        wait_loop_index--;
 8000d98:	3a01      	subs	r2, #1
 8000d9a:	e7f4      	b.n	8000d86 <HAL_PWREx_ControlVoltageScaling+0x32>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000d9c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000da0:	bf1f      	itttt	ne
 8000da2:	681a      	ldrne	r2, [r3, #0]
 8000da4:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 8000da8:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 8000dac:	601a      	strne	r2, [r3, #0]
 8000dae:	e7f1      	b.n	8000d94 <HAL_PWREx_ControlVoltageScaling+0x40>
        return HAL_TIMEOUT;
 8000db0:	2003      	movs	r0, #3
}
 8000db2:	4770      	bx	lr
 8000db4:	40007000 	.word	0x40007000
 8000db8:	20000008 	.word	0x20000008
 8000dbc:	000f4240 	.word	0x000f4240

08000dc0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8000dc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8000dc2:	4d1e      	ldr	r5, [pc, #120]	; (8000e3c <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8000dc4:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000dc6:	00da      	lsls	r2, r3, #3
{
 8000dc8:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8000dca:	d518      	bpl.n	8000dfe <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8000dcc:	f7ff ffba 	bl	8000d44 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000dd0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8000dd4:	d123      	bne.n	8000e1e <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8000dd6:	2c80      	cmp	r4, #128	; 0x80
 8000dd8:	d929      	bls.n	8000e2e <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8000dda:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8000ddc:	bf8c      	ite	hi
 8000dde:	2002      	movhi	r0, #2
 8000de0:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8000de2:	4a17      	ldr	r2, [pc, #92]	; (8000e40 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8000de4:	6813      	ldr	r3, [r2, #0]
 8000de6:	f023 0307 	bic.w	r3, r3, #7
 8000dea:	4303      	orrs	r3, r0
 8000dec:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8000dee:	6813      	ldr	r3, [r2, #0]
 8000df0:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8000df4:	1a18      	subs	r0, r3, r0
 8000df6:	bf18      	it	ne
 8000df8:	2001      	movne	r0, #1
 8000dfa:	b003      	add	sp, #12
 8000dfc:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8000dfe:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000e00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e04:	65ab      	str	r3, [r5, #88]	; 0x58
 8000e06:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000e08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e0c:	9301      	str	r3, [sp, #4]
 8000e0e:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8000e10:	f7ff ff98 	bl	8000d44 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8000e14:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000e16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e1a:	65ab      	str	r3, [r5, #88]	; 0x58
 8000e1c:	e7d8      	b.n	8000dd0 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 8000e1e:	2c80      	cmp	r4, #128	; 0x80
 8000e20:	d807      	bhi.n	8000e32 <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 8000e22:	d008      	beq.n	8000e36 <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8000e24:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8000e28:	4258      	negs	r0, r3
 8000e2a:	4158      	adcs	r0, r3
 8000e2c:	e7d9      	b.n	8000de2 <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8000e2e:	2000      	movs	r0, #0
 8000e30:	e7d7      	b.n	8000de2 <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 8000e32:	2003      	movs	r0, #3
 8000e34:	e7d5      	b.n	8000de2 <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8000e36:	2002      	movs	r0, #2
 8000e38:	e7d3      	b.n	8000de2 <RCC_SetFlashLatencyFromMSIRange+0x22>
 8000e3a:	bf00      	nop
 8000e3c:	40021000 	.word	0x40021000
 8000e40:	40022000 	.word	0x40022000

08000e44 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e44:	4b22      	ldr	r3, [pc, #136]	; (8000ed0 <HAL_RCC_GetSysClockFreq+0x8c>)
 8000e46:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e48:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000e4a:	f012 020c 	ands.w	r2, r2, #12
 8000e4e:	d005      	beq.n	8000e5c <HAL_RCC_GetSysClockFreq+0x18>
 8000e50:	2a0c      	cmp	r2, #12
 8000e52:	d115      	bne.n	8000e80 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e54:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8000e58:	2901      	cmp	r1, #1
 8000e5a:	d118      	bne.n	8000e8e <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8000e5c:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8000e5e:	481d      	ldr	r0, [pc, #116]	; (8000ed4 <HAL_RCC_GetSysClockFreq+0x90>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8000e60:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8000e62:	bf55      	itete	pl
 8000e64:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8000e68:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8000e6a:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8000e6e:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 8000e72:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000e76:	b34a      	cbz	r2, 8000ecc <HAL_RCC_GetSysClockFreq+0x88>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8000e78:	2a0c      	cmp	r2, #12
 8000e7a:	d009      	beq.n	8000e90 <HAL_RCC_GetSysClockFreq+0x4c>
 8000e7c:	2000      	movs	r0, #0
  return sysclockfreq;
 8000e7e:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8000e80:	2a04      	cmp	r2, #4
 8000e82:	d022      	beq.n	8000eca <HAL_RCC_GetSysClockFreq+0x86>
 8000e84:	2a08      	cmp	r2, #8
 8000e86:	4814      	ldr	r0, [pc, #80]	; (8000ed8 <HAL_RCC_GetSysClockFreq+0x94>)
 8000e88:	bf18      	it	ne
 8000e8a:	2000      	movne	r0, #0
 8000e8c:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8000e8e:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8000e90:	68da      	ldr	r2, [r3, #12]
 8000e92:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 8000e96:	2a02      	cmp	r2, #2
 8000e98:	d015      	beq.n	8000ec6 <HAL_RCC_GetSysClockFreq+0x82>
      pllvco = HSE_VALUE;
 8000e9a:	490f      	ldr	r1, [pc, #60]	; (8000ed8 <HAL_RCC_GetSysClockFreq+0x94>)
 8000e9c:	2a03      	cmp	r2, #3
 8000e9e:	bf08      	it	eq
 8000ea0:	4608      	moveq	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000ea2:	68da      	ldr	r2, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8000ea4:	68d9      	ldr	r1, [r3, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8000ea6:	68db      	ldr	r3, [r3, #12]
 8000ea8:	f3c3 6341 	ubfx	r3, r3, #25, #2
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8000eac:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000eb0:	f3c2 1202 	ubfx	r2, r2, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8000eb4:	3301      	adds	r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8000eb6:	4348      	muls	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000eb8:	3201      	adds	r2, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8000eba:	005b      	lsls	r3, r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8000ebc:	fbb0 f0f2 	udiv	r0, r0, r2
    sysclockfreq = pllvco / pllr;
 8000ec0:	fbb0 f0f3 	udiv	r0, r0, r3
 8000ec4:	4770      	bx	lr
      pllvco = HSI_VALUE;
 8000ec6:	4805      	ldr	r0, [pc, #20]	; (8000edc <HAL_RCC_GetSysClockFreq+0x98>)
 8000ec8:	e7eb      	b.n	8000ea2 <HAL_RCC_GetSysClockFreq+0x5e>
    sysclockfreq = HSI_VALUE;
 8000eca:	4804      	ldr	r0, [pc, #16]	; (8000edc <HAL_RCC_GetSysClockFreq+0x98>)
}
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	40021000 	.word	0x40021000
 8000ed4:	08002468 	.word	0x08002468
 8000ed8:	007a1200 	.word	0x007a1200
 8000edc:	00f42400 	.word	0x00f42400

08000ee0 <HAL_RCC_OscConfig>:
{
 8000ee0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8000ee4:	4605      	mov	r5, r0
 8000ee6:	b908      	cbnz	r0, 8000eec <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000ee8:	2001      	movs	r0, #1
 8000eea:	e047      	b.n	8000f7c <HAL_RCC_OscConfig+0x9c>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000eec:	4ca6      	ldr	r4, [pc, #664]	; (8001188 <HAL_RCC_OscConfig+0x2a8>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000eee:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000ef0:	68a6      	ldr	r6, [r4, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000ef2:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000ef4:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000ef6:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000efa:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000efe:	d573      	bpl.n	8000fe8 <HAL_RCC_OscConfig+0x108>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000f00:	b11e      	cbz	r6, 8000f0a <HAL_RCC_OscConfig+0x2a>
 8000f02:	2e0c      	cmp	r6, #12
 8000f04:	d152      	bne.n	8000fac <HAL_RCC_OscConfig+0xcc>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000f06:	2f01      	cmp	r7, #1
 8000f08:	d150      	bne.n	8000fac <HAL_RCC_OscConfig+0xcc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f0a:	6823      	ldr	r3, [r4, #0]
 8000f0c:	0798      	lsls	r0, r3, #30
 8000f0e:	d502      	bpl.n	8000f16 <HAL_RCC_OscConfig+0x36>
 8000f10:	69ab      	ldr	r3, [r5, #24]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d0e8      	beq.n	8000ee8 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000f16:	6823      	ldr	r3, [r4, #0]
 8000f18:	6a28      	ldr	r0, [r5, #32]
 8000f1a:	0719      	lsls	r1, r3, #28
 8000f1c:	bf56      	itet	pl
 8000f1e:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8000f22:	6823      	ldrmi	r3, [r4, #0]
 8000f24:	091b      	lsrpl	r3, r3, #4
 8000f26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000f2a:	4283      	cmp	r3, r0
 8000f2c:	d229      	bcs.n	8000f82 <HAL_RCC_OscConfig+0xa2>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f2e:	f7ff ff47 	bl	8000dc0 <RCC_SetFlashLatencyFromMSIRange>
 8000f32:	2800      	cmp	r0, #0
 8000f34:	d1d8      	bne.n	8000ee8 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f36:	6823      	ldr	r3, [r4, #0]
 8000f38:	f043 0308 	orr.w	r3, r3, #8
 8000f3c:	6023      	str	r3, [r4, #0]
 8000f3e:	6823      	ldr	r3, [r4, #0]
 8000f40:	6a2a      	ldr	r2, [r5, #32]
 8000f42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000f46:	4313      	orrs	r3, r2
 8000f48:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f4a:	6863      	ldr	r3, [r4, #4]
 8000f4c:	69ea      	ldr	r2, [r5, #28]
 8000f4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000f52:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000f56:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000f58:	f7ff ff74 	bl	8000e44 <HAL_RCC_GetSysClockFreq>
 8000f5c:	68a3      	ldr	r3, [r4, #8]
 8000f5e:	4a8b      	ldr	r2, [pc, #556]	; (800118c <HAL_RCC_OscConfig+0x2ac>)
 8000f60:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000f64:	5cd3      	ldrb	r3, [r2, r3]
 8000f66:	f003 031f 	and.w	r3, r3, #31
 8000f6a:	40d8      	lsrs	r0, r3
 8000f6c:	4b88      	ldr	r3, [pc, #544]	; (8001190 <HAL_RCC_OscConfig+0x2b0>)
 8000f6e:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8000f70:	4b88      	ldr	r3, [pc, #544]	; (8001194 <HAL_RCC_OscConfig+0x2b4>)
 8000f72:	6818      	ldr	r0, [r3, #0]
 8000f74:	f7ff fab0 	bl	80004d8 <HAL_InitTick>
        if(status != HAL_OK)
 8000f78:	2800      	cmp	r0, #0
 8000f7a:	d035      	beq.n	8000fe8 <HAL_RCC_OscConfig+0x108>
}
 8000f7c:	b003      	add	sp, #12
 8000f7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f82:	6823      	ldr	r3, [r4, #0]
 8000f84:	f043 0308 	orr.w	r3, r3, #8
 8000f88:	6023      	str	r3, [r4, #0]
 8000f8a:	6823      	ldr	r3, [r4, #0]
 8000f8c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000f90:	4303      	orrs	r3, r0
 8000f92:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f94:	6863      	ldr	r3, [r4, #4]
 8000f96:	69ea      	ldr	r2, [r5, #28]
 8000f98:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000f9c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000fa0:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000fa2:	f7ff ff0d 	bl	8000dc0 <RCC_SetFlashLatencyFromMSIRange>
 8000fa6:	2800      	cmp	r0, #0
 8000fa8:	d0d6      	beq.n	8000f58 <HAL_RCC_OscConfig+0x78>
 8000faa:	e79d      	b.n	8000ee8 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000fac:	69ab      	ldr	r3, [r5, #24]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d036      	beq.n	8001020 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_MSI_ENABLE();
 8000fb2:	6823      	ldr	r3, [r4, #0]
 8000fb4:	f043 0301 	orr.w	r3, r3, #1
 8000fb8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000fba:	f7ff fad5 	bl	8000568 <HAL_GetTick>
 8000fbe:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000fc0:	6823      	ldr	r3, [r4, #0]
 8000fc2:	079a      	lsls	r2, r3, #30
 8000fc4:	d524      	bpl.n	8001010 <HAL_RCC_OscConfig+0x130>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000fc6:	6823      	ldr	r3, [r4, #0]
 8000fc8:	f043 0308 	orr.w	r3, r3, #8
 8000fcc:	6023      	str	r3, [r4, #0]
 8000fce:	6823      	ldr	r3, [r4, #0]
 8000fd0:	6a2a      	ldr	r2, [r5, #32]
 8000fd2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000fda:	6863      	ldr	r3, [r4, #4]
 8000fdc:	69ea      	ldr	r2, [r5, #28]
 8000fde:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000fe2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000fe6:	6063      	str	r3, [r4, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fe8:	682b      	ldr	r3, [r5, #0]
 8000fea:	07d8      	lsls	r0, r3, #31
 8000fec:	d429      	bmi.n	8001042 <HAL_RCC_OscConfig+0x162>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fee:	682b      	ldr	r3, [r5, #0]
 8000ff0:	0799      	lsls	r1, r3, #30
 8000ff2:	d467      	bmi.n	80010c4 <HAL_RCC_OscConfig+0x1e4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ff4:	682b      	ldr	r3, [r5, #0]
 8000ff6:	0718      	lsls	r0, r3, #28
 8000ff8:	f100 809c 	bmi.w	8001134 <HAL_RCC_OscConfig+0x254>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ffc:	682b      	ldr	r3, [r5, #0]
 8000ffe:	0759      	lsls	r1, r3, #29
 8001000:	f100 80ca 	bmi.w	8001198 <HAL_RCC_OscConfig+0x2b8>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001004:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8001006:	2800      	cmp	r0, #0
 8001008:	f040 8133 	bne.w	8001272 <HAL_RCC_OscConfig+0x392>
  return HAL_OK;
 800100c:	2000      	movs	r0, #0
 800100e:	e7b5      	b.n	8000f7c <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001010:	f7ff faaa 	bl	8000568 <HAL_GetTick>
 8001014:	eba0 0008 	sub.w	r0, r0, r8
 8001018:	2802      	cmp	r0, #2
 800101a:	d9d1      	bls.n	8000fc0 <HAL_RCC_OscConfig+0xe0>
            return HAL_TIMEOUT;
 800101c:	2003      	movs	r0, #3
 800101e:	e7ad      	b.n	8000f7c <HAL_RCC_OscConfig+0x9c>
        __HAL_RCC_MSI_DISABLE();
 8001020:	6823      	ldr	r3, [r4, #0]
 8001022:	f023 0301 	bic.w	r3, r3, #1
 8001026:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001028:	f7ff fa9e 	bl	8000568 <HAL_GetTick>
 800102c:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800102e:	6823      	ldr	r3, [r4, #0]
 8001030:	079b      	lsls	r3, r3, #30
 8001032:	d5d9      	bpl.n	8000fe8 <HAL_RCC_OscConfig+0x108>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001034:	f7ff fa98 	bl	8000568 <HAL_GetTick>
 8001038:	eba0 0008 	sub.w	r0, r0, r8
 800103c:	2802      	cmp	r0, #2
 800103e:	d9f6      	bls.n	800102e <HAL_RCC_OscConfig+0x14e>
 8001040:	e7ec      	b.n	800101c <HAL_RCC_OscConfig+0x13c>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001042:	2e08      	cmp	r6, #8
 8001044:	d003      	beq.n	800104e <HAL_RCC_OscConfig+0x16e>
 8001046:	2e0c      	cmp	r6, #12
 8001048:	d108      	bne.n	800105c <HAL_RCC_OscConfig+0x17c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800104a:	2f03      	cmp	r7, #3
 800104c:	d106      	bne.n	800105c <HAL_RCC_OscConfig+0x17c>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800104e:	6823      	ldr	r3, [r4, #0]
 8001050:	039a      	lsls	r2, r3, #14
 8001052:	d5cc      	bpl.n	8000fee <HAL_RCC_OscConfig+0x10e>
 8001054:	686b      	ldr	r3, [r5, #4]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d1c9      	bne.n	8000fee <HAL_RCC_OscConfig+0x10e>
 800105a:	e745      	b.n	8000ee8 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800105c:	686b      	ldr	r3, [r5, #4]
 800105e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001062:	d110      	bne.n	8001086 <HAL_RCC_OscConfig+0x1a6>
 8001064:	6823      	ldr	r3, [r4, #0]
 8001066:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800106a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800106c:	f7ff fa7c 	bl	8000568 <HAL_GetTick>
 8001070:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001072:	6823      	ldr	r3, [r4, #0]
 8001074:	039b      	lsls	r3, r3, #14
 8001076:	d4ba      	bmi.n	8000fee <HAL_RCC_OscConfig+0x10e>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001078:	f7ff fa76 	bl	8000568 <HAL_GetTick>
 800107c:	eba0 0008 	sub.w	r0, r0, r8
 8001080:	2864      	cmp	r0, #100	; 0x64
 8001082:	d9f6      	bls.n	8001072 <HAL_RCC_OscConfig+0x192>
 8001084:	e7ca      	b.n	800101c <HAL_RCC_OscConfig+0x13c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001086:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800108a:	d104      	bne.n	8001096 <HAL_RCC_OscConfig+0x1b6>
 800108c:	6823      	ldr	r3, [r4, #0]
 800108e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001092:	6023      	str	r3, [r4, #0]
 8001094:	e7e6      	b.n	8001064 <HAL_RCC_OscConfig+0x184>
 8001096:	6822      	ldr	r2, [r4, #0]
 8001098:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800109c:	6022      	str	r2, [r4, #0]
 800109e:	6822      	ldr	r2, [r4, #0]
 80010a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80010a4:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d1e0      	bne.n	800106c <HAL_RCC_OscConfig+0x18c>
        tickstart = HAL_GetTick();
 80010aa:	f7ff fa5d 	bl	8000568 <HAL_GetTick>
 80010ae:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80010b0:	6823      	ldr	r3, [r4, #0]
 80010b2:	0398      	lsls	r0, r3, #14
 80010b4:	d59b      	bpl.n	8000fee <HAL_RCC_OscConfig+0x10e>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010b6:	f7ff fa57 	bl	8000568 <HAL_GetTick>
 80010ba:	eba0 0008 	sub.w	r0, r0, r8
 80010be:	2864      	cmp	r0, #100	; 0x64
 80010c0:	d9f6      	bls.n	80010b0 <HAL_RCC_OscConfig+0x1d0>
 80010c2:	e7ab      	b.n	800101c <HAL_RCC_OscConfig+0x13c>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80010c4:	2e04      	cmp	r6, #4
 80010c6:	d003      	beq.n	80010d0 <HAL_RCC_OscConfig+0x1f0>
 80010c8:	2e0c      	cmp	r6, #12
 80010ca:	d110      	bne.n	80010ee <HAL_RCC_OscConfig+0x20e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80010cc:	2f02      	cmp	r7, #2
 80010ce:	d10e      	bne.n	80010ee <HAL_RCC_OscConfig+0x20e>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80010d0:	6823      	ldr	r3, [r4, #0]
 80010d2:	0559      	lsls	r1, r3, #21
 80010d4:	d503      	bpl.n	80010de <HAL_RCC_OscConfig+0x1fe>
 80010d6:	68eb      	ldr	r3, [r5, #12]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	f43f af05 	beq.w	8000ee8 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010de:	6863      	ldr	r3, [r4, #4]
 80010e0:	692a      	ldr	r2, [r5, #16]
 80010e2:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 80010e6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80010ea:	6063      	str	r3, [r4, #4]
 80010ec:	e782      	b.n	8000ff4 <HAL_RCC_OscConfig+0x114>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010ee:	68eb      	ldr	r3, [r5, #12]
 80010f0:	b17b      	cbz	r3, 8001112 <HAL_RCC_OscConfig+0x232>
        __HAL_RCC_HSI_ENABLE();
 80010f2:	6823      	ldr	r3, [r4, #0]
 80010f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010f8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80010fa:	f7ff fa35 	bl	8000568 <HAL_GetTick>
 80010fe:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001100:	6823      	ldr	r3, [r4, #0]
 8001102:	055a      	lsls	r2, r3, #21
 8001104:	d4eb      	bmi.n	80010de <HAL_RCC_OscConfig+0x1fe>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001106:	f7ff fa2f 	bl	8000568 <HAL_GetTick>
 800110a:	1bc0      	subs	r0, r0, r7
 800110c:	2802      	cmp	r0, #2
 800110e:	d9f7      	bls.n	8001100 <HAL_RCC_OscConfig+0x220>
 8001110:	e784      	b.n	800101c <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_DISABLE();
 8001112:	6823      	ldr	r3, [r4, #0]
 8001114:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001118:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800111a:	f7ff fa25 	bl	8000568 <HAL_GetTick>
 800111e:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001120:	6823      	ldr	r3, [r4, #0]
 8001122:	055b      	lsls	r3, r3, #21
 8001124:	f57f af66 	bpl.w	8000ff4 <HAL_RCC_OscConfig+0x114>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001128:	f7ff fa1e 	bl	8000568 <HAL_GetTick>
 800112c:	1bc0      	subs	r0, r0, r7
 800112e:	2802      	cmp	r0, #2
 8001130:	d9f6      	bls.n	8001120 <HAL_RCC_OscConfig+0x240>
 8001132:	e773      	b.n	800101c <HAL_RCC_OscConfig+0x13c>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001134:	696b      	ldr	r3, [r5, #20]
 8001136:	b19b      	cbz	r3, 8001160 <HAL_RCC_OscConfig+0x280>
      __HAL_RCC_LSI_ENABLE();
 8001138:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800113c:	f043 0301 	orr.w	r3, r3, #1
 8001140:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001144:	f7ff fa10 	bl	8000568 <HAL_GetTick>
 8001148:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800114a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800114e:	079a      	lsls	r2, r3, #30
 8001150:	f53f af54 	bmi.w	8000ffc <HAL_RCC_OscConfig+0x11c>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001154:	f7ff fa08 	bl	8000568 <HAL_GetTick>
 8001158:	1bc0      	subs	r0, r0, r7
 800115a:	2802      	cmp	r0, #2
 800115c:	d9f5      	bls.n	800114a <HAL_RCC_OscConfig+0x26a>
 800115e:	e75d      	b.n	800101c <HAL_RCC_OscConfig+0x13c>
      __HAL_RCC_LSI_DISABLE();
 8001160:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001164:	f023 0301 	bic.w	r3, r3, #1
 8001168:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 800116c:	f7ff f9fc 	bl	8000568 <HAL_GetTick>
 8001170:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001172:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001176:	079b      	lsls	r3, r3, #30
 8001178:	f57f af40 	bpl.w	8000ffc <HAL_RCC_OscConfig+0x11c>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800117c:	f7ff f9f4 	bl	8000568 <HAL_GetTick>
 8001180:	1bc0      	subs	r0, r0, r7
 8001182:	2802      	cmp	r0, #2
 8001184:	d9f5      	bls.n	8001172 <HAL_RCC_OscConfig+0x292>
 8001186:	e749      	b.n	800101c <HAL_RCC_OscConfig+0x13c>
 8001188:	40021000 	.word	0x40021000
 800118c:	0800244f 	.word	0x0800244f
 8001190:	20000008 	.word	0x20000008
 8001194:	20000004 	.word	0x20000004
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001198:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800119a:	00d8      	lsls	r0, r3, #3
 800119c:	d429      	bmi.n	80011f2 <HAL_RCC_OscConfig+0x312>
      __HAL_RCC_PWR_CLK_ENABLE();
 800119e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80011a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011a4:	65a3      	str	r3, [r4, #88]	; 0x58
 80011a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80011a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ac:	9301      	str	r3, [sp, #4]
 80011ae:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80011b0:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011b4:	4f79      	ldr	r7, [pc, #484]	; (800139c <HAL_RCC_OscConfig+0x4bc>)
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	05d9      	lsls	r1, r3, #23
 80011ba:	d51d      	bpl.n	80011f8 <HAL_RCC_OscConfig+0x318>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011bc:	68ab      	ldr	r3, [r5, #8]
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d12b      	bne.n	800121a <HAL_RCC_OscConfig+0x33a>
 80011c2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80011c6:	f043 0301 	orr.w	r3, r3, #1
 80011ca:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 80011ce:	f7ff f9cb 	bl	8000568 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011d2:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80011d6:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80011d8:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80011dc:	079b      	lsls	r3, r3, #30
 80011de:	d542      	bpl.n	8001266 <HAL_RCC_OscConfig+0x386>
    if(pwrclkchanged == SET)
 80011e0:	f1b8 0f00 	cmp.w	r8, #0
 80011e4:	f43f af0e 	beq.w	8001004 <HAL_RCC_OscConfig+0x124>
      __HAL_RCC_PWR_CLK_DISABLE();
 80011e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80011ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011ee:	65a3      	str	r3, [r4, #88]	; 0x58
 80011f0:	e708      	b.n	8001004 <HAL_RCC_OscConfig+0x124>
    FlagStatus       pwrclkchanged = RESET;
 80011f2:	f04f 0800 	mov.w	r8, #0
 80011f6:	e7dd      	b.n	80011b4 <HAL_RCC_OscConfig+0x2d4>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011fe:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001200:	f7ff f9b2 	bl	8000568 <HAL_GetTick>
 8001204:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	05da      	lsls	r2, r3, #23
 800120a:	d4d7      	bmi.n	80011bc <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800120c:	f7ff f9ac 	bl	8000568 <HAL_GetTick>
 8001210:	eba0 0009 	sub.w	r0, r0, r9
 8001214:	2802      	cmp	r0, #2
 8001216:	d9f6      	bls.n	8001206 <HAL_RCC_OscConfig+0x326>
 8001218:	e700      	b.n	800101c <HAL_RCC_OscConfig+0x13c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800121a:	2b05      	cmp	r3, #5
 800121c:	d106      	bne.n	800122c <HAL_RCC_OscConfig+0x34c>
 800121e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001222:	f043 0304 	orr.w	r3, r3, #4
 8001226:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 800122a:	e7ca      	b.n	80011c2 <HAL_RCC_OscConfig+0x2e2>
 800122c:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8001230:	f022 0201 	bic.w	r2, r2, #1
 8001234:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8001238:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800123c:	f022 0204 	bic.w	r2, r2, #4
 8001240:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001244:	2b00      	cmp	r3, #0
 8001246:	d1c2      	bne.n	80011ce <HAL_RCC_OscConfig+0x2ee>
      tickstart = HAL_GetTick();
 8001248:	f7ff f98e 	bl	8000568 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800124c:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001250:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001252:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001256:	0798      	lsls	r0, r3, #30
 8001258:	d5c2      	bpl.n	80011e0 <HAL_RCC_OscConfig+0x300>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800125a:	f7ff f985 	bl	8000568 <HAL_GetTick>
 800125e:	1bc0      	subs	r0, r0, r7
 8001260:	4548      	cmp	r0, r9
 8001262:	d9f6      	bls.n	8001252 <HAL_RCC_OscConfig+0x372>
 8001264:	e6da      	b.n	800101c <HAL_RCC_OscConfig+0x13c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001266:	f7ff f97f 	bl	8000568 <HAL_GetTick>
 800126a:	1bc0      	subs	r0, r0, r7
 800126c:	4548      	cmp	r0, r9
 800126e:	d9b3      	bls.n	80011d8 <HAL_RCC_OscConfig+0x2f8>
 8001270:	e6d4      	b.n	800101c <HAL_RCC_OscConfig+0x13c>
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001272:	2e0c      	cmp	r6, #12
 8001274:	d05c      	beq.n	8001330 <HAL_RCC_OscConfig+0x450>
        __HAL_RCC_PLL_DISABLE();
 8001276:	6823      	ldr	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001278:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800127a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800127e:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001280:	d13b      	bne.n	80012fa <HAL_RCC_OscConfig+0x41a>
        tickstart = HAL_GetTick();
 8001282:	f7ff f971 	bl	8000568 <HAL_GetTick>
 8001286:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001288:	6823      	ldr	r3, [r4, #0]
 800128a:	0199      	lsls	r1, r3, #6
 800128c:	d42f      	bmi.n	80012ee <HAL_RCC_OscConfig+0x40e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800128e:	68e2      	ldr	r2, [r4, #12]
 8001290:	4b43      	ldr	r3, [pc, #268]	; (80013a0 <HAL_RCC_OscConfig+0x4c0>)
 8001292:	4013      	ands	r3, r2
 8001294:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8001296:	4313      	orrs	r3, r2
 8001298:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800129a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800129e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80012a0:	3a01      	subs	r2, #1
 80012a2:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80012a6:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80012a8:	0912      	lsrs	r2, r2, #4
 80012aa:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 80012ae:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 80012b0:	0852      	lsrs	r2, r2, #1
 80012b2:	3a01      	subs	r2, #1
 80012b4:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 80012b8:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80012ba:	0852      	lsrs	r2, r2, #1
 80012bc:	3a01      	subs	r2, #1
 80012be:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80012c2:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 80012c4:	6823      	ldr	r3, [r4, #0]
 80012c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80012ca:	6023      	str	r3, [r4, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80012cc:	68e3      	ldr	r3, [r4, #12]
 80012ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80012d2:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 80012d4:	f7ff f948 	bl	8000568 <HAL_GetTick>
 80012d8:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80012da:	6823      	ldr	r3, [r4, #0]
 80012dc:	019a      	lsls	r2, r3, #6
 80012de:	f53f ae95 	bmi.w	800100c <HAL_RCC_OscConfig+0x12c>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012e2:	f7ff f941 	bl	8000568 <HAL_GetTick>
 80012e6:	1b40      	subs	r0, r0, r5
 80012e8:	2802      	cmp	r0, #2
 80012ea:	d9f6      	bls.n	80012da <HAL_RCC_OscConfig+0x3fa>
 80012ec:	e696      	b.n	800101c <HAL_RCC_OscConfig+0x13c>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012ee:	f7ff f93b 	bl	8000568 <HAL_GetTick>
 80012f2:	1b80      	subs	r0, r0, r6
 80012f4:	2802      	cmp	r0, #2
 80012f6:	d9c7      	bls.n	8001288 <HAL_RCC_OscConfig+0x3a8>
 80012f8:	e690      	b.n	800101c <HAL_RCC_OscConfig+0x13c>
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80012fa:	6823      	ldr	r3, [r4, #0]
 80012fc:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001300:	bf02      	ittt	eq
 8001302:	68e3      	ldreq	r3, [r4, #12]
 8001304:	f023 0303 	biceq.w	r3, r3, #3
 8001308:	60e3      	streq	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800130a:	68e3      	ldr	r3, [r4, #12]
 800130c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001310:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001314:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8001316:	f7ff f927 	bl	8000568 <HAL_GetTick>
 800131a:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800131c:	6823      	ldr	r3, [r4, #0]
 800131e:	019b      	lsls	r3, r3, #6
 8001320:	f57f ae74 	bpl.w	800100c <HAL_RCC_OscConfig+0x12c>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001324:	f7ff f920 	bl	8000568 <HAL_GetTick>
 8001328:	1b40      	subs	r0, r0, r5
 800132a:	2802      	cmp	r0, #2
 800132c:	d9f6      	bls.n	800131c <HAL_RCC_OscConfig+0x43c>
 800132e:	e675      	b.n	800101c <HAL_RCC_OscConfig+0x13c>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001330:	2801      	cmp	r0, #1
 8001332:	f43f ae23 	beq.w	8000f7c <HAL_RCC_OscConfig+0x9c>
        pll_config = RCC->PLLCFGR;
 8001336:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001338:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800133a:	f003 0103 	and.w	r1, r3, #3
 800133e:	4291      	cmp	r1, r2
 8001340:	f47f add2 	bne.w	8000ee8 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001344:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8001346:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800134a:	3901      	subs	r1, #1
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800134c:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8001350:	f47f adca 	bne.w	8000ee8 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001354:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8001356:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800135a:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 800135e:	f47f adc3 	bne.w	8000ee8 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001362:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8001364:	3a07      	subs	r2, #7
 8001366:	f403 3100 	and.w	r1, r3, #131072	; 0x20000
 800136a:	bf18      	it	ne
 800136c:	2201      	movne	r2, #1
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800136e:	4291      	cmp	r1, r2
 8001370:	f47f adba 	bne.w	8000ee8 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001374:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8001376:	0852      	lsrs	r2, r2, #1
 8001378:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 800137c:	3a01      	subs	r2, #1
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800137e:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8001382:	f47f adb1 	bne.w	8000ee8 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001386:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8001388:	0852      	lsrs	r2, r2, #1
 800138a:	3a01      	subs	r2, #1
 800138c:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001390:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
    return HAL_ERROR;
 8001394:	bf14      	ite	ne
 8001396:	2001      	movne	r0, #1
 8001398:	2000      	moveq	r0, #0
 800139a:	e5ef      	b.n	8000f7c <HAL_RCC_OscConfig+0x9c>
 800139c:	40007000 	.word	0x40007000
 80013a0:	f99d808c 	.word	0xf99d808c

080013a4 <HAL_RCC_ClockConfig>:
{
 80013a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013a8:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 80013aa:	4604      	mov	r4, r0
 80013ac:	b910      	cbnz	r0, 80013b4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80013ae:	2001      	movs	r0, #1
 80013b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013b4:	4a41      	ldr	r2, [pc, #260]	; (80014bc <HAL_RCC_ClockConfig+0x118>)
 80013b6:	6813      	ldr	r3, [r2, #0]
 80013b8:	f003 0307 	and.w	r3, r3, #7
 80013bc:	428b      	cmp	r3, r1
 80013be:	d32a      	bcc.n	8001416 <HAL_RCC_ClockConfig+0x72>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013c0:	6823      	ldr	r3, [r4, #0]
 80013c2:	07d9      	lsls	r1, r3, #31
 80013c4:	d432      	bmi.n	800142c <HAL_RCC_ClockConfig+0x88>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013c6:	6821      	ldr	r1, [r4, #0]
 80013c8:	078a      	lsls	r2, r1, #30
 80013ca:	d45c      	bmi.n	8001486 <HAL_RCC_ClockConfig+0xe2>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80013cc:	4a3b      	ldr	r2, [pc, #236]	; (80014bc <HAL_RCC_ClockConfig+0x118>)
 80013ce:	6813      	ldr	r3, [r2, #0]
 80013d0:	f003 0307 	and.w	r3, r3, #7
 80013d4:	429e      	cmp	r6, r3
 80013d6:	d35e      	bcc.n	8001496 <HAL_RCC_ClockConfig+0xf2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013d8:	f011 0f04 	tst.w	r1, #4
 80013dc:	4d38      	ldr	r5, [pc, #224]	; (80014c0 <HAL_RCC_ClockConfig+0x11c>)
 80013de:	d165      	bne.n	80014ac <HAL_RCC_ClockConfig+0x108>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013e0:	070b      	lsls	r3, r1, #28
 80013e2:	d506      	bpl.n	80013f2 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80013e4:	68ab      	ldr	r3, [r5, #8]
 80013e6:	6922      	ldr	r2, [r4, #16]
 80013e8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80013ec:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80013f0:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80013f2:	f7ff fd27 	bl	8000e44 <HAL_RCC_GetSysClockFreq>
 80013f6:	68ab      	ldr	r3, [r5, #8]
 80013f8:	4a32      	ldr	r2, [pc, #200]	; (80014c4 <HAL_RCC_ClockConfig+0x120>)
 80013fa:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 80013fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001402:	5cd3      	ldrb	r3, [r2, r3]
 8001404:	f003 031f 	and.w	r3, r3, #31
 8001408:	40d8      	lsrs	r0, r3
 800140a:	4b2f      	ldr	r3, [pc, #188]	; (80014c8 <HAL_RCC_ClockConfig+0x124>)
 800140c:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 800140e:	4b2f      	ldr	r3, [pc, #188]	; (80014cc <HAL_RCC_ClockConfig+0x128>)
 8001410:	6818      	ldr	r0, [r3, #0]
 8001412:	f7ff b861 	b.w	80004d8 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001416:	6813      	ldr	r3, [r2, #0]
 8001418:	f023 0307 	bic.w	r3, r3, #7
 800141c:	430b      	orrs	r3, r1
 800141e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001420:	6813      	ldr	r3, [r2, #0]
 8001422:	f003 0307 	and.w	r3, r3, #7
 8001426:	4299      	cmp	r1, r3
 8001428:	d1c1      	bne.n	80013ae <HAL_RCC_ClockConfig+0xa>
 800142a:	e7c9      	b.n	80013c0 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800142c:	6862      	ldr	r2, [r4, #4]
 800142e:	4d24      	ldr	r5, [pc, #144]	; (80014c0 <HAL_RCC_ClockConfig+0x11c>)
 8001430:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001432:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001434:	d11b      	bne.n	800146e <HAL_RCC_ClockConfig+0xca>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001436:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800143a:	d0b8      	beq.n	80013ae <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800143c:	68ab      	ldr	r3, [r5, #8]
 800143e:	f023 0303 	bic.w	r3, r3, #3
 8001442:	4313      	orrs	r3, r2
 8001444:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 8001446:	f7ff f88f 	bl	8000568 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800144a:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800144e:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001450:	68ab      	ldr	r3, [r5, #8]
 8001452:	6862      	ldr	r2, [r4, #4]
 8001454:	f003 030c 	and.w	r3, r3, #12
 8001458:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800145c:	d0b3      	beq.n	80013c6 <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800145e:	f7ff f883 	bl	8000568 <HAL_GetTick>
 8001462:	1bc0      	subs	r0, r0, r7
 8001464:	4540      	cmp	r0, r8
 8001466:	d9f3      	bls.n	8001450 <HAL_RCC_ClockConfig+0xac>
        return HAL_TIMEOUT;
 8001468:	2003      	movs	r0, #3
}
 800146a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800146e:	2a02      	cmp	r2, #2
 8001470:	d102      	bne.n	8001478 <HAL_RCC_ClockConfig+0xd4>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001472:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001476:	e7e0      	b.n	800143a <HAL_RCC_ClockConfig+0x96>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001478:	b912      	cbnz	r2, 8001480 <HAL_RCC_ClockConfig+0xdc>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800147a:	f013 0f02 	tst.w	r3, #2
 800147e:	e7dc      	b.n	800143a <HAL_RCC_ClockConfig+0x96>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001480:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001484:	e7d9      	b.n	800143a <HAL_RCC_ClockConfig+0x96>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001486:	4a0e      	ldr	r2, [pc, #56]	; (80014c0 <HAL_RCC_ClockConfig+0x11c>)
 8001488:	68a0      	ldr	r0, [r4, #8]
 800148a:	6893      	ldr	r3, [r2, #8]
 800148c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001490:	4303      	orrs	r3, r0
 8001492:	6093      	str	r3, [r2, #8]
 8001494:	e79a      	b.n	80013cc <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001496:	6813      	ldr	r3, [r2, #0]
 8001498:	f023 0307 	bic.w	r3, r3, #7
 800149c:	4333      	orrs	r3, r6
 800149e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014a0:	6813      	ldr	r3, [r2, #0]
 80014a2:	f003 0307 	and.w	r3, r3, #7
 80014a6:	429e      	cmp	r6, r3
 80014a8:	d181      	bne.n	80013ae <HAL_RCC_ClockConfig+0xa>
 80014aa:	e795      	b.n	80013d8 <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014ac:	68ab      	ldr	r3, [r5, #8]
 80014ae:	68e2      	ldr	r2, [r4, #12]
 80014b0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80014b4:	4313      	orrs	r3, r2
 80014b6:	60ab      	str	r3, [r5, #8]
 80014b8:	e792      	b.n	80013e0 <HAL_RCC_ClockConfig+0x3c>
 80014ba:	bf00      	nop
 80014bc:	40022000 	.word	0x40022000
 80014c0:	40021000 	.word	0x40021000
 80014c4:	0800244f 	.word	0x0800244f
 80014c8:	20000008 	.word	0x20000008
 80014cc:	20000004 	.word	0x20000004

080014d0 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80014d0:	4b05      	ldr	r3, [pc, #20]	; (80014e8 <HAL_RCC_GetPCLK1Freq+0x18>)
 80014d2:	4a06      	ldr	r2, [pc, #24]	; (80014ec <HAL_RCC_GetPCLK1Freq+0x1c>)
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80014da:	5cd3      	ldrb	r3, [r2, r3]
 80014dc:	4a04      	ldr	r2, [pc, #16]	; (80014f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80014de:	6810      	ldr	r0, [r2, #0]
 80014e0:	f003 031f 	and.w	r3, r3, #31
}
 80014e4:	40d8      	lsrs	r0, r3
 80014e6:	4770      	bx	lr
 80014e8:	40021000 	.word	0x40021000
 80014ec:	0800245f 	.word	0x0800245f
 80014f0:	20000008 	.word	0x20000008

080014f4 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80014f4:	4b05      	ldr	r3, [pc, #20]	; (800150c <HAL_RCC_GetPCLK2Freq+0x18>)
 80014f6:	4a06      	ldr	r2, [pc, #24]	; (8001510 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80014fe:	5cd3      	ldrb	r3, [r2, r3]
 8001500:	4a04      	ldr	r2, [pc, #16]	; (8001514 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001502:	6810      	ldr	r0, [r2, #0]
 8001504:	f003 031f 	and.w	r3, r3, #31
}
 8001508:	40d8      	lsrs	r0, r3
 800150a:	4770      	bx	lr
 800150c:	40021000 	.word	0x40021000
 8001510:	0800245f 	.word	0x0800245f
 8001514:	20000008 	.word	0x20000008

08001518 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8001518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800151a:	4b45      	ldr	r3, [pc, #276]	; (8001630 <RCCEx_PLLSAI1_Config+0x118>)
 800151c:	68da      	ldr	r2, [r3, #12]
 800151e:	f012 0f03 	tst.w	r2, #3
{
 8001522:	4605      	mov	r5, r0
 8001524:	460e      	mov	r6, r1
 8001526:	461c      	mov	r4, r3
 8001528:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800152a:	d02a      	beq.n	8001582 <RCCEx_PLLSAI1_Config+0x6a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800152c:	68da      	ldr	r2, [r3, #12]
 800152e:	f002 0203 	and.w	r2, r2, #3
 8001532:	4282      	cmp	r2, r0
 8001534:	d13c      	bne.n	80015b0 <RCCEx_PLLSAI1_Config+0x98>
       ||
 8001536:	2a00      	cmp	r2, #0
 8001538:	d03a      	beq.n	80015b0 <RCCEx_PLLSAI1_Config+0x98>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800153a:	68db      	ldr	r3, [r3, #12]
       ||
 800153c:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800153e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001542:	3301      	adds	r3, #1
       ||
 8001544:	4293      	cmp	r3, r2
 8001546:	d133      	bne.n	80015b0 <RCCEx_PLLSAI1_Config+0x98>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8001548:	6823      	ldr	r3, [r4, #0]
 800154a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800154e:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001550:	f7ff f80a 	bl	8000568 <HAL_GetTick>
 8001554:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8001556:	6823      	ldr	r3, [r4, #0]
 8001558:	011a      	lsls	r2, r3, #4
 800155a:	d432      	bmi.n	80015c2 <RCCEx_PLLSAI1_Config+0xaa>
 800155c:	68af      	ldr	r7, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 800155e:	2e00      	cmp	r6, #0
 8001560:	d036      	beq.n	80015d0 <RCCEx_PLLSAI1_Config+0xb8>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8001562:	2e01      	cmp	r6, #1
 8001564:	d150      	bne.n	8001608 <RCCEx_PLLSAI1_Config+0xf0>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001566:	6922      	ldr	r2, [r4, #16]
 8001568:	6928      	ldr	r0, [r5, #16]
 800156a:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800156e:	0840      	lsrs	r0, r0, #1
 8001570:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8001574:	3801      	subs	r0, #1
 8001576:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 800157a:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
 800157e:	6122      	str	r2, [r4, #16]
 8001580:	e032      	b.n	80015e8 <RCCEx_PLLSAI1_Config+0xd0>
    switch(PllSai1->PLLSAI1Source)
 8001582:	2802      	cmp	r0, #2
 8001584:	d010      	beq.n	80015a8 <RCCEx_PLLSAI1_Config+0x90>
 8001586:	2803      	cmp	r0, #3
 8001588:	d014      	beq.n	80015b4 <RCCEx_PLLSAI1_Config+0x9c>
 800158a:	2801      	cmp	r0, #1
 800158c:	d110      	bne.n	80015b0 <RCCEx_PLLSAI1_Config+0x98>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	079f      	lsls	r7, r3, #30
 8001592:	d538      	bpl.n	8001606 <RCCEx_PLLSAI1_Config+0xee>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001594:	68e3      	ldr	r3, [r4, #12]
 8001596:	686a      	ldr	r2, [r5, #4]
 8001598:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 800159c:	3a01      	subs	r2, #1
 800159e:	4318      	orrs	r0, r3
 80015a0:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80015a4:	60e0      	str	r0, [r4, #12]
 80015a6:	e7cf      	b.n	8001548 <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80015ae:	d1f1      	bne.n	8001594 <RCCEx_PLLSAI1_Config+0x7c>
 80015b0:	2001      	movs	r0, #1
 80015b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	0391      	lsls	r1, r2, #14
 80015b8:	d4ec      	bmi.n	8001594 <RCCEx_PLLSAI1_Config+0x7c>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80015c0:	e7f5      	b.n	80015ae <RCCEx_PLLSAI1_Config+0x96>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80015c2:	f7fe ffd1 	bl	8000568 <HAL_GetTick>
 80015c6:	1bc0      	subs	r0, r0, r7
 80015c8:	2802      	cmp	r0, #2
 80015ca:	d9c4      	bls.n	8001556 <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 80015cc:	2003      	movs	r0, #3
 80015ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80015d0:	6921      	ldr	r1, [r4, #16]
 80015d2:	68eb      	ldr	r3, [r5, #12]
 80015d4:	f421 311f 	bic.w	r1, r1, #162816	; 0x27c00
 80015d8:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 80015dc:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 80015e0:	091b      	lsrs	r3, r3, #4
 80015e2:	ea41 4143 	orr.w	r1, r1, r3, lsl #17
 80015e6:	6121      	str	r1, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80015e8:	6823      	ldr	r3, [r4, #0]
 80015ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80015ee:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015f0:	f7fe ffba 	bl	8000568 <HAL_GetTick>
 80015f4:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80015f6:	6823      	ldr	r3, [r4, #0]
 80015f8:	011b      	lsls	r3, r3, #4
 80015fa:	d513      	bpl.n	8001624 <RCCEx_PLLSAI1_Config+0x10c>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80015fc:	6923      	ldr	r3, [r4, #16]
 80015fe:	69aa      	ldr	r2, [r5, #24]
 8001600:	4313      	orrs	r3, r2
 8001602:	6123      	str	r3, [r4, #16]
 8001604:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8001606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001608:	6923      	ldr	r3, [r4, #16]
 800160a:	6968      	ldr	r0, [r5, #20]
 800160c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8001610:	0840      	lsrs	r0, r0, #1
 8001612:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001616:	3801      	subs	r0, #1
 8001618:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 800161c:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8001620:	6123      	str	r3, [r4, #16]
 8001622:	e7e1      	b.n	80015e8 <RCCEx_PLLSAI1_Config+0xd0>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001624:	f7fe ffa0 	bl	8000568 <HAL_GetTick>
 8001628:	1b80      	subs	r0, r0, r6
 800162a:	2802      	cmp	r0, #2
 800162c:	d9e3      	bls.n	80015f6 <RCCEx_PLLSAI1_Config+0xde>
 800162e:	e7cd      	b.n	80015cc <RCCEx_PLLSAI1_Config+0xb4>
 8001630:	40021000 	.word	0x40021000

08001634 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8001634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001636:	4b3d      	ldr	r3, [pc, #244]	; (800172c <RCCEx_PLLSAI2_Config+0xf8>)
 8001638:	68da      	ldr	r2, [r3, #12]
 800163a:	f012 0f03 	tst.w	r2, #3
{
 800163e:	4605      	mov	r5, r0
 8001640:	460e      	mov	r6, r1
 8001642:	461c      	mov	r4, r3
 8001644:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001646:	d028      	beq.n	800169a <RCCEx_PLLSAI2_Config+0x66>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8001648:	68da      	ldr	r2, [r3, #12]
 800164a:	f002 0203 	and.w	r2, r2, #3
 800164e:	4282      	cmp	r2, r0
 8001650:	d13a      	bne.n	80016c8 <RCCEx_PLLSAI2_Config+0x94>
       ||
 8001652:	2a00      	cmp	r2, #0
 8001654:	d038      	beq.n	80016c8 <RCCEx_PLLSAI2_Config+0x94>
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8001656:	68db      	ldr	r3, [r3, #12]
       ||
 8001658:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800165a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800165e:	3301      	adds	r3, #1
       ||
 8001660:	4293      	cmp	r3, r2
 8001662:	d131      	bne.n	80016c8 <RCCEx_PLLSAI2_Config+0x94>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8001664:	6823      	ldr	r3, [r4, #0]
 8001666:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800166a:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800166c:	f7fe ff7c 	bl	8000568 <HAL_GetTick>
 8001670:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8001672:	6823      	ldr	r3, [r4, #0]
 8001674:	009a      	lsls	r2, r3, #2
 8001676:	d430      	bmi.n	80016da <RCCEx_PLLSAI2_Config+0xa6>
 8001678:	68a8      	ldr	r0, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 800167a:	2e00      	cmp	r6, #0
 800167c:	d034      	beq.n	80016e8 <RCCEx_PLLSAI2_Config+0xb4>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800167e:	6963      	ldr	r3, [r4, #20]
 8001680:	6929      	ldr	r1, [r5, #16]
 8001682:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8001686:	0849      	lsrs	r1, r1, #1
 8001688:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800168c:	3901      	subs	r1, #1
 800168e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8001692:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8001696:	6163      	str	r3, [r4, #20]
 8001698:	e032      	b.n	8001700 <RCCEx_PLLSAI2_Config+0xcc>
    switch(PllSai2->PLLSAI2Source)
 800169a:	2802      	cmp	r0, #2
 800169c:	d010      	beq.n	80016c0 <RCCEx_PLLSAI2_Config+0x8c>
 800169e:	2803      	cmp	r0, #3
 80016a0:	d014      	beq.n	80016cc <RCCEx_PLLSAI2_Config+0x98>
 80016a2:	2801      	cmp	r0, #1
 80016a4:	d110      	bne.n	80016c8 <RCCEx_PLLSAI2_Config+0x94>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	079f      	lsls	r7, r3, #30
 80016aa:	d538      	bpl.n	800171e <RCCEx_PLLSAI2_Config+0xea>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80016ac:	68e3      	ldr	r3, [r4, #12]
 80016ae:	686a      	ldr	r2, [r5, #4]
 80016b0:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 80016b4:	3a01      	subs	r2, #1
 80016b6:	4318      	orrs	r0, r3
 80016b8:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80016bc:	60e0      	str	r0, [r4, #12]
 80016be:	e7d1      	b.n	8001664 <RCCEx_PLLSAI2_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80016c6:	d1f1      	bne.n	80016ac <RCCEx_PLLSAI2_Config+0x78>
 80016c8:	2001      	movs	r0, #1
 80016ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	0391      	lsls	r1, r2, #14
 80016d0:	d4ec      	bmi.n	80016ac <RCCEx_PLLSAI2_Config+0x78>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80016d8:	e7f5      	b.n	80016c6 <RCCEx_PLLSAI2_Config+0x92>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80016da:	f7fe ff45 	bl	8000568 <HAL_GetTick>
 80016de:	1bc0      	subs	r0, r0, r7
 80016e0:	2802      	cmp	r0, #2
 80016e2:	d9c6      	bls.n	8001672 <RCCEx_PLLSAI2_Config+0x3e>
        status = HAL_TIMEOUT;
 80016e4:	2003      	movs	r0, #3
 80016e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80016e8:	6962      	ldr	r2, [r4, #20]
 80016ea:	68eb      	ldr	r3, [r5, #12]
 80016ec:	f422 321f 	bic.w	r2, r2, #162816	; 0x27c00
 80016f0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80016f4:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80016f8:	091b      	lsrs	r3, r3, #4
 80016fa:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
 80016fe:	6162      	str	r2, [r4, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8001700:	6823      	ldr	r3, [r4, #0]
 8001702:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001706:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001708:	f7fe ff2e 	bl	8000568 <HAL_GetTick>
 800170c:	4606      	mov	r6, r0

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800170e:	6823      	ldr	r3, [r4, #0]
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	d505      	bpl.n	8001720 <RCCEx_PLLSAI2_Config+0xec>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8001714:	6963      	ldr	r3, [r4, #20]
 8001716:	696a      	ldr	r2, [r5, #20]
 8001718:	4313      	orrs	r3, r2
 800171a:	6163      	str	r3, [r4, #20]
 800171c:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 800171e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8001720:	f7fe ff22 	bl	8000568 <HAL_GetTick>
 8001724:	1b80      	subs	r0, r0, r6
 8001726:	2802      	cmp	r0, #2
 8001728:	d9f1      	bls.n	800170e <RCCEx_PLLSAI2_Config+0xda>
 800172a:	e7db      	b.n	80016e4 <RCCEx_PLLSAI2_Config+0xb0>
 800172c:	40021000 	.word	0x40021000

08001730 <HAL_RCCEx_PeriphCLKConfig>:
{
 8001730:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001734:	6806      	ldr	r6, [r0, #0]
 8001736:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 800173a:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800173c:	d024      	beq.n	8001788 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 800173e:	6e41      	ldr	r1, [r0, #100]	; 0x64
 8001740:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8001744:	d02c      	beq.n	80017a0 <HAL_RCCEx_PeriphCLKConfig+0x70>
 8001746:	d802      	bhi.n	800174e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001748:	b1c1      	cbz	r1, 800177c <HAL_RCCEx_PeriphCLKConfig+0x4c>
      ret = HAL_ERROR;
 800174a:	2601      	movs	r6, #1
 800174c:	e01c      	b.n	8001788 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 800174e:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8001752:	d00d      	beq.n	8001770 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8001754:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 8001758:	d1f7      	bne.n	800174a <HAL_RCCEx_PeriphCLKConfig+0x1a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800175a:	4a4d      	ldr	r2, [pc, #308]	; (8001890 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800175c:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800175e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001762:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001766:	430b      	orrs	r3, r1
 8001768:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800176c:	2600      	movs	r6, #0
 800176e:	e00b      	b.n	8001788 <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001770:	4a47      	ldr	r2, [pc, #284]	; (8001890 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001772:	68d3      	ldr	r3, [r2, #12]
 8001774:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001778:	60d3      	str	r3, [r2, #12]
      break;
 800177a:	e7ee      	b.n	800175a <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800177c:	3004      	adds	r0, #4
 800177e:	f7ff fecb 	bl	8001518 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001782:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8001784:	2800      	cmp	r0, #0
 8001786:	d0e8      	beq.n	800175a <HAL_RCCEx_PeriphCLKConfig+0x2a>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001788:	6823      	ldr	r3, [r4, #0]
 800178a:	04d8      	lsls	r0, r3, #19
 800178c:	d506      	bpl.n	800179c <HAL_RCCEx_PeriphCLKConfig+0x6c>
    switch(PeriphClkInit->Sai2ClockSelection)
 800178e:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8001790:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 8001794:	d074      	beq.n	8001880 <HAL_RCCEx_PeriphCLKConfig+0x150>
 8001796:	d808      	bhi.n	80017aa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8001798:	b1a9      	cbz	r1, 80017c6 <HAL_RCCEx_PeriphCLKConfig+0x96>
      ret = HAL_ERROR;
 800179a:	2601      	movs	r6, #1
 800179c:	4635      	mov	r5, r6
 800179e:	e021      	b.n	80017e4 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80017a0:	2100      	movs	r1, #0
 80017a2:	3020      	adds	r0, #32
 80017a4:	f7ff ff46 	bl	8001634 <RCCEx_PLLSAI2_Config>
 80017a8:	e7eb      	b.n	8001782 <HAL_RCCEx_PeriphCLKConfig+0x52>
    switch(PeriphClkInit->Sai2ClockSelection)
 80017aa:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 80017ae:	d004      	beq.n	80017ba <HAL_RCCEx_PeriphCLKConfig+0x8a>
 80017b0:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 80017b4:	d1f1      	bne.n	800179a <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80017b6:	4635      	mov	r5, r6
 80017b8:	e009      	b.n	80017ce <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80017ba:	4a35      	ldr	r2, [pc, #212]	; (8001890 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80017bc:	68d3      	ldr	r3, [r2, #12]
 80017be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017c2:	60d3      	str	r3, [r2, #12]
 80017c4:	e7f7      	b.n	80017b6 <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80017c6:	1d20      	adds	r0, r4, #4
 80017c8:	f7ff fea6 	bl	8001518 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80017cc:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80017ce:	2d00      	cmp	r5, #0
 80017d0:	d15c      	bne.n	800188c <HAL_RCCEx_PeriphCLKConfig+0x15c>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80017d2:	4a2f      	ldr	r2, [pc, #188]	; (8001890 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80017d4:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80017d6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80017da:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80017de:	430b      	orrs	r3, r1
 80017e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80017e4:	6823      	ldr	r3, [r4, #0]
 80017e6:	0399      	lsls	r1, r3, #14
 80017e8:	f140 814f 	bpl.w	8001a8a <HAL_RCCEx_PeriphCLKConfig+0x35a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80017ec:	4f28      	ldr	r7, [pc, #160]	; (8001890 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80017ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80017f0:	00da      	lsls	r2, r3, #3
 80017f2:	f140 8176 	bpl.w	8001ae2 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
    FlagStatus       pwrclkchanged = RESET;
 80017f6:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80017fa:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8001894 <HAL_RCCEx_PeriphCLKConfig+0x164>
 80017fe:	f8d9 3000 	ldr.w	r3, [r9]
 8001802:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001806:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 800180a:	f7fe fead 	bl	8000568 <HAL_GetTick>
 800180e:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001810:	f8d9 3000 	ldr.w	r3, [r9]
 8001814:	05db      	lsls	r3, r3, #23
 8001816:	d53f      	bpl.n	8001898 <HAL_RCCEx_PeriphCLKConfig+0x168>
    if(ret == HAL_OK)
 8001818:	2d00      	cmp	r5, #0
 800181a:	d144      	bne.n	80018a6 <HAL_RCCEx_PeriphCLKConfig+0x176>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800181c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001820:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001824:	d015      	beq.n	8001852 <HAL_RCCEx_PeriphCLKConfig+0x122>
 8001826:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 800182a:	4293      	cmp	r3, r2
 800182c:	d011      	beq.n	8001852 <HAL_RCCEx_PeriphCLKConfig+0x122>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800182e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8001832:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001836:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800183a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800183e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001842:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001846:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800184a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 800184e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001852:	07d8      	lsls	r0, r3, #31
 8001854:	d509      	bpl.n	800186a <HAL_RCCEx_PeriphCLKConfig+0x13a>
        tickstart = HAL_GetTick();
 8001856:	f7fe fe87 	bl	8000568 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800185a:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800185e:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001860:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001864:	0799      	lsls	r1, r3, #30
 8001866:	f140 8109 	bpl.w	8001a7c <HAL_RCCEx_PeriphCLKConfig+0x34c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800186a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800186e:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8001872:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001876:	4313      	orrs	r3, r2
 8001878:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800187c:	4635      	mov	r5, r6
 800187e:	e012      	b.n	80018a6 <HAL_RCCEx_PeriphCLKConfig+0x176>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001880:	2100      	movs	r1, #0
 8001882:	f104 0020 	add.w	r0, r4, #32
 8001886:	f7ff fed5 	bl	8001634 <RCCEx_PLLSAI2_Config>
 800188a:	e79f      	b.n	80017cc <HAL_RCCEx_PeriphCLKConfig+0x9c>
 800188c:	462e      	mov	r6, r5
 800188e:	e7a9      	b.n	80017e4 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8001890:	40021000 	.word	0x40021000
 8001894:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001898:	f7fe fe66 	bl	8000568 <HAL_GetTick>
 800189c:	eba0 000a 	sub.w	r0, r0, sl
 80018a0:	2802      	cmp	r0, #2
 80018a2:	d9b5      	bls.n	8001810 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        ret = HAL_TIMEOUT;
 80018a4:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 80018a6:	f1b8 0f00 	cmp.w	r8, #0
 80018aa:	d003      	beq.n	80018b4 <HAL_RCCEx_PeriphCLKConfig+0x184>
      __HAL_RCC_PWR_CLK_DISABLE();
 80018ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80018ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018b2:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80018b4:	6823      	ldr	r3, [r4, #0]
 80018b6:	07da      	lsls	r2, r3, #31
 80018b8:	d508      	bpl.n	80018cc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80018ba:	4990      	ldr	r1, [pc, #576]	; (8001afc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80018bc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80018be:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80018c2:	f022 0203 	bic.w	r2, r2, #3
 80018c6:	4302      	orrs	r2, r0
 80018c8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80018cc:	079f      	lsls	r7, r3, #30
 80018ce:	d508      	bpl.n	80018e2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80018d0:	498a      	ldr	r1, [pc, #552]	; (8001afc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80018d2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80018d4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80018d8:	f022 020c 	bic.w	r2, r2, #12
 80018dc:	4302      	orrs	r2, r0
 80018de:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80018e2:	075e      	lsls	r6, r3, #29
 80018e4:	d508      	bpl.n	80018f8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80018e6:	4985      	ldr	r1, [pc, #532]	; (8001afc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80018e8:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80018ea:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80018ee:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80018f2:	4302      	orrs	r2, r0
 80018f4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80018f8:	0718      	lsls	r0, r3, #28
 80018fa:	d508      	bpl.n	800190e <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80018fc:	497f      	ldr	r1, [pc, #508]	; (8001afc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80018fe:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8001900:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001904:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8001908:	4302      	orrs	r2, r0
 800190a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800190e:	06d9      	lsls	r1, r3, #27
 8001910:	d508      	bpl.n	8001924 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001912:	497a      	ldr	r1, [pc, #488]	; (8001afc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001914:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8001916:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800191a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800191e:	4302      	orrs	r2, r0
 8001920:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001924:	069a      	lsls	r2, r3, #26
 8001926:	d508      	bpl.n	800193a <HAL_RCCEx_PeriphCLKConfig+0x20a>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001928:	4974      	ldr	r1, [pc, #464]	; (8001afc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800192a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800192c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001930:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001934:	4302      	orrs	r2, r0
 8001936:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800193a:	059f      	lsls	r7, r3, #22
 800193c:	d508      	bpl.n	8001950 <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800193e:	496f      	ldr	r1, [pc, #444]	; (8001afc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001940:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8001942:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001946:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800194a:	4302      	orrs	r2, r0
 800194c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001950:	055e      	lsls	r6, r3, #21
 8001952:	d508      	bpl.n	8001966 <HAL_RCCEx_PeriphCLKConfig+0x236>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001954:	4969      	ldr	r1, [pc, #420]	; (8001afc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001956:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8001958:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800195c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001960:	4302      	orrs	r2, r0
 8001962:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001966:	0658      	lsls	r0, r3, #25
 8001968:	d508      	bpl.n	800197c <HAL_RCCEx_PeriphCLKConfig+0x24c>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800196a:	4964      	ldr	r1, [pc, #400]	; (8001afc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800196c:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800196e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001972:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001976:	4302      	orrs	r2, r0
 8001978:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800197c:	0619      	lsls	r1, r3, #24
 800197e:	d508      	bpl.n	8001992 <HAL_RCCEx_PeriphCLKConfig+0x262>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001980:	495e      	ldr	r1, [pc, #376]	; (8001afc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001982:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001984:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001988:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800198c:	4302      	orrs	r2, r0
 800198e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001992:	05da      	lsls	r2, r3, #23
 8001994:	d508      	bpl.n	80019a8 <HAL_RCCEx_PeriphCLKConfig+0x278>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001996:	4959      	ldr	r1, [pc, #356]	; (8001afc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001998:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800199a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800199e:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80019a2:	4302      	orrs	r2, r0
 80019a4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80019a8:	049b      	lsls	r3, r3, #18
 80019aa:	d50f      	bpl.n	80019cc <HAL_RCCEx_PeriphCLKConfig+0x29c>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80019ac:	4a53      	ldr	r2, [pc, #332]	; (8001afc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80019ae:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80019b0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80019b4:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80019b8:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80019ba:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80019be:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80019c2:	d164      	bne.n	8001a8e <HAL_RCCEx_PeriphCLKConfig+0x35e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80019c4:	68d3      	ldr	r3, [r2, #12]
 80019c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80019ca:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80019cc:	6823      	ldr	r3, [r4, #0]
 80019ce:	031f      	lsls	r7, r3, #12
 80019d0:	d50f      	bpl.n	80019f2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80019d2:	4a4a      	ldr	r2, [pc, #296]	; (8001afc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80019d4:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80019d6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80019da:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80019de:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80019e0:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80019e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80019e8:	d15c      	bne.n	8001aa4 <HAL_RCCEx_PeriphCLKConfig+0x374>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80019ea:	68d3      	ldr	r3, [r2, #12]
 80019ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80019f0:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80019f2:	6823      	ldr	r3, [r4, #0]
 80019f4:	035e      	lsls	r6, r3, #13
 80019f6:	d50f      	bpl.n	8001a18 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80019f8:	4a40      	ldr	r2, [pc, #256]	; (8001afc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80019fa:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80019fc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001a00:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001a04:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001a06:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001a0a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001a0e:	d154      	bne.n	8001aba <HAL_RCCEx_PeriphCLKConfig+0x38a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001a10:	68d3      	ldr	r3, [r2, #12]
 8001a12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001a16:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001a18:	6823      	ldr	r3, [r4, #0]
 8001a1a:	0458      	lsls	r0, r3, #17
 8001a1c:	d512      	bpl.n	8001a44 <HAL_RCCEx_PeriphCLKConfig+0x314>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001a1e:	4937      	ldr	r1, [pc, #220]	; (8001afc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001a20:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8001a22:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001a26:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001a2a:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001a2c:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001a30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001a34:	d14c      	bne.n	8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8001a36:	2102      	movs	r1, #2
 8001a38:	1d20      	adds	r0, r4, #4
 8001a3a:	f7ff fd6d 	bl	8001518 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8001a3e:	2800      	cmp	r0, #0
 8001a40:	bf18      	it	ne
 8001a42:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8001a44:	6822      	ldr	r2, [r4, #0]
 8001a46:	0411      	lsls	r1, r2, #16
 8001a48:	d508      	bpl.n	8001a5c <HAL_RCCEx_PeriphCLKConfig+0x32c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8001a4a:	492c      	ldr	r1, [pc, #176]	; (8001afc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001a4c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8001a4e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001a52:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001a56:	4303      	orrs	r3, r0
 8001a58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001a5c:	03d3      	lsls	r3, r2, #15
 8001a5e:	d509      	bpl.n	8001a74 <HAL_RCCEx_PeriphCLKConfig+0x344>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001a60:	4a26      	ldr	r2, [pc, #152]	; (8001afc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001a62:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8001a66:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001a6a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001a6e:	430b      	orrs	r3, r1
 8001a70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8001a74:	4628      	mov	r0, r5
 8001a76:	b002      	add	sp, #8
 8001a78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a7c:	f7fe fd74 	bl	8000568 <HAL_GetTick>
 8001a80:	1b40      	subs	r0, r0, r5
 8001a82:	4548      	cmp	r0, r9
 8001a84:	f67f aeec 	bls.w	8001860 <HAL_RCCEx_PeriphCLKConfig+0x130>
 8001a88:	e70c      	b.n	80018a4 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8001a8a:	4635      	mov	r5, r6
 8001a8c:	e712      	b.n	80018b4 <HAL_RCCEx_PeriphCLKConfig+0x184>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001a8e:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8001a92:	d19b      	bne.n	80019cc <HAL_RCCEx_PeriphCLKConfig+0x29c>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001a94:	2101      	movs	r1, #1
 8001a96:	1d20      	adds	r0, r4, #4
 8001a98:	f7ff fd3e 	bl	8001518 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8001a9c:	2800      	cmp	r0, #0
 8001a9e:	bf18      	it	ne
 8001aa0:	4605      	movne	r5, r0
 8001aa2:	e793      	b.n	80019cc <HAL_RCCEx_PeriphCLKConfig+0x29c>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8001aa4:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8001aa8:	d1a3      	bne.n	80019f2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001aaa:	2101      	movs	r1, #1
 8001aac:	1d20      	adds	r0, r4, #4
 8001aae:	f7ff fd33 	bl	8001518 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8001ab2:	2800      	cmp	r0, #0
 8001ab4:	bf18      	it	ne
 8001ab6:	4605      	movne	r5, r0
 8001ab8:	e79b      	b.n	80019f2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8001aba:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8001abe:	d1ab      	bne.n	8001a18 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001ac0:	2101      	movs	r1, #1
 8001ac2:	1d20      	adds	r0, r4, #4
 8001ac4:	f7ff fd28 	bl	8001518 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8001ac8:	2800      	cmp	r0, #0
 8001aca:	bf18      	it	ne
 8001acc:	4605      	movne	r5, r0
 8001ace:	e7a3      	b.n	8001a18 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8001ad0:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8001ad4:	d1b6      	bne.n	8001a44 <HAL_RCCEx_PeriphCLKConfig+0x314>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8001ad6:	2102      	movs	r1, #2
 8001ad8:	f104 0020 	add.w	r0, r4, #32
 8001adc:	f7ff fdaa 	bl	8001634 <RCCEx_PLLSAI2_Config>
 8001ae0:	e7ad      	b.n	8001a3e <HAL_RCCEx_PeriphCLKConfig+0x30e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ae2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ae4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ae8:	65bb      	str	r3, [r7, #88]	; 0x58
 8001aea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001aec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af0:	9301      	str	r3, [sp, #4]
 8001af2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001af4:	f04f 0801 	mov.w	r8, #1
 8001af8:	e67f      	b.n	80017fa <HAL_RCCEx_PeriphCLKConfig+0xca>
 8001afa:	bf00      	nop
 8001afc:	40021000 	.word	0x40021000

08001b00 <UART_SetConfig>:
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8001b00:	6802      	ldr	r2, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001b02:	69c1      	ldr	r1, [r0, #28]
{
 8001b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b06:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001b08:	6883      	ldr	r3, [r0, #8]
 8001b0a:	6900      	ldr	r0, [r0, #16]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001b0c:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001b0e:	4303      	orrs	r3, r0
 8001b10:	6960      	ldr	r0, [r4, #20]
 8001b12:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001b14:	48ba      	ldr	r0, [pc, #744]	; (8001e00 <UART_SetConfig+0x300>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001b16:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001b18:	4028      	ands	r0, r5
 8001b1a:	4303      	orrs	r3, r0
 8001b1c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001b1e:	6853      	ldr	r3, [r2, #4]
 8001b20:	68e0      	ldr	r0, [r4, #12]
 8001b22:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b26:	4303      	orrs	r3, r0
 8001b28:	6053      	str	r3, [r2, #4]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001b2a:	4bb6      	ldr	r3, [pc, #728]	; (8001e04 <UART_SetConfig+0x304>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001b2c:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001b2e:	429a      	cmp	r2, r3
  {
    tmpreg |= huart->Init.OneBitSampling;
 8001b30:	bf1c      	itt	ne
 8001b32:	6a23      	ldrne	r3, [r4, #32]
 8001b34:	4318      	orrne	r0, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001b36:	6893      	ldr	r3, [r2, #8]
 8001b38:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8001b3c:	4303      	orrs	r3, r0
 8001b3e:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001b40:	4bb1      	ldr	r3, [pc, #708]	; (8001e08 <UART_SetConfig+0x308>)
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d119      	bne.n	8001b7a <UART_SetConfig+0x7a>
 8001b46:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8001b4a:	4ab0      	ldr	r2, [pc, #704]	; (8001e0c <UART_SetConfig+0x30c>)
 8001b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b50:	f003 0303 	and.w	r3, r3, #3
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001b54:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001b58:	5cd3      	ldrb	r3, [r2, r3]
 8001b5a:	f040 8138 	bne.w	8001dce <UART_SetConfig+0x2ce>
  {
    switch (clocksource)
 8001b5e:	2b08      	cmp	r3, #8
 8001b60:	f200 808f 	bhi.w	8001c82 <UART_SetConfig+0x182>
 8001b64:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001b68:	00ca011a 	.word	0x00ca011a
 8001b6c:	008d00f9 	.word	0x008d00f9
 8001b70:	008d0114 	.word	0x008d0114
 8001b74:	008d008d 	.word	0x008d008d
 8001b78:	0036      	.short	0x0036
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001b7a:	4ba5      	ldr	r3, [pc, #660]	; (8001e10 <UART_SetConfig+0x310>)
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d107      	bne.n	8001b90 <UART_SetConfig+0x90>
 8001b80:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8001b84:	4aa3      	ldr	r2, [pc, #652]	; (8001e14 <UART_SetConfig+0x314>)
 8001b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b8a:	f003 030c 	and.w	r3, r3, #12
 8001b8e:	e7e1      	b.n	8001b54 <UART_SetConfig+0x54>
 8001b90:	4ba1      	ldr	r3, [pc, #644]	; (8001e18 <UART_SetConfig+0x318>)
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d123      	bne.n	8001bde <UART_SetConfig+0xde>
 8001b96:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8001b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b9e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001ba2:	2b10      	cmp	r3, #16
 8001ba4:	f000 80f1 	beq.w	8001d8a <UART_SetConfig+0x28a>
 8001ba8:	d80b      	bhi.n	8001bc2 <UART_SetConfig+0xc2>
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	f000 80f3 	beq.w	8001d96 <UART_SetConfig+0x296>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001bb0:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8001bb4:	f04f 0201 	mov.w	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8001bb8:	f04f 0300 	mov.w	r3, #0
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001bbc:	f000 80f8 	beq.w	8001db0 <UART_SetConfig+0x2b0>
 8001bc0:	e0a8      	b.n	8001d14 <UART_SetConfig+0x214>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001bc2:	2b20      	cmp	r3, #32
 8001bc4:	f000 80c6 	beq.w	8001d54 <UART_SetConfig+0x254>
 8001bc8:	2b30      	cmp	r3, #48	; 0x30
 8001bca:	d1f1      	bne.n	8001bb0 <UART_SetConfig+0xb0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001bcc:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001bd0:	f040 80b8 	bne.w	8001d44 <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001bd4:	6860      	ldr	r0, [r4, #4]
 8001bd6:	0843      	lsrs	r3, r0, #1
 8001bd8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001bdc:	e0c3      	b.n	8001d66 <UART_SetConfig+0x266>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001bde:	4b8f      	ldr	r3, [pc, #572]	; (8001e1c <UART_SetConfig+0x31c>)
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d11e      	bne.n	8001c22 <UART_SetConfig+0x122>
 8001be4:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 8001be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bec:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001bf0:	2b40      	cmp	r3, #64	; 0x40
 8001bf2:	f000 80bb 	beq.w	8001d6c <UART_SetConfig+0x26c>
 8001bf6:	d80a      	bhi.n	8001c0e <UART_SetConfig+0x10e>
 8001bf8:	b97b      	cbnz	r3, 8001c1a <UART_SetConfig+0x11a>
  if (UART_INSTANCE_LOWPOWER(huart))
 8001bfa:	4b82      	ldr	r3, [pc, #520]	; (8001e04 <UART_SetConfig+0x304>)
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	f040 80ca 	bne.w	8001d96 <UART_SetConfig+0x296>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8001c02:	f7ff fc65 	bl	80014d0 <HAL_RCC_GetPCLK1Freq>
        break;
 8001c06:	2300      	movs	r3, #0
    if (lpuart_ker_ck_pres != 0U)
 8001c08:	bbb0      	cbnz	r0, 8001c78 <UART_SetConfig+0x178>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	e03a      	b.n	8001c84 <UART_SetConfig+0x184>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001c0e:	2b80      	cmp	r3, #128	; 0x80
 8001c10:	f000 809d 	beq.w	8001d4e <UART_SetConfig+0x24e>
 8001c14:	2bc0      	cmp	r3, #192	; 0xc0
 8001c16:	f000 80b0 	beq.w	8001d7a <UART_SetConfig+0x27a>
  if (UART_INSTANCE_LOWPOWER(huart))
 8001c1a:	4b7a      	ldr	r3, [pc, #488]	; (8001e04 <UART_SetConfig+0x304>)
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d1c7      	bne.n	8001bb0 <UART_SetConfig+0xb0>
 8001c20:	e02f      	b.n	8001c82 <UART_SetConfig+0x182>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001c22:	4b7f      	ldr	r3, [pc, #508]	; (8001e20 <UART_SetConfig+0x320>)
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d111      	bne.n	8001c4c <UART_SetConfig+0x14c>
 8001c28:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 8001c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c38:	f000 8098 	beq.w	8001d6c <UART_SetConfig+0x26c>
 8001c3c:	d9dc      	bls.n	8001bf8 <UART_SetConfig+0xf8>
 8001c3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c42:	f000 8084 	beq.w	8001d4e <UART_SetConfig+0x24e>
 8001c46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001c4a:	e7e4      	b.n	8001c16 <UART_SetConfig+0x116>
 8001c4c:	4b6d      	ldr	r3, [pc, #436]	; (8001e04 <UART_SetConfig+0x304>)
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d1ae      	bne.n	8001bb0 <UART_SetConfig+0xb0>
 8001c52:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 8001c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c5a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001c5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c62:	f000 8083 	beq.w	8001d6c <UART_SetConfig+0x26c>
 8001c66:	d9c7      	bls.n	8001bf8 <UART_SetConfig+0xf8>
 8001c68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001c6c:	d06f      	beq.n	8001d4e <UART_SetConfig+0x24e>
 8001c6e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8001c72:	e7d0      	b.n	8001c16 <UART_SetConfig+0x116>
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8001c74:	486b      	ldr	r0, [pc, #428]	; (8001e24 <UART_SetConfig+0x324>)
  if (UART_INSTANCE_LOWPOWER(huart))
 8001c76:	2302      	movs	r3, #2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8001c78:	6862      	ldr	r2, [r4, #4]
 8001c7a:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8001c7e:	4281      	cmp	r1, r0
 8001c80:	d905      	bls.n	8001c8e <UART_SetConfig+0x18e>
        ret = HAL_ERROR;
 8001c82:	2201      	movs	r2, #1
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001c84:	2300      	movs	r3, #0
 8001c86:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8001c88:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 8001c8a:	4610      	mov	r0, r2
 8001c8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8001c8e:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8001c92:	d8f6      	bhi.n	8001c82 <UART_SetConfig+0x182>
        switch (clocksource)
 8001c94:	2b08      	cmp	r3, #8
 8001c96:	d82e      	bhi.n	8001cf6 <UART_SetConfig+0x1f6>
 8001c98:	e8df f003 	tbb	[pc, r3]
 8001c9c:	2d1c2d05 	.word	0x2d1c2d05
 8001ca0:	2d2d2d24 	.word	0x2d2d2d24
 8001ca4:	27          	.byte	0x27
 8001ca5:	00          	.byte	0x00
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001ca6:	f7ff fc13 	bl	80014d0 <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001caa:	6862      	ldr	r2, [r4, #4]
 8001cac:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cb0:	0856      	lsrs	r6, r2, #1
 8001cb2:	2700      	movs	r7, #0
 8001cb4:	fbe1 6700 	umlal	r6, r7, r1, r0
 8001cb8:	2300      	movs	r3, #0
 8001cba:	4630      	mov	r0, r6
 8001cbc:	4639      	mov	r1, r7
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8001cbe:	f7fe fa83 	bl	80001c8 <__aeabi_uldivmod>
            break;
 8001cc2:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8001cc4:	4b58      	ldr	r3, [pc, #352]	; (8001e28 <UART_SetConfig+0x328>)
 8001cc6:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8001cca:	4299      	cmp	r1, r3
 8001ccc:	d8d9      	bhi.n	8001c82 <UART_SetConfig+0x182>
          huart->Instance->BRR = usartdiv;
 8001cce:	6823      	ldr	r3, [r4, #0]
 8001cd0:	60d8      	str	r0, [r3, #12]
 8001cd2:	e7d7      	b.n	8001c84 <UART_SetConfig+0x184>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8001cd4:	4855      	ldr	r0, [pc, #340]	; (8001e2c <UART_SetConfig+0x32c>)
 8001cd6:	0855      	lsrs	r5, r2, #1
 8001cd8:	2300      	movs	r3, #0
 8001cda:	2100      	movs	r1, #0
 8001cdc:	1940      	adds	r0, r0, r5
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8001cde:	f141 0100 	adc.w	r1, r1, #0
 8001ce2:	e7ec      	b.n	8001cbe <UART_SetConfig+0x1be>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001ce4:	f7ff f8ae 	bl	8000e44 <HAL_RCC_GetSysClockFreq>
 8001ce8:	e7df      	b.n	8001caa <UART_SetConfig+0x1aa>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8001cea:	0850      	lsrs	r0, r2, #1
 8001cec:	2100      	movs	r1, #0
 8001cee:	2300      	movs	r3, #0
 8001cf0:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 8001cf4:	e7f3      	b.n	8001cde <UART_SetConfig+0x1de>
            ret = HAL_ERROR;
 8001cf6:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8001cf8:	2000      	movs	r0, #0
 8001cfa:	e7e3      	b.n	8001cc4 <UART_SetConfig+0x1c4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001cfc:	f7ff fbfa 	bl	80014f4 <HAL_RCC_GetPCLK2Freq>
 8001d00:	e04e      	b.n	8001da0 <UART_SetConfig+0x2a0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001d02:	f7ff fbe5 	bl	80014d0 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001d06:	6862      	ldr	r2, [r4, #4]
 8001d08:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8001d0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001d10:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001d12:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001d14:	f1a3 0010 	sub.w	r0, r3, #16
 8001d18:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8001d1c:	4288      	cmp	r0, r1
 8001d1e:	d8b0      	bhi.n	8001c82 <UART_SetConfig+0x182>
      huart->Instance->BRR = usartdiv;
 8001d20:	6821      	ldr	r1, [r4, #0]
 8001d22:	60cb      	str	r3, [r1, #12]
 8001d24:	e7ae      	b.n	8001c84 <UART_SetConfig+0x184>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001d26:	f7ff fbe5 	bl	80014f4 <HAL_RCC_GetPCLK2Freq>
 8001d2a:	e7ec      	b.n	8001d06 <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001d2c:	6860      	ldr	r0, [r4, #4]
 8001d2e:	0843      	lsrs	r3, r0, #1
 8001d30:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8001d34:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001d38:	fbb3 f3f0 	udiv	r3, r3, r0
 8001d3c:	e7e8      	b.n	8001d10 <UART_SetConfig+0x210>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001d3e:	f7ff f881 	bl	8000e44 <HAL_RCC_GetSysClockFreq>
 8001d42:	e7e0      	b.n	8001d06 <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001d44:	6860      	ldr	r0, [r4, #4]
 8001d46:	0843      	lsrs	r3, r0, #1
 8001d48:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001d4c:	e7f4      	b.n	8001d38 <UART_SetConfig+0x238>
  if (UART_INSTANCE_LOWPOWER(huart))
 8001d4e:	4b2d      	ldr	r3, [pc, #180]	; (8001e04 <UART_SetConfig+0x304>)
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d08f      	beq.n	8001c74 <UART_SetConfig+0x174>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001d54:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001d58:	d1e8      	bne.n	8001d2c <UART_SetConfig+0x22c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001d5a:	6860      	ldr	r0, [r4, #4]
 8001d5c:	0843      	lsrs	r3, r0, #1
 8001d5e:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8001d62:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001d66:	fbb3 f3f0 	udiv	r3, r3, r0
 8001d6a:	e01f      	b.n	8001dac <UART_SetConfig+0x2ac>
  if (UART_INSTANCE_LOWPOWER(huart))
 8001d6c:	4b25      	ldr	r3, [pc, #148]	; (8001e04 <UART_SetConfig+0x304>)
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d10b      	bne.n	8001d8a <UART_SetConfig+0x28a>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8001d72:	f7ff f867 	bl	8000e44 <HAL_RCC_GetSysClockFreq>
        break;
 8001d76:	2304      	movs	r3, #4
 8001d78:	e746      	b.n	8001c08 <UART_SetConfig+0x108>
  if (UART_INSTANCE_LOWPOWER(huart))
 8001d7a:	4b22      	ldr	r3, [pc, #136]	; (8001e04 <UART_SetConfig+0x304>)
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	f47f af25 	bne.w	8001bcc <UART_SetConfig+0xcc>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8001d82:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  if (UART_INSTANCE_LOWPOWER(huart))
 8001d86:	2308      	movs	r3, #8
 8001d88:	e776      	b.n	8001c78 <UART_SetConfig+0x178>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001d8a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001d8e:	d1d6      	bne.n	8001d3e <UART_SetConfig+0x23e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001d90:	f7ff f858 	bl	8000e44 <HAL_RCC_GetSysClockFreq>
 8001d94:	e004      	b.n	8001da0 <UART_SetConfig+0x2a0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001d96:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001d9a:	d1b2      	bne.n	8001d02 <UART_SetConfig+0x202>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001d9c:	f7ff fb98 	bl	80014d0 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001da0:	6861      	ldr	r1, [r4, #4]
 8001da2:	084a      	lsrs	r2, r1, #1
 8001da4:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8001da8:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dac:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001dae:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001db0:	f1a3 0010 	sub.w	r0, r3, #16
 8001db4:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8001db8:	4288      	cmp	r0, r1
 8001dba:	f63f af62 	bhi.w	8001c82 <UART_SetConfig+0x182>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001dbe:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 8001dc2:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001dc4:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8001dc8:	430b      	orrs	r3, r1
 8001dca:	60c3      	str	r3, [r0, #12]
 8001dcc:	e75a      	b.n	8001c84 <UART_SetConfig+0x184>
    switch (clocksource)
 8001dce:	2b08      	cmp	r3, #8
 8001dd0:	f63f af57 	bhi.w	8001c82 <UART_SetConfig+0x182>
 8001dd4:	a201      	add	r2, pc, #4	; (adr r2, 8001ddc <UART_SetConfig+0x2dc>)
 8001dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dda:	bf00      	nop
 8001ddc:	08001d03 	.word	0x08001d03
 8001de0:	08001d27 	.word	0x08001d27
 8001de4:	08001d2d 	.word	0x08001d2d
 8001de8:	08001c83 	.word	0x08001c83
 8001dec:	08001d3f 	.word	0x08001d3f
 8001df0:	08001c83 	.word	0x08001c83
 8001df4:	08001c83 	.word	0x08001c83
 8001df8:	08001c83 	.word	0x08001c83
 8001dfc:	08001d45 	.word	0x08001d45
 8001e00:	efff69f3 	.word	0xefff69f3
 8001e04:	40008000 	.word	0x40008000
 8001e08:	40013800 	.word	0x40013800
 8001e0c:	0800243e 	.word	0x0800243e
 8001e10:	40004400 	.word	0x40004400
 8001e14:	08002442 	.word	0x08002442
 8001e18:	40004800 	.word	0x40004800
 8001e1c:	40004c00 	.word	0x40004c00
 8001e20:	40005000 	.word	0x40005000
 8001e24:	00f42400 	.word	0x00f42400
 8001e28:	000ffcff 	.word	0x000ffcff
 8001e2c:	f4240000 	.word	0xf4240000

08001e30 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001e30:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001e32:	07da      	lsls	r2, r3, #31
{
 8001e34:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001e36:	d506      	bpl.n	8001e46 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001e38:	6801      	ldr	r1, [r0, #0]
 8001e3a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001e3c:	684a      	ldr	r2, [r1, #4]
 8001e3e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001e42:	4322      	orrs	r2, r4
 8001e44:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001e46:	079c      	lsls	r4, r3, #30
 8001e48:	d506      	bpl.n	8001e58 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001e4a:	6801      	ldr	r1, [r0, #0]
 8001e4c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001e4e:	684a      	ldr	r2, [r1, #4]
 8001e50:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001e54:	4322      	orrs	r2, r4
 8001e56:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001e58:	0759      	lsls	r1, r3, #29
 8001e5a:	d506      	bpl.n	8001e6a <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001e5c:	6801      	ldr	r1, [r0, #0]
 8001e5e:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001e60:	684a      	ldr	r2, [r1, #4]
 8001e62:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001e66:	4322      	orrs	r2, r4
 8001e68:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001e6a:	071a      	lsls	r2, r3, #28
 8001e6c:	d506      	bpl.n	8001e7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001e6e:	6801      	ldr	r1, [r0, #0]
 8001e70:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001e72:	684a      	ldr	r2, [r1, #4]
 8001e74:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e78:	4322      	orrs	r2, r4
 8001e7a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001e7c:	06dc      	lsls	r4, r3, #27
 8001e7e:	d506      	bpl.n	8001e8e <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001e80:	6801      	ldr	r1, [r0, #0]
 8001e82:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001e84:	688a      	ldr	r2, [r1, #8]
 8001e86:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001e8a:	4322      	orrs	r2, r4
 8001e8c:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001e8e:	0699      	lsls	r1, r3, #26
 8001e90:	d506      	bpl.n	8001ea0 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001e92:	6801      	ldr	r1, [r0, #0]
 8001e94:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001e96:	688a      	ldr	r2, [r1, #8]
 8001e98:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e9c:	4322      	orrs	r2, r4
 8001e9e:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001ea0:	065a      	lsls	r2, r3, #25
 8001ea2:	d50f      	bpl.n	8001ec4 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001ea4:	6801      	ldr	r1, [r0, #0]
 8001ea6:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001ea8:	684a      	ldr	r2, [r1, #4]
 8001eaa:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8001eae:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001eb0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001eb4:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001eb6:	d105      	bne.n	8001ec4 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001eb8:	684a      	ldr	r2, [r1, #4]
 8001eba:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001ebc:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001ec0:	4322      	orrs	r2, r4
 8001ec2:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001ec4:	061b      	lsls	r3, r3, #24
 8001ec6:	d506      	bpl.n	8001ed6 <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001ec8:	6802      	ldr	r2, [r0, #0]
 8001eca:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001ecc:	6853      	ldr	r3, [r2, #4]
 8001ece:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001ed2:	430b      	orrs	r3, r1
 8001ed4:	6053      	str	r3, [r2, #4]
 8001ed6:	bd10      	pop	{r4, pc}

08001ed8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8001ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001edc:	9d06      	ldr	r5, [sp, #24]
 8001ede:	4604      	mov	r4, r0
 8001ee0:	460f      	mov	r7, r1
 8001ee2:	4616      	mov	r6, r2
 8001ee4:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ee6:	6821      	ldr	r1, [r4, #0]
 8001ee8:	69ca      	ldr	r2, [r1, #28]
 8001eea:	ea37 0302 	bics.w	r3, r7, r2
 8001eee:	bf0c      	ite	eq
 8001ef0:	2201      	moveq	r2, #1
 8001ef2:	2200      	movne	r2, #0
 8001ef4:	42b2      	cmp	r2, r6
 8001ef6:	d002      	beq.n	8001efe <UART_WaitOnFlagUntilTimeout+0x26>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001ef8:	2000      	movs	r0, #0
}
 8001efa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001efe:	1c6b      	adds	r3, r5, #1
 8001f00:	d0f2      	beq.n	8001ee8 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f02:	f7fe fb31 	bl	8000568 <HAL_GetTick>
 8001f06:	eba0 0008 	sub.w	r0, r0, r8
 8001f0a:	4285      	cmp	r5, r0
 8001f0c:	d301      	bcc.n	8001f12 <UART_WaitOnFlagUntilTimeout+0x3a>
 8001f0e:	2d00      	cmp	r5, #0
 8001f10:	d1e9      	bne.n	8001ee6 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001f12:	6823      	ldr	r3, [r4, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001f1a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f1c:	689a      	ldr	r2, [r3, #8]
 8001f1e:	f022 0201 	bic.w	r2, r2, #1
 8001f22:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8001f24:	2320      	movs	r3, #32
 8001f26:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8001f28:	67a3      	str	r3, [r4, #120]	; 0x78
        __HAL_UNLOCK(huart);
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 8001f30:	2003      	movs	r0, #3
 8001f32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001f36 <UART_CheckIdleState>:
{
 8001f36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001f38:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f3a:	2600      	movs	r6, #0
 8001f3c:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8001f3e:	f7fe fb13 	bl	8000568 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001f42:	6823      	ldr	r3, [r4, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8001f48:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001f4a:	d415      	bmi.n	8001f78 <UART_CheckIdleState+0x42>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001f4c:	6823      	ldr	r3, [r4, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	075b      	lsls	r3, r3, #29
 8001f52:	d50a      	bpl.n	8001f6a <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001f54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001f58:	9300      	str	r3, [sp, #0]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	462b      	mov	r3, r5
 8001f5e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001f62:	4620      	mov	r0, r4
 8001f64:	f7ff ffb8 	bl	8001ed8 <UART_WaitOnFlagUntilTimeout>
 8001f68:	b990      	cbnz	r0, 8001f90 <UART_CheckIdleState+0x5a>
  huart->gState = HAL_UART_STATE_READY;
 8001f6a:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8001f6c:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8001f6e:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UNLOCK(huart);
 8001f70:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 8001f74:	67a3      	str	r3, [r4, #120]	; 0x78
  return HAL_OK;
 8001f76:	e00c      	b.n	8001f92 <UART_CheckIdleState+0x5c>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001f78:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001f7c:	9300      	str	r3, [sp, #0]
 8001f7e:	4632      	mov	r2, r6
 8001f80:	4603      	mov	r3, r0
 8001f82:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001f86:	4620      	mov	r0, r4
 8001f88:	f7ff ffa6 	bl	8001ed8 <UART_WaitOnFlagUntilTimeout>
 8001f8c:	2800      	cmp	r0, #0
 8001f8e:	d0dd      	beq.n	8001f4c <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8001f90:	2003      	movs	r0, #3
}
 8001f92:	b002      	add	sp, #8
 8001f94:	bd70      	pop	{r4, r5, r6, pc}

08001f96 <HAL_UART_Init>:
{
 8001f96:	b510      	push	{r4, lr}
  if (huart == NULL)
 8001f98:	4604      	mov	r4, r0
 8001f9a:	b340      	cbz	r0, 8001fee <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8001f9c:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8001f9e:	b91b      	cbnz	r3, 8001fa8 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8001fa0:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8001fa4:	f000 f984 	bl	80022b0 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001fa8:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001faa:	2324      	movs	r3, #36	; 0x24
 8001fac:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8001fae:	6813      	ldr	r3, [r2, #0]
 8001fb0:	f023 0301 	bic.w	r3, r3, #1
 8001fb4:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001fb6:	4620      	mov	r0, r4
 8001fb8:	f7ff fda2 	bl	8001b00 <UART_SetConfig>
 8001fbc:	2801      	cmp	r0, #1
 8001fbe:	d016      	beq.n	8001fee <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001fc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001fc2:	b113      	cbz	r3, 8001fca <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 8001fc4:	4620      	mov	r0, r4
 8001fc6:	f7ff ff33 	bl	8001e30 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001fca:	6823      	ldr	r3, [r4, #0]
 8001fcc:	685a      	ldr	r2, [r3, #4]
 8001fce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001fd2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001fd4:	689a      	ldr	r2, [r3, #8]
 8001fd6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001fda:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8001fe2:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8001fe4:	601a      	str	r2, [r3, #0]
}
 8001fe6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8001fea:	f7ff bfa4 	b.w	8001f36 <UART_CheckIdleState>
}
 8001fee:	2001      	movs	r0, #1
 8001ff0:	bd10      	pop	{r4, pc}

08001ff2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ff2:	b510      	push	{r4, lr}
 8001ff4:	b0b8      	sub	sp, #224	; 0xe0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ff6:	2244      	movs	r2, #68	; 0x44
 8001ff8:	2100      	movs	r1, #0
 8001ffa:	a805      	add	r0, sp, #20
 8001ffc:	f000 fa06 	bl	800240c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002000:	2214      	movs	r2, #20
 8002002:	2100      	movs	r1, #0
 8002004:	4668      	mov	r0, sp
 8002006:	f000 fa01 	bl	800240c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800200a:	2100      	movs	r1, #0
 800200c:	2288      	movs	r2, #136	; 0x88
 800200e:	a816      	add	r0, sp, #88	; 0x58
 8002010:	f000 f9fc 	bl	800240c <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002014:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002018:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800201a:	2210      	movs	r2, #16
 800201c:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
 800201e:	2201      	movs	r2, #1
 8002020:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8002022:	220a      	movs	r2, #10
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002024:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLN = 10;
 8002026:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002028:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800202a:	2207      	movs	r2, #7
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800202c:	2400      	movs	r4, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800202e:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002030:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002032:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002034:	9213      	str	r2, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002036:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002038:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800203a:	f7fe ff51 	bl	8000ee0 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800203e:	220f      	movs	r2, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002040:	2104      	movs	r1, #4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002042:	2303      	movs	r3, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002044:	4668      	mov	r0, sp
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002046:	e88d 001c 	stmia.w	sp, {r2, r3, r4}
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800204a:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800204c:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800204e:	f7ff f9a9 	bl	80013a4 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8002052:	2342      	movs	r3, #66	; 0x42
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002054:	a816      	add	r0, sp, #88	; 0x58
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8002056:	9316      	str	r3, [sp, #88]	; 0x58
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002058:	9425      	str	r4, [sp, #148]	; 0x94
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800205a:	942a      	str	r4, [sp, #168]	; 0xa8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800205c:	f7ff fb68 	bl	8001730 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002060:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002064:	f7fe fe76 	bl	8000d54 <HAL_PWREx_ControlVoltageScaling>
  {
    Error_Handler();
  }
}
 8002068:	b038      	add	sp, #224	; 0xe0
 800206a:	bd10      	pop	{r4, pc}

0800206c <main>:
{
 800206c:	b570      	push	{r4, r5, r6, lr}
 800206e:	b08e      	sub	sp, #56	; 0x38
  HAL_Init();
 8002070:	f7fe fa58 	bl	8000524 <HAL_Init>
  SystemClock_Config();
 8002074:	f7ff ffbd 	bl	8001ff2 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002078:	2214      	movs	r2, #20
 800207a:	2100      	movs	r1, #0
 800207c:	a809      	add	r0, sp, #36	; 0x24
 800207e:	f000 f9c5 	bl	800240c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002082:	4b5b      	ldr	r3, [pc, #364]	; (80021f0 <main+0x184>)
  hi2c1.Instance = I2C1;
 8002084:	4d5b      	ldr	r5, [pc, #364]	; (80021f4 <main+0x188>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002086:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002088:	f042 0204 	orr.w	r2, r2, #4
 800208c:	64da      	str	r2, [r3, #76]	; 0x4c
 800208e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002090:	f002 0204 	and.w	r2, r2, #4
 8002094:	9205      	str	r2, [sp, #20]
 8002096:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002098:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800209a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800209e:	64da      	str	r2, [r3, #76]	; 0x4c
 80020a0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80020a2:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80020a6:	9206      	str	r2, [sp, #24]
 80020a8:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80020ac:	f042 0201 	orr.w	r2, r2, #1
 80020b0:	64da      	str	r2, [r3, #76]	; 0x4c
 80020b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80020b4:	f002 0201 	and.w	r2, r2, #1
 80020b8:	9207      	str	r2, [sp, #28]
 80020ba:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80020be:	f042 0202 	orr.w	r2, r2, #2
 80020c2:	64da      	str	r2, [r3, #76]	; 0x4c
 80020c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020c6:	f003 0302 	and.w	r3, r3, #2

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80020ca:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020cc:	9308      	str	r3, [sp, #32]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80020ce:	2120      	movs	r1, #32
 80020d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020d4:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80020d6:	f7fe fb99 	bl	800080c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80020da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020de:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = B1_Pin;
 80020e0:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80020e2:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80020e4:	4b44      	ldr	r3, [pc, #272]	; (80021f8 <main+0x18c>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80020e6:	4845      	ldr	r0, [pc, #276]	; (80021fc <main+0x190>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80020e8:	930a      	str	r3, [sp, #40]	; 0x28

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020ea:	2601      	movs	r6, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ec:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80020ee:	f7fe fab1 	bl	8000654 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin;
 80020f2:	2320      	movs	r3, #32
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80020f4:	a909      	add	r1, sp, #36	; 0x24
 80020f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = LD2_Pin;
 80020fa:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020fc:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fe:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002100:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002102:	f7fe faa7 	bl	8000654 <HAL_GPIO_Init>
  hi2c1.Init.Timing = 0x10909CEC;
 8002106:	4a3e      	ldr	r2, [pc, #248]	; (8002200 <main+0x194>)
 8002108:	4b3e      	ldr	r3, [pc, #248]	; (8002204 <main+0x198>)
  hi2c1.Init.OwnAddress1 = 0;
 800210a:	60ac      	str	r4, [r5, #8]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800210c:	4628      	mov	r0, r5
  hi2c1.Init.Timing = 0x10909CEC;
 800210e:	e885 000c 	stmia.w	r5, {r2, r3}
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002112:	60ee      	str	r6, [r5, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002114:	612c      	str	r4, [r5, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002116:	616c      	str	r4, [r5, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002118:	61ac      	str	r4, [r5, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800211a:	61ec      	str	r4, [r5, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800211c:	622c      	str	r4, [r5, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800211e:	f7fe fc56 	bl	80009ce <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002122:	4621      	mov	r1, r4
 8002124:	4628      	mov	r0, r5
 8002126:	f7fe fdc2 	bl	8000cae <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800212a:	4621      	mov	r1, r4
 800212c:	4628      	mov	r0, r5
 800212e:	f7fe fde4 	bl	8000cfa <HAL_I2CEx_ConfigDigitalFilter>
  huart2.Instance = USART2;
 8002132:	4835      	ldr	r0, [pc, #212]	; (8002208 <main+0x19c>)
  huart2.Init.BaudRate = 115200;
 8002134:	4935      	ldr	r1, [pc, #212]	; (800220c <main+0x1a0>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002136:	6084      	str	r4, [r0, #8]
  huart2.Init.BaudRate = 115200;
 8002138:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800213c:	e880 000a 	stmia.w	r0, {r1, r3}
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002140:	230c      	movs	r3, #12
 8002142:	6143      	str	r3, [r0, #20]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002144:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002146:	6104      	str	r4, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002148:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800214a:	61c4      	str	r4, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800214c:	6204      	str	r4, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800214e:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002150:	f7ff ff21 	bl	8001f96 <HAL_UART_Init>
  result = HAL_I2C_IsDeviceReady(&hi2c1, DEVICE_ADDR, 3, 500);
 8002154:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002158:	2203      	movs	r2, #3
 800215a:	21e0      	movs	r1, #224	; 0xe0
 800215c:	4628      	mov	r0, r5
 800215e:	f7fe fd1b 	bl	8000b98 <HAL_I2C_IsDeviceReady>
  if (result != 0) {
 8002162:	b108      	cbz	r0, 8002168 <main+0xfc>
	  HAL_Delay(toto);
 8002164:	f7fe fa06 	bl	8000574 <HAL_Delay>
  HAL_Delay(20);
 8002168:	2014      	movs	r0, #20
 800216a:	f7fe fa03 	bl	8000574 <HAL_Delay>
  uint8_t sysOn[] = {0x20 | 1};	// writeCommand(SYSTEM_SETUP_REGISTER, SYSTEM_SETUP_ON);
 800216e:	aa0e      	add	r2, sp, #56	; 0x38
 8002170:	2321      	movs	r3, #33	; 0x21
 8002172:	f802 3d30 	strb.w	r3, [r2, #-48]!
  result = HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, sysOn, 1, 100);
 8002176:	2364      	movs	r3, #100	; 0x64
 8002178:	9300      	str	r3, [sp, #0]
 800217a:	21e0      	movs	r1, #224	; 0xe0
 800217c:	2301      	movs	r3, #1
 800217e:	481d      	ldr	r0, [pc, #116]	; (80021f4 <main+0x188>)
 8002180:	f7fe fc76 	bl	8000a70 <HAL_I2C_Master_Transmit>
  if (result != 0) {
 8002184:	b108      	cbz	r0, 800218a <main+0x11e>
	  HAL_Delay(toto);
 8002186:	f7fe f9f5 	bl	8000574 <HAL_Delay>
  HAL_Delay(20);
 800218a:	2014      	movs	r0, #20
 800218c:	f7fe f9f2 	bl	8000574 <HAL_Delay>
  uint8_t dispOn[] = {0x80 | 1 | 0}; // writeCommand(DISPLAY_SETUP_REGISTER, DISPLAY_SETUP_ON | DISPLAY_SETUP_BLINK_NONE);
 8002190:	aa0e      	add	r2, sp, #56	; 0x38
  result = HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, dispOn, 1, 100);
 8002192:	2464      	movs	r4, #100	; 0x64
  uint8_t dispOn[] = {0x80 | 1 | 0}; // writeCommand(DISPLAY_SETUP_REGISTER, DISPLAY_SETUP_ON | DISPLAY_SETUP_BLINK_NONE);
 8002194:	2381      	movs	r3, #129	; 0x81
 8002196:	f802 3d2c 	strb.w	r3, [r2, #-44]!
  result = HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, dispOn, 1, 100);
 800219a:	21e0      	movs	r1, #224	; 0xe0
 800219c:	2301      	movs	r3, #1
 800219e:	9400      	str	r4, [sp, #0]
 80021a0:	4814      	ldr	r0, [pc, #80]	; (80021f4 <main+0x188>)
 80021a2:	f7fe fc65 	bl	8000a70 <HAL_I2C_Master_Transmit>
  HAL_Delay(20);
 80021a6:	2014      	movs	r0, #20
 80021a8:	f7fe f9e4 	bl	8000574 <HAL_Delay>
  uint8_t bright[] = {0xE0| 7};	// writeCommand(BRIGTHNESS_REGISTER, 7);
 80021ac:	aa0e      	add	r2, sp, #56	; 0x38
 80021ae:	23e7      	movs	r3, #231	; 0xe7
 80021b0:	f802 3d28 	strb.w	r3, [r2, #-40]!
  result = HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, bright, 1, 100);
 80021b4:	21e0      	movs	r1, #224	; 0xe0
 80021b6:	2301      	movs	r3, #1
 80021b8:	9400      	str	r4, [sp, #0]
 80021ba:	480e      	ldr	r0, [pc, #56]	; (80021f4 <main+0x188>)
 80021bc:	f7fe fc58 	bl	8000a70 <HAL_I2C_Master_Transmit>
  HAL_Delay(20);
 80021c0:	2014      	movs	r0, #20
 80021c2:	f7fe f9d7 	bl	8000574 <HAL_Delay>
  uint8_t buffer[] = {0, 0x39,1, 0x3F,2, 0x0,3, 0x3F,4, 0x38};
 80021c6:	4a12      	ldr	r2, [pc, #72]	; (8002210 <main+0x1a4>)
 80021c8:	6810      	ldr	r0, [r2, #0]
 80021ca:	6851      	ldr	r1, [r2, #4]
 80021cc:	8912      	ldrh	r2, [r2, #8]
 80021ce:	ab09      	add	r3, sp, #36	; 0x24
 80021d0:	c303      	stmia	r3!, {r0, r1}
  result = HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, buffer, 10, 100);
 80021d2:	21e0      	movs	r1, #224	; 0xe0
  uint8_t buffer[] = {0, 0x39,1, 0x3F,2, 0x0,3, 0x3F,4, 0x38};
 80021d4:	801a      	strh	r2, [r3, #0]
  result = HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, buffer, 10, 100);
 80021d6:	4807      	ldr	r0, [pc, #28]	; (80021f4 <main+0x188>)
 80021d8:	9400      	str	r4, [sp, #0]
 80021da:	230a      	movs	r3, #10
 80021dc:	aa09      	add	r2, sp, #36	; 0x24
 80021de:	f7fe fc47 	bl	8000a70 <HAL_I2C_Master_Transmit>
  HAL_Delay(20);
 80021e2:	2014      	movs	r0, #20
 80021e4:	f7fe f9c6 	bl	8000574 <HAL_Delay>
  HAL_Delay(100);
 80021e8:	4620      	mov	r0, r4
 80021ea:	f7fe f9c3 	bl	8000574 <HAL_Delay>
 80021ee:	e7fe      	b.n	80021ee <main+0x182>
 80021f0:	40021000 	.word	0x40021000
 80021f4:	2000002c 	.word	0x2000002c
 80021f8:	10210000 	.word	0x10210000
 80021fc:	48000800 	.word	0x48000800
 8002200:	40005400 	.word	0x40005400
 8002204:	10909cec 	.word	0x10909cec
 8002208:	20000078 	.word	0x20000078
 800220c:	40004400 	.word	0x40004400
 8002210:	08002434 	.word	0x08002434

08002214 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002214:	4b0a      	ldr	r3, [pc, #40]	; (8002240 <HAL_MspInit+0x2c>)
 8002216:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002218:	f042 0201 	orr.w	r2, r2, #1
 800221c:	661a      	str	r2, [r3, #96]	; 0x60
 800221e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8002220:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002222:	f002 0201 	and.w	r2, r2, #1
 8002226:	9200      	str	r2, [sp, #0]
 8002228:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800222a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800222c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002230:	659a      	str	r2, [r3, #88]	; 0x58
 8002232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002234:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002238:	9301      	str	r3, [sp, #4]
 800223a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800223c:	b002      	add	sp, #8
 800223e:	4770      	bx	lr
 8002240:	40021000 	.word	0x40021000

08002244 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002244:	b510      	push	{r4, lr}
 8002246:	4604      	mov	r4, r0
 8002248:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800224a:	2214      	movs	r2, #20
 800224c:	2100      	movs	r1, #0
 800224e:	a803      	add	r0, sp, #12
 8002250:	f000 f8dc 	bl	800240c <memset>
  if(hi2c->Instance==I2C1)
 8002254:	6822      	ldr	r2, [r4, #0]
 8002256:	4b13      	ldr	r3, [pc, #76]	; (80022a4 <HAL_I2C_MspInit+0x60>)
 8002258:	429a      	cmp	r2, r3
 800225a:	d121      	bne.n	80022a0 <HAL_I2C_MspInit+0x5c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800225c:	4c12      	ldr	r4, [pc, #72]	; (80022a8 <HAL_I2C_MspInit+0x64>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800225e:	4813      	ldr	r0, [pc, #76]	; (80022ac <HAL_I2C_MspInit+0x68>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002260:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002262:	f043 0302 	orr.w	r3, r3, #2
 8002266:	64e3      	str	r3, [r4, #76]	; 0x4c
 8002268:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800226a:	f003 0302 	and.w	r3, r3, #2
 800226e:	9301      	str	r3, [sp, #4]
 8002270:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002272:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002276:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002278:	2312      	movs	r3, #18
 800227a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800227c:	2301      	movs	r3, #1
 800227e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002280:	2303      	movs	r3, #3
 8002282:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002284:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002286:	2304      	movs	r3, #4
 8002288:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800228a:	f7fe f9e3 	bl	8000654 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800228e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002290:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002294:	65a3      	str	r3, [r4, #88]	; 0x58
 8002296:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002298:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800229c:	9302      	str	r3, [sp, #8]
 800229e:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80022a0:	b008      	add	sp, #32
 80022a2:	bd10      	pop	{r4, pc}
 80022a4:	40005400 	.word	0x40005400
 80022a8:	40021000 	.word	0x40021000
 80022ac:	48000400 	.word	0x48000400

080022b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022b0:	b510      	push	{r4, lr}
 80022b2:	4604      	mov	r4, r0
 80022b4:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b6:	2214      	movs	r2, #20
 80022b8:	2100      	movs	r1, #0
 80022ba:	a803      	add	r0, sp, #12
 80022bc:	f000 f8a6 	bl	800240c <memset>
  if(huart->Instance==USART2)
 80022c0:	6822      	ldr	r2, [r4, #0]
 80022c2:	4b13      	ldr	r3, [pc, #76]	; (8002310 <HAL_UART_MspInit+0x60>)
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d120      	bne.n	800230a <HAL_UART_MspInit+0x5a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80022c8:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022cc:	a903      	add	r1, sp, #12
    __HAL_RCC_USART2_CLK_ENABLE();
 80022ce:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80022d0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80022d4:	659a      	str	r2, [r3, #88]	; 0x58
 80022d6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80022d8:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80022dc:	9201      	str	r2, [sp, #4]
 80022de:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80022e2:	f042 0201 	orr.w	r2, r2, #1
 80022e6:	64da      	str	r2, [r3, #76]	; 0x4c
 80022e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	9302      	str	r3, [sp, #8]
 80022f0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80022f2:	230c      	movs	r3, #12
 80022f4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f6:	2302      	movs	r3, #2
 80022f8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022fa:	2303      	movs	r3, #3
 80022fc:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002302:	2307      	movs	r3, #7
 8002304:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002306:	f7fe f9a5 	bl	8000654 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800230a:	b008      	add	sp, #32
 800230c:	bd10      	pop	{r4, pc}
 800230e:	bf00      	nop
 8002310:	40004400 	.word	0x40004400

08002314 <NMI_Handler>:
 8002314:	4770      	bx	lr

08002316 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002316:	e7fe      	b.n	8002316 <HardFault_Handler>

08002318 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002318:	e7fe      	b.n	8002318 <MemManage_Handler>

0800231a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800231a:	e7fe      	b.n	800231a <BusFault_Handler>

0800231c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800231c:	e7fe      	b.n	800231c <UsageFault_Handler>

0800231e <SVC_Handler>:
 800231e:	4770      	bx	lr

08002320 <DebugMon_Handler>:
 8002320:	4770      	bx	lr

08002322 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002322:	4770      	bx	lr

08002324 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002324:	f7fe b914 	b.w	8000550 <HAL_IncTick>

08002328 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002328:	490f      	ldr	r1, [pc, #60]	; (8002368 <SystemInit+0x40>)
 800232a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800232e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002332:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002336:	4b0d      	ldr	r3, [pc, #52]	; (800236c <SystemInit+0x44>)
 8002338:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800233a:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 800233c:	f042 0201 	orr.w	r2, r2, #1
 8002340:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 8002342:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 800234a:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800234e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002350:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002354:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800235c:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800235e:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002360:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002364:	608b      	str	r3, [r1, #8]
 8002366:	4770      	bx	lr
 8002368:	e000ed00 	.word	0xe000ed00
 800236c:	40021000 	.word	0x40021000

08002370 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002370:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023a8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002374:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002376:	e003      	b.n	8002380 <LoopCopyDataInit>

08002378 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002378:	4b0c      	ldr	r3, [pc, #48]	; (80023ac <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800237a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800237c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800237e:	3104      	adds	r1, #4

08002380 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002380:	480b      	ldr	r0, [pc, #44]	; (80023b0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002382:	4b0c      	ldr	r3, [pc, #48]	; (80023b4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002384:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002386:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002388:	d3f6      	bcc.n	8002378 <CopyDataInit>
	ldr	r2, =_sbss
 800238a:	4a0b      	ldr	r2, [pc, #44]	; (80023b8 <LoopForever+0x12>)
	b	LoopFillZerobss
 800238c:	e002      	b.n	8002394 <LoopFillZerobss>

0800238e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800238e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002390:	f842 3b04 	str.w	r3, [r2], #4

08002394 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002394:	4b09      	ldr	r3, [pc, #36]	; (80023bc <LoopForever+0x16>)
	cmp	r2, r3
 8002396:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002398:	d3f9      	bcc.n	800238e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800239a:	f7ff ffc5 	bl	8002328 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800239e:	f000 f811 	bl	80023c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80023a2:	f7ff fe63 	bl	800206c <main>

080023a6 <LoopForever>:

LoopForever:
    b LoopForever
 80023a6:	e7fe      	b.n	80023a6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80023a8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80023ac:	080024a8 	.word	0x080024a8
	ldr	r0, =_sdata
 80023b0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80023b4:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80023b8:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80023bc:	200000f8 	.word	0x200000f8

080023c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80023c0:	e7fe      	b.n	80023c0 <ADC1_2_IRQHandler>
	...

080023c4 <__libc_init_array>:
 80023c4:	b570      	push	{r4, r5, r6, lr}
 80023c6:	4e0d      	ldr	r6, [pc, #52]	; (80023fc <__libc_init_array+0x38>)
 80023c8:	4c0d      	ldr	r4, [pc, #52]	; (8002400 <__libc_init_array+0x3c>)
 80023ca:	1ba4      	subs	r4, r4, r6
 80023cc:	10a4      	asrs	r4, r4, #2
 80023ce:	2500      	movs	r5, #0
 80023d0:	42a5      	cmp	r5, r4
 80023d2:	d109      	bne.n	80023e8 <__libc_init_array+0x24>
 80023d4:	4e0b      	ldr	r6, [pc, #44]	; (8002404 <__libc_init_array+0x40>)
 80023d6:	4c0c      	ldr	r4, [pc, #48]	; (8002408 <__libc_init_array+0x44>)
 80023d8:	f000 f820 	bl	800241c <_init>
 80023dc:	1ba4      	subs	r4, r4, r6
 80023de:	10a4      	asrs	r4, r4, #2
 80023e0:	2500      	movs	r5, #0
 80023e2:	42a5      	cmp	r5, r4
 80023e4:	d105      	bne.n	80023f2 <__libc_init_array+0x2e>
 80023e6:	bd70      	pop	{r4, r5, r6, pc}
 80023e8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80023ec:	4798      	blx	r3
 80023ee:	3501      	adds	r5, #1
 80023f0:	e7ee      	b.n	80023d0 <__libc_init_array+0xc>
 80023f2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80023f6:	4798      	blx	r3
 80023f8:	3501      	adds	r5, #1
 80023fa:	e7f2      	b.n	80023e2 <__libc_init_array+0x1e>
 80023fc:	080024a0 	.word	0x080024a0
 8002400:	080024a0 	.word	0x080024a0
 8002404:	080024a0 	.word	0x080024a0
 8002408:	080024a4 	.word	0x080024a4

0800240c <memset>:
 800240c:	4402      	add	r2, r0
 800240e:	4603      	mov	r3, r0
 8002410:	4293      	cmp	r3, r2
 8002412:	d100      	bne.n	8002416 <memset+0xa>
 8002414:	4770      	bx	lr
 8002416:	f803 1b01 	strb.w	r1, [r3], #1
 800241a:	e7f9      	b.n	8002410 <memset+0x4>

0800241c <_init>:
 800241c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800241e:	bf00      	nop
 8002420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002422:	bc08      	pop	{r3}
 8002424:	469e      	mov	lr, r3
 8002426:	4770      	bx	lr

08002428 <_fini>:
 8002428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800242a:	bf00      	nop
 800242c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800242e:	bc08      	pop	{r3}
 8002430:	469e      	mov	lr, r3
 8002432:	4770      	bx	lr
