
BLE_p2pServer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006368  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000598  080064a8  080064a8  000164a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006a40  08006a40  00016a40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006a48  08006a48  00016a48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006a4c  08006a4c  00016a4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000ac  20000004  08006a50  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  200000b0  08006afc  000200b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_APP_CONTEXT 000000a0  2000014c  08006b95  0002014c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 BLE_DRIVER_CONTEXT 0000001d  200001ec  08006c35  000201ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 SYSTEM_DRIVER_CONTEXT 00000011  2000020c  08006c52  0002020c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00001310  20000220  08006c63  00020220  2**2
                  ALLOC
 12 ._user_heap_stack 00001400  20001530  08006c63  00021530  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00030a38  2**0
                  CONTENTS, READONLY
 14 MAPPING_TABLE 00000020  20030000  20030000  00030000  2**2
                  ALLOC
 15 MB_MEM1       00000198  20030020  20030020  00030000  2**2
                  ALLOC
 16 MB_MEM2       00000880  200301b8  200301b8  000301b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 17 .debug_line   0001c2a3  00000000  00000000  00030a68  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_info   0003a5bc  00000000  00000000  0004cd0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_abbrev 00007243  00000000  00000000  000872c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_aranges 00001a30  00000000  00000000  0008e510  2**3
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_ranges 00002338  00000000  00000000  0008ff40  2**3
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_loc    00010ab8  00000000  00000000  00092278  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_macro  0002a93b  00000000  00000000  000a2d30  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_str    000ec2b5  00000000  00000000  000cd66b  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .comment      0000007c  00000000  00000000  001b9920  2**0
                  CONTENTS, READONLY
 26 .debug_frame  00005490  00000000  00000000  001b999c  2**2
                  CONTENTS, READONLY, DEBUGGING
 27 .stab         00000084  00000000  00000000  001bee2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 28 .stabstr      00000117  00000000  00000000  001beeb0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000220 	.word	0x20000220
 800015c:	00000000 	.word	0x00000000
 8000160:	08006490 	.word	0x08006490

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000224 	.word	0x20000224
 800017c:	08006490 	.word	0x08006490

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b97a 	b.w	800052c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	468c      	mov	ip, r1
 8000256:	460d      	mov	r5, r1
 8000258:	4604      	mov	r4, r0
 800025a:	9e08      	ldr	r6, [sp, #32]
 800025c:	2b00      	cmp	r3, #0
 800025e:	d151      	bne.n	8000304 <__udivmoddi4+0xb4>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d96d      	bls.n	8000342 <__udivmoddi4+0xf2>
 8000266:	fab2 fe82 	clz	lr, r2
 800026a:	f1be 0f00 	cmp.w	lr, #0
 800026e:	d00b      	beq.n	8000288 <__udivmoddi4+0x38>
 8000270:	f1ce 0c20 	rsb	ip, lr, #32
 8000274:	fa01 f50e 	lsl.w	r5, r1, lr
 8000278:	fa20 fc0c 	lsr.w	ip, r0, ip
 800027c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000280:	ea4c 0c05 	orr.w	ip, ip, r5
 8000284:	fa00 f40e 	lsl.w	r4, r0, lr
 8000288:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800028c:	0c25      	lsrs	r5, r4, #16
 800028e:	fbbc f8fa 	udiv	r8, ip, sl
 8000292:	fa1f f987 	uxth.w	r9, r7
 8000296:	fb0a cc18 	mls	ip, sl, r8, ip
 800029a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800029e:	fb08 f309 	mul.w	r3, r8, r9
 80002a2:	42ab      	cmp	r3, r5
 80002a4:	d90a      	bls.n	80002bc <__udivmoddi4+0x6c>
 80002a6:	19ed      	adds	r5, r5, r7
 80002a8:	f108 32ff 	add.w	r2, r8, #4294967295
 80002ac:	f080 8123 	bcs.w	80004f6 <__udivmoddi4+0x2a6>
 80002b0:	42ab      	cmp	r3, r5
 80002b2:	f240 8120 	bls.w	80004f6 <__udivmoddi4+0x2a6>
 80002b6:	f1a8 0802 	sub.w	r8, r8, #2
 80002ba:	443d      	add	r5, r7
 80002bc:	1aed      	subs	r5, r5, r3
 80002be:	b2a4      	uxth	r4, r4
 80002c0:	fbb5 f0fa 	udiv	r0, r5, sl
 80002c4:	fb0a 5510 	mls	r5, sl, r0, r5
 80002c8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002cc:	fb00 f909 	mul.w	r9, r0, r9
 80002d0:	45a1      	cmp	r9, r4
 80002d2:	d909      	bls.n	80002e8 <__udivmoddi4+0x98>
 80002d4:	19e4      	adds	r4, r4, r7
 80002d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002da:	f080 810a 	bcs.w	80004f2 <__udivmoddi4+0x2a2>
 80002de:	45a1      	cmp	r9, r4
 80002e0:	f240 8107 	bls.w	80004f2 <__udivmoddi4+0x2a2>
 80002e4:	3802      	subs	r0, #2
 80002e6:	443c      	add	r4, r7
 80002e8:	eba4 0409 	sub.w	r4, r4, r9
 80002ec:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002f0:	2100      	movs	r1, #0
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d061      	beq.n	80003ba <__udivmoddi4+0x16a>
 80002f6:	fa24 f40e 	lsr.w	r4, r4, lr
 80002fa:	2300      	movs	r3, #0
 80002fc:	6034      	str	r4, [r6, #0]
 80002fe:	6073      	str	r3, [r6, #4]
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	428b      	cmp	r3, r1
 8000306:	d907      	bls.n	8000318 <__udivmoddi4+0xc8>
 8000308:	2e00      	cmp	r6, #0
 800030a:	d054      	beq.n	80003b6 <__udivmoddi4+0x166>
 800030c:	2100      	movs	r1, #0
 800030e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000312:	4608      	mov	r0, r1
 8000314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000318:	fab3 f183 	clz	r1, r3
 800031c:	2900      	cmp	r1, #0
 800031e:	f040 808e 	bne.w	800043e <__udivmoddi4+0x1ee>
 8000322:	42ab      	cmp	r3, r5
 8000324:	d302      	bcc.n	800032c <__udivmoddi4+0xdc>
 8000326:	4282      	cmp	r2, r0
 8000328:	f200 80fa 	bhi.w	8000520 <__udivmoddi4+0x2d0>
 800032c:	1a84      	subs	r4, r0, r2
 800032e:	eb65 0503 	sbc.w	r5, r5, r3
 8000332:	2001      	movs	r0, #1
 8000334:	46ac      	mov	ip, r5
 8000336:	2e00      	cmp	r6, #0
 8000338:	d03f      	beq.n	80003ba <__udivmoddi4+0x16a>
 800033a:	e886 1010 	stmia.w	r6, {r4, ip}
 800033e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000342:	b912      	cbnz	r2, 800034a <__udivmoddi4+0xfa>
 8000344:	2701      	movs	r7, #1
 8000346:	fbb7 f7f2 	udiv	r7, r7, r2
 800034a:	fab7 fe87 	clz	lr, r7
 800034e:	f1be 0f00 	cmp.w	lr, #0
 8000352:	d134      	bne.n	80003be <__udivmoddi4+0x16e>
 8000354:	1beb      	subs	r3, r5, r7
 8000356:	0c3a      	lsrs	r2, r7, #16
 8000358:	fa1f fc87 	uxth.w	ip, r7
 800035c:	2101      	movs	r1, #1
 800035e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000362:	0c25      	lsrs	r5, r4, #16
 8000364:	fb02 3318 	mls	r3, r2, r8, r3
 8000368:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800036c:	fb0c f308 	mul.w	r3, ip, r8
 8000370:	42ab      	cmp	r3, r5
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x134>
 8000374:	19ed      	adds	r5, r5, r7
 8000376:	f108 30ff 	add.w	r0, r8, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x132>
 800037c:	42ab      	cmp	r3, r5
 800037e:	f200 80d1 	bhi.w	8000524 <__udivmoddi4+0x2d4>
 8000382:	4680      	mov	r8, r0
 8000384:	1aed      	subs	r5, r5, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb5 f0f2 	udiv	r0, r5, r2
 800038c:	fb02 5510 	mls	r5, r2, r0, r5
 8000390:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000394:	fb0c fc00 	mul.w	ip, ip, r0
 8000398:	45a4      	cmp	ip, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x15c>
 800039c:	19e4      	adds	r4, r4, r7
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x15a>
 80003a4:	45a4      	cmp	ip, r4
 80003a6:	f200 80b8 	bhi.w	800051a <__udivmoddi4+0x2ca>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 040c 	sub.w	r4, r4, ip
 80003b0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003b4:	e79d      	b.n	80002f2 <__udivmoddi4+0xa2>
 80003b6:	4631      	mov	r1, r6
 80003b8:	4630      	mov	r0, r6
 80003ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003be:	f1ce 0420 	rsb	r4, lr, #32
 80003c2:	fa05 f30e 	lsl.w	r3, r5, lr
 80003c6:	fa07 f70e 	lsl.w	r7, r7, lr
 80003ca:	fa20 f804 	lsr.w	r8, r0, r4
 80003ce:	0c3a      	lsrs	r2, r7, #16
 80003d0:	fa25 f404 	lsr.w	r4, r5, r4
 80003d4:	ea48 0803 	orr.w	r8, r8, r3
 80003d8:	fbb4 f1f2 	udiv	r1, r4, r2
 80003dc:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003e0:	fb02 4411 	mls	r4, r2, r1, r4
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003ec:	fb01 f30c 	mul.w	r3, r1, ip
 80003f0:	42ab      	cmp	r3, r5
 80003f2:	fa00 f40e 	lsl.w	r4, r0, lr
 80003f6:	d909      	bls.n	800040c <__udivmoddi4+0x1bc>
 80003f8:	19ed      	adds	r5, r5, r7
 80003fa:	f101 30ff 	add.w	r0, r1, #4294967295
 80003fe:	f080 808a 	bcs.w	8000516 <__udivmoddi4+0x2c6>
 8000402:	42ab      	cmp	r3, r5
 8000404:	f240 8087 	bls.w	8000516 <__udivmoddi4+0x2c6>
 8000408:	3902      	subs	r1, #2
 800040a:	443d      	add	r5, r7
 800040c:	1aeb      	subs	r3, r5, r3
 800040e:	fa1f f588 	uxth.w	r5, r8
 8000412:	fbb3 f0f2 	udiv	r0, r3, r2
 8000416:	fb02 3310 	mls	r3, r2, r0, r3
 800041a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800041e:	fb00 f30c 	mul.w	r3, r0, ip
 8000422:	42ab      	cmp	r3, r5
 8000424:	d907      	bls.n	8000436 <__udivmoddi4+0x1e6>
 8000426:	19ed      	adds	r5, r5, r7
 8000428:	f100 38ff 	add.w	r8, r0, #4294967295
 800042c:	d26f      	bcs.n	800050e <__udivmoddi4+0x2be>
 800042e:	42ab      	cmp	r3, r5
 8000430:	d96d      	bls.n	800050e <__udivmoddi4+0x2be>
 8000432:	3802      	subs	r0, #2
 8000434:	443d      	add	r5, r7
 8000436:	1aeb      	subs	r3, r5, r3
 8000438:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800043c:	e78f      	b.n	800035e <__udivmoddi4+0x10e>
 800043e:	f1c1 0720 	rsb	r7, r1, #32
 8000442:	fa22 f807 	lsr.w	r8, r2, r7
 8000446:	408b      	lsls	r3, r1
 8000448:	fa05 f401 	lsl.w	r4, r5, r1
 800044c:	ea48 0303 	orr.w	r3, r8, r3
 8000450:	fa20 fe07 	lsr.w	lr, r0, r7
 8000454:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000458:	40fd      	lsrs	r5, r7
 800045a:	ea4e 0e04 	orr.w	lr, lr, r4
 800045e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000462:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000466:	fb0c 5519 	mls	r5, ip, r9, r5
 800046a:	fa1f f883 	uxth.w	r8, r3
 800046e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000472:	fb09 f408 	mul.w	r4, r9, r8
 8000476:	42ac      	cmp	r4, r5
 8000478:	fa02 f201 	lsl.w	r2, r2, r1
 800047c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x244>
 8000482:	18ed      	adds	r5, r5, r3
 8000484:	f109 30ff 	add.w	r0, r9, #4294967295
 8000488:	d243      	bcs.n	8000512 <__udivmoddi4+0x2c2>
 800048a:	42ac      	cmp	r4, r5
 800048c:	d941      	bls.n	8000512 <__udivmoddi4+0x2c2>
 800048e:	f1a9 0902 	sub.w	r9, r9, #2
 8000492:	441d      	add	r5, r3
 8000494:	1b2d      	subs	r5, r5, r4
 8000496:	fa1f fe8e 	uxth.w	lr, lr
 800049a:	fbb5 f0fc 	udiv	r0, r5, ip
 800049e:	fb0c 5510 	mls	r5, ip, r0, r5
 80004a2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80004a6:	fb00 f808 	mul.w	r8, r0, r8
 80004aa:	45a0      	cmp	r8, r4
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x26e>
 80004ae:	18e4      	adds	r4, r4, r3
 80004b0:	f100 35ff 	add.w	r5, r0, #4294967295
 80004b4:	d229      	bcs.n	800050a <__udivmoddi4+0x2ba>
 80004b6:	45a0      	cmp	r8, r4
 80004b8:	d927      	bls.n	800050a <__udivmoddi4+0x2ba>
 80004ba:	3802      	subs	r0, #2
 80004bc:	441c      	add	r4, r3
 80004be:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004c2:	eba4 0408 	sub.w	r4, r4, r8
 80004c6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ca:	454c      	cmp	r4, r9
 80004cc:	46c6      	mov	lr, r8
 80004ce:	464d      	mov	r5, r9
 80004d0:	d315      	bcc.n	80004fe <__udivmoddi4+0x2ae>
 80004d2:	d012      	beq.n	80004fa <__udivmoddi4+0x2aa>
 80004d4:	b156      	cbz	r6, 80004ec <__udivmoddi4+0x29c>
 80004d6:	ebba 030e 	subs.w	r3, sl, lr
 80004da:	eb64 0405 	sbc.w	r4, r4, r5
 80004de:	fa04 f707 	lsl.w	r7, r4, r7
 80004e2:	40cb      	lsrs	r3, r1
 80004e4:	431f      	orrs	r7, r3
 80004e6:	40cc      	lsrs	r4, r1
 80004e8:	6037      	str	r7, [r6, #0]
 80004ea:	6074      	str	r4, [r6, #4]
 80004ec:	2100      	movs	r1, #0
 80004ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f2:	4618      	mov	r0, r3
 80004f4:	e6f8      	b.n	80002e8 <__udivmoddi4+0x98>
 80004f6:	4690      	mov	r8, r2
 80004f8:	e6e0      	b.n	80002bc <__udivmoddi4+0x6c>
 80004fa:	45c2      	cmp	sl, r8
 80004fc:	d2ea      	bcs.n	80004d4 <__udivmoddi4+0x284>
 80004fe:	ebb8 0e02 	subs.w	lr, r8, r2
 8000502:	eb69 0503 	sbc.w	r5, r9, r3
 8000506:	3801      	subs	r0, #1
 8000508:	e7e4      	b.n	80004d4 <__udivmoddi4+0x284>
 800050a:	4628      	mov	r0, r5
 800050c:	e7d7      	b.n	80004be <__udivmoddi4+0x26e>
 800050e:	4640      	mov	r0, r8
 8000510:	e791      	b.n	8000436 <__udivmoddi4+0x1e6>
 8000512:	4681      	mov	r9, r0
 8000514:	e7be      	b.n	8000494 <__udivmoddi4+0x244>
 8000516:	4601      	mov	r1, r0
 8000518:	e778      	b.n	800040c <__udivmoddi4+0x1bc>
 800051a:	3802      	subs	r0, #2
 800051c:	443c      	add	r4, r7
 800051e:	e745      	b.n	80003ac <__udivmoddi4+0x15c>
 8000520:	4608      	mov	r0, r1
 8000522:	e708      	b.n	8000336 <__udivmoddi4+0xe6>
 8000524:	f1a8 0802 	sub.w	r8, r8, #2
 8000528:	443d      	add	r5, r7
 800052a:	e72b      	b.n	8000384 <__udivmoddi4+0x134>

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000530:	480d      	ldr	r0, [pc, #52]	; (8000568 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000532:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000534:	480d      	ldr	r0, [pc, #52]	; (800056c <LoopForever+0x6>)
  ldr r1, =_edata
 8000536:	490e      	ldr	r1, [pc, #56]	; (8000570 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000538:	4a0e      	ldr	r2, [pc, #56]	; (8000574 <LoopForever+0xe>)
  movs r3, #0
 800053a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800053c:	e002      	b.n	8000544 <LoopCopyDataInit>

0800053e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800053e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000540:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000542:	3304      	adds	r3, #4

08000544 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000544:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000546:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000548:	d3f9      	bcc.n	800053e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800054a:	4a0b      	ldr	r2, [pc, #44]	; (8000578 <LoopForever+0x12>)
  ldr r4, =_ebss
 800054c:	4c0b      	ldr	r4, [pc, #44]	; (800057c <LoopForever+0x16>)
  movs r3, #0
 800054e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000550:	e001      	b.n	8000556 <LoopFillZerobss>

08000552 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000552:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000554:	3204      	adds	r2, #4

08000556 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000556:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000558:	d3fb      	bcc.n	8000552 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800055a:	f001 faef 	bl	8001b3c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800055e:	f004 ffcd 	bl	80054fc <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8000562:	f000 fc8d 	bl	8000e80 <main>

08000566 <LoopForever>:

LoopForever:
  b LoopForever
 8000566:	e7fe      	b.n	8000566 <LoopForever>
  ldr   r0, =_estack
 8000568:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800056c:	20000004 	.word	0x20000004
  ldr r1, =_edata
 8000570:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 8000574:	08006a50 	.word	0x08006a50
  ldr r2, =_sbss
 8000578:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 800057c:	20001530 	.word	0x20001530

08000580 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000580:	e7fe      	b.n	8000580 <ADC1_IRQHandler>

08000582 <APPE_SysStatusNot>:

  return;
}

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 8000582:	4770      	bx	lr

08000584 <APPE_SysUserEvtRx>:
  UNUSED(status);
  return;
}

static void APPE_SysUserEvtRx( void * pPayload )
{
 8000584:	b508      	push	{r3, lr}
  UNUSED(pPayload);
  /* Traces channel initialization */
  TL_TRACES_Init( );
 8000586:	f002 fdf3 	bl	8003170 <TL_TRACES_Init>

  APP_BLE_Init( );
 800058a:	f000 fed1 	bl	8001330 <APP_BLE_Init>
  LPM_SetOffMode(1 << CFG_LPM_APP, LPM_OffMode_En);
 800058e:	2101      	movs	r1, #1
 8000590:	4608      	mov	r0, r1
  return;
}
 8000592:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  LPM_SetOffMode(1 << CFG_LPM_APP, LPM_OffMode_En);
 8000596:	f001 bff5 	b.w	8002584 <LPM_SetOffMode>
	...

0800059c <APPE_Init>:
{
 800059c:	b530      	push	{r4, r5, lr}
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800059e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80005a2:	b089      	sub	sp, #36	; 0x24
 80005a4:	6893      	ldr	r3, [r2, #8]
 80005a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005aa:	6093      	str	r3, [r2, #8]
  LowPowerModeConfiguration.OFF_Mode_Config = LPM_Standby;
 80005ac:	2400      	movs	r4, #0
  LowPowerModeConfiguration.Stop_Mode_Config = LPM_StopMode2;
 80005ae:	2502      	movs	r5, #2
  LPM_SetConf(&LowPowerModeConfiguration);
 80005b0:	a802      	add	r0, sp, #8
  LowPowerModeConfiguration.OFF_Mode_Config = LPM_Standby;
 80005b2:	f88d 4009 	strb.w	r4, [sp, #9]
  LowPowerModeConfiguration.Stop_Mode_Config = LPM_StopMode2;
 80005b6:	f88d 5008 	strb.w	r5, [sp, #8]
  LPM_SetConf(&LowPowerModeConfiguration);
 80005ba:	f001 ffdb 	bl	8002574 <LPM_SetConf>
  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 80005be:	4620      	mov	r0, r4
 80005c0:	4926      	ldr	r1, [pc, #152]	; (800065c <APPE_Init+0xc0>)
 80005c2:	f000 f963 	bl	800088c <HW_TS_Init>
  HAL_DBGMCU_EnableDBGSleepMode();
 80005c6:	f002 fe25 	bl	8003214 <HAL_DBGMCU_EnableDBGSleepMode>
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR2, ExtiLine);
 80005ca:	4b25      	ldr	r3, [pc, #148]	; (8000660 <APPE_Init+0xc4>)
 80005cc:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80005d0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80005d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_C2_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->C2IMR2, ExtiLine);
 80005d8:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 80005dc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80005e0:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  DbgTraceInit();
 80005e4:	f001 feba 	bl	800235c <DbgTraceInit>
  LPM_SetOffMode(1 << CFG_LPM_APP, LPM_OffMode_Dis);
 80005e8:	4621      	mov	r1, r4
 80005ea:	2001      	movs	r0, #1
 80005ec:	f001 ffca 	bl	8002584 <LPM_SetOffMode>
#if (CFG_LED_SUPPORTED == 1)
  /**
   * Leds Initialization
   */

  BSP_LED_Init(LED_BLUE);
 80005f0:	4620      	mov	r0, r4
 80005f2:	f001 fa13 	bl	8001a1c <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 80005f6:	2001      	movs	r0, #1
 80005f8:	f001 fa10 	bl	8001a1c <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80005fc:	4628      	mov	r0, r5
 80005fe:	f001 fa0d 	bl	8001a1c <BSP_LED_Init>

  BSP_LED_On(LED_GREEN);
 8000602:	2001      	movs	r0, #1
 8000604:	f001 fa32 	bl	8001a6c <BSP_LED_On>
#if (CFG_BUTTON_SUPPORTED == 1)
  /**
   * Button Initialization
   */

  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 8000608:	4620      	mov	r0, r4
 800060a:	2101      	movs	r1, #1
 800060c:	f001 fa4a 	bl	8001aa4 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
 8000610:	2101      	movs	r1, #1
 8000612:	4608      	mov	r0, r1
 8000614:	f001 fa46 	bl	8001aa4 <BSP_PB_Init>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000618:	4c12      	ldr	r4, [pc, #72]	; (8000664 <APPE_Init+0xc8>)
  TL_Init();
 800061a:	f002 fccf 	bl	8002fbc <TL_Init>
  SCH_RegTask( CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, shci_user_evt_proc );
 800061e:	4912      	ldr	r1, [pc, #72]	; (8000668 <APPE_Init+0xcc>)
 8000620:	2003      	movs	r0, #3
 8000622:	f002 f8f3 	bl	800280c <SCH_RegTask>
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000626:	4669      	mov	r1, sp
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000628:	4b10      	ldr	r3, [pc, #64]	; (800066c <APPE_Init+0xd0>)
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 800062a:	4811      	ldr	r0, [pc, #68]	; (8000670 <APPE_Init+0xd4>)
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 800062c:	9400      	str	r4, [sp, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 800062e:	9301      	str	r3, [sp, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000630:	f002 f9bc 	bl	80029ac <shci_init>
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000634:	f504 7386 	add.w	r3, r4, #268	; 0x10c
 8000638:	9302      	str	r3, [sp, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 800063a:	f504 7306 	add.w	r3, r4, #536	; 0x218
 800063e:	9303      	str	r3, [sp, #12]
  TL_MM_Init( &tl_mm_config );
 8000640:	a802      	add	r0, sp, #8
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000642:	f240 533c 	movw	r3, #1340	; 0x53c
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000646:	f504 7449 	add.w	r4, r4, #804	; 0x324
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 800064a:	9305      	str	r3, [sp, #20]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 800064c:	9404      	str	r4, [sp, #16]
  TL_MM_Init( &tl_mm_config );
 800064e:	f002 fd61 	bl	8003114 <TL_MM_Init>
  TL_Enable();
 8000652:	f002 fcb1 	bl	8002fb8 <TL_Enable>
}
 8000656:	b009      	add	sp, #36	; 0x24
 8000658:	bd30      	pop	{r4, r5, pc}
 800065a:	bf00      	nop
 800065c:	2000149c 	.word	0x2000149c
 8000660:	58000800 	.word	0x58000800
 8000664:	200301b8 	.word	0x200301b8
 8000668:	080029f9 	.word	0x080029f9
 800066c:	08000583 	.word	0x08000583
 8000670:	08000585 	.word	0x08000585

08000674 <SCH_Idle>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void SCH_Idle( void )
{
 8000674:	4770      	bx	lr

08000676 <SCH_EvtIdle>:
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void SCH_EvtIdle( uint32_t evt_waited_bm )
{
  SCH_Run(~0);
 8000676:	f04f 30ff 	mov.w	r0, #4294967295
 800067a:	f002 b90b 	b.w	8002894 <SCH_Run>

0800067e <shci_notify_asynch_evt>:
}

void shci_notify_asynch_evt(void* pdata)
{
  SCH_SetTask( 1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800067e:	2100      	movs	r1, #0
 8000680:	2008      	movs	r0, #8
 8000682:	f002 b8cf 	b.w	8002824 <SCH_SetTask>

08000686 <shci_cmd_resp_release>:
  return;
}

void shci_cmd_resp_release(uint32_t flag)
{
  SCH_SetEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8000686:	2002      	movs	r0, #2
 8000688:	f002 b8f8 	b.w	800287c <SCH_SetEvt>

0800068c <shci_cmd_resp_wait>:
  return;
}

void shci_cmd_resp_wait(uint32_t timeout)
{
  SCH_WaitEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 800068c:	2002      	movs	r0, #2
 800068e:	f002 b94f 	b.w	8002930 <SCH_WaitEvt>

08000692 <DbgOutputInit>:
  * @retval None
  */
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
    MX_USART1_UART_Init();
 8000692:	f000 bb9f 	b.w	8000dd4 <MX_USART1_UART_Init>

08000696 <DbgOutputTraces>:
  * @param  call-back :
  * @retval None
  */
void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
  HW_UART_Transmit_DMA(DBG_TRACE_UART_CFG, p_data, size, cb);
 8000696:	4613      	mov	r3, r2
 8000698:	460a      	mov	r2, r1
 800069a:	4601      	mov	r1, r0
 800069c:	2000      	movs	r0, #0
 800069e:	f000 bb01 	b.w	8000ca4 <HW_UART_Transmit_DMA>

080006a2 <HAL_GPIO_EXTI_Callback>:
#endif

/* USER CODE BEGIN FD_WRAP_FUNCTIONS */
void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin )
{
  switch (GPIO_Pin)
 80006a2:	2802      	cmp	r0, #2
 80006a4:	d007      	beq.n	80006b6 <HAL_GPIO_EXTI_Callback+0x14>
 80006a6:	2810      	cmp	r0, #16
 80006a8:	d003      	beq.n	80006b2 <HAL_GPIO_EXTI_Callback+0x10>
 80006aa:	2801      	cmp	r0, #1
 80006ac:	d105      	bne.n	80006ba <HAL_GPIO_EXTI_Callback+0x18>
    case BUTTON_SW1_PIN:
     APP_BLE_Key_Button1_Action();
      break; 

    case BUTTON_SW2_PIN:
      APP_BLE_Key_Button2_Action();
 80006ae:	f000 bfcf 	b.w	8001650 <APP_BLE_Key_Button2_Action>
     APP_BLE_Key_Button1_Action();
 80006b2:	f000 bfcb 	b.w	800164c <APP_BLE_Key_Button1_Action>
      break; 

    case BUTTON_SW3_PIN:
      APP_BLE_Key_Button3_Action();
 80006b6:	f001 b80b 	b.w	80016d0 <APP_BLE_Key_Button3_Action>
 80006ba:	4770      	bx	lr

080006bc <ReadRtcSsrValue>:
static uint32_t ReadRtcSsrValue(void)
{
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80006bc:	4a05      	ldr	r2, [pc, #20]	; (80006d4 <ReadRtcSsrValue+0x18>)
 80006be:	6a90      	ldr	r0, [r2, #40]	; 0x28

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80006c0:	6a93      	ldr	r3, [r2, #40]	; 0x28
  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80006c2:	b280      	uxth	r0, r0
  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80006c4:	b29b      	uxth	r3, r3

  while(first_read != second_read)
 80006c6:	4298      	cmp	r0, r3
 80006c8:	d100      	bne.n	80006cc <ReadRtcSsrValue+0x10>

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
  }

  return second_read;
}
 80006ca:	4770      	bx	lr
    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80006cc:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80006ce:	4618      	mov	r0, r3
 80006d0:	b28b      	uxth	r3, r1
 80006d2:	e7f8      	b.n	80006c6 <ReadRtcSsrValue+0xa>
 80006d4:	40002800 	.word	0x40002800

080006d8 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 80006d8:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 80006da:	4b17      	ldr	r3, [pc, #92]	; (8000738 <UnlinkTimer+0x60>)
 80006dc:	781a      	ldrb	r2, [r3, #0]
 80006de:	4282      	cmp	r2, r0
 80006e0:	f04f 0418 	mov.w	r4, #24
 80006e4:	d115      	bne.n	8000712 <UnlinkTimer+0x3a>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 80006e6:	781a      	ldrb	r2, [r3, #0]
 80006e8:	b2d2      	uxtb	r2, r2
 80006ea:	705a      	strb	r2, [r3, #1]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 80006ec:	fb04 3200 	mla	r2, r4, r0, r3
 80006f0:	7e52      	ldrb	r2, [r2, #25]
 80006f2:	b2d2      	uxtb	r2, r2
 80006f4:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 80006f6:	2218      	movs	r2, #24
 80006f8:	fb02 3000 	mla	r0, r2, r0, r3
 80006fc:	2201      	movs	r2, #1
 80006fe:	7402      	strb	r2, [r0, #16]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8000700:	781a      	ldrb	r2, [r3, #0]
 8000702:	2a06      	cmp	r2, #6
 8000704:	d104      	bne.n	8000710 <UnlinkTimer+0x38>
 8000706:	b919      	cbnz	r1, 8000710 <UnlinkTimer+0x38>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000708:	f04f 32ff 	mov.w	r2, #4294967295
 800070c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8000710:	bdf0      	pop	{r4, r5, r6, r7, pc}
    previous_id = aTimerContext[TimerID].PreviousID;
 8000712:	fb04 3500 	mla	r5, r4, r0, r3
 8000716:	7e2e      	ldrb	r6, [r5, #24]
    next_id = aTimerContext[TimerID].NextID;
 8000718:	7e6a      	ldrb	r2, [r5, #25]
    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 800071a:	7e6f      	ldrb	r7, [r5, #25]
 800071c:	fb04 3606 	mla	r6, r4, r6, r3
    next_id = aTimerContext[TimerID].NextID;
 8000720:	b2d2      	uxtb	r2, r2
    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8000722:	b2ff      	uxtb	r7, r7
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000724:	2a06      	cmp	r2, #6
    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8000726:	7677      	strb	r7, [r6, #25]
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8000728:	bf1f      	itttt	ne
 800072a:	7e2d      	ldrbne	r5, [r5, #24]
 800072c:	fb04 3202 	mlane	r2, r4, r2, r3
 8000730:	b2ed      	uxtbne	r5, r5
 8000732:	7615      	strbne	r5, [r2, #24]
 8000734:	e7df      	b.n	80006f6 <UnlinkTimer+0x1e>
 8000736:	bf00      	nop
 8000738:	200000b0 	.word	0x200000b0

0800073c <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 800073c:	b510      	push	{r4, lr}
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 800073e:	4c0d      	ldr	r4, [pc, #52]	; (8000774 <ReturnTimeElapsed+0x38>)
 8000740:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000744:	3301      	adds	r3, #1
 8000746:	d013      	beq.n	8000770 <ReturnTimeElapsed+0x34>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8000748:	f7ff ffb8 	bl	80006bc <ReadRtcSsrValue>

    if (SSRValueOnLastSetup >= return_value)
 800074c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000750:	4298      	cmp	r0, r3
 8000752:	4b09      	ldr	r3, [pc, #36]	; (8000778 <ReturnTimeElapsed+0x3c>)
      return_value = SSRValueOnLastSetup - return_value;
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000754:	bf85      	ittet	hi
 8000756:	f8d4 1094 	ldrhi.w	r1, [r4, #148]	; 0x94
      wrap_counter = SynchPrescalerUserConfig - return_value;
 800075a:	881a      	ldrhhi	r2, [r3, #0]
      return_value = SSRValueOnLastSetup - return_value;
 800075c:	f8d4 2094 	ldrls.w	r2, [r4, #148]	; 0x94
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000760:	1852      	addhi	r2, r2, r1
 8000762:	1a10      	subs	r0, r2, r0

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000764:	789a      	ldrb	r2, [r3, #2]
    return_value = return_value >> WakeupTimerDivider;
 8000766:	78db      	ldrb	r3, [r3, #3]
    return_value = return_value*AsynchPrescalerUserConfig;
 8000768:	4350      	muls	r0, r2
    return_value = return_value >> WakeupTimerDivider;
 800076a:	40d8      	lsrs	r0, r3
  {
    return_value = 0;
  }

  return (uint16_t)return_value;
}
 800076c:	b280      	uxth	r0, r0
 800076e:	bd10      	pop	{r4, pc}
    return_value = 0;
 8000770:	2000      	movs	r0, #0
 8000772:	e7fb      	b.n	800076c <ReturnTimeElapsed+0x30>
 8000774:	200000b0 	.word	0x200000b0
 8000778:	2000023c 	.word	0x2000023c

0800077c <RescheduleTimerList>:

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800077c:	4b3f      	ldr	r3, [pc, #252]	; (800087c <RescheduleTimerList+0x100>)
 800077e:	689b      	ldr	r3, [r3, #8]
 8000780:	f413 6f80 	tst.w	r3, #1024	; 0x400
{
 8000784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000788:	4e3d      	ldr	r6, [pc, #244]	; (8000880 <RescheduleTimerList+0x104>)
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800078a:	d004      	beq.n	8000796 <RescheduleTimerList+0x1a>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 800078c:	6873      	ldr	r3, [r6, #4]
 800078e:	681a      	ldr	r2, [r3, #0]
 8000790:	68d3      	ldr	r3, [r2, #12]
 8000792:	0759      	lsls	r1, r3, #29
 8000794:	d4fc      	bmi.n	8000790 <RescheduleTimerList+0x14>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8000796:	f8d6 8004 	ldr.w	r8, [r6, #4]

  localTimerID = CurrentRunningTimerID;
 800079a:	4d3a      	ldr	r5, [pc, #232]	; (8000884 <RescheduleTimerList+0x108>)
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 800079c:	f8d8 2000 	ldr.w	r2, [r8]
 80007a0:	6893      	ldr	r3, [r2, #8]
 80007a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80007a6:	6093      	str	r3, [r2, #8]
  localTimerID = CurrentRunningTimerID;
 80007a8:	782f      	ldrb	r7, [r5, #0]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 80007aa:	2318      	movs	r3, #24
  localTimerID = CurrentRunningTimerID;
 80007ac:	b2ff      	uxtb	r7, r7
  timecountleft = aTimerContext[localTimerID].CountLeft;
 80007ae:	fb03 5307 	mla	r3, r3, r7, r5
 80007b2:	68dc      	ldr	r4, [r3, #12]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 80007b4:	f7ff ffc2 	bl	800073c <ReturnTimeElapsed>

  if(timecountleft < time_elapsed )
 80007b8:	4284      	cmp	r4, r0
 80007ba:	d212      	bcs.n	80007e2 <RescheduleTimerList+0x66>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80007bc:	2301      	movs	r3, #1
 80007be:	f885 3098 	strb.w	r3, [r5, #152]	; 0x98
    wakeup_timer_value = 0;
 80007c2:	2300      	movs	r3, #0
  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 80007c4:	2418      	movs	r4, #24
    {
      aTimerContext[localTimerID].CountLeft = 0;
 80007c6:	f04f 0e00 	mov.w	lr, #0
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80007ca:	2f06      	cmp	r7, #6
 80007cc:	d118      	bne.n	8000800 <RescheduleTimerList+0x84>
  if(Value == 0)
 80007ce:	bb33      	cbnz	r3, 800081e <RescheduleTimerList+0xa2>
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80007d0:	f7ff ff74 	bl	80006bc <ReadRtcSsrValue>
 80007d4:	f8c5 0094 	str.w	r0, [r5, #148]	; 0x94
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80007d8:	2003      	movs	r0, #3
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);

  return ;
}
 80007da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80007de:	f002 bd81 	b.w	80032e4 <HAL_NVIC_SetPendingIRQ>
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 80007e2:	8933      	ldrh	r3, [r6, #8]
 80007e4:	fa10 f383 	uxtah	r3, r0, r3
 80007e8:	429c      	cmp	r4, r3
      wakeup_timer_value = MaxWakeupTimerSetup;
 80007ea:	bf87      	ittee	hi
 80007ec:	8933      	ldrhhi	r3, [r6, #8]
      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 80007ee:	2200      	movhi	r2, #0
      wakeup_timer_value = timecountleft - time_elapsed;
 80007f0:	1a23      	subls	r3, r4, r0
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80007f2:	2201      	movls	r2, #1
      wakeup_timer_value = MaxWakeupTimerSetup;
 80007f4:	bf8c      	ite	hi
 80007f6:	b29b      	uxthhi	r3, r3
      wakeup_timer_value = timecountleft - time_elapsed;
 80007f8:	b29b      	uxthls	r3, r3
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80007fa:	f885 2098 	strb.w	r2, [r5, #152]	; 0x98
 80007fe:	e7e1      	b.n	80007c4 <RescheduleTimerList+0x48>
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8000800:	fb04 5207 	mla	r2, r4, r7, r5
    localTimerID = aTimerContext[localTimerID].NextID;
 8000804:	fb04 5707 	mla	r7, r4, r7, r5
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8000808:	68d1      	ldr	r1, [r2, #12]
 800080a:	4288      	cmp	r0, r1
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 800080c:	bf97      	itett	ls
 800080e:	68d1      	ldrls	r1, [r2, #12]
      aTimerContext[localTimerID].CountLeft = 0;
 8000810:	f8c2 e00c 	strhi.w	lr, [r2, #12]
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8000814:	1a09      	subls	r1, r1, r0
 8000816:	60d1      	strls	r1, [r2, #12]
    localTimerID = aTimerContext[localTimerID].NextID;
 8000818:	7e7f      	ldrb	r7, [r7, #25]
 800081a:	b2ff      	uxtb	r7, r7
 800081c:	e7d5      	b.n	80007ca <RescheduleTimerList+0x4e>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 800081e:	2b01      	cmp	r3, #1
 8000820:	d802      	bhi.n	8000828 <RescheduleTimerList+0xac>
 8000822:	78f2      	ldrb	r2, [r6, #3]
 8000824:	2a01      	cmp	r2, #1
 8000826:	d026      	beq.n	8000876 <RescheduleTimerList+0xfa>
      Value -= 1;
 8000828:	3b01      	subs	r3, #1
 800082a:	b29c      	uxth	r4, r3
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 800082c:	f8d8 3000 	ldr.w	r3, [r8]
 8000830:	68da      	ldr	r2, [r3, #12]
 8000832:	0752      	lsls	r2, r2, #29
 8000834:	d5fc      	bpl.n	8000830 <RescheduleTimerList+0xb4>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000836:	68d9      	ldr	r1, [r3, #12]
 8000838:	b2c9      	uxtb	r1, r1
 800083a:	f461 6190 	orn	r1, r1, #1152	; 0x480
 800083e:	60d9      	str	r1, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000840:	4b11      	ldr	r3, [pc, #68]	; (8000888 <RescheduleTimerList+0x10c>)
 8000842:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000846:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000848:	2003      	movs	r0, #3
 800084a:	f002 fd59 	bl	8003300 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 800084e:	4b0b      	ldr	r3, [pc, #44]	; (800087c <RescheduleTimerList+0x100>)
 8000850:	695a      	ldr	r2, [r3, #20]
 8000852:	0c12      	lsrs	r2, r2, #16
 8000854:	0412      	lsls	r2, r2, #16
 8000856:	4322      	orrs	r2, r4
 8000858:	615a      	str	r2, [r3, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 800085a:	f7ff ff2f 	bl	80006bc <ReadRtcSsrValue>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 800085e:	6873      	ldr	r3, [r6, #4]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000860:	f8c5 0094 	str.w	r0, [r5, #148]	; 0x94
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8000864:	681a      	ldr	r2, [r3, #0]
 8000866:	6893      	ldr	r3, [r2, #8]
 8000868:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800086c:	6093      	str	r3, [r2, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 800086e:	f3af 8000 	nop.w
 8000872:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000876:	4614      	mov	r4, r2
 8000878:	e7d8      	b.n	800082c <RescheduleTimerList+0xb0>
 800087a:	bf00      	nop
 800087c:	40002800 	.word	0x40002800
 8000880:	2000023c 	.word	0x2000023c
 8000884:	200000b0 	.word	0x200000b0
 8000888:	58000800 	.word	0x58000800

0800088c <HW_TS_Init>:

  return;
}

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 800088c:	b570      	push	{r4, r5, r6, lr}
   * Get RTC handler
   */
  phrtc = hrtc;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800088e:	680d      	ldr	r5, [r1, #0]

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8000890:	4e3e      	ldr	r6, [pc, #248]	; (800098c <HW_TS_Init+0x100>)
  phrtc = hrtc;
 8000892:	4c3f      	ldr	r4, [pc, #252]	; (8000990 <HW_TS_Init+0x104>)
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000894:	23ca      	movs	r3, #202	; 0xca
 8000896:	626b      	str	r3, [r5, #36]	; 0x24
 8000898:	2353      	movs	r3, #83	; 0x53
 800089a:	626b      	str	r3, [r5, #36]	; 0x24
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800089c:	68b3      	ldr	r3, [r6, #8]
  phrtc = hrtc;
 800089e:	6061      	str	r1, [r4, #4]
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80008a0:	f043 0320 	orr.w	r3, r3, #32
 80008a4:	60b3      	str	r3, [r6, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 80008a6:	68b3      	ldr	r3, [r6, #8]
 80008a8:	f003 0307 	and.w	r3, r3, #7
 80008ac:	f1c3 0304 	rsb	r3, r3, #4
 80008b0:	b2d9      	uxtb	r1, r3
 80008b2:	70e1      	strb	r1, [r4, #3]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 80008b4:	6932      	ldr	r2, [r6, #16]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80008b6:	f44f 03fe 	mov.w	r3, #8323072	; 0x7f0000
 80008ba:	fa93 f3a3 	rbit	r3, r3
 80008be:	fab3 f383 	clz	r3, r3
 80008c2:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80008c6:	40da      	lsrs	r2, r3
 80008c8:	3201      	adds	r2, #1
 80008ca:	b2d2      	uxtb	r2, r2
 80008cc:	70a2      	strb	r2, [r4, #2]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80008ce:	6933      	ldr	r3, [r6, #16]
 80008d0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80008d4:	3301      	adds	r3, #1
 80008d6:	8023      	strh	r3, [r4, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80008d8:	3b01      	subs	r3, #1
 80008da:	4353      	muls	r3, r2
 80008dc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80008e0:	40cb      	lsrs	r3, r1

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80008e2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80008e6:	4293      	cmp	r3, r2
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80008e8:	bf88      	it	hi
 80008ea:	f64f 73ff 	movwhi	r3, #65535	; 0xffff
  *         @arg @ref LL_EXTI_LINE_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80008ee:	4a29      	ldr	r2, [pc, #164]	; (8000994 <HW_TS_Init+0x108>)
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80008f0:	bf98      	it	ls
 80008f2:	b29b      	uxthls	r3, r3
 80008f4:	8123      	strh	r3, [r4, #8]
 80008f6:	6813      	ldr	r3, [r2, #0]
 80008f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80008fc:	6013      	str	r3, [r2, #0]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80008fe:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8000902:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000906:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);

  if(TimerInitMode == hw_ts_InitMode_Full)
 800090a:	2800      	cmp	r0, #0
 800090c:	d137      	bne.n	800097e <HW_TS_Init+0xf2>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800090e:	4b22      	ldr	r3, [pc, #136]	; (8000998 <HW_TS_Init+0x10c>)
 8000910:	2101      	movs	r1, #1
 8000912:	f883 1098 	strb.w	r1, [r3, #152]	; 0x98
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000916:	f04f 31ff 	mov.w	r1, #4294967295
 800091a:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 800091e:	2106      	movs	r1, #6
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8000920:	7418      	strb	r0, [r3, #16]
 8000922:	f883 0028 	strb.w	r0, [r3, #40]	; 0x28
 8000926:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
 800092a:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
 800092e:	f883 0070 	strb.w	r0, [r3, #112]	; 0x70
 8000932:	f883 0088 	strb.w	r0, [r3, #136]	; 0x88
    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8000936:	7019      	strb	r1, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 8000938:	68ab      	ldr	r3, [r5, #8]
 800093a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800093e:	60ab      	str	r3, [r5, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8000940:	68eb      	ldr	r3, [r5, #12]
 8000942:	b2db      	uxtb	r3, r3
 8000944:	f463 6390 	orn	r3, r3, #1152	; 0x480
 8000948:	60eb      	str	r3, [r5, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 800094a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800094e:	60d3      	str	r3, [r2, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8000950:	2003      	movs	r0, #3
 8000952:	f002 fcd5 	bl	8003300 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8000956:	6863      	ldr	r3, [r4, #4]
 8000958:	681a      	ldr	r2, [r3, #0]
 800095a:	6893      	ldr	r3, [r2, #8]
 800095c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000960:	6093      	str	r3, [r2, #8]
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8000962:	6863      	ldr	r3, [r4, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	22ff      	movs	r2, #255	; 0xff

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8000968:	2103      	movs	r1, #3
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 800096a:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 800096c:	4608      	mov	r0, r1
 800096e:	2200      	movs	r2, #0
 8000970:	f002 fc6a 	bl	8003248 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8000974:	2003      	movs	r0, #3

  return;
}
 8000976:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800097a:	f002 bc99 	b.w	80032b0 <HAL_NVIC_EnableIRQ>
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 800097e:	68eb      	ldr	r3, [r5, #12]
 8000980:	055b      	lsls	r3, r3, #21
 8000982:	d5ee      	bpl.n	8000962 <HW_TS_Init+0xd6>
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000984:	2003      	movs	r0, #3
 8000986:	f002 fcad 	bl	80032e4 <HAL_NVIC_SetPendingIRQ>
 800098a:	e7ea      	b.n	8000962 <HW_TS_Init+0xd6>
 800098c:	40002800 	.word	0x40002800
 8000990:	2000023c 	.word	0x2000023c
 8000994:	58000800 	.word	0x58000800
 8000998:	200000b0 	.word	0x200000b0

0800099c <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 800099c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80009a0:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80009a4:	b672      	cpsid	i
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 80009a6:	f8df 9048 	ldr.w	r9, [pc, #72]	; 80009f0 <HW_TS_Create+0x54>
 80009aa:	2500      	movs	r5, #0
 80009ac:	f04f 0a18 	mov.w	sl, #24
 80009b0:	fb0a 9405 	mla	r4, sl, r5, r9
 80009b4:	fa5f fc85 	uxtb.w	ip, r5
 80009b8:	f894 e010 	ldrb.w	lr, [r4, #16]
 80009bc:	f00e 06ff 	and.w	r6, lr, #255	; 0xff
 80009c0:	f1be 0f00 	cmp.w	lr, #0
 80009c4:	d10b      	bne.n	80009de <HW_TS_Create+0x42>
    loop++;
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 80009c6:	2501      	movs	r5, #1
 80009c8:	7425      	strb	r5, [r4, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80009ca:	f387 8810 	msr	PRIMASK, r7

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 80009ce:	6160      	str	r0, [r4, #20]
    aTimerContext[loop].TimerMode = TimerMode;
 80009d0:	7462      	strb	r2, [r4, #17]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
    *pTimerId = loop;

    localreturnstatus = hw_ts_Successful;
 80009d2:	4630      	mov	r0, r6
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 80009d4:	6063      	str	r3, [r4, #4]
    *pTimerId = loop;
 80009d6:	f881 c000 	strb.w	ip, [r1]
 80009da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009de:	3501      	adds	r5, #1
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 80009e0:	2d06      	cmp	r5, #6
 80009e2:	d1e5      	bne.n	80009b0 <HW_TS_Create+0x14>
 80009e4:	f387 8810 	msr	PRIMASK, r7
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 80009e8:	2001      	movs	r0, #1
  }

  return(localreturnstatus);
}
 80009ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009ee:	bf00      	nop
 80009f0:	200000b0 	.word	0x200000b0

080009f4 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80009f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80009f8:	4680      	mov	r8, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80009fa:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80009fe:	b672      	cpsid	i
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000a00:	4c23      	ldr	r4, [pc, #140]	; (8000a90 <HW_TS_Stop+0x9c>)

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8000a02:	4e24      	ldr	r6, [pc, #144]	; (8000a94 <HW_TS_Stop+0xa0>)
  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8000a04:	2003      	movs	r0, #3
 8000a06:	f002 fc5f 	bl	80032c8 <HAL_NVIC_DisableIRQ>
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000a0a:	6867      	ldr	r7, [r4, #4]
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	22ca      	movs	r2, #202	; 0xca
 8000a10:	625a      	str	r2, [r3, #36]	; 0x24
 8000a12:	2253      	movs	r2, #83	; 0x53
 8000a14:	625a      	str	r2, [r3, #36]	; 0x24
  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8000a16:	2318      	movs	r3, #24
 8000a18:	fb03 6308 	mla	r3, r3, r8, r6
 8000a1c:	7c1b      	ldrb	r3, [r3, #16]
 8000a1e:	2b02      	cmp	r3, #2
 8000a20:	d124      	bne.n	8000a6c <HW_TS_Stop+0x78>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8000a22:	2100      	movs	r1, #0
 8000a24:	4640      	mov	r0, r8
 8000a26:	f7ff fe57 	bl	80006d8 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8000a2a:	7833      	ldrb	r3, [r6, #0]
 8000a2c:	b2db      	uxtb	r3, r3

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000a2e:	2b06      	cmp	r3, #6
 8000a30:	d127      	bne.n	8000a82 <HW_TS_Stop+0x8e>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000a32:	4b19      	ldr	r3, [pc, #100]	; (8000a98 <HW_TS_Stop+0xa4>)
 8000a34:	689b      	ldr	r3, [r3, #8]
 8000a36:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	d003      	beq.n	8000a46 <HW_TS_Stop+0x52>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8000a3e:	68da      	ldr	r2, [r3, #12]
 8000a40:	f012 0f04 	tst.w	r2, #4
 8000a44:	e7fa      	b.n	8000a3c <HW_TS_Stop+0x48>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8000a46:	689a      	ldr	r2, [r3, #8]
 8000a48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000a4c:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000a4e:	68da      	ldr	r2, [r3, #12]
 8000a50:	0752      	lsls	r2, r2, #29
 8000a52:	d5fc      	bpl.n	8000a4e <HW_TS_Stop+0x5a>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000a54:	68da      	ldr	r2, [r3, #12]
 8000a56:	b2d2      	uxtb	r2, r2
 8000a58:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000a5c:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000a5e:	4b0f      	ldr	r3, [pc, #60]	; (8000a9c <HW_TS_Stop+0xa8>)
 8000a60:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000a64:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000a66:	2003      	movs	r0, #3
 8000a68:	f002 fc4a 	bl	8003300 <HAL_NVIC_ClearPendingIRQ>
      RescheduleTimerList();
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8000a6c:	6863      	ldr	r3, [r4, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	22ff      	movs	r2, #255	; 0xff
 8000a72:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8000a74:	2003      	movs	r0, #3
 8000a76:	f002 fc1b 	bl	80032b0 <HAL_NVIC_EnableIRQ>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000a7a:	f385 8810 	msr	PRIMASK, r5
 8000a7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8000a82:	7872      	ldrb	r2, [r6, #1]
 8000a84:	4293      	cmp	r3, r2
 8000a86:	d0f1      	beq.n	8000a6c <HW_TS_Stop+0x78>
      RescheduleTimerList();
 8000a88:	f7ff fe78 	bl	800077c <RescheduleTimerList>
 8000a8c:	e7ee      	b.n	8000a6c <HW_TS_Stop+0x78>
 8000a8e:	bf00      	nop
 8000a90:	2000023c 	.word	0x2000023c
 8000a94:	200000b0 	.word	0x200000b0
 8000a98:	40002800 	.word	0x40002800
 8000a9c:	58000800 	.word	0x58000800

08000aa0 <HW_TS_Start>:

  return;
}

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8000aa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8000aa4:	4c4c      	ldr	r4, [pc, #304]	; (8000bd8 <HW_TS_Start+0x138>)
 8000aa6:	2318      	movs	r3, #24
 8000aa8:	fb03 4300 	mla	r3, r3, r0, r4
{
 8000aac:	4605      	mov	r5, r0
  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8000aae:	7c1b      	ldrb	r3, [r3, #16]
 8000ab0:	2b02      	cmp	r3, #2
{
 8000ab2:	460f      	mov	r7, r1
  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8000ab4:	d101      	bne.n	8000aba <HW_TS_Start+0x1a>
  {
    HW_TS_Stop( timer_id );
 8000ab6:	f7ff ff9d 	bl	80009f4 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8000aba:	f3ef 8810 	mrs	r8, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8000abe:	b672      	cpsid	i
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8000ac0:	2003      	movs	r0, #3
 8000ac2:	f002 fc01 	bl	80032c8 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000ac6:	4a45      	ldr	r2, [pc, #276]	; (8000bdc <HW_TS_Start+0x13c>)
 8000ac8:	6853      	ldr	r3, [r2, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	21ca      	movs	r1, #202	; 0xca

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8000ace:	2618      	movs	r6, #24
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000ad0:	6259      	str	r1, [r3, #36]	; 0x24
  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8000ad2:	fb06 4905 	mla	r9, r6, r5, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000ad6:	2153      	movs	r1, #83	; 0x53
 8000ad8:	6259      	str	r1, [r3, #36]	; 0x24
  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8000ada:	2302      	movs	r3, #2
 8000adc:	f889 3010 	strb.w	r3, [r9, #16]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8000ae0:	f8c9 700c 	str.w	r7, [r9, #12]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8000ae4:	f8c9 7008 	str.w	r7, [r9, #8]
  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000ae8:	7823      	ldrb	r3, [r4, #0]
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	2b06      	cmp	r3, #6
 8000aee:	4617      	mov	r7, r2
 8000af0:	d11b      	bne.n	8000b2a <HW_TS_Start+0x8a>
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000af2:	7822      	ldrb	r2, [r4, #0]
 8000af4:	b2d2      	uxtb	r2, r2
 8000af6:	7062      	strb	r2, [r4, #1]
    CurrentRunningTimerID = TimerID;
 8000af8:	7025      	strb	r5, [r4, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000afa:	f889 3019 	strb.w	r3, [r9, #25]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000afe:	f04f 33ff 	mov.w	r3, #4294967295
 8000b02:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    time_elapsed = 0;
 8000b06:	2000      	movs	r0, #0

  time_elapsed =  linkTimer(timer_id);

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8000b08:	7822      	ldrb	r2, [r4, #0]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8000b0a:	7863      	ldrb	r3, [r4, #1]
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	d05b      	beq.n	8000bc8 <HW_TS_Start+0x128>
  {
    RescheduleTimerList();
 8000b10:	f7ff fe34 	bl	800077c <RescheduleTimerList>
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	22ff      	movs	r2, #255	; 0xff
 8000b1a:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8000b1c:	2003      	movs	r0, #3
 8000b1e:	f002 fbc7 	bl	80032b0 <HAL_NVIC_EnableIRQ>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000b22:	f388 8810 	msr	PRIMASK, r8
 8000b26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    time_elapsed = ReturnTimeElapsed();
 8000b2a:	f7ff fe07 	bl	800073c <ReturnTimeElapsed>
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8000b2e:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8000b32:	4403      	add	r3, r0
 8000b34:	f8c9 300c 	str.w	r3, [r9, #12]
    time_left = aTimerContext[TimerID].CountLeft;
 8000b38:	f8d9 100c 	ldr.w	r1, [r9, #12]
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8000b3c:	7823      	ldrb	r3, [r4, #0]
 8000b3e:	fb06 4303 	mla	r3, r6, r3, r4
 8000b42:	68db      	ldr	r3, [r3, #12]
 8000b44:	4299      	cmp	r1, r3
 8000b46:	d324      	bcc.n	8000b92 <HW_TS_Start+0xf2>
      timer_id_lookup = CurrentRunningTimerID;
 8000b48:	7823      	ldrb	r3, [r4, #0]
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000b4a:	b2db      	uxtb	r3, r3
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000b4c:	fb06 4203 	mla	r2, r6, r3, r4
 8000b50:	7e52      	ldrb	r2, [r2, #25]
 8000b52:	b2d2      	uxtb	r2, r2
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000b54:	2a06      	cmp	r2, #6
 8000b56:	d10f      	bne.n	8000b78 <HW_TS_Start+0xd8>
  next_id = aTimerContext[RefTimerID].NextID;
 8000b58:	2118      	movs	r1, #24
 8000b5a:	fb01 4203 	mla	r2, r1, r3, r4
 8000b5e:	7e52      	ldrb	r2, [r2, #25]
 8000b60:	b2d2      	uxtb	r2, r2
  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000b62:	2a06      	cmp	r2, #6
 8000b64:	d111      	bne.n	8000b8a <HW_TS_Start+0xea>
  aTimerContext[TimerID].NextID = next_id;
 8000b66:	2118      	movs	r1, #24
 8000b68:	fb01 4605 	mla	r6, r1, r5, r4
 8000b6c:	7672      	strb	r2, [r6, #25]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8000b6e:	7633      	strb	r3, [r6, #24]
  aTimerContext[RefTimerID].NextID = TimerID;
 8000b70:	fb01 4303 	mla	r3, r1, r3, r4
 8000b74:	765d      	strb	r5, [r3, #25]
 8000b76:	e7c7      	b.n	8000b08 <HW_TS_Start+0x68>
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000b78:	fb06 4202 	mla	r2, r6, r2, r4
 8000b7c:	68d2      	ldr	r2, [r2, #12]
 8000b7e:	4291      	cmp	r1, r2
 8000b80:	d3ea      	bcc.n	8000b58 <HW_TS_Start+0xb8>
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000b82:	fb06 4303 	mla	r3, r6, r3, r4
 8000b86:	7e5b      	ldrb	r3, [r3, #25]
 8000b88:	e7df      	b.n	8000b4a <HW_TS_Start+0xaa>
    aTimerContext[next_id].PreviousID = TimerID;
 8000b8a:	fb01 4102 	mla	r1, r1, r2, r4
 8000b8e:	760d      	strb	r5, [r1, #24]
 8000b90:	e7e9      	b.n	8000b66 <HW_TS_Start+0xc6>
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000b92:	7822      	ldrb	r2, [r4, #0]
  if(RefTimerID != CurrentRunningTimerID)
 8000b94:	7823      	ldrb	r3, [r4, #0]
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000b96:	b2d2      	uxtb	r2, r2
  if(RefTimerID != CurrentRunningTimerID)
 8000b98:	429a      	cmp	r2, r3
 8000b9a:	fb06 f302 	mul.w	r3, r6, r2
 8000b9e:	d00f      	beq.n	8000bc0 <HW_TS_Start+0x120>
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000ba0:	4423      	add	r3, r4
 8000ba2:	7e19      	ldrb	r1, [r3, #24]
 8000ba4:	b2c9      	uxtb	r1, r1
    aTimerContext[previous_id].NextID = TimerID;
 8000ba6:	fb06 4601 	mla	r6, r6, r1, r4
 8000baa:	7675      	strb	r5, [r6, #25]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000bac:	f889 2019 	strb.w	r2, [r9, #25]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000bb0:	f889 1018 	strb.w	r1, [r9, #24]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000bb4:	761d      	strb	r5, [r3, #24]
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000bb6:	7823      	ldrb	r3, [r4, #0]
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	7063      	strb	r3, [r4, #1]
      CurrentRunningTimerID = TimerID;
 8000bbc:	7025      	strb	r5, [r4, #0]
 8000bbe:	e7a3      	b.n	8000b08 <HW_TS_Start+0x68>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000bc0:	f889 2019 	strb.w	r2, [r9, #25]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000bc4:	4423      	add	r3, r4
 8000bc6:	e7f5      	b.n	8000bb4 <HW_TS_Start+0x114>
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8000bc8:	2318      	movs	r3, #24
 8000bca:	fb03 4405 	mla	r4, r3, r5, r4
 8000bce:	68e3      	ldr	r3, [r4, #12]
 8000bd0:	1a18      	subs	r0, r3, r0
 8000bd2:	60e0      	str	r0, [r4, #12]
 8000bd4:	e79e      	b.n	8000b14 <HW_TS_Start+0x74>
 8000bd6:	bf00      	nop
 8000bd8:	200000b0 	.word	0x200000b0
 8000bdc:	2000023c 	.word	0x2000023c

08000be0 <HW_TS_RTC_Int_AppNot>:
  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
  pTimerCallBack();
 8000be0:	4710      	bx	r2
	...

08000be4 <HW_TS_RTC_Wakeup_Handler>:
{
 8000be4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8000be8:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8000bec:	b672      	cpsid	i
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000bee:	4e2a      	ldr	r6, [pc, #168]	; (8000c98 <HW_TS_RTC_Wakeup_Handler+0xb4>)
 8000bf0:	6873      	ldr	r3, [r6, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f04f 0bca 	mov.w	fp, #202	; 0xca
 8000bf8:	f04f 0853 	mov.w	r8, #83	; 0x53
 8000bfc:	f8c3 b024 	str.w	fp, [r3, #36]	; 0x24
 8000c00:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 8000c04:	689a      	ldr	r2, [r3, #8]
 8000c06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000c0a:	609a      	str	r2, [r3, #8]
  local_current_running_timer_id = CurrentRunningTimerID;
 8000c0c:	4a23      	ldr	r2, [pc, #140]	; (8000c9c <HW_TS_RTC_Wakeup_Handler+0xb8>)
 8000c0e:	7814      	ldrb	r4, [r2, #0]
  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8000c10:	2518      	movs	r5, #24
  local_current_running_timer_id = CurrentRunningTimerID;
 8000c12:	b2e4      	uxtb	r4, r4
  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8000c14:	fb05 2504 	mla	r5, r5, r4, r2
 8000c18:	7c29      	ldrb	r1, [r5, #16]
 8000c1a:	2902      	cmp	r1, #2
 8000c1c:	d12f      	bne.n	8000c7e <HW_TS_RTC_Wakeup_Handler+0x9a>
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8000c1e:	f8d5 a004 	ldr.w	sl, [r5, #4]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8000c22:	f8d5 9014 	ldr.w	r9, [r5, #20]
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8000c26:	f892 3098 	ldrb.w	r3, [r2, #152]	; 0x98
 8000c2a:	b31b      	cbz	r3, 8000c74 <HW_TS_RTC_Wakeup_Handler+0x90>
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8000c2c:	7c69      	ldrb	r1, [r5, #17]
 8000c2e:	b2c9      	uxtb	r1, r1
 8000c30:	2901      	cmp	r1, #1
 8000c32:	d119      	bne.n	8000c68 <HW_TS_RTC_Wakeup_Handler+0x84>
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8000c34:	4620      	mov	r0, r4
 8000c36:	f7ff fd4f 	bl	80006d8 <UnlinkTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000c3a:	f387 8810 	msr	PRIMASK, r7
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8000c3e:	68a9      	ldr	r1, [r5, #8]
 8000c40:	4620      	mov	r0, r4
 8000c42:	f7ff ff2d 	bl	8000aa0 <HW_TS_Start>
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000c46:	6873      	ldr	r3, [r6, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8000c4a:	4652      	mov	r2, sl
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000c4c:	f8c3 b024 	str.w	fp, [r3, #36]	; 0x24
      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8000c50:	4621      	mov	r1, r4
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000c52:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8000c56:	4648      	mov	r0, r9
 8000c58:	f7ff ffc2 	bl	8000be0 <HW_TS_RTC_Int_AppNot>
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8000c5c:	6873      	ldr	r3, [r6, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	22ff      	movs	r2, #255	; 0xff
 8000c62:	625a      	str	r2, [r3, #36]	; 0x24
 8000c64:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c68:	f387 8810 	msr	PRIMASK, r7
        HW_TS_Stop(local_current_running_timer_id);
 8000c6c:	4620      	mov	r0, r4
 8000c6e:	f7ff fec1 	bl	80009f4 <HW_TS_Stop>
 8000c72:	e7e8      	b.n	8000c46 <HW_TS_RTC_Wakeup_Handler+0x62>
      RescheduleTimerList();
 8000c74:	f7ff fd82 	bl	800077c <RescheduleTimerList>
 8000c78:	f387 8810 	msr	PRIMASK, r7
 8000c7c:	e7ee      	b.n	8000c5c <HW_TS_RTC_Wakeup_Handler+0x78>
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000c7e:	68da      	ldr	r2, [r3, #12]
 8000c80:	0752      	lsls	r2, r2, #29
 8000c82:	d5fc      	bpl.n	8000c7e <HW_TS_RTC_Wakeup_Handler+0x9a>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000c84:	68da      	ldr	r2, [r3, #12]
 8000c86:	b2d2      	uxtb	r2, r2
 8000c88:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000c8c:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000c8e:	4b04      	ldr	r3, [pc, #16]	; (8000ca0 <HW_TS_RTC_Wakeup_Handler+0xbc>)
 8000c90:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000c94:	60da      	str	r2, [r3, #12]
 8000c96:	e7ef      	b.n	8000c78 <HW_TS_RTC_Wakeup_Handler+0x94>
 8000c98:	2000023c 	.word	0x2000023c
 8000c9c:	200000b0 	.word	0x200000b0
 8000ca0:	58000800 	.word	0x58000800

08000ca4 <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8000ca4:	b508      	push	{r3, lr}
HAL_StatusTypeDef hal_status = HAL_OK;
hw_status_t hw_status = hw_uart_ok;

    switch (hw_uart_id)
 8000ca6:	b118      	cbz	r0, 8000cb0 <HW_UART_Transmit_DMA+0xc>
 8000ca8:	2802      	cmp	r0, #2
 8000caa:	d010      	beq.n	8000cce <HW_UART_Transmit_DMA+0x2a>
HAL_StatusTypeDef hal_status = HAL_OK;
 8000cac:	2000      	movs	r0, #0
 8000cae:	e006      	b.n	8000cbe <HW_UART_Transmit_DMA+0x1a>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_huart1TxCb = cb;
 8000cb0:	4809      	ldr	r0, [pc, #36]	; (8000cd8 <HW_UART_Transmit_DMA+0x34>)
 8000cb2:	6003      	str	r3, [r0, #0]
            huart1.Instance = USART1;
 8000cb4:	4809      	ldr	r0, [pc, #36]	; (8000cdc <HW_UART_Transmit_DMA+0x38>)
 8000cb6:	4b0a      	ldr	r3, [pc, #40]	; (8000ce0 <HW_UART_Transmit_DMA+0x3c>)
#endif

#if (CFG_HW_LPUART1_ENABLED == 1)
        case hw_lpuart1:
            HW_hlpuart1TxCb = cb;
            hlpuart1.Instance = LPUART1;
 8000cb8:	6003      	str	r3, [r0, #0]
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
 8000cba:	f003 fce9 	bl	8004690 <HAL_UART_Transmit_DMA>
 8000cbe:	3801      	subs	r0, #1
 8000cc0:	b2c0      	uxtb	r0, r0
 8000cc2:	2802      	cmp	r0, #2
 8000cc4:	bf9a      	itte	ls
 8000cc6:	4b07      	ldrls	r3, [pc, #28]	; (8000ce4 <HW_UART_Transmit_DMA+0x40>)
 8000cc8:	5c18      	ldrbls	r0, [r3, r0]
HAL_StatusTypeDef hal_status = HAL_OK;
 8000cca:	2000      	movhi	r0, #0
        default:
            break;
    }

    return hw_status;
}
 8000ccc:	bd08      	pop	{r3, pc}
            HW_hlpuart1TxCb = cb;
 8000cce:	4806      	ldr	r0, [pc, #24]	; (8000ce8 <HW_UART_Transmit_DMA+0x44>)
 8000cd0:	6003      	str	r3, [r0, #0]
            hlpuart1.Instance = LPUART1;
 8000cd2:	4806      	ldr	r0, [pc, #24]	; (8000cec <HW_UART_Transmit_DMA+0x48>)
 8000cd4:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <HW_UART_Transmit_DMA+0x4c>)
 8000cd6:	e7ef      	b.n	8000cb8 <HW_UART_Transmit_DMA+0x14>
 8000cd8:	20001320 	.word	0x20001320
 8000cdc:	20001410 	.word	0x20001410
 8000ce0:	40013800 	.word	0x40013800
 8000ce4:	080064a8 	.word	0x080064a8
 8000ce8:	20001314 	.word	0x20001314
 8000cec:	20001324 	.word	0x20001324
 8000cf0:	40008000 	.word	0x40008000

08000cf4 <HAL_UART_TxCpltCallback>:
    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
    switch ((uint32_t)huart->Instance)
 8000cf4:	6803      	ldr	r3, [r0, #0]
 8000cf6:	4a07      	ldr	r2, [pc, #28]	; (8000d14 <HAL_UART_TxCpltCallback+0x20>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d007      	beq.n	8000d0c <HAL_UART_TxCpltCallback+0x18>
 8000cfc:	f502 4238 	add.w	r2, r2, #47104	; 0xb800
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d105      	bne.n	8000d10 <HAL_UART_TxCpltCallback+0x1c>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
                if(HW_huart1TxCb)
 8000d04:	4b04      	ldr	r3, [pc, #16]	; (8000d18 <HAL_UART_TxCpltCallback+0x24>)
        break;
#endif

#if (CFG_HW_LPUART1_ENABLED == 1)
        case (uint32_t)LPUART1:
                if(HW_hlpuart1TxCb)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	b113      	cbz	r3, 8000d10 <HAL_UART_TxCpltCallback+0x1c>
                {
                    HW_hlpuart1TxCb();
 8000d0a:	4718      	bx	r3
                if(HW_hlpuart1TxCb)
 8000d0c:	4b03      	ldr	r3, [pc, #12]	; (8000d1c <HAL_UART_TxCpltCallback+0x28>)
 8000d0e:	e7fa      	b.n	8000d06 <HAL_UART_TxCpltCallback+0x12>
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	40008000 	.word	0x40008000
 8000d18:	20001320 	.word	0x20001320
 8000d1c:	20001314 	.word	0x20001314

08000d20 <LL_AHB1_GRP1_EnableClock>:
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000d20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
{
 8000d24:	b082      	sub	sp, #8
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000d26:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000d28:	4302      	orrs	r2, r0
 8000d2a:	649a      	str	r2, [r3, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000d2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d2e:	4018      	ands	r0, r3
 8000d30:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 8000d32:	9b01      	ldr	r3, [sp, #4]
}
 8000d34:	b002      	add	sp, #8
 8000d36:	4770      	bx	lr

08000d38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d38:	b530      	push	{r4, r5, lr}
 8000d3a:	b0af      	sub	sp, #188	; 0xbc
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d3c:	2248      	movs	r2, #72	; 0x48
 8000d3e:	2100      	movs	r1, #0
 8000d40:	a808      	add	r0, sp, #32
 8000d42:	f004 fc0a 	bl	800555a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d46:	221c      	movs	r2, #28
 8000d48:	2100      	movs	r1, #0
 8000d4a:	a801      	add	r0, sp, #4
 8000d4c:	f004 fc05 	bl	800555a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d50:	2100      	movs	r1, #0
 8000d52:	2250      	movs	r2, #80	; 0x50
 8000d54:	a81a      	add	r0, sp, #104	; 0x68
 8000d56:	f004 fc00 	bl	800555a <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d5a:	4a1d      	ldr	r2, [pc, #116]	; (8000dd0 <SystemClock_Config+0x98>)
 8000d5c:	6813      	ldr	r3, [r2, #0]
 8000d5e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000d62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d66:	6013      	str	r3, [r2, #0]
 8000d68:	6813      	ldr	r3, [r2, #0]
 8000d6a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000d6e:	9300      	str	r3, [sp, #0]
 8000d70:	9b00      	ldr	r3, [sp, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 8000d72:	230b      	movs	r3, #11
 8000d74:	9308      	str	r3, [sp, #32]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d7a:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d80:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d82:	2340      	movs	r3, #64	; 0x40
 8000d84:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d86:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000d88:	2305      	movs	r3, #5
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d8a:	2400      	movs	r4, #0
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000d8c:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000d8e:	2502      	movs	r5, #2
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d90:	f002 fdb8 	bl	8003904 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000d94:	236f      	movs	r3, #111	; 0x6f
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d96:	2101      	movs	r1, #1
 8000d98:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000d9a:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000d9c:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d9e:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000da0:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000da2:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000da4:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000da6:	9407      	str	r4, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000da8:	f003 f86a 	bl	8003e80 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 8000dac:	f643 0303 	movw	r3, #14339	; 0x3803
 8000db0:	931a      	str	r3, [sp, #104]	; 0x68
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_LPUART1;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000db2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000db6:	932a      	str	r3, [sp, #168]	; 0xa8
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSI;
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000db8:	a81a      	add	r0, sp, #104	; 0x68
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSI;
 8000dba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000dbe:	9420      	str	r4, [sp, #128]	; 0x80
  PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000dc0:	9421      	str	r4, [sp, #132]	; 0x84
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSI;
 8000dc2:	932b      	str	r3, [sp, #172]	; 0xac
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8000dc4:	952c      	str	r5, [sp, #176]	; 0xb0
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8000dc6:	942d      	str	r4, [sp, #180]	; 0xb4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dc8:	f003 fa05 	bl	80041d6 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8000dcc:	b02f      	add	sp, #188	; 0xbc
 8000dce:	bd30      	pop	{r4, r5, pc}
 8000dd0:	58000400 	.word	0x58000400

08000dd4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8000dd4:	b538      	push	{r3, r4, r5, lr}
  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000dd6:	4a11      	ldr	r2, [pc, #68]	; (8000e1c <MX_USART1_UART_Init+0x48>)
  huart1.Instance = USART1;
 8000dd8:	4c11      	ldr	r4, [pc, #68]	; (8000e20 <MX_USART1_UART_Init+0x4c>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000dda:	2500      	movs	r5, #0
 8000ddc:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000de0:	e884 002c 	stmia.w	r4, {r2, r3, r5}
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000de4:	230c      	movs	r3, #12
 8000de6:	6163      	str	r3, [r4, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000de8:	4620      	mov	r0, r4
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8000dea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000dee:	61e3      	str	r3, [r4, #28]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000df0:	60e5      	str	r5, [r4, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000df2:	6125      	str	r5, [r4, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000df4:	61a5      	str	r5, [r4, #24]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000df6:	6225      	str	r5, [r4, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000df8:	6265      	str	r5, [r4, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dfa:	62a5      	str	r5, [r4, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000dfc:	f004 fa9c 	bl	8005338 <HAL_UART_Init>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e00:	4629      	mov	r1, r5
 8000e02:	4620      	mov	r0, r4
 8000e04:	f004 fb31 	bl	800546a <HAL_UARTEx_SetTxFifoThreshold>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e08:	4629      	mov	r1, r5
 8000e0a:	4620      	mov	r0, r4
 8000e0c:	f004 fb51 	bl	80054b2 <HAL_UARTEx_SetRxFifoThreshold>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000e10:	4620      	mov	r0, r4
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000e16:	f004 bb0d 	b.w	8005434 <HAL_UARTEx_DisableFifoMode>
 8000e1a:	bf00      	nop
 8000e1c:	40013800 	.word	0x40013800
 8000e20:	20001410 	.word	0x20001410

08000e24 <PeriphClock_Config>:
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8000e24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e28:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000e2c:	f042 0201 	orr.w	r2, r2, #1
 8000e30:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8000e34:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000e38:	0791      	lsls	r1, r2, #30
 8000e3a:	d5fb      	bpl.n	8000e34 <PeriphClock_Config+0x10>
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8000e3c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8000e40:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8000e44:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000e48:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8000e4c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8000e50:	f022 0201 	bic.w	r2, r2, #1
 8000e54:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8000e58:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8000e5c:	f042 0201 	orr.w	r2, r2, #1
 8000e60:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8000e64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e68:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8000e6c:	0792      	lsls	r2, r2, #30
 8000e6e:	d5fb      	bpl.n	8000e68 <PeriphClock_Config+0x44>
  *         @arg @ref LL_RCC_CLK48_CLKSOURCE_MSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetCLK48ClockSource(uint32_t CLK48xSource)
{
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8000e70:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000e74:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8000e78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8000e7c:	4770      	bx	lr
	...

08000e80 <main>:
{
 8000e80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8000e82:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
  HAL_Init();
 8000e86:	f002 f997 	bl	80031b8 <HAL_Init>
 8000e8a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000e8e:	015a      	lsls	r2, r3, #5
 8000e90:	f100 8084 	bmi.w	8000f9c <main+0x11c>
  * @retval None
*/
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8000e94:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
  WRITE_REG(IPCCx->C1SCR, Channel);
 8000e98:	223f      	movs	r2, #63	; 0x3f
 8000e9a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000e9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000ea0:	6523      	str	r3, [r4, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8000ea2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000ea4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ea8:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000eaa:	9b01      	ldr	r3, [sp, #4]
 8000eac:	4b46      	ldr	r3, [pc, #280]	; (8000fc8 <main+0x148>)
 8000eae:	609a      	str	r2, [r3, #8]
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
  WRITE_REG(IPCCx->C2SCR, Channel);
 8000eb0:	619a      	str	r2, [r3, #24]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8000eb2:	685a      	ldr	r2, [r3, #4]
 8000eb4:	f442 127c 	orr.w	r2, r2, #4128768	; 0x3f0000
 8000eb8:	605a      	str	r2, [r3, #4]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8000eba:	695a      	ldr	r2, [r3, #20]
 8000ebc:	f442 127c 	orr.w	r2, r2, #4128768	; 0x3f0000
 8000ec0:	615a      	str	r2, [r3, #20]
  SET_BIT(IPCCx->C1MR, Channel);
 8000ec2:	685a      	ldr	r2, [r3, #4]
 8000ec4:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 8000ec8:	605a      	str	r2, [r3, #4]
  SET_BIT(IPCCx->C2MR, Channel);
 8000eca:	695a      	ldr	r2, [r3, #20]
 8000ecc:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 8000ed0:	615a      	str	r2, [r3, #20]
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8000ed2:	2000      	movs	r0, #0
 8000ed4:	f001 fb6e 	bl	80025b4 <OTP_Read>
  if (p_otp)
 8000ed8:	b158      	cbz	r0, 8000ef2 <main+0x72>
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000eda:	4b3c      	ldr	r3, [pc, #240]	; (8000fcc <main+0x14c>)
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8000edc:	7982      	ldrb	r2, [r0, #6]
 8000ede:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000ee2:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8000ee6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8000eea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000eee:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
  SystemClock_Config();
 8000ef2:	f7ff ff21 	bl	8000d38 <SystemClock_Config>
  PeriphClock_Config();
 8000ef6:	f7ff ff95 	bl	8000e24 <PeriphClock_Config>
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8000efa:	4b35      	ldr	r3, [pc, #212]	; (8000fd0 <main+0x150>)
  hrtc.Instance = RTC;
 8000efc:	4d35      	ldr	r5, [pc, #212]	; (8000fd4 <main+0x154>)
 8000efe:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000f02:	2400      	movs	r4, #0
 8000f04:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8000f08:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000f0c:	f002 0250 	and.w	r2, r2, #80	; 0x50
 8000f10:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000f14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000f18:	2004      	movs	r0, #4
 8000f1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f1c:	f042 0201 	orr.w	r2, r2, #1
 8000f20:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000f22:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f24:	f002 0201 	and.w	r2, r2, #1
 8000f28:	9203      	str	r2, [sp, #12]
  (void)tmpreg;
 8000f2a:	9a03      	ldr	r2, [sp, #12]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000f2c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f2e:	f042 0202 	orr.w	r2, r2, #2
 8000f32:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f36:	f003 0302 	and.w	r3, r3, #2
 8000f3a:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8000f3c:	9b02      	ldr	r3, [sp, #8]
 8000f3e:	f7ff feef 	bl	8000d20 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f42:	2001      	movs	r0, #1
 8000f44:	f7ff feec 	bl	8000d20 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000f48:	2002      	movs	r0, #2
 8000f4a:	f7ff fee9 	bl	8000d20 <LL_AHB1_GRP1_EnableClock>
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 15, 0);
 8000f4e:	4622      	mov	r2, r4
 8000f50:	210f      	movs	r1, #15
 8000f52:	200e      	movs	r0, #14
 8000f54:	f002 f978 	bl	8003248 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000f58:	200e      	movs	r0, #14
 8000f5a:	f002 f9a9 	bl	80032b0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 15, 0);
 8000f5e:	4622      	mov	r2, r4
 8000f60:	210f      	movs	r1, #15
 8000f62:	203a      	movs	r0, #58	; 0x3a
 8000f64:	f002 f970 	bl	8003248 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8000f68:	203a      	movs	r0, #58	; 0x3a
 8000f6a:	f002 f9a1 	bl	80032b0 <HAL_NVIC_EnableIRQ>
  hrtc.Instance = RTC;
 8000f6e:	481a      	ldr	r0, [pc, #104]	; (8000fd8 <main+0x158>)
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8000f70:	230f      	movs	r3, #15
 8000f72:	6083      	str	r3, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 8000f74:	23ff      	movs	r3, #255	; 0xff
 8000f76:	60c3      	str	r3, [r0, #12]
  hrtc.Instance = RTC;
 8000f78:	6005      	str	r5, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000f7a:	6044      	str	r4, [r0, #4]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000f7c:	6104      	str	r4, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000f7e:	6184      	str	r4, [r0, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000f80:	61c4      	str	r4, [r0, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000f82:	f003 fafc 	bl	800457e <HAL_RTC_Init>
  MODIFY_REG(RTC->CR, RTC_CR_WUCKSEL, CFG_RTC_WUCKSEL_DIVIDER);
 8000f86:	68ab      	ldr	r3, [r5, #8]
 8000f88:	f023 0307 	bic.w	r3, r3, #7
 8000f8c:	60ab      	str	r3, [r5, #8]
  APPE_Init();
 8000f8e:	f7ff fb05 	bl	800059c <APPE_Init>
		SCH_Run(~0);
 8000f92:	f04f 30ff 	mov.w	r0, #4294967295
 8000f96:	f001 fc7d 	bl	8002894 <SCH_Run>
 8000f9a:	e7fa      	b.n	8000f92 <main+0x112>
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 8000f9c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000fa0:	00db      	lsls	r3, r3, #3
 8000fa2:	f53f af77 	bmi.w	8000e94 <main+0x14>

static void Reset_BackupDomain( void )
{
	if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
	{
		HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8000fa6:	f002 fbf3 	bl	8003790 <HAL_PWR_EnableBkUpAccess>

		/**
		 *  Write twice the value to flush the APB-AHB bridge
		 *  This bit shall be written in the register before writing the next one
		 */
		HAL_PWR_EnableBkUpAccess();
 8000faa:	f002 fbf1 	bl	8003790 <HAL_PWR_EnableBkUpAccess>
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000fae:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000fb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fb6:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000fba:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000fbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fc2:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8000fc6:	e765      	b.n	8000e94 <main+0x14>
 8000fc8:	58000c00 	.word	0x58000c00
 8000fcc:	cafecafe 	.word	0xcafecafe
 8000fd0:	58000800 	.word	0x58000800
 8000fd4:	40002800 	.word	0x40002800
 8000fd8:	2000149c 	.word	0x2000149c

08000fdc <HAL_InitTick>:
 * This function is empty to avoid starting the SysTick Timer
 */
HAL_StatusTypeDef HAL_InitTick( uint32_t TickPriority )
{
	return (HAL_OK);
}
 8000fdc:	2000      	movs	r0, #0
 8000fde:	4770      	bx	lr

08000fe0 <HAL_Delay>:

/**
 * This function is empty as the SysTick Timer is not used
 */
void HAL_Delay(__IO uint32_t Delay)
{
 8000fe0:	b082      	sub	sp, #8
 8000fe2:	9001      	str	r0, [sp, #4]
	return;
}
 8000fe4:	b002      	add	sp, #8
 8000fe6:	4770      	bx	lr

08000fe8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fe8:	4770      	bx	lr

08000fea <LL_AHB2_GRP1_EnableClock>:
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000fea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
{
 8000fee:	b082      	sub	sp, #8
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000ff0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ff2:	4302      	orrs	r2, r0
 8000ff4:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000ff6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff8:	4018      	ands	r0, r3
 8000ffa:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 8000ffc:	9b01      	ldr	r3, [sp, #4]
}
 8000ffe:	b002      	add	sp, #8
 8001000:	4770      	bx	lr

08001002 <HAL_MspInit>:
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001002:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001006:	b082      	sub	sp, #8
 8001008:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800100a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800100e:	651a      	str	r2, [r3, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001010:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001012:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001016:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001018:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800101a:	b002      	add	sp, #8
 800101c:	4770      	bx	lr
	...

08001020 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001020:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001022:	4606      	mov	r6, r0
 8001024:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001026:	2214      	movs	r2, #20
 8001028:	2100      	movs	r1, #0
 800102a:	a803      	add	r0, sp, #12
 800102c:	f004 fa95 	bl	800555a <memset>
  if(huart->Instance==LPUART1)
 8001030:	6833      	ldr	r3, [r6, #0]
 8001032:	4a4a      	ldr	r2, [pc, #296]	; (800115c <HAL_UART_MspInit+0x13c>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d146      	bne.n	80010c6 <HAL_UART_MspInit+0xa6>
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8001038:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800103c:	2001      	movs	r0, #1
 800103e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001040:	f042 0201 	orr.w	r2, r2, #1
 8001044:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8001046:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001048:	f003 0301 	and.w	r3, r3, #1
 800104c:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800104e:	9b01      	ldr	r3, [sp, #4]
 8001050:	f7ff ffcb 	bl	8000fea <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration    
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    PA6     ------> LPUART1_CTS 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001054:	230c      	movs	r3, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2500      	movs	r5, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001058:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800105a:	2408      	movs	r4, #8
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800105c:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105e:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001060:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001062:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001066:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001068:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800106a:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106c:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106e:	f002 facb 	bl	8003608 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001072:	2340      	movs	r3, #64	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001074:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001078:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800107a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107c:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800107e:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001080:	9505      	str	r5, [sp, #20]

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel4;
 8001082:	4c37      	ldr	r4, [pc, #220]	; (8001160 <HAL_UART_MspInit+0x140>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001084:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001086:	f002 fabf 	bl	8003608 <HAL_GPIO_Init>
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800108a:	4836      	ldr	r0, [pc, #216]	; (8001164 <HAL_UART_MspInit+0x144>)
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800108c:	60e5      	str	r5, [r4, #12]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800108e:	2311      	movs	r3, #17
 8001090:	2710      	movs	r7, #16
 8001092:	e884 0089 	stmia.w	r4, {r0, r3, r7}
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001096:	2380      	movs	r3, #128	; 0x80
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8001098:	4620      	mov	r0, r4
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800109a:	6123      	str	r3, [r4, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800109c:	6165      	str	r5, [r4, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800109e:	61a5      	str	r5, [r4, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 80010a0:	61e5      	str	r5, [r4, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80010a2:	6225      	str	r5, [r4, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 80010a4:	f002 f97c 	bl	80033a0 <HAL_DMA_Init>
 80010a8:	b108      	cbz	r0, 80010ae <HAL_UART_MspInit+0x8e>
    {
      Error_Handler();
 80010aa:	f7ff ff9d 	bl	8000fe8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80010ae:	2200      	movs	r2, #0
 80010b0:	2025      	movs	r0, #37	; 0x25
    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 80010b2:	6774      	str	r4, [r6, #116]	; 0x74
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80010b4:	4611      	mov	r1, r2
    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 80010b6:	62a6      	str	r6, [r4, #40]	; 0x28
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80010b8:	f002 f8c6 	bl	8003248 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80010bc:	2025      	movs	r0, #37	; 0x25

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80010be:	f002 f8f7 	bl	80032b0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80010c2:	b009      	add	sp, #36	; 0x24
 80010c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(huart->Instance==USART1)
 80010c6:	4a28      	ldr	r2, [pc, #160]	; (8001168 <HAL_UART_MspInit+0x148>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d1fa      	bne.n	80010c2 <HAL_UART_MspInit+0xa2>
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80010cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d0:	2001      	movs	r0, #1
 80010d2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80010d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80010d8:	661a      	str	r2, [r3, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80010da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010e0:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 80010e2:	9b02      	ldr	r3, [sp, #8]
 80010e4:	f7ff ff81 	bl	8000fea <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e8:	2002      	movs	r0, #2
 80010ea:	f7ff ff7e 	bl	8000fea <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ee:	2500      	movs	r5, #0
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80010f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010f4:	2407      	movs	r4, #7
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f6:	2702      	movs	r7, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f8:	a903      	add	r1, sp, #12
 80010fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80010fe:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001100:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001102:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001104:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001106:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001108:	f002 fa7e 	bl	8003608 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800110c:	23c0      	movs	r3, #192	; 0xc0
 800110e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001110:	2301      	movs	r3, #1
 8001112:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001114:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001116:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001118:	4814      	ldr	r0, [pc, #80]	; (800116c <HAL_UART_MspInit+0x14c>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800111a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800111c:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111e:	9704      	str	r7, [sp, #16]
    hdma_usart1_tx.Instance = DMA2_Channel4;
 8001120:	4c13      	ldr	r4, [pc, #76]	; (8001170 <HAL_UART_MspInit+0x150>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001122:	f002 fa71 	bl	8003608 <HAL_GPIO_Init>
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001126:	4913      	ldr	r1, [pc, #76]	; (8001174 <HAL_UART_MspInit+0x154>)
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001128:	60e5      	str	r5, [r4, #12]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800112a:	2310      	movs	r3, #16
 800112c:	220f      	movs	r2, #15
 800112e:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001132:	4620      	mov	r0, r4
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001134:	2380      	movs	r3, #128	; 0x80
 8001136:	6123      	str	r3, [r4, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001138:	6165      	str	r5, [r4, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800113a:	61a5      	str	r5, [r4, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800113c:	61e5      	str	r5, [r4, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800113e:	6225      	str	r5, [r4, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001140:	f002 f92e 	bl	80033a0 <HAL_DMA_Init>
 8001144:	b108      	cbz	r0, 800114a <HAL_UART_MspInit+0x12a>
      Error_Handler();
 8001146:	f7ff ff4f 	bl	8000fe8 <Error_Handler>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800114a:	2200      	movs	r2, #0
 800114c:	2024      	movs	r0, #36	; 0x24
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800114e:	6774      	str	r4, [r6, #116]	; 0x74
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001150:	4611      	mov	r1, r2
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001152:	62a6      	str	r6, [r4, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001154:	f002 f878 	bl	8003248 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001158:	2024      	movs	r0, #36	; 0x24
 800115a:	e7b0      	b.n	80010be <HAL_UART_MspInit+0x9e>
 800115c:	40008000 	.word	0x40008000
 8001160:	200014c0 	.word	0x200014c0
 8001164:	40020044 	.word	0x40020044
 8001168:	40013800 	.word	0x40013800
 800116c:	48000400 	.word	0x48000400
 8001170:	200013b0 	.word	0x200013b0
 8001174:	40020444 	.word	0x40020444

08001178 <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 8001178:	6802      	ldr	r2, [r0, #0]
 800117a:	4b0f      	ldr	r3, [pc, #60]	; (80011b8 <HAL_RTC_MspInit+0x40>)
 800117c:	429a      	cmp	r2, r3
{
 800117e:	b510      	push	{r4, lr}
 8001180:	4604      	mov	r4, r0
  if(hrtc->Instance==RTC)
 8001182:	d118      	bne.n	80011b6 <HAL_RTC_MspInit+0x3e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */
  HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8001184:	f002 fb04 	bl	8003790 <HAL_PWR_EnableBkUpAccess>

  /**
  *  Write twice the value to flush the APB-AHB bridge
  *  This bit shall be written in the register before writing the next one
  */
  HAL_PWR_EnableBkUpAccess();
 8001188:	f002 fb02 	bl	8003790 <HAL_PWR_EnableBkUpAccess>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800118c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
  __HAL_RCC_RTC_CONFIG(RCC_RTCCLKSOURCE_LSE); /**< Select LSI as RTC Input */
  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
  /* USER CODE BEGIN RTC_MspInit 1 */
  HAL_RTCEx_EnableBypassShadow(hrtc);
 8001190:	4620      	mov	r0, r4
 8001192:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001196:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800119a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800119e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80011a2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80011a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE END RTC_MspInit 1 */
  }

}
 80011ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_RTCEx_EnableBypassShadow(hrtc);
 80011b2:	f003 ba40 	b.w	8004636 <HAL_RTCEx_EnableBypassShadow>
 80011b6:	bd10      	pop	{r4, pc}
 80011b8:	40002800 	.word	0x40002800

080011bc <NMI_Handler>:
 80011bc:	4770      	bx	lr

080011be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011be:	e7fe      	b.n	80011be <HardFault_Handler>

080011c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011c0:	e7fe      	b.n	80011c0 <MemManage_Handler>

080011c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011c2:	e7fe      	b.n	80011c2 <BusFault_Handler>

080011c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011c4:	e7fe      	b.n	80011c4 <UsageFault_Handler>

080011c6 <SVC_Handler>:
 80011c6:	4770      	bx	lr

080011c8 <DebugMon_Handler>:
 80011c8:	4770      	bx	lr

080011ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011ca:	4770      	bx	lr

080011cc <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011cc:	f002 b80a 	b.w	80031e4 <HAL_IncTick>

080011d0 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 80011d0:	4801      	ldr	r0, [pc, #4]	; (80011d8 <DMA1_Channel4_IRQHandler+0x8>)
 80011d2:	f002 b9ce 	b.w	8003572 <HAL_DMA_IRQHandler>
 80011d6:	bf00      	nop
 80011d8:	200014c0 	.word	0x200014c0

080011dc <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80011dc:	4801      	ldr	r0, [pc, #4]	; (80011e4 <USART1_IRQHandler+0x8>)
 80011de:	f003 baeb 	b.w	80047b8 <HAL_UART_IRQHandler>
 80011e2:	bf00      	nop
 80011e4:	20001410 	.word	0x20001410

080011e8 <LPUART1_IRQHandler>:
void LPUART1_IRQHandler(void)
{
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80011e8:	4801      	ldr	r0, [pc, #4]	; (80011f0 <LPUART1_IRQHandler+0x8>)
 80011ea:	f003 bae5 	b.w	80047b8 <HAL_UART_IRQHandler>
 80011ee:	bf00      	nop
 80011f0:	20001324 	.word	0x20001324

080011f4 <DMA2_Channel4_IRQHandler>:
void DMA2_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80011f4:	4801      	ldr	r0, [pc, #4]	; (80011fc <DMA2_Channel4_IRQHandler+0x8>)
 80011f6:	f002 b9bc 	b.w	8003572 <HAL_DMA_IRQHandler>
 80011fa:	bf00      	nop
 80011fc:	200013b0 	.word	0x200013b0

08001200 <EXTI4_IRQHandler>:
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW1_EXTI_IRQHandler(void)
{
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW1_PIN);
 8001200:	2010      	movs	r0, #16
 8001202:	f002 bab9 	b.w	8003778 <HAL_GPIO_EXTI_IRQHandler>

08001206 <EXTI0_IRQHandler>:
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW2_EXTI_IRQHandler(void)
{
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW2_PIN);
 8001206:	2001      	movs	r0, #1
 8001208:	f002 bab6 	b.w	8003778 <HAL_GPIO_EXTI_IRQHandler>

0800120c <RTC_WKUP_IRQHandler>:
}

void RTC_WKUP_IRQHandler(void)
{
  HW_TS_RTC_Wakeup_Handler();
 800120c:	f7ff bcea 	b.w	8000be4 <HW_TS_RTC_Wakeup_Handler>

08001210 <IPCC_C1_TX_IRQHandler>:
}

void IPCC_C1_TX_IRQHandler(void)
{
  HW_IPCC_Tx_Handler();
 8001210:	f000 bb6e 	b.w	80018f0 <HW_IPCC_Tx_Handler>

08001214 <IPCC_C1_RX_IRQHandler>:
  return;
}

void IPCC_C1_RX_IRQHandler(void)
{
  HW_IPCC_Rx_Handler();
 8001214:	f000 bbcc 	b.w	80019b0 <HW_IPCC_Rx_Handler>

08001218 <Switch_OFF_GPIO>:
  return;
}

static void Switch_OFF_GPIO(){
/* USER CODE BEGIN Switch_OFF_GPIO */
  BSP_LED_Off(LED_GREEN);
 8001218:	2001      	movs	r0, #1
 800121a:	f000 bc35 	b.w	8001a88 <BSP_LED_Off>

0800121e <Adv_Cancel_Req>:
  SCH_SetTask(1 << CFG_TASK_ADV_CANCEL_ID, CFG_SCH_PRIO_0);
 800121e:	2100      	movs	r1, #0
 8001220:	2001      	movs	r0, #1
 8001222:	f001 baff 	b.w	8002824 <SCH_SetTask>

08001226 <BLE_UserEvtRx>:
  SCH_WaitEvt(1 << CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
  return;
}

static void BLE_UserEvtRx( void * pPayload )
{
 8001226:	b510      	push	{r4, lr}
 8001228:	4604      	mov	r4, r0
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload; 

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 800122a:	6840      	ldr	r0, [r0, #4]
 800122c:	3008      	adds	r0, #8
 800122e:	f001 fe73 	bl	8002f18 <SVCCTL_UserEvtRx>
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8001232:	b110      	cbz	r0, 800123a <BLE_UserEvtRx+0x14>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 8001234:	2301      	movs	r3, #1
 8001236:	7023      	strb	r3, [r4, #0]
 8001238:	bd10      	pop	{r4, pc}
  }
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
 800123a:	7020      	strb	r0, [r4, #0]
 800123c:	bd10      	pop	{r4, pc}

0800123e <BLE_StatusNot>:
}

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
  uint32_t task_id_list;
  switch (status)
 800123e:	b110      	cbz	r0, 8001246 <BLE_StatusNot+0x8>
 8001240:	2801      	cmp	r0, #1
 8001242:	d003      	beq.n	800124c <BLE_StatusNot+0xe>
 8001244:	4770      	bx	lr
      /**
       * All tasks that may send an aci/hci commands shall be listed here
       * This is to prevent a new command is sent while one is already pending
       */
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
      SCH_PauseTask(task_id_list);
 8001246:	2007      	movs	r0, #7
 8001248:	f001 bafe 	b.w	8002848 <SCH_PauseTask>
      /**
       * All tasks that may send an aci/hci commands shall be listed here
       * This is to prevent a new command is sent while one is already pending
       */
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
      SCH_ResumeTask(task_id_list);
 800124c:	2007      	movs	r0, #7
 800124e:	f001 bb09 	b.w	8002864 <SCH_ResumeTask>
	...

08001254 <Adv_Cancel>:
{
 8001254:	b510      	push	{r4, lr}
  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 8001256:	4c0c      	ldr	r4, [pc, #48]	; (8001288 <Adv_Cancel+0x34>)
  BSP_LED_Off(LED_GREEN);
 8001258:	2001      	movs	r0, #1
 800125a:	f000 fc15 	bl	8001a88 <BSP_LED_Off>
  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800125e:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
 8001262:	2b05      	cmp	r3, #5
 8001264:	d00f      	beq.n	8001286 <Adv_Cancel+0x32>
    result = aci_gap_set_non_discoverable();
 8001266:	f000 fcf1 	bl	8001c4c <aci_gap_set_non_discoverable>
    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800126a:	2300      	movs	r3, #0
 800126c:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    if (result == BLE_STATUS_SUCCESS)
 8001270:	b938      	cbnz	r0, 8001282 <Adv_Cancel+0x2e>
      APP_DBG_MSG("  \r\n\r");APP_DBG_MSG("** STOP ADVERTISING **  \r\n\r");
 8001272:	4806      	ldr	r0, [pc, #24]	; (800128c <Adv_Cancel+0x38>)
 8001274:	f004 f97a 	bl	800556c <iprintf>
 8001278:	4805      	ldr	r0, [pc, #20]	; (8001290 <Adv_Cancel+0x3c>)
}
 800127a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      APP_DBG_MSG("** STOP ADVERTISING **  Failed \r\n\r");
 800127e:	f004 b975 	b.w	800556c <iprintf>
 8001282:	4804      	ldr	r0, [pc, #16]	; (8001294 <Adv_Cancel+0x40>)
 8001284:	e7f9      	b.n	800127a <Adv_Cancel+0x26>
 8001286:	bd10      	pop	{r4, pc}
 8001288:	2000014c 	.word	0x2000014c
 800128c:	0800665e 	.word	0x0800665e
 8001290:	08006648 	.word	0x08006648
 8001294:	08006664 	.word	0x08006664

08001298 <Adv_Request.constprop.2>:
static void Adv_Request(APP_BLE_ConnStatus_t New_Status)
 8001298:	b570      	push	{r4, r5, r6, lr}
    Min_Inter = AdvIntervalMin;
 800129a:	4c1e      	ldr	r4, [pc, #120]	; (8001314 <Adv_Request.constprop.2+0x7c>)
static void Adv_Request(APP_BLE_ConnStatus_t New_Status)
 800129c:	b088      	sub	sp, #32
    HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 800129e:	f894 0091 	ldrb.w	r0, [r4, #145]	; 0x91
    Min_Inter = AdvIntervalMin;
 80012a2:	f8b4 5094 	ldrh.w	r5, [r4, #148]	; 0x94
    Max_Inter = AdvIntervalMax;
 80012a6:	f8b4 6096 	ldrh.w	r6, [r4, #150]	; 0x96
    HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 80012aa:	f7ff fba3 	bl	80009f4 <HW_TS_Stop>
    APP_DBG_MSG("First index in %d state \n",
 80012ae:	f894 1090 	ldrb.w	r1, [r4, #144]	; 0x90
 80012b2:	4819      	ldr	r0, [pc, #100]	; (8001318 <Adv_Request.constprop.2+0x80>)
 80012b4:	f004 f95a 	bl	800556c <iprintf>
    ret = aci_gap_set_discoverable(
 80012b8:	f104 0229 	add.w	r2, r4, #41	; 0x29
 80012bc:	9204      	str	r2, [sp, #16]
 80012be:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 80012c2:	9203      	str	r2, [sp, #12]
    BleApplicationContext.Device_Connection_Status = New_Status;
 80012c4:	2301      	movs	r3, #1
    ret = aci_gap_set_discoverable(
 80012c6:	4a15      	ldr	r2, [pc, #84]	; (800131c <Adv_Request.constprop.2+0x84>)
    BleApplicationContext.Device_Connection_Status = New_Status;
 80012c8:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    ret = aci_gap_set_discoverable(
 80012cc:	9202      	str	r2, [sp, #8]
 80012ce:	2300      	movs	r3, #0
 80012d0:	2208      	movs	r2, #8
 80012d2:	9306      	str	r3, [sp, #24]
 80012d4:	9305      	str	r3, [sp, #20]
 80012d6:	9201      	str	r2, [sp, #4]
 80012d8:	9300      	str	r3, [sp, #0]
 80012da:	4632      	mov	r2, r6
 80012dc:	4629      	mov	r1, r5
 80012de:	4618      	mov	r0, r3
 80012e0:	f000 fcd4 	bl	8001c8c <aci_gap_set_discoverable>
    ret = aci_gap_update_adv_data(sizeof(manuf_data), (uint8_t*) manuf_data);
 80012e4:	490e      	ldr	r1, [pc, #56]	; (8001320 <Adv_Request.constprop.2+0x88>)
 80012e6:	200e      	movs	r0, #14
 80012e8:	f000 fdd4 	bl	8001e94 <aci_gap_update_adv_data>
     if (ret == BLE_STATUS_SUCCESS)
 80012ec:	4601      	mov	r1, r0
 80012ee:	b950      	cbnz	r0, 8001306 <Adv_Request.constprop.2+0x6e>
        APP_DBG_MSG("Successfully Start Fast Advertising\n" );
 80012f0:	480c      	ldr	r0, [pc, #48]	; (8001324 <Adv_Request.constprop.2+0x8c>)
 80012f2:	f004 f9af 	bl	8005654 <puts>
        HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 80012f6:	490c      	ldr	r1, [pc, #48]	; (8001328 <Adv_Request.constprop.2+0x90>)
 80012f8:	f894 0091 	ldrb.w	r0, [r4, #145]	; 0x91
}
 80012fc:	b008      	add	sp, #32
 80012fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 8001302:	f7ff bbcd 	b.w	8000aa0 <HW_TS_Start>
        APP_DBG_MSG("Start Fast Advertising Failed , result: %d \n", ret);
 8001306:	4809      	ldr	r0, [pc, #36]	; (800132c <Adv_Request.constprop.2+0x94>)
}
 8001308:	b008      	add	sp, #32
 800130a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        APP_DBG_MSG("Start Fast Advertising Failed , result: %d \n", ret);
 800130e:	f004 b92d 	b.w	800556c <iprintf>
 8001312:	bf00      	nop
 8001314:	2000014c 	.word	0x2000014c
 8001318:	08006687 	.word	0x08006687
 800131c:	080064ab 	.word	0x080064ab
 8001320:	20000004 	.word	0x20000004
 8001324:	080066a1 	.word	0x080066a1
 8001328:	0001e046 	.word	0x0001e046
 800132c:	080066c5 	.word	0x080066c5

08001330 <APP_BLE_Init>:
{
 8001330:	b570      	push	{r4, r5, r6, lr}
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8001332:	4b76      	ldr	r3, [pc, #472]	; (800150c <APP_BLE_Init+0x1dc>)
{
 8001334:	b096      	sub	sp, #88	; 0x58
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8001336:	aa0a      	add	r2, sp, #40	; 0x28
 8001338:	f103 0628 	add.w	r6, r3, #40	; 0x28
 800133c:	4615      	mov	r5, r2
 800133e:	6818      	ldr	r0, [r3, #0]
 8001340:	6859      	ldr	r1, [r3, #4]
 8001342:	4614      	mov	r4, r2
 8001344:	c403      	stmia	r4!, {r0, r1}
 8001346:	3308      	adds	r3, #8
 8001348:	42b3      	cmp	r3, r6
 800134a:	4622      	mov	r2, r4
 800134c:	d1f7      	bne.n	800133e <APP_BLE_Init+0xe>
 800134e:	6818      	ldr	r0, [r3, #0]
 8001350:	791b      	ldrb	r3, [r3, #4]
 8001352:	7123      	strb	r3, [r4, #4]
  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8001354:	4b6e      	ldr	r3, [pc, #440]	; (8001510 <APP_BLE_Init+0x1e0>)
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8001356:	6020      	str	r0, [r4, #0]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8001358:	a908      	add	r1, sp, #32
  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800135a:	9308      	str	r3, [sp, #32]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800135c:	486d      	ldr	r0, [pc, #436]	; (8001514 <APP_BLE_Init+0x1e4>)
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800135e:	4b6e      	ldr	r3, [pc, #440]	; (8001518 <APP_BLE_Init+0x1e8>)
 8001360:	9309      	str	r3, [sp, #36]	; 0x24
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8001362:	f001 f857 	bl	8002414 <hci_init>
  LPM_SetOffMode(1 << CFG_LPM_APP_BLE, LPM_OffMode_Dis);
 8001366:	2100      	movs	r1, #0
 8001368:	2002      	movs	r0, #2
 800136a:	f001 f90b 	bl	8002584 <LPM_SetOffMode>
  SCH_RegTask(CFG_TASK_HCI_ASYNCH_EVT_ID, hci_user_evt_proc);
 800136e:	496b      	ldr	r1, [pc, #428]	; (800151c <APP_BLE_Init+0x1ec>)
 8001370:	2002      	movs	r0, #2
 8001372:	f001 fa4b 	bl	800280c <SCH_RegTask>
  SHCI_C2_BLE_Init( &ble_init_cmd_packet );
 8001376:	4628      	mov	r0, r5
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8001378:	4d69      	ldr	r5, [pc, #420]	; (8001520 <APP_BLE_Init+0x1f0>)
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE }; 
 800137a:	2400      	movs	r4, #0
  SHCI_C2_BLE_Init( &ble_init_cmd_packet );
 800137c:	f001 faea 	bl	8002954 <SHCI_C2_BLE_Init>
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE }; 
 8001380:	f8ad 4018 	strh.w	r4, [sp, #24]
  hci_reset();
 8001384:	f000 ff4c 	bl	8002220 <hci_reset>
 8001388:	682b      	ldr	r3, [r5, #0]
  if(udn != 0xFFFFFFFF)
 800138a:	1c5a      	adds	r2, r3, #1
 800138c:	f000 80b6 	beq.w	80014fc <APP_BLE_Init+0x1cc>
  *         For STM32WBxxxx devices, the ST Compagny ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Compagny ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 8001390:	4a64      	ldr	r2, [pc, #400]	; (8001524 <APP_BLE_Init+0x1f4>)
    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 8001392:	4c65      	ldr	r4, [pc, #404]	; (8001528 <APP_BLE_Init+0x1f8>)
 8001394:	6812      	ldr	r2, [r2, #0]
 8001396:	7023      	strb	r3, [r4, #0]
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 8001398:	0a19      	lsrs	r1, r3, #8
    bd_addr_udn[2] = (uint8_t)( (udn & 0x00FF0000) >> 16 );
 800139a:	0c1b      	lsrs	r3, r3, #16
 800139c:	70a3      	strb	r3, [r4, #2]
    bd_addr_udn[3] = (uint8_t)device_id;
 800139e:	70e2      	strb	r2, [r4, #3]
 80013a0:	0a13      	lsrs	r3, r2, #8
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 80013a2:	0c12      	lsrs	r2, r2, #16
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 80013a4:	7061      	strb	r1, [r4, #1]
    bd_addr_udn[4] = (uint8_t)(company_id & 0x000000FF);;
 80013a6:	7123      	strb	r3, [r4, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 80013a8:	7162      	strb	r2, [r4, #5]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 80013aa:	4622      	mov	r2, r4
 80013ac:	2106      	movs	r1, #6
 80013ae:	2000      	movs	r0, #0
 80013b0:	f000 febc 	bl	800212c <aci_hal_write_config_data>
  manuf_data[ sizeof(manuf_data)-6] = bd_addr[5];
 80013b4:	4b5d      	ldr	r3, [pc, #372]	; (800152c <APP_BLE_Init+0x1fc>)
 80013b6:	7962      	ldrb	r2, [r4, #5]
 80013b8:	721a      	strb	r2, [r3, #8]
  manuf_data[ sizeof(manuf_data)-5] = bd_addr[4];
 80013ba:	7922      	ldrb	r2, [r4, #4]
 80013bc:	725a      	strb	r2, [r3, #9]
  manuf_data[ sizeof(manuf_data)-4] = bd_addr[3];
 80013be:	78e2      	ldrb	r2, [r4, #3]
 80013c0:	729a      	strb	r2, [r3, #10]
  manuf_data[ sizeof(manuf_data)-3] = bd_addr[2];
 80013c2:	78a2      	ldrb	r2, [r4, #2]
 80013c4:	72da      	strb	r2, [r3, #11]
  manuf_data[ sizeof(manuf_data)-2] = bd_addr[1];
 80013c6:	7862      	ldrb	r2, [r4, #1]
 80013c8:	731a      	strb	r2, [r3, #12]
  manuf_data[ sizeof(manuf_data)-1] = bd_addr[0];
 80013ca:	7822      	ldrb	r2, [r4, #0]
 80013cc:	735a      	strb	r2, [r3, #13]
  srd_bd_addr[1] =  0x0000ED6E;
 80013ce:	f64e 536e 	movw	r3, #60782	; 0xed6e
 80013d2:	9309      	str	r3, [sp, #36]	; 0x24
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 80013d4:	682b      	ldr	r3, [r5, #0]
  srd_bd_addr[0] =  LL_FLASH_GetUDN( );
 80013d6:	9308      	str	r3, [sp, #32]
  aci_hal_write_config_data( CONFIG_DATA_RANDOM_ADDRESS_OFFSET, CONFIG_DATA_RANDOM_ADDRESS_LEN, (uint8_t*)srd_bd_addr );
 80013d8:	aa08      	add	r2, sp, #32
 80013da:	2106      	movs	r1, #6
 80013dc:	202e      	movs	r0, #46	; 0x2e
 80013de:	f000 fea5 	bl	800212c <aci_hal_write_config_data>
    aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 80013e2:	4a53      	ldr	r2, [pc, #332]	; (8001530 <APP_BLE_Init+0x200>)
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 80013e4:	4d53      	ldr	r5, [pc, #332]	; (8001534 <APP_BLE_Init+0x204>)
    aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 80013e6:	2110      	movs	r1, #16
 80013e8:	2018      	movs	r0, #24
 80013ea:	f000 fe9f 	bl	800212c <aci_hal_write_config_data>
    aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 80013ee:	4a52      	ldr	r2, [pc, #328]	; (8001538 <APP_BLE_Init+0x208>)
 80013f0:	2110      	movs	r1, #16
 80013f2:	2008      	movs	r0, #8
 80013f4:	f000 fe9a 	bl	800212c <aci_hal_write_config_data>
  aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 80013f8:	2118      	movs	r1, #24
 80013fa:	2001      	movs	r0, #1
 80013fc:	f000 fec4 	bl	8002188 <aci_hal_set_tx_power_level>
  aci_gatt_init();
 8001400:	f000 fd93 	bl	8001f2a <aci_gatt_init>
    aci_gap_init(role, 0,
 8001404:	f10d 031e 	add.w	r3, sp, #30
 8001408:	9301      	str	r3, [sp, #4]
 800140a:	ab07      	add	r3, sp, #28
 800140c:	9300      	str	r3, [sp, #0]
 800140e:	2207      	movs	r2, #7
 8001410:	f10d 031a 	add.w	r3, sp, #26
 8001414:	2100      	movs	r1, #0
 8001416:	2001      	movs	r0, #1
 8001418:	f000 fcf8 	bl	8001e0c <aci_gap_init>
    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 800141c:	4b47      	ldr	r3, [pc, #284]	; (800153c <APP_BLE_Init+0x20c>)
 800141e:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8001422:	9300      	str	r3, [sp, #0]
 8001424:	2200      	movs	r2, #0
 8001426:	2307      	movs	r3, #7
 8001428:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 800142c:	f000 fe4b 	bl	80020c6 <aci_gatt_update_char_value>
  if(aci_gatt_update_char_value(gap_service_handle,
 8001430:	ab06      	add	r3, sp, #24
 8001432:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 8001436:	9300      	str	r3, [sp, #0]
 8001438:	2200      	movs	r2, #0
 800143a:	2302      	movs	r3, #2
 800143c:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 8001440:	f000 fe41 	bl	80020c6 <aci_gatt_update_char_value>
  hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED); 
 8001444:	2202      	movs	r2, #2
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8001446:	2400      	movs	r4, #0
  hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED); 
 8001448:	4611      	mov	r1, r2
 800144a:	2000      	movs	r0, #0
 800144c:	f000 ff07 	bl	800225e <hci_le_set_default_phy>
  aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8001450:	4620      	mov	r0, r4
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8001452:	702c      	strb	r4, [r5, #0]
  aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8001454:	f000 fc78 	bl	8001d48 <aci_gap_set_io_capability>
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = 8;
 8001458:	2208      	movs	r2, #8
 800145a:	756a      	strb	r2, [r5, #21]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = 16;
 800145c:	2210      	movs	r2, #16
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800145e:	2301      	movs	r3, #1
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = 16;
 8001460:	75aa      	strb	r2, [r5, #22]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = 111111;
 8001462:	4a37      	ldr	r2, [pc, #220]	; (8001540 <APP_BLE_Init+0x210>)
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8001464:	706b      	strb	r3, [r5, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.OOB_Data_Present = 0;
 8001466:	70ec      	strb	r4, [r5, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = 0;
 8001468:	752c      	strb	r4, [r5, #20]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = 111111;
 800146a:	61aa      	str	r2, [r5, #24]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = 1;
 800146c:	70ab      	strb	r3, [r5, #2]
 800146e:	4620      	mov	r0, r4
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.OOB_Data[index] = (uint8_t) index;
 8001470:	182b      	adds	r3, r5, r0
 8001472:	7118      	strb	r0, [r3, #4]
 8001474:	3001      	adds	r0, #1
  for (index = 0; index < 16; index++)
 8001476:	2810      	cmp	r0, #16
 8001478:	d1fa      	bne.n	8001470 <APP_BLE_Init+0x140>
  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800147a:	4b31      	ldr	r3, [pc, #196]	; (8001540 <APP_BLE_Init+0x210>)
 800147c:	9303      	str	r3, [sp, #12]
 800147e:	2400      	movs	r4, #0
 8001480:	2308      	movs	r3, #8
 8001482:	2101      	movs	r1, #1
 8001484:	9001      	str	r0, [sp, #4]
 8001486:	9300      	str	r3, [sp, #0]
 8001488:	9404      	str	r4, [sp, #16]
 800148a:	4623      	mov	r3, r4
 800148c:	9402      	str	r4, [sp, #8]
 800148e:	4622      	mov	r2, r4
 8001490:	4608      	mov	r0, r1
 8001492:	f000 fc7d 	bl	8001d90 <aci_gap_set_authentication_requirement>
   if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8001496:	78ab      	ldrb	r3, [r5, #2]
 8001498:	b10b      	cbz	r3, 800149e <APP_BLE_Init+0x16e>
     aci_gap_configure_whitelist();
 800149a:	f000 fd26 	bl	8001eea <aci_gap_configure_whitelist>
  SVCCTL_Init();
 800149e:	f001 fd0d 	bl	8002ebc <SVCCTL_Init>
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;  
 80014a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
  SCH_RegTask(CFG_TASK_ADV_CANCEL_ID, Adv_Cancel);
 80014a6:	4927      	ldr	r1, [pc, #156]	; (8001544 <APP_BLE_Init+0x214>)
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;  
 80014a8:	84eb      	strh	r3, [r5, #38]	; 0x26
  SCH_RegTask(CFG_TASK_ADV_CANCEL_ID, Adv_Cancel);
 80014aa:	2000      	movs	r0, #0
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80014ac:	f885 4090 	strb.w	r4, [r5, #144]	; 0x90
  SCH_RegTask(CFG_TASK_ADV_CANCEL_ID, Adv_Cancel);
 80014b0:	f001 f9ac 	bl	800280c <SCH_RegTask>
  aci_hal_set_radio_activity_mask(0x0006);
 80014b4:	2006      	movs	r0, #6
 80014b6:	f000 fe8e 	bl	80021d6 <aci_hal_set_radio_activity_mask>
  index_con_int = 0; 
 80014ba:	4b23      	ldr	r3, [pc, #140]	; (8001548 <APP_BLE_Init+0x218>)
 80014bc:	701c      	strb	r4, [r3, #0]
  mutex = 1; 
 80014be:	4b23      	ldr	r3, [pc, #140]	; (800154c <APP_BLE_Init+0x21c>)
 80014c0:	2201      	movs	r2, #1
 80014c2:	701a      	strb	r2, [r3, #0]
  P2PS_APP_Init();
 80014c4:	f000 f9b2 	bl	800182c <P2PS_APP_Init>
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Cancel_Req);
 80014c8:	2200      	movs	r2, #0
 80014ca:	4b21      	ldr	r3, [pc, #132]	; (8001550 <APP_BLE_Init+0x220>)
 80014cc:	4921      	ldr	r1, [pc, #132]	; (8001554 <APP_BLE_Init+0x224>)
 80014ce:	4610      	mov	r0, r2
 80014d0:	f7ff fa64 	bl	800099c <HW_TS_Create>
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 80014d4:	2200      	movs	r2, #0
 80014d6:	4920      	ldr	r1, [pc, #128]	; (8001558 <APP_BLE_Init+0x228>)
 80014d8:	4b20      	ldr	r3, [pc, #128]	; (800155c <APP_BLE_Init+0x22c>)
 80014da:	4610      	mov	r0, r2
 80014dc:	f7ff fa5e 	bl	800099c <HW_TS_Create>
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 80014e0:	2380      	movs	r3, #128	; 0x80
 80014e2:	f8a5 3094 	strh.w	r3, [r5, #148]	; 0x94
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 80014e6:	23a0      	movs	r3, #160	; 0xa0
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 80014e8:	f885 4029 	strb.w	r4, [r5, #41]	; 0x29
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 80014ec:	f885 4028 	strb.w	r4, [r5, #40]	; 0x28
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 80014f0:	f8a5 3096 	strh.w	r3, [r5, #150]	; 0x96
   Adv_Request(APP_BLE_FAST_ADV);
 80014f4:	f7ff fed0 	bl	8001298 <Adv_Request.constprop.2>
}
 80014f8:	b016      	add	sp, #88	; 0x58
 80014fa:	bd70      	pop	{r4, r5, r6, pc}
    otp_addr = OTP_Read(0);
 80014fc:	4620      	mov	r0, r4
 80014fe:	f001 f859 	bl	80025b4 <OTP_Read>
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 8001502:	4c17      	ldr	r4, [pc, #92]	; (8001560 <APP_BLE_Init+0x230>)
 8001504:	2800      	cmp	r0, #0
 8001506:	bf18      	it	ne
 8001508:	4604      	movne	r4, r0
 800150a:	e74e      	b.n	80013aa <APP_BLE_Init+0x7a>
 800150c:	080064b9 	.word	0x080064b9
 8001510:	20030020 	.word	0x20030020
 8001514:	08001227 	.word	0x08001227
 8001518:	0800123f 	.word	0x0800123f
 800151c:	08002461 	.word	0x08002461
 8001520:	1fff7580 	.word	0x1fff7580
 8001524:	1fff7584 	.word	0x1fff7584
 8001528:	20000246 	.word	0x20000246
 800152c:	20000004 	.word	0x20000004
 8001530:	080064e6 	.word	0x080064e6
 8001534:	2000014c 	.word	0x2000014c
 8001538:	080064f6 	.word	0x080064f6
 800153c:	080066f2 	.word	0x080066f2
 8001540:	0001b207 	.word	0x0001b207
 8001544:	08001255 	.word	0x08001255
 8001548:	20001525 	.word	0x20001525
 800154c:	20001524 	.word	0x20001524
 8001550:	0800121f 	.word	0x0800121f
 8001554:	200001dd 	.word	0x200001dd
 8001558:	200001de 	.word	0x200001de
 800155c:	08001219 	.word	0x08001219
 8001560:	080064b3 	.word	0x080064b3

08001564 <SVCCTL_App_Notification>:
{
 8001564:	b570      	push	{r4, r5, r6, lr}
  switch (event_pckt->evt)
 8001566:	7843      	ldrb	r3, [r0, #1]
 8001568:	2b3e      	cmp	r3, #62	; 0x3e
{
 800156a:	4605      	mov	r5, r0
  switch (event_pckt->evt)
 800156c:	d01a      	beq.n	80015a4 <SVCCTL_App_Notification+0x40>
 800156e:	2bff      	cmp	r3, #255	; 0xff
 8001570:	d042      	beq.n	80015f8 <SVCCTL_App_Notification+0x94>
 8001572:	2b05      	cmp	r3, #5
 8001574:	d114      	bne.n	80015a0 <SVCCTL_App_Notification+0x3c>
      if (disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8001576:	4c2e      	ldr	r4, [pc, #184]	; (8001630 <SVCCTL_App_Notification+0xcc>)
 8001578:	8882      	ldrh	r2, [r0, #4]
 800157a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800157c:	429a      	cmp	r2, r3
 800157e:	d106      	bne.n	800158e <SVCCTL_App_Notification+0x2a>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8001580:	2300      	movs	r3, #0
        APP_DBG_MSG("\r\n\r** DISCONNECTION EVENT WITH CLIENT \n");
 8001582:	482c      	ldr	r0, [pc, #176]	; (8001634 <SVCCTL_App_Notification+0xd0>)
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8001584:	84e3      	strh	r3, [r4, #38]	; 0x26
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8001586:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
        APP_DBG_MSG("\r\n\r** DISCONNECTION EVENT WITH CLIENT \n");
 800158a:	f004 f863 	bl	8005654 <puts>
      Adv_Request(APP_BLE_FAST_ADV);
 800158e:	f7ff fe83 	bl	8001298 <Adv_Request.constprop.2>
        handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 8001592:	4829      	ldr	r0, [pc, #164]	; (8001638 <SVCCTL_App_Notification+0xd4>)
 8001594:	2301      	movs	r3, #1
 8001596:	7003      	strb	r3, [r0, #0]
        handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8001598:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800159a:	8043      	strh	r3, [r0, #2]
          P2PS_APP_Notification(&handleNotification);
 800159c:	f000 f940 	bl	8001820 <P2PS_APP_Notification>
}
 80015a0:	2001      	movs	r0, #1
 80015a2:	bd70      	pop	{r4, r5, r6, pc}
      switch (meta_evt->subevent)
 80015a4:	78c3      	ldrb	r3, [r0, #3]
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d005      	beq.n	80015b6 <SVCCTL_App_Notification+0x52>
 80015aa:	2b03      	cmp	r3, #3
 80015ac:	d1f8      	bne.n	80015a0 <SVCCTL_App_Notification+0x3c>
          APP_DBG_MSG("\r\n\r** CONNECTION UPDATE EVENT WITH CLIENT \n");
 80015ae:	4823      	ldr	r0, [pc, #140]	; (800163c <SVCCTL_App_Notification+0xd8>)
        APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_PROCEDURE_COMPLETE \n");
 80015b0:	f004 f850 	bl	8005654 <puts>
        break; /* EVT_BLUE_GAP_PROCEDURE_COMPLETE */
 80015b4:	e7f4      	b.n	80015a0 <SVCCTL_App_Notification+0x3c>
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 80015b6:	4c1e      	ldr	r4, [pc, #120]	; (8001630 <SVCCTL_App_Notification+0xcc>)
 80015b8:	f894 0091 	ldrb.w	r0, [r4, #145]	; 0x91
 80015bc:	f7ff fa1a 	bl	80009f4 <HW_TS_Stop>
          APP_DBG_MSG("EVT_LE_CONN_COMPLETE for connection handle 0x%x\n",
 80015c0:	f8b5 1005 	ldrh.w	r1, [r5, #5]
 80015c4:	481e      	ldr	r0, [pc, #120]	; (8001640 <SVCCTL_App_Notification+0xdc>)
 80015c6:	f003 ffd1 	bl	800556c <iprintf>
            if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 80015ca:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
 80015ce:	2b04      	cmp	r3, #4
              BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 80015d0:	bf0c      	ite	eq
 80015d2:	2306      	moveq	r3, #6
              BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 80015d4:	2305      	movne	r3, #5
 80015d6:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
                connection_complete_event->Connection_Handle;
 80015da:	f8b5 3005 	ldrh.w	r3, [r5, #5]
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 80015de:	4d16      	ldr	r5, [pc, #88]	; (8001638 <SVCCTL_App_Notification+0xd4>)
            BleApplicationContext.BleApplicationContext_legacy.connectionHandle =
 80015e0:	84e3      	strh	r3, [r4, #38]	; 0x26
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 80015e2:	2600      	movs	r6, #0
          P2PS_APP_Notification(&handleNotification);
 80015e4:	4628      	mov	r0, r5
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 80015e6:	806b      	strh	r3, [r5, #2]
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 80015e8:	702e      	strb	r6, [r5, #0]
          P2PS_APP_Notification(&handleNotification);
 80015ea:	f000 f919 	bl	8001820 <P2PS_APP_Notification>
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 80015ee:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 80015f0:	702e      	strb	r6, [r5, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 80015f2:	806b      	strh	r3, [r5, #2]
          P2PS_APP_Notification(&handleNotification);
 80015f4:	4628      	mov	r0, r5
 80015f6:	e7d1      	b.n	800159c <SVCCTL_App_Notification+0x38>
      switch (blue_evt->ecode)
 80015f8:	f8b0 3003 	ldrh.w	r3, [r0, #3]
 80015fc:	f240 4207 	movw	r2, #1031	; 0x407
 8001600:	4293      	cmp	r3, r2
 8001602:	d012      	beq.n	800162a <SVCCTL_App_Notification+0xc6>
 8001604:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001608:	d00b      	beq.n	8001622 <SVCCTL_App_Notification+0xbe>
 800160a:	2b04      	cmp	r3, #4
 800160c:	d1c8      	bne.n	80015a0 <SVCCTL_App_Notification+0x3c>
          BSP_LED_On(LED_GREEN);
 800160e:	2001      	movs	r0, #1
 8001610:	f000 fa2c 	bl	8001a6c <BSP_LED_On>
          HW_TS_Start(BleApplicationContext.SwitchOffGPIO_timer_Id, (uint32_t)LED_ON_TIMEOUT);
 8001614:	4b06      	ldr	r3, [pc, #24]	; (8001630 <SVCCTL_App_Notification+0xcc>)
 8001616:	210a      	movs	r1, #10
 8001618:	f893 0092 	ldrb.w	r0, [r3, #146]	; 0x92
 800161c:	f7ff fa40 	bl	8000aa0 <HW_TS_Start>
        break; /* RADIO_ACTIVITY_EVENT */
 8001620:	e7be      	b.n	80015a0 <SVCCTL_App_Notification+0x3c>
          mutex = 1;
 8001622:	4b08      	ldr	r3, [pc, #32]	; (8001644 <SVCCTL_App_Notification+0xe0>)
 8001624:	2201      	movs	r2, #1
 8001626:	701a      	strb	r2, [r3, #0]
      break;
 8001628:	e7ba      	b.n	80015a0 <SVCCTL_App_Notification+0x3c>
        APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_PROCEDURE_COMPLETE \n");
 800162a:	4807      	ldr	r0, [pc, #28]	; (8001648 <SVCCTL_App_Notification+0xe4>)
 800162c:	e7c0      	b.n	80015b0 <SVCCTL_App_Notification+0x4c>
 800162e:	bf00      	nop
 8001630:	2000014c 	.word	0x2000014c
 8001634:	080066fa 	.word	0x080066fa
 8001638:	20001520 	.word	0x20001520
 800163c:	08006721 	.word	0x08006721
 8001640:	0800674c 	.word	0x0800674c
 8001644:	20001524 	.word	0x20001524
 8001648:	0800677d 	.word	0x0800677d

0800164c <APP_BLE_Key_Button1_Action>:
  P2PS_APP_SW1_Button_Action();
 800164c:	f000 b8fe 	b.w	800184c <P2PS_APP_SW1_Button_Action>

08001650 <APP_BLE_Key_Button2_Action>:
{
 8001650:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if (BleApplicationContext.Device_Connection_Status != APP_BLE_FAST_ADV && BleApplicationContext.Device_Connection_Status != APP_BLE_IDLE)
 8001652:	4819      	ldr	r0, [pc, #100]	; (80016b8 <APP_BLE_Key_Button2_Action+0x68>)
 8001654:	f890 3090 	ldrb.w	r3, [r0, #144]	; 0x90
 8001658:	2b01      	cmp	r3, #1
 800165a:	d92a      	bls.n	80016b2 <APP_BLE_Key_Button2_Action+0x62>
  if(mutex == 1) { 
 800165c:	4a17      	ldr	r2, [pc, #92]	; (80016bc <APP_BLE_Key_Button2_Action+0x6c>)
 800165e:	7813      	ldrb	r3, [r2, #0]
 8001660:	2b01      	cmp	r3, #1
 8001662:	d126      	bne.n	80016b2 <APP_BLE_Key_Button2_Action+0x62>
    index_con_int = (index_con_int + 1)%SIZE_TAB_CONN_INT;
 8001664:	4916      	ldr	r1, [pc, #88]	; (80016c0 <APP_BLE_Key_Button2_Action+0x70>)
    result = aci_l2cap_connection_parameter_update_req(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,
 8001666:	8cc0      	ldrh	r0, [r0, #38]	; 0x26
    mutex = 0;
 8001668:	2300      	movs	r3, #0
 800166a:	7013      	strb	r3, [r2, #0]
    index_con_int = (index_con_int + 1)%SIZE_TAB_CONN_INT;
 800166c:	780a      	ldrb	r2, [r1, #0]
 800166e:	3201      	adds	r2, #1
 8001670:	f002 0201 	and.w	r2, r2, #1
 8001674:	700a      	strb	r2, [r1, #0]
    uint16_t interval_min = CONN_P(tab_conn_interval[index_con_int]);
 8001676:	4913      	ldr	r1, [pc, #76]	; (80016c4 <APP_BLE_Key_Button2_Action+0x74>)
 8001678:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800167c:	edd2 6a04 	vldr	s13, [r2, #16]
 8001680:	eeb7 7a04 	vmov.f32	s14, #116	; 0x3fa00000  1.250
 8001684:	eec6 7a87 	vdiv.f32	s15, s13, s14
    result = aci_l2cap_connection_parameter_update_req(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,
 8001688:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800168c:	9100      	str	r1, [sp, #0]
    uint16_t interval_min = CONN_P(tab_conn_interval[index_con_int]);
 800168e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001692:	edcd 7a03 	vstr	s15, [sp, #12]
 8001696:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    result = aci_l2cap_connection_parameter_update_req(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,
 800169a:	4611      	mov	r1, r2
 800169c:	f000 fe08 	bl	80022b0 <aci_l2cap_connection_parameter_update_req>
    if( result == BLE_STATUS_SUCCESS )
 80016a0:	b928      	cbnz	r0, 80016ae <APP_BLE_Key_Button2_Action+0x5e>
      APP_DBG_MSG("BLE_SVC_L2CAP_Conn_Update(), Successfully \r\n\r");
 80016a2:	4809      	ldr	r0, [pc, #36]	; (80016c8 <APP_BLE_Key_Button2_Action+0x78>)
}
 80016a4:	b005      	add	sp, #20
 80016a6:	f85d eb04 	ldr.w	lr, [sp], #4
      APP_DBG_MSG("BLE_SVC_L2CAP_Conn_Update(), Failed \r\n\r");
 80016aa:	f003 bf5f 	b.w	800556c <iprintf>
 80016ae:	4807      	ldr	r0, [pc, #28]	; (80016cc <APP_BLE_Key_Button2_Action+0x7c>)
 80016b0:	e7f8      	b.n	80016a4 <APP_BLE_Key_Button2_Action+0x54>
}
 80016b2:	b005      	add	sp, #20
 80016b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80016b8:	2000014c 	.word	0x2000014c
 80016bc:	20001524 	.word	0x20001524
 80016c0:	20001525 	.word	0x20001525
 80016c4:	20000004 	.word	0x20000004
 80016c8:	080067a4 	.word	0x080067a4
 80016cc:	080067d2 	.word	0x080067d2

080016d0 <APP_BLE_Key_Button3_Action>:
{
 80016d0:	4770      	bx	lr

080016d2 <hci_notify_asynch_evt>:
  SCH_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80016d2:	2100      	movs	r1, #0
 80016d4:	2004      	movs	r0, #4
 80016d6:	f001 b8a5 	b.w	8002824 <SCH_SetTask>

080016da <hci_cmd_resp_release>:
  SCH_SetEvt(1 << CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80016da:	2002      	movs	r0, #2
 80016dc:	f001 b8ce 	b.w	800287c <SCH_SetEvt>

080016e0 <hci_cmd_resp_wait>:
  SCH_WaitEvt(1 << CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80016e0:	2002      	movs	r0, #2
 80016e2:	f001 b925 	b.w	8002930 <SCH_WaitEvt>
	...

080016e8 <P2PS_APP_LED_BUTTON_context_Init>:
/* USER CODE END P2PS_APP_Init */
  return;
}

/* USER CODE BEGIN FD */
void P2PS_APP_LED_BUTTON_context_Init(void){
 80016e8:	b508      	push	{r3, lr}
  
  BSP_LED_Off(LED_BLUE);
 80016ea:	2000      	movs	r0, #0
 80016ec:	f000 f9cc 	bl	8001a88 <BSP_LED_Off>
  
  #if(P2P_SERVER1 != 0)
  P2P_Server_App_Context.LedControl.Device_Led_Selection=0x01; /* Device1 */
 80016f0:	4b03      	ldr	r3, [pc, #12]	; (8001700 <P2PS_APP_LED_BUTTON_context_Init+0x18>)
 80016f2:	2101      	movs	r1, #1
  P2P_Server_App_Context.LedControl.Led1=0x00; /* led OFF */
 80016f4:	2200      	movs	r2, #0
  P2P_Server_App_Context.LedControl.Device_Led_Selection=0x01; /* Device1 */
 80016f6:	7059      	strb	r1, [r3, #1]
  P2P_Server_App_Context.LedControl.Led1=0x00; /* led OFF */
 80016f8:	709a      	strb	r2, [r3, #2]
  P2P_Server_App_Context.ButtonControl.Device_Button_Selection=0x01;/* Device1 */
 80016fa:	70d9      	strb	r1, [r3, #3]
  P2P_Server_App_Context.ButtonControl.ButtonStatus=0x00;
 80016fc:	711a      	strb	r2, [r3, #4]
 80016fe:	bd08      	pop	{r3, pc}
 8001700:	200001e4 	.word	0x200001e4

08001704 <P2PS_Send_Notification>:
 * LOCAL FUNCTIONS
 *
 *************************************************************/
/* USER CODE BEGIN FD_LOCAL_FUNCTIONS*/
void P2PS_Send_Notification(void)
{
 8001704:	b508      	push	{r3, lr}
 
  if(P2P_Server_App_Context.ButtonControl.ButtonStatus == 0x00){
 8001706:	4b0d      	ldr	r3, [pc, #52]	; (800173c <P2PS_Send_Notification+0x38>)
 8001708:	791a      	ldrb	r2, [r3, #4]
 800170a:	b982      	cbnz	r2, 800172e <P2PS_Send_Notification+0x2a>
    P2P_Server_App_Context.ButtonControl.ButtonStatus=0x01;
 800170c:	2201      	movs	r2, #1
  } else {
    P2P_Server_App_Context.ButtonControl.ButtonStatus=0x00;
 800170e:	711a      	strb	r2, [r3, #4]
  }
  
   if(P2P_Server_App_Context.Notification_Status){ 
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	b173      	cbz	r3, 8001732 <P2PS_Send_Notification+0x2e>
    APP_DBG_MSG("-- P2P APPLICATION SERVER  : INFORM CLIENT BUTTON 1 PUSHED \n ");
 8001714:	480a      	ldr	r0, [pc, #40]	; (8001740 <P2PS_Send_Notification+0x3c>)
 8001716:	f003 ff29 	bl	800556c <iprintf>
    APP_DBG_MSG(" \n\r");
 800171a:	480a      	ldr	r0, [pc, #40]	; (8001744 <P2PS_Send_Notification+0x40>)
 800171c:	f003 ff26 	bl	800556c <iprintf>
    P2PS_STM_App_Update_Char(P2P_NOTIFY_CHAR_UUID, (uint8_t *)&P2P_Server_App_Context.ButtonControl);
 8001720:	4909      	ldr	r1, [pc, #36]	; (8001748 <P2PS_Send_Notification+0x44>)
 8001722:	f64f 6042 	movw	r0, #65090	; 0xfe42
   } else {
    APP_DBG_MSG("-- P2P APPLICATION SERVER : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n "); 
   }

  return;
}
 8001726:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    P2PS_STM_App_Update_Char(P2P_NOTIFY_CHAR_UUID, (uint8_t *)&P2P_Server_App_Context.ButtonControl);
 800172a:	f001 b859 	b.w	80027e0 <P2PS_STM_App_Update_Char>
    P2P_Server_App_Context.ButtonControl.ButtonStatus=0x00;
 800172e:	2200      	movs	r2, #0
 8001730:	e7ed      	b.n	800170e <P2PS_Send_Notification+0xa>
    APP_DBG_MSG("-- P2P APPLICATION SERVER : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n "); 
 8001732:	4806      	ldr	r0, [pc, #24]	; (800174c <P2PS_Send_Notification+0x48>)
}
 8001734:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    APP_DBG_MSG("-- P2P APPLICATION SERVER : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n "); 
 8001738:	f003 bf18 	b.w	800556c <iprintf>
 800173c:	200001e4 	.word	0x200001e4
 8001740:	080067fa 	.word	0x080067fa
 8001744:	08006838 	.word	0x08006838
 8001748:	200001e7 	.word	0x200001e7
 800174c:	0800683c 	.word	0x0800683c

08001750 <P2PS_STM_App_Notification>:
{
 8001750:	b538      	push	{r3, r4, r5, lr}
  switch(pNotification->P2P_Evt_Opcode)
 8001752:	7803      	ldrb	r3, [r0, #0]
 8001754:	2b01      	cmp	r3, #1
{
 8001756:	4604      	mov	r4, r0
  switch(pNotification->P2P_Evt_Opcode)
 8001758:	d00e      	beq.n	8001778 <P2PS_STM_App_Notification+0x28>
 800175a:	d302      	bcc.n	8001762 <P2PS_STM_App_Notification+0x12>
 800175c:	2b03      	cmp	r3, #3
 800175e:	d010      	beq.n	8001782 <P2PS_STM_App_Notification+0x32>
 8001760:	bd38      	pop	{r3, r4, r5, pc}
      P2P_Server_App_Context.Notification_Status = 1;
 8001762:	4b27      	ldr	r3, [pc, #156]	; (8001800 <P2PS_STM_App_Notification+0xb0>)
      APP_DBG_MSG("-- P2P APPLICATION SERVER : NOTIFICATION ENABLED\n"); 
 8001764:	4827      	ldr	r0, [pc, #156]	; (8001804 <P2PS_STM_App_Notification+0xb4>)
      P2P_Server_App_Context.Notification_Status = 1;
 8001766:	2201      	movs	r2, #1
 8001768:	701a      	strb	r2, [r3, #0]
      APP_DBG_MSG("-- P2P APPLICATION SERVER : NOTIFICATION DISABLED\n");
 800176a:	f003 ff73 	bl	8005654 <puts>
      APP_DBG_MSG(" \n\r");
 800176e:	4826      	ldr	r0, [pc, #152]	; (8001808 <P2PS_STM_App_Notification+0xb8>)
}
 8001770:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      APP_DBG_MSG(" \n\r");
 8001774:	f003 befa 	b.w	800556c <iprintf>
      P2P_Server_App_Context.Notification_Status = 0;
 8001778:	4b21      	ldr	r3, [pc, #132]	; (8001800 <P2PS_STM_App_Notification+0xb0>)
      APP_DBG_MSG("-- P2P APPLICATION SERVER : NOTIFICATION DISABLED\n");
 800177a:	4824      	ldr	r0, [pc, #144]	; (800180c <P2PS_STM_App_Notification+0xbc>)
      P2P_Server_App_Context.Notification_Status = 0;
 800177c:	2200      	movs	r2, #0
 800177e:	701a      	strb	r2, [r3, #0]
 8001780:	e7f3      	b.n	800176a <P2PS_STM_App_Notification+0x1a>
      if(pNotification->DataTransfered.pPayload[0] == 0x00){ /* ALL Deviceselected - may be necessary as LB Routeur informs all connection */
 8001782:	6843      	ldr	r3, [r0, #4]
 8001784:	7818      	ldrb	r0, [r3, #0]
 8001786:	b9d0      	cbnz	r0, 80017be <P2PS_STM_App_Notification+0x6e>
        if(pNotification->DataTransfered.pPayload[1] == 0x01)
 8001788:	785d      	ldrb	r5, [r3, #1]
 800178a:	2d01      	cmp	r5, #1
 800178c:	d109      	bne.n	80017a2 <P2PS_STM_App_Notification+0x52>
          BSP_LED_On(LED_BLUE);
 800178e:	f000 f96d 	bl	8001a6c <BSP_LED_On>
          APP_DBG_MSG("-- P2P APPLICATION SERVER  : LED1 ON\n"); 
 8001792:	481f      	ldr	r0, [pc, #124]	; (8001810 <P2PS_STM_App_Notification+0xc0>)
 8001794:	f003 ff5e 	bl	8005654 <puts>
          APP_DBG_MSG(" \n\r");
 8001798:	481b      	ldr	r0, [pc, #108]	; (8001808 <P2PS_STM_App_Notification+0xb8>)
 800179a:	f003 fee7 	bl	800556c <iprintf>
          P2P_Server_App_Context.LedControl.Led1=0x01; /* LED1 ON */
 800179e:	4b18      	ldr	r3, [pc, #96]	; (8001800 <P2PS_STM_App_Notification+0xb0>)
 80017a0:	709d      	strb	r5, [r3, #2]
        if(pNotification->DataTransfered.pPayload[1] == 0x00)
 80017a2:	6863      	ldr	r3, [r4, #4]
 80017a4:	785d      	ldrb	r5, [r3, #1]
 80017a6:	b955      	cbnz	r5, 80017be <P2PS_STM_App_Notification+0x6e>
          BSP_LED_Off(LED_BLUE);
 80017a8:	4628      	mov	r0, r5
 80017aa:	f000 f96d 	bl	8001a88 <BSP_LED_Off>
          APP_DBG_MSG("-- P2P APPLICATION SERVER  : LED1 OFF\n"); 
 80017ae:	4819      	ldr	r0, [pc, #100]	; (8001814 <P2PS_STM_App_Notification+0xc4>)
 80017b0:	f003 ff50 	bl	8005654 <puts>
          APP_DBG_MSG(" \n\r");
 80017b4:	4814      	ldr	r0, [pc, #80]	; (8001808 <P2PS_STM_App_Notification+0xb8>)
 80017b6:	f003 fed9 	bl	800556c <iprintf>
          P2P_Server_App_Context.LedControl.Led1=0x00; /* LED1 OFF */
 80017ba:	4b11      	ldr	r3, [pc, #68]	; (8001800 <P2PS_STM_App_Notification+0xb0>)
 80017bc:	709d      	strb	r5, [r3, #2]
      if(pNotification->DataTransfered.pPayload[0] == 0x01){ /* end device 1 selected - may be necessary as LB Routeur informs all connection */
 80017be:	6863      	ldr	r3, [r4, #4]
 80017c0:	781a      	ldrb	r2, [r3, #0]
 80017c2:	2a01      	cmp	r2, #1
 80017c4:	d11b      	bne.n	80017fe <P2PS_STM_App_Notification+0xae>
        if(pNotification->DataTransfered.pPayload[1] == 0x01)
 80017c6:	785d      	ldrb	r5, [r3, #1]
 80017c8:	2d01      	cmp	r5, #1
 80017ca:	d10a      	bne.n	80017e2 <P2PS_STM_App_Notification+0x92>
          BSP_LED_On(LED_BLUE);
 80017cc:	2000      	movs	r0, #0
 80017ce:	f000 f94d 	bl	8001a6c <BSP_LED_On>
          APP_DBG_MSG("-- P2P APPLICATION SERVER 1 : LED1 ON\n"); 
 80017d2:	4811      	ldr	r0, [pc, #68]	; (8001818 <P2PS_STM_App_Notification+0xc8>)
 80017d4:	f003 ff3e 	bl	8005654 <puts>
          APP_DBG_MSG(" \n\r");
 80017d8:	480b      	ldr	r0, [pc, #44]	; (8001808 <P2PS_STM_App_Notification+0xb8>)
 80017da:	f003 fec7 	bl	800556c <iprintf>
          P2P_Server_App_Context.LedControl.Led1=0x01; /* LED1 ON */
 80017de:	4b08      	ldr	r3, [pc, #32]	; (8001800 <P2PS_STM_App_Notification+0xb0>)
 80017e0:	709d      	strb	r5, [r3, #2]
        if(pNotification->DataTransfered.pPayload[1] == 0x00)
 80017e2:	6863      	ldr	r3, [r4, #4]
 80017e4:	785c      	ldrb	r4, [r3, #1]
 80017e6:	b954      	cbnz	r4, 80017fe <P2PS_STM_App_Notification+0xae>
          BSP_LED_Off(LED_BLUE);
 80017e8:	4620      	mov	r0, r4
 80017ea:	f000 f94d 	bl	8001a88 <BSP_LED_Off>
          APP_DBG_MSG("-- P2P APPLICATION SERVER 1 : LED1 OFF\n"); 
 80017ee:	480b      	ldr	r0, [pc, #44]	; (800181c <P2PS_STM_App_Notification+0xcc>)
 80017f0:	f003 ff30 	bl	8005654 <puts>
          APP_DBG_MSG(" \n\r");
 80017f4:	4804      	ldr	r0, [pc, #16]	; (8001808 <P2PS_STM_App_Notification+0xb8>)
 80017f6:	f003 feb9 	bl	800556c <iprintf>
          P2P_Server_App_Context.LedControl.Led1=0x00; /* LED1 OFF */
 80017fa:	4b01      	ldr	r3, [pc, #4]	; (8001800 <P2PS_STM_App_Notification+0xb0>)
 80017fc:	709c      	strb	r4, [r3, #2]
 80017fe:	bd38      	pop	{r3, r4, r5, pc}
 8001800:	200001e4 	.word	0x200001e4
 8001804:	08006887 	.word	0x08006887
 8001808:	08006838 	.word	0x08006838
 800180c:	080068b8 	.word	0x080068b8
 8001810:	080068ea 	.word	0x080068ea
 8001814:	0800690f 	.word	0x0800690f
 8001818:	08006935 	.word	0x08006935
 800181c:	0800695b 	.word	0x0800695b

08001820 <P2PS_APP_Notification>:
  switch(pNotification->P2P_Evt_Opcode)
 8001820:	7803      	ldrb	r3, [r0, #0]
 8001822:	2b01      	cmp	r3, #1
 8001824:	d101      	bne.n	800182a <P2PS_APP_Notification+0xa>
       P2PS_APP_LED_BUTTON_context_Init();       
 8001826:	f7ff bf5f 	b.w	80016e8 <P2PS_APP_LED_BUTTON_context_Init>
 800182a:	4770      	bx	lr

0800182c <P2PS_APP_Init>:
{
 800182c:	b508      	push	{r3, lr}
  SCH_RegTask( CFG_TASK_SW1_BUTTON_PUSHED_ID, P2PS_Send_Notification );
 800182e:	4905      	ldr	r1, [pc, #20]	; (8001844 <P2PS_APP_Init+0x18>)
 8001830:	2001      	movs	r0, #1
 8001832:	f000 ffeb 	bl	800280c <SCH_RegTask>
  P2P_Server_App_Context.Notification_Status=0; 
 8001836:	4b04      	ldr	r3, [pc, #16]	; (8001848 <P2PS_APP_Init+0x1c>)
 8001838:	2200      	movs	r2, #0
 800183a:	701a      	strb	r2, [r3, #0]
}
 800183c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  P2PS_APP_LED_BUTTON_context_Init();
 8001840:	f7ff bf52 	b.w	80016e8 <P2PS_APP_LED_BUTTON_context_Init>
 8001844:	08001705 	.word	0x08001705
 8001848:	200001e4 	.word	0x200001e4

0800184c <P2PS_APP_SW1_Button_Action>:
  SCH_SetTask( 1<<CFG_TASK_SW1_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);
 800184c:	2100      	movs	r1, #0
 800184e:	2002      	movs	r0, #2
 8001850:	f000 bfe8 	b.w	8002824 <SCH_SetTask>

08001854 <HW_IPCC_Enable>:
  __ASM volatile ("sev");
 8001854:	bf40      	sev
  __ASM volatile ("wfe");
 8001856:	bf20      	wfe
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8001858:	4a02      	ldr	r2, [pc, #8]	; (8001864 <HW_IPCC_Enable+0x10>)
 800185a:	68d3      	ldr	r3, [r2, #12]
 800185c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001860:	60d3      	str	r3, [r2, #12]
 8001862:	4770      	bx	lr
 8001864:	58000400 	.word	0x58000400

08001868 <HW_IPCC_Init>:
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001868:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000

  return;
}

void HW_IPCC_Init( void )
{
 800186c:	b507      	push	{r0, r1, r2, lr}
 800186e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001870:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001874:	651a      	str	r2, [r3, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001876:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001878:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800187c:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800187e:	9b01      	ldr	r3, [sp, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8001880:	4b08      	ldr	r3, [pc, #32]	; (80018a4 <HW_IPCC_Init+0x3c>)
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	f042 0201 	orr.w	r2, r2, #1
 8001888:	601a      	str	r2, [r3, #0]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001890:	601a      	str	r2, [r3, #0]
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );

  LL_C1_IPCC_EnableIT_RXO( IPCC );
  LL_C1_IPCC_EnableIT_TXF( IPCC );

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8001892:	202c      	movs	r0, #44	; 0x2c
 8001894:	f001 fd0c 	bl	80032b0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8001898:	202d      	movs	r0, #45	; 0x2d
 800189a:	f001 fd09 	bl	80032b0 <HAL_NVIC_EnableIRQ>

  return;
}
 800189e:	b003      	add	sp, #12
 80018a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80018a4:	58000c00 	.word	0x58000c00

080018a8 <HW_IPCC_BLE_Init>:
  CLEAR_BIT(IPCCx->C1MR, Channel);
 80018a8:	4a02      	ldr	r2, [pc, #8]	; (80018b4 <HW_IPCC_BLE_Init+0xc>)
 80018aa:	6853      	ldr	r3, [r2, #4]
 80018ac:	f023 0301 	bic.w	r3, r3, #1
 80018b0:	6053      	str	r3, [r2, #4]
 80018b2:	4770      	bx	lr
 80018b4:	58000c00 	.word	0x58000c00

080018b8 <HW_IPCC_BLE_SendCmd>:
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 80018b8:	4b02      	ldr	r3, [pc, #8]	; (80018c4 <HW_IPCC_BLE_SendCmd+0xc>)
 80018ba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80018be:	609a      	str	r2, [r3, #8]
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	58000c00 	.word	0x58000c00

080018c8 <HW_IPCC_SYS_Init>:
  CLEAR_BIT(IPCCx->C1MR, Channel);
 80018c8:	4a02      	ldr	r2, [pc, #8]	; (80018d4 <HW_IPCC_SYS_Init+0xc>)
 80018ca:	6853      	ldr	r3, [r2, #4]
 80018cc:	f023 0302 	bic.w	r3, r3, #2
 80018d0:	6053      	str	r3, [r2, #4]
 80018d2:	4770      	bx	lr
 80018d4:	58000c00 	.word	0x58000c00

080018d8 <HW_IPCC_SYS_SendCmd>:
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 80018d8:	4b04      	ldr	r3, [pc, #16]	; (80018ec <HW_IPCC_SYS_SendCmd+0x14>)
 80018da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80018de:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80018e0:	685a      	ldr	r2, [r3, #4]
 80018e2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80018e6:	605a      	str	r2, [r3, #4]
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	58000c00 	.word	0x58000c00

080018f0 <HW_IPCC_Tx_Handler>:
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 80018f0:	4b1e      	ldr	r3, [pc, #120]	; (800196c <HW_IPCC_Tx_Handler+0x7c>)
 80018f2:	68da      	ldr	r2, [r3, #12]
 80018f4:	f012 0f02 	tst.w	r2, #2
{
 80018f8:	b510      	push	{r4, lr}
 80018fa:	461a      	mov	r2, r3
 80018fc:	d109      	bne.n	8001912 <HW_IPCC_Tx_Handler+0x22>
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 80018fe:	6859      	ldr	r1, [r3, #4]
 8001900:	038c      	lsls	r4, r1, #14
 8001902:	d406      	bmi.n	8001912 <HW_IPCC_Tx_Handler+0x22>
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8001904:	685a      	ldr	r2, [r3, #4]
 8001906:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800190a:	605a      	str	r2, [r3, #4]

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );

  HW_IPCC_SYS_CmdEvtNot();
 800190c:	f001 fbe2 	bl	80030d4 <HW_IPCC_SYS_CmdEvtNot>
 8001910:	bd10      	pop	{r4, pc}
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8001912:	68d3      	ldr	r3, [r2, #12]
 8001914:	0799      	lsls	r1, r3, #30
 8001916:	d407      	bmi.n	8001928 <HW_IPCC_Tx_Handler+0x38>
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8001918:	6853      	ldr	r3, [r2, #4]
 800191a:	0398      	lsls	r0, r3, #14
 800191c:	d404      	bmi.n	8001928 <HW_IPCC_Tx_Handler+0x38>
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800191e:	6853      	ldr	r3, [r2, #4]
 8001920:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001924:	6053      	str	r3, [r2, #4]
 8001926:	e7f1      	b.n	800190c <HW_IPCC_Tx_Handler+0x1c>
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8001928:	4c10      	ldr	r4, [pc, #64]	; (800196c <HW_IPCC_Tx_Handler+0x7c>)
 800192a:	68e3      	ldr	r3, [r4, #12]
 800192c:	f013 0f08 	tst.w	r3, #8
 8001930:	4623      	mov	r3, r4
 8001932:	d10d      	bne.n	8001950 <HW_IPCC_Tx_Handler+0x60>
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8001934:	6862      	ldr	r2, [r4, #4]
 8001936:	0311      	lsls	r1, r2, #12
 8001938:	d40a      	bmi.n	8001950 <HW_IPCC_Tx_Handler+0x60>
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800193a:	6863      	ldr	r3, [r4, #4]
 800193c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001940:	6063      	str	r3, [r4, #4]

static void HW_IPCC_MM_FreeBufHandler( void )
{
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );

  FreeBufCb();
 8001942:	4b0b      	ldr	r3, [pc, #44]	; (8001970 <HW_IPCC_Tx_Handler+0x80>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4798      	blx	r3
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8001948:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800194c:	60a3      	str	r3, [r4, #8]
 800194e:	bd10      	pop	{r4, pc}
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8001950:	68da      	ldr	r2, [r3, #12]
 8001952:	0692      	lsls	r2, r2, #26
 8001954:	d402      	bmi.n	800195c <HW_IPCC_Tx_Handler+0x6c>
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8001956:	685a      	ldr	r2, [r3, #4]
 8001958:	0292      	lsls	r2, r2, #10
 800195a:	d500      	bpl.n	800195e <HW_IPCC_Tx_Handler+0x6e>
 800195c:	bd10      	pop	{r4, pc}
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800195e:	685a      	ldr	r2, [r3, #4]
 8001960:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001964:	605a      	str	r2, [r3, #4]
  HW_IPCC_BLE_AclDataAckNot();
 8001966:	f001 fb89 	bl	800307c <HW_IPCC_BLE_AclDataAckNot>
  return;
 800196a:	bd10      	pop	{r4, pc}
 800196c:	58000c00 	.word	0x58000c00
 8001970:	2000024c 	.word	0x2000024c

08001974 <HW_IPCC_MM_SendFreeBuf>:
{
 8001974:	b510      	push	{r4, lr}
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8001976:	4c08      	ldr	r4, [pc, #32]	; (8001998 <HW_IPCC_MM_SendFreeBuf+0x24>)
 8001978:	68e3      	ldr	r3, [r4, #12]
 800197a:	071b      	lsls	r3, r3, #28
 800197c:	d506      	bpl.n	800198c <HW_IPCC_MM_SendFreeBuf+0x18>
    FreeBufCb = cb;
 800197e:	4b07      	ldr	r3, [pc, #28]	; (800199c <HW_IPCC_MM_SendFreeBuf+0x28>)
 8001980:	6018      	str	r0, [r3, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8001982:	6863      	ldr	r3, [r4, #4]
 8001984:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001988:	6063      	str	r3, [r4, #4]
 800198a:	bd10      	pop	{r4, pc}
    cb();
 800198c:	4780      	blx	r0
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800198e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001992:	60a3      	str	r3, [r4, #8]
 8001994:	bd10      	pop	{r4, pc}
 8001996:	bf00      	nop
 8001998:	58000c00 	.word	0x58000c00
 800199c:	2000024c 	.word	0x2000024c

080019a0 <HW_IPCC_TRACES_Init>:
  CLEAR_BIT(IPCCx->C1MR, Channel);
 80019a0:	4a02      	ldr	r2, [pc, #8]	; (80019ac <HW_IPCC_TRACES_Init+0xc>)
 80019a2:	6853      	ldr	r3, [r2, #4]
 80019a4:	f023 0308 	bic.w	r3, r3, #8
 80019a8:	6053      	str	r3, [r2, #4]
 80019aa:	4770      	bx	lr
 80019ac:	58000c00 	.word	0x58000c00

080019b0 <HW_IPCC_Rx_Handler>:
{
 80019b0:	b538      	push	{r3, r4, r5, lr}
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 80019b2:	4c13      	ldr	r4, [pc, #76]	; (8001a00 <HW_IPCC_Rx_Handler+0x50>)
 80019b4:	69e3      	ldr	r3, [r4, #28]
 80019b6:	f013 0f02 	tst.w	r3, #2
 80019ba:	4625      	mov	r5, r4
 80019bc:	d10b      	bne.n	80019d6 <HW_IPCC_Rx_Handler+0x26>
 80019be:	69eb      	ldr	r3, [r5, #28]
 80019c0:	07dc      	lsls	r4, r3, #31
 80019c2:	d410      	bmi.n	80019e6 <HW_IPCC_Rx_Handler+0x36>
 80019c4:	4c0e      	ldr	r4, [pc, #56]	; (8001a00 <HW_IPCC_Rx_Handler+0x50>)
 80019c6:	69e3      	ldr	r3, [r4, #28]
 80019c8:	0718      	lsls	r0, r3, #28
 80019ca:	d414      	bmi.n	80019f6 <HW_IPCC_Rx_Handler+0x46>
 80019cc:	bd38      	pop	{r3, r4, r5, pc}
  return;
}

static void HW_IPCC_TRACES_EvtHandler( void )
{
  HW_IPCC_TRACES_EvtNot();
 80019ce:	f001 fbe1 	bl	8003194 <HW_IPCC_TRACES_EvtNot>
  WRITE_REG(IPCCx->C1SCR, Channel);
 80019d2:	2308      	movs	r3, #8
 80019d4:	e005      	b.n	80019e2 <HW_IPCC_Rx_Handler+0x32>
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 80019d6:	6863      	ldr	r3, [r4, #4]
 80019d8:	0799      	lsls	r1, r3, #30
 80019da:	d4f0      	bmi.n	80019be <HW_IPCC_Rx_Handler+0xe>
  HW_IPCC_SYS_EvtNot();
 80019dc:	f001 fb84 	bl	80030e8 <HW_IPCC_SYS_EvtNot>
 80019e0:	2302      	movs	r3, #2
 80019e2:	60a3      	str	r3, [r4, #8]
  return;
 80019e4:	bd38      	pop	{r3, r4, r5, pc}
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 80019e6:	686b      	ldr	r3, [r5, #4]
 80019e8:	07da      	lsls	r2, r3, #31
 80019ea:	d4eb      	bmi.n	80019c4 <HW_IPCC_Rx_Handler+0x14>
  HW_IPCC_BLE_RxEvtNot();
 80019ec:	f001 fb30 	bl	8003050 <HW_IPCC_BLE_RxEvtNot>
 80019f0:	2301      	movs	r3, #1
 80019f2:	60ab      	str	r3, [r5, #8]
 80019f4:	bd38      	pop	{r3, r4, r5, pc}
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 80019f6:	6863      	ldr	r3, [r4, #4]
 80019f8:	071b      	lsls	r3, r3, #28
 80019fa:	d5e8      	bpl.n	80019ce <HW_IPCC_Rx_Handler+0x1e>
 80019fc:	bd38      	pop	{r3, r4, r5, pc}
 80019fe:	bf00      	nop
 8001a00:	58000c00 	.word	0x58000c00

08001a04 <LL_AHB2_GRP1_EnableClock>:
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001a04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
{
 8001a08:	b082      	sub	sp, #8
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001a0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a0c:	4302      	orrs	r2, r0
 8001a0e:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a12:	4018      	ands	r0, r3
 8001a14:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 8001a16:	9b01      	ldr	r3, [sp, #4]
}
 8001a18:	b002      	add	sp, #8
 8001a1a:	4770      	bx	lr

08001a1c <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8001a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a1e:	b087      	sub	sp, #28
 8001a20:	4604      	mov	r4, r0
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8001a22:	2214      	movs	r2, #20
 8001a24:	2100      	movs	r1, #0
 8001a26:	a801      	add	r0, sp, #4
 8001a28:	f003 fd97 	bl	800555a <memset>
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8001a2c:	2002      	movs	r0, #2
 8001a2e:	f7ff ffe9 	bl	8001a04 <LL_AHB2_GRP1_EnableClock>
  
  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 8001a32:	4b0c      	ldr	r3, [pc, #48]	; (8001a64 <BSP_LED_Init+0x48>)
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
  gpioinitstruct.Pull = GPIO_NOPULL;
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 8001a34:	4d0c      	ldr	r5, [pc, #48]	; (8001a68 <BSP_LED_Init+0x4c>)
  gpioinitstruct.Pin = GPIO_PIN[Led];
 8001a36:	f833 6014 	ldrh.w	r6, [r3, r4, lsl #1]
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 8001a3a:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
  gpioinitstruct.Pin = GPIO_PIN[Led];
 8001a3e:	9601      	str	r6, [sp, #4]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a40:	2301      	movs	r3, #1
 8001a42:	9302      	str	r3, [sp, #8]
  gpioinitstruct.Pull = GPIO_NOPULL;
 8001a44:	2700      	movs	r7, #0
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a46:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 8001a48:	a901      	add	r1, sp, #4
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a4a:	9304      	str	r3, [sp, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 8001a4c:	9703      	str	r7, [sp, #12]
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 8001a4e:	f001 fddb 	bl	8003608 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8001a52:	463a      	mov	r2, r7
 8001a54:	4631      	mov	r1, r6
 8001a56:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 8001a5a:	f001 fe87 	bl	800376c <HAL_GPIO_WritePin>
}
 8001a5e:	b007      	add	sp, #28
 8001a60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a62:	bf00      	nop
 8001a64:	08006506 	.word	0x08006506
 8001a68:	2000001c 	.word	0x2000001c

08001a6c <BSP_LED_On>:
  *     @arg LED3
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8001a6c:	4b04      	ldr	r3, [pc, #16]	; (8001a80 <BSP_LED_On+0x14>)
 8001a6e:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 8001a72:	4b04      	ldr	r3, [pc, #16]	; (8001a84 <BSP_LED_On+0x18>)
 8001a74:	2201      	movs	r2, #1
 8001a76:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001a7a:	f001 be77 	b.w	800376c <HAL_GPIO_WritePin>
 8001a7e:	bf00      	nop
 8001a80:	08006506 	.word	0x08006506
 8001a84:	2000001c 	.word	0x2000001c

08001a88 <BSP_LED_Off>:
  *     @arg LED3
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8001a88:	4b04      	ldr	r3, [pc, #16]	; (8001a9c <BSP_LED_Off+0x14>)
 8001a8a:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 8001a8e:	4b04      	ldr	r3, [pc, #16]	; (8001aa0 <BSP_LED_Off+0x18>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001a96:	f001 be69 	b.w	800376c <HAL_GPIO_WritePin>
 8001a9a:	bf00      	nop
 8001a9c:	08006506 	.word	0x08006506
 8001aa0:	2000001c 	.word	0x2000001c

08001aa4 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001aa4:	b570      	push	{r4, r5, r6, lr}
 8001aa6:	b086      	sub	sp, #24
 8001aa8:	4604      	mov	r4, r0
 8001aaa:	460e      	mov	r6, r1
  GPIO_InitTypeDef gpioinitstruct = {0};
 8001aac:	2214      	movs	r2, #20
 8001aae:	2100      	movs	r1, #0
 8001ab0:	a801      	add	r0, sp, #4
 8001ab2:	f003 fd52 	bl	800555a <memset>
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8001ab6:	b9cc      	cbnz	r4, 8001aec <BSP_PB_Init+0x48>
 8001ab8:	2004      	movs	r0, #4
 8001aba:	f7ff ffa3 	bl	8001a04 <LL_AHB2_GRP1_EnableClock>
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8001abe:	b9d6      	cbnz	r6, 8001af6 <BSP_PB_Init+0x52>
  {
    /* Configure Button pin as input */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8001ac0:	4b1b      	ldr	r3, [pc, #108]	; (8001b30 <BSP_PB_Init+0x8c>)
    gpioinitstruct.Mode = GPIO_MODE_INPUT;
 8001ac2:	9602      	str	r6, [sp, #8]
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8001ac4:	eb03 0344 	add.w	r3, r3, r4, lsl #1
    gpioinitstruct.Pull = GPIO_PULLUP;
 8001ac8:	2501      	movs	r5, #1
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8001aca:	88db      	ldrh	r3, [r3, #6]
 8001acc:	9301      	str	r3, [sp, #4]
    gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ace:	2302      	movs	r3, #2
 8001ad0:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8001ad2:	4b18      	ldr	r3, [pc, #96]	; (8001b34 <BSP_PB_Init+0x90>)
    gpioinitstruct.Pull = GPIO_PULLUP;
 8001ad4:	9503      	str	r5, [sp, #12]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8001ad6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8001ada:	a901      	add	r1, sp, #4
 8001adc:	68e0      	ldr	r0, [r4, #12]
 8001ade:	f001 fd93 	bl	8003608 <HAL_GPIO_Init>
    
    /* Wait Button pin startup stability */
    HAL_Delay(1);
 8001ae2:	4628      	mov	r0, r5
 8001ae4:	f7ff fa7c 	bl	8000fe0 <HAL_Delay>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
  }
}
 8001ae8:	b006      	add	sp, #24
 8001aea:	bd70      	pop	{r4, r5, r6, pc}
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8001aec:	1e63      	subs	r3, r4, #1
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d8e5      	bhi.n	8001abe <BSP_PB_Init+0x1a>
 8001af2:	2008      	movs	r0, #8
 8001af4:	e7e1      	b.n	8001aba <BSP_PB_Init+0x16>
  if(ButtonMode == BUTTON_MODE_EXTI)
 8001af6:	2e01      	cmp	r6, #1
 8001af8:	d1f6      	bne.n	8001ae8 <BSP_PB_Init+0x44>
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8001afa:	4d0d      	ldr	r5, [pc, #52]	; (8001b30 <BSP_PB_Init+0x8c>)
    gpioinitstruct.Pull = GPIO_PULLUP;
 8001afc:	9603      	str	r6, [sp, #12]
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8001afe:	eb05 0344 	add.w	r3, r5, r4, lsl #1
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8001b02:	a901      	add	r1, sp, #4
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8001b04:	88db      	ldrh	r3, [r3, #6]
 8001b06:	9301      	str	r3, [sp, #4]
    gpioinitstruct.Mode = GPIO_MODE_IT_FALLING; 
 8001b08:	4b0b      	ldr	r3, [pc, #44]	; (8001b38 <BSP_PB_Init+0x94>)
 8001b0a:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8001b0c:	4b09      	ldr	r3, [pc, #36]	; (8001b34 <BSP_PB_Init+0x90>)
 8001b0e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8001b12:	442c      	add	r4, r5
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8001b14:	68d8      	ldr	r0, [r3, #12]
 8001b16:	f001 fd77 	bl	8003608 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8001b1a:	f994 400c 	ldrsb.w	r4, [r4, #12]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	4620      	mov	r0, r4
 8001b22:	210f      	movs	r1, #15
 8001b24:	f001 fb90 	bl	8003248 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8001b28:	4620      	mov	r0, r4
 8001b2a:	f001 fbc1 	bl	80032b0 <HAL_NVIC_EnableIRQ>
}
 8001b2e:	e7db      	b.n	8001ae8 <BSP_PB_Init+0x44>
 8001b30:	08006506 	.word	0x08006506
 8001b34:	2000001c 	.word	0x2000001c
 8001b38:	10210000 	.word	0x10210000

08001b3c <SystemInit>:
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8001b3c:	4b17      	ldr	r3, [pc, #92]	; (8001b9c <SystemInit+0x60>)
 8001b3e:	2100      	movs	r1, #0
 8001b40:	6099      	str	r1, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8001b42:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001b46:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001b4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001b4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001b52:	f46f 7c82 	mvn.w	ip, #260	; 0x104
  RCC->CR |= RCC_CR_MSION;
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	f042 0201 	orr.w	r2, r2, #1
 8001b5c:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00070000U;
 8001b5e:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001b62:	609a      	str	r2, [r3, #8]
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001b64:	6818      	ldr	r0, [r3, #0]
 8001b66:	f1a2 62a2 	sub.w	r2, r2, #84934656	; 0x5100000
 8001b6a:	4462      	add	r2, ip
 8001b6c:	4002      	ands	r2, r0
 8001b6e:	601a      	str	r2, [r3, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001b70:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8001b74:	f022 0205 	bic.w	r2, r2, #5
 8001b78:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001b7c:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8001b80:	f022 0201 	bic.w	r2, r2, #1
 8001b84:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001b88:	4a05      	ldr	r2, [pc, #20]	; (8001ba0 <SystemInit+0x64>)
 8001b8a:	60da      	str	r2, [r3, #12]

  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001b8c:	611a      	str	r2, [r3, #16]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001b94:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001b96:	6199      	str	r1, [r3, #24]
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	e000ed00 	.word	0xe000ed00
 8001ba0:	22041000 	.word	0x22041000

08001ba4 <SystemCoreClockUpdate>:
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 8001ba4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
{
 8001ba8:	b530      	push	{r4, r5, lr}
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 8001baa:	6813      	ldr	r3, [r2, #0]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bac:	6894      	ldr	r4, [r2, #8]
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 8001bae:	4923      	ldr	r1, [pc, #140]	; (8001c3c <SystemCoreClockUpdate+0x98>)
 8001bb0:	f3c3 1303 	ubfx	r3, r3, #4, #4
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bb4:	f004 040c 	and.w	r4, r4, #12
 8001bb8:	4610      	mov	r0, r2
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 8001bba:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
 8001bbe:	4a20      	ldr	r2, [pc, #128]	; (8001c40 <SystemCoreClockUpdate+0x9c>)
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bc0:	2c0c      	cmp	r4, #12
 8001bc2:	d839      	bhi.n	8001c38 <SystemCoreClockUpdate+0x94>
 8001bc4:	e8df f004 	tbb	[pc, r4]
 8001bc8:	38383838 	.word	0x38383838
 8001bcc:	38383807 	.word	0x38383807
 8001bd0:	38383816 	.word	0x38383816
 8001bd4:	18          	.byte	0x18
 8001bd5:	00          	.byte	0x00
      SystemCoreClock = msirange;
      break;

    case 0x04:  /* HSI used as system clock source */
      /* HSI used as system clock source */
        SystemCoreClock = HSI_VALUE;
 8001bd6:	4b1b      	ldr	r3, [pc, #108]	; (8001c44 <SystemCoreClockUpdate+0xa0>)
      }
      
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
      
      SystemCoreClock = pllvco/pllr;
 8001bd8:	6013      	str	r3, [r2, #0]
      break;
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001bda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001be4:	eb01 0183 	add.w	r1, r1, r3, lsl #2
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 8001be8:	6813      	ldr	r3, [r2, #0]
 8001bea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001bec:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bf0:	6013      	str	r3, [r2, #0]
 8001bf2:	bd30      	pop	{r4, r5, pc}
      SystemCoreClock = HSE_VALUE;
 8001bf4:	4b14      	ldr	r3, [pc, #80]	; (8001c48 <SystemCoreClockUpdate+0xa4>)
 8001bf6:	e7ef      	b.n	8001bd8 <SystemCoreClockUpdate+0x34>
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001bf8:	68c4      	ldr	r4, [r0, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 8001bfa:	68c3      	ldr	r3, [r0, #12]
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001bfc:	f004 0403 	and.w	r4, r4, #3
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 8001c00:	f3c3 1302 	ubfx	r3, r3, #4, #3
      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 8001c04:	2c02      	cmp	r4, #2
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 8001c06:	f103 0301 	add.w	r3, r3, #1
      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 8001c0a:	d10e      	bne.n	8001c2a <SystemCoreClockUpdate+0x86>
        pllvco = (HSI_VALUE / pllm);
 8001c0c:	480d      	ldr	r0, [pc, #52]	; (8001c44 <SystemCoreClockUpdate+0xa0>)
        pllvco = (HSE_VALUE / pllm);
 8001c0e:	fbb0 f3f3 	udiv	r3, r0, r3
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c12:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8001c16:	68c4      	ldr	r4, [r0, #12]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8001c18:	68c0      	ldr	r0, [r0, #12]
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c1a:	f3c4 2406 	ubfx	r4, r4, #8, #7
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8001c1e:	0f40      	lsrs	r0, r0, #29
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c20:	4363      	muls	r3, r4
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8001c22:	3001      	adds	r0, #1
      SystemCoreClock = pllvco/pllr;
 8001c24:	fbb3 f3f0 	udiv	r3, r3, r0
 8001c28:	e7d6      	b.n	8001bd8 <SystemCoreClockUpdate+0x34>
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 8001c2a:	2c03      	cmp	r4, #3
 8001c2c:	d101      	bne.n	8001c32 <SystemCoreClockUpdate+0x8e>
        pllvco = (HSE_VALUE / pllm);
 8001c2e:	4806      	ldr	r0, [pc, #24]	; (8001c48 <SystemCoreClockUpdate+0xa4>)
 8001c30:	e7ed      	b.n	8001c0e <SystemCoreClockUpdate+0x6a>
        pllvco = (msirange / pllm);
 8001c32:	fbb5 f3f3 	udiv	r3, r5, r3
 8001c36:	e7ec      	b.n	8001c12 <SystemCoreClockUpdate+0x6e>
      SystemCoreClock = msirange;
 8001c38:	6015      	str	r5, [r2, #0]
      break;
 8001c3a:	e7ce      	b.n	8001bda <SystemCoreClockUpdate+0x36>
 8001c3c:	08006518 	.word	0x08006518
 8001c40:	20000034 	.word	0x20000034
 8001c44:	00f42400 	.word	0x00f42400
 8001c48:	01e84800 	.word	0x01e84800

08001c4c <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable(void)
{
 8001c4c:	b510      	push	{r4, lr}
  struct hci_request rq;
  tBleStatus status = 0;
 8001c4e:	2400      	movs	r4, #0
{
 8001c50:	b088      	sub	sp, #32
  Osal_MemSet(&rq, 0, sizeof(rq));
 8001c52:	2218      	movs	r2, #24
 8001c54:	4621      	mov	r1, r4
 8001c56:	a802      	add	r0, sp, #8
  tBleStatus status = 0;
 8001c58:	f88d 4007 	strb.w	r4, [sp, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 8001c5c:	f000 fca8 	bl	80025b0 <Osal_MemSet>
  rq.ogf = 0x3f;
 8001c60:	233f      	movs	r3, #63	; 0x3f
 8001c62:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = 0x081;
 8001c66:	2381      	movs	r3, #129	; 0x81
 8001c68:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.rparam = &status;
 8001c6c:	f10d 0307 	add.w	r3, sp, #7
 8001c70:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
  if (hci_send_req(&rq, FALSE) < 0)
 8001c72:	4621      	mov	r1, r4
  rq.rlen = 1;
 8001c74:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 8001c76:	a802      	add	r0, sp, #8
  rq.rlen = 1;
 8001c78:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8001c7a:	f000 fc1b 	bl	80024b4 <hci_send_req>
 8001c7e:	42a0      	cmp	r0, r4
    return BLE_STATUS_TIMEOUT;
  if (status) 
 8001c80:	bfac      	ite	ge
 8001c82:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 8001c86:	20ff      	movlt	r0, #255	; 0xff
  {
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 8001c88:	b008      	add	sp, #32
 8001c8a:	bd10      	pop	{r4, pc}

08001c8c <aci_gap_set_discoverable>:
                                    uint8_t Local_Name[],
                                    uint8_t Service_Uuid_length,
                                    uint8_t Service_Uuid_List[],
                                    uint16_t Slave_Conn_Interval_Min,
                                    uint16_t Slave_Conn_Interval_Max)
{
 8001c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c90:	b0cb      	sub	sp, #300	; 0x12c
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
  tBleStatus status = 0;
 8001c92:	f04f 0900 	mov.w	r9, #0
{
 8001c96:	f89d 515c 	ldrb.w	r5, [sp, #348]	; 0x15c
 8001c9a:	9500      	str	r5, [sp, #0]
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8001c9c:	9e00      	ldr	r6, [sp, #0]
{
 8001c9e:	f89d 4154 	ldrb.w	r4, [sp, #340]	; 0x154
  int index_input = 0;
  cp0->Advertising_Type = htob(Advertising_Type, 1);
 8001ca2:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8001ca6:	3609      	adds	r6, #9
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8001ca8:	ad0a      	add	r5, sp, #40	; 0x28
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8001caa:	4426      	add	r6, r4
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8001cac:	f104 0a08 	add.w	sl, r4, #8
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8001cb0:	19af      	adds	r7, r5, r6
  index_input += 1;
  cp0->Advertising_Interval_Min = htob(Advertising_Interval_Min, 2);
 8001cb2:	f8ad 1029 	strh.w	r1, [sp, #41]	; 0x29
  index_input += 2;
  cp0->Advertising_Interval_Max = htob(Advertising_Interval_Max, 2);
 8001cb6:	f8ad 202b 	strh.w	r2, [sp, #43]	; 0x2b
  index_input += 2;
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 8001cba:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
  index_input += 1;
  cp0->Local_Name_Length = htob(Local_Name_Length, 1);
  index_input += 1;
  /* var_len_data input */
  {
    Osal_MemCpy((void *) &cp0->Local_Name, (const void *) Local_Name, Local_Name_Length);
 8001cbe:	4622      	mov	r2, r4
  cp0->Advertising_Filter_Policy = htob(Advertising_Filter_Policy, 1);
 8001cc0:	f89d 3150 	ldrb.w	r3, [sp, #336]	; 0x150
    Osal_MemCpy((void *) &cp0->Local_Name, (const void *) Local_Name, Local_Name_Length);
 8001cc4:	9956      	ldr	r1, [sp, #344]	; 0x158
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8001cc6:	9701      	str	r7, [sp, #4]
    Osal_MemCpy((void *) &cp0->Local_Name, (const void *) Local_Name, Local_Name_Length);
 8001cc8:	a80c      	add	r0, sp, #48	; 0x30
  cp0->Advertising_Filter_Policy = htob(Advertising_Filter_Policy, 1);
 8001cca:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
  cp0->Local_Name_Length = htob(Local_Name_Length, 1);
 8001cce:	f88d 402f 	strb.w	r4, [sp, #47]	; 0x2f
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8001cd2:	eb05 0b0a 	add.w	fp, r5, sl
  tBleStatus status = 0;
 8001cd6:	f88d 900f 	strb.w	r9, [sp, #15]
    Osal_MemCpy((void *) &cp0->Local_Name, (const void *) Local_Name, Local_Name_Length);
 8001cda:	f000 fc67 	bl	80025ac <Osal_MemCpy>
    index_input += Local_Name_Length;
    {
      cp1->Service_Uuid_length = htob(Service_Uuid_length, 1);
 8001cde:	f89d 3000 	ldrb.w	r3, [sp]
 8001ce2:	f805 300a 	strb.w	r3, [r5, sl]
    }
    index_input += 1;
    Osal_MemCpy((void *) &cp1->Service_Uuid_List, (const void *) Service_Uuid_List, Service_Uuid_length);
 8001ce6:	9a00      	ldr	r2, [sp, #0]
 8001ce8:	9958      	ldr	r1, [sp, #352]	; 0x160
 8001cea:	f10b 0001 	add.w	r0, fp, #1
 8001cee:	f000 fc5d 	bl	80025ac <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8001cf2:	9b00      	ldr	r3, [sp, #0]
    {
      cp2->Slave_Conn_Interval_Min = htob(Slave_Conn_Interval_Min, 2);
    }
    index_input += 2;
    {
      cp2->Slave_Conn_Interval_Max = htob(Slave_Conn_Interval_Max, 2);
 8001cf4:	9a01      	ldr	r2, [sp, #4]
    index_input += 1;
 8001cf6:	3409      	adds	r4, #9
    index_input += Service_Uuid_length;
 8001cf8:	4423      	add	r3, r4
 8001cfa:	461f      	mov	r7, r3
      cp2->Slave_Conn_Interval_Min = htob(Slave_Conn_Interval_Min, 2);
 8001cfc:	f8bd 3164 	ldrh.w	r3, [sp, #356]	; 0x164
 8001d00:	53ab      	strh	r3, [r5, r6]
      cp2->Slave_Conn_Interval_Max = htob(Slave_Conn_Interval_Max, 2);
 8001d02:	f8bd 3168 	ldrh.w	r3, [sp, #360]	; 0x168
 8001d06:	8053      	strh	r3, [r2, #2]
    }
    index_input += 2;
  }
  Osal_MemSet(&rq, 0, sizeof(rq));
 8001d08:	4649      	mov	r1, r9
 8001d0a:	2218      	movs	r2, #24
 8001d0c:	a804      	add	r0, sp, #16
 8001d0e:	f000 fc4f 	bl	80025b0 <Osal_MemSet>
  rq.ogf = 0x3f;
 8001d12:	233f      	movs	r3, #63	; 0x3f
 8001d14:	f8ad 3010 	strh.w	r3, [sp, #16]
  rq.ocf = 0x083;
 8001d18:	2383      	movs	r3, #131	; 0x83
  tBleStatus status = 0;
 8001d1a:	f10d 080f 	add.w	r8, sp, #15
  rq.ocf = 0x083;
 8001d1e:	f8ad 3012 	strh.w	r3, [sp, #18]
    index_input += 2;
 8001d22:	3704      	adds	r7, #4
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
  rq.rparam = &status;
  rq.rlen = 1;
 8001d24:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 8001d26:	4649      	mov	r1, r9
 8001d28:	a804      	add	r0, sp, #16
  rq.cparam = cmd_buffer;
 8001d2a:	9506      	str	r5, [sp, #24]
  rq.clen = index_input;
 8001d2c:	9707      	str	r7, [sp, #28]
  rq.rparam = &status;
 8001d2e:	f8cd 8020 	str.w	r8, [sp, #32]
  rq.rlen = 1;
 8001d32:	9309      	str	r3, [sp, #36]	; 0x24
  if (hci_send_req(&rq, FALSE) < 0)
 8001d34:	f000 fbbe 	bl	80024b4 <hci_send_req>
 8001d38:	4548      	cmp	r0, r9
    return BLE_STATUS_TIMEOUT;
  if (status) 
 8001d3a:	bfac      	ite	ge
 8001d3c:	f898 0000 	ldrbge.w	r0, [r8]
    return BLE_STATUS_TIMEOUT;
 8001d40:	20ff      	movlt	r0, #255	; 0xff
  {
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 8001d42:	b04b      	add	sp, #300	; 0x12c
 8001d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001d48 <aci_gap_set_io_capability>:
  }
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gap_set_io_capability(uint8_t IO_Capability)
{
 8001d48:	b570      	push	{r4, r5, r6, lr}
 8001d4a:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 8001d4c:	2500      	movs	r5, #0
  int index_input = 0;
  cp0->IO_Capability = htob(IO_Capability, 1);
 8001d4e:	f88d 0020 	strb.w	r0, [sp, #32]
  index_input += 1;
  Osal_MemSet(&rq, 0, sizeof(rq));
 8001d52:	2218      	movs	r2, #24
 8001d54:	4629      	mov	r1, r5
 8001d56:	a802      	add	r0, sp, #8
  tBleStatus status = 0;
 8001d58:	f88d 5007 	strb.w	r5, [sp, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 8001d5c:	f000 fc28 	bl	80025b0 <Osal_MemSet>
  rq.ogf = 0x3f;
 8001d60:	233f      	movs	r3, #63	; 0x3f
 8001d62:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = 0x085;
 8001d66:	2385      	movs	r3, #133	; 0x85
  tBleStatus status = 0;
 8001d68:	f10d 0407 	add.w	r4, sp, #7
  rq.ocf = 0x085;
 8001d6c:	f8ad 300a 	strh.w	r3, [sp, #10]
  cp0->IO_Capability = htob(IO_Capability, 1);
 8001d70:	ae08      	add	r6, sp, #32
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
 8001d72:	2301      	movs	r3, #1
  rq.rparam = &status;
  rq.rlen = 1;
  if (hci_send_req(&rq, FALSE) < 0)
 8001d74:	4629      	mov	r1, r5
 8001d76:	a802      	add	r0, sp, #8
  rq.cparam = cmd_buffer;
 8001d78:	9604      	str	r6, [sp, #16]
  rq.clen = index_input;
 8001d7a:	9305      	str	r3, [sp, #20]
  rq.rparam = &status;
 8001d7c:	9406      	str	r4, [sp, #24]
  rq.rlen = 1;
 8001d7e:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8001d80:	f000 fb98 	bl	80024b4 <hci_send_req>
 8001d84:	42a8      	cmp	r0, r5
    return BLE_STATUS_TIMEOUT;
  if (status) 
 8001d86:	bfac      	ite	ge
 8001d88:	7820      	ldrbge	r0, [r4, #0]
    return BLE_STATUS_TIMEOUT;
 8001d8a:	20ff      	movlt	r0, #255	; 0xff
  {
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 8001d8c:	b048      	add	sp, #288	; 0x120
 8001d8e:	bd70      	pop	{r4, r5, r6, pc}

08001d90 <aci_gap_set_authentication_requirement>:
                                                  uint8_t Min_Encryption_Key_Size,
                                                  uint8_t Max_Encryption_Key_Size,
                                                  uint8_t Use_Fixed_Pin,
                                                  uint32_t Fixed_Pin,
                                                  uint8_t Identity_Address_Type)
{
 8001d90:	b570      	push	{r4, r5, r6, lr}
 8001d92:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 8001d94:	2600      	movs	r6, #0
  index_input += 1;
  cp0->MITM_Mode = htob(MITM_Mode, 1);
  index_input += 1;
  cp0->SC_Support = htob(SC_Support, 1);
  index_input += 1;
  cp0->KeyPress_Notification_Support = htob(KeyPress_Notification_Support, 1);
 8001d96:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
  index_input += 1;
  cp0->Min_Encryption_Key_Size = htob(Min_Encryption_Key_Size, 1);
 8001d9a:	f89d 3130 	ldrb.w	r3, [sp, #304]	; 0x130
 8001d9e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  index_input += 1;
  cp0->Max_Encryption_Key_Size = htob(Max_Encryption_Key_Size, 1);
 8001da2:	f89d 3134 	ldrb.w	r3, [sp, #308]	; 0x134
 8001da6:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  index_input += 1;
  cp0->Use_Fixed_Pin = htob(Use_Fixed_Pin, 1);
 8001daa:	f89d 3138 	ldrb.w	r3, [sp, #312]	; 0x138
 8001dae:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
  index_input += 1;
  cp0->Fixed_Pin = htob(Fixed_Pin, 4);
 8001db2:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
  cp0->Bonding_Mode = htob(Bonding_Mode, 1);
 8001db4:	f88d 0020 	strb.w	r0, [sp, #32]
  cp0->MITM_Mode = htob(MITM_Mode, 1);
 8001db8:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
  cp0->SC_Support = htob(SC_Support, 1);
 8001dbc:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
  cp0->Fixed_Pin = htob(Fixed_Pin, 4);
 8001dc0:	f8cd 3027 	str.w	r3, [sp, #39]	; 0x27
  index_input += 4;
  cp0->Identity_Address_Type = htob(Identity_Address_Type, 1);
  index_input += 1;
  Osal_MemSet(&rq, 0, sizeof(rq));
 8001dc4:	2218      	movs	r2, #24
  cp0->Identity_Address_Type = htob(Identity_Address_Type, 1);
 8001dc6:	f89d 3140 	ldrb.w	r3, [sp, #320]	; 0x140
 8001dca:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
  Osal_MemSet(&rq, 0, sizeof(rq));
 8001dce:	4631      	mov	r1, r6
 8001dd0:	a802      	add	r0, sp, #8
  tBleStatus status = 0;
 8001dd2:	f88d 6007 	strb.w	r6, [sp, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 8001dd6:	f000 fbeb 	bl	80025b0 <Osal_MemSet>
  rq.ogf = 0x3f;
 8001dda:	233f      	movs	r3, #63	; 0x3f
 8001ddc:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = 0x086;
 8001de0:	2386      	movs	r3, #134	; 0x86
 8001de2:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
 8001de6:	230c      	movs	r3, #12
  tBleStatus status = 0;
 8001de8:	f10d 0507 	add.w	r5, sp, #7
  rq.clen = index_input;
 8001dec:	9305      	str	r3, [sp, #20]
  cp0->Bonding_Mode = htob(Bonding_Mode, 1);
 8001dee:	ac08      	add	r4, sp, #32
  rq.rparam = &status;
  rq.rlen = 1;
 8001df0:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 8001df2:	4631      	mov	r1, r6
 8001df4:	a802      	add	r0, sp, #8
  rq.cparam = cmd_buffer;
 8001df6:	9404      	str	r4, [sp, #16]
  rq.rparam = &status;
 8001df8:	9506      	str	r5, [sp, #24]
  rq.rlen = 1;
 8001dfa:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8001dfc:	f000 fb5a 	bl	80024b4 <hci_send_req>
 8001e00:	42b0      	cmp	r0, r6
    return BLE_STATUS_TIMEOUT;
  if (status) 
 8001e02:	bfac      	ite	ge
 8001e04:	7828      	ldrbge	r0, [r5, #0]
    return BLE_STATUS_TIMEOUT;
 8001e06:	20ff      	movlt	r0, #255	; 0xff
  {
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 8001e08:	b048      	add	sp, #288	; 0x120
 8001e0a:	bd70      	pop	{r4, r5, r6, pc}

08001e0c <aci_gap_init>:
                        uint8_t privacy_enabled,
                        uint8_t device_name_char_len,
                        uint16_t *Service_Handle,
                        uint16_t *Dev_Name_Char_Handle,
                        uint16_t *Appearance_Char_Handle)
{
 8001e0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e10:	b0c8      	sub	sp, #288	; 0x120
 8001e12:	4680      	mov	r8, r0
 8001e14:	460f      	mov	r7, r1
 8001e16:	4616      	mov	r6, r2
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
  aci_gap_init_rp0 resp;
  Osal_MemSet(&resp, 0, sizeof(resp));
 8001e18:	2100      	movs	r1, #0
 8001e1a:	2207      	movs	r2, #7
 8001e1c:	4668      	mov	r0, sp
{
 8001e1e:	461d      	mov	r5, r3
  Osal_MemSet(&resp, 0, sizeof(resp));
 8001e20:	f000 fbc6 	bl	80025b0 <Osal_MemSet>
  index_input += 1;
  cp0->privacy_enabled = htob(privacy_enabled, 1);
  index_input += 1;
  cp0->device_name_char_len = htob(device_name_char_len, 1);
  index_input += 1;
  Osal_MemSet(&rq, 0, sizeof(rq));
 8001e24:	2218      	movs	r2, #24
 8001e26:	2100      	movs	r1, #0
 8001e28:	a802      	add	r0, sp, #8
  cp0->Role = htob(Role, 1);
 8001e2a:	f88d 8020 	strb.w	r8, [sp, #32]
  cp0->privacy_enabled = htob(privacy_enabled, 1);
 8001e2e:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
  cp0->device_name_char_len = htob(device_name_char_len, 1);
 8001e32:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
  Osal_MemSet(&rq, 0, sizeof(rq));
 8001e36:	f000 fbbb 	bl	80025b0 <Osal_MemSet>
  rq.ogf = 0x3f;
 8001e3a:	233f      	movs	r3, #63	; 0x3f
 8001e3c:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = 0x08a;
 8001e40:	238a      	movs	r3, #138	; 0x8a
 8001e42:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
 8001e46:	2303      	movs	r3, #3
 8001e48:	9305      	str	r3, [sp, #20]
  cp0->Role = htob(Role, 1);
 8001e4a:	ac08      	add	r4, sp, #32
  rq.rparam = &resp;
  rq.rlen = sizeof(resp);
 8001e4c:	2307      	movs	r3, #7
  if (hci_send_req(&rq, FALSE) < 0)
 8001e4e:	2100      	movs	r1, #0
 8001e50:	a802      	add	r0, sp, #8
  rq.cparam = cmd_buffer;
 8001e52:	9404      	str	r4, [sp, #16]
  rq.rparam = &resp;
 8001e54:	f8cd d018 	str.w	sp, [sp, #24]
  rq.rlen = sizeof(resp);
 8001e58:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8001e5a:	f000 fb2b 	bl	80024b4 <hci_send_req>
 8001e5e:	2800      	cmp	r0, #0
 8001e60:	db16      	blt.n	8001e90 <aci_gap_init+0x84>
    return BLE_STATUS_TIMEOUT;
  if (resp.Status) 
 8001e62:	f89d 0000 	ldrb.w	r0, [sp]
 8001e66:	b980      	cbnz	r0, 8001e8a <aci_gap_init+0x7e>
  {
    return resp.Status;
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 8001e68:	9a00      	ldr	r2, [sp, #0]
  *Dev_Name_Char_Handle = btoh(resp.Dev_Name_Char_Handle, 2);
 8001e6a:	f89d 3003 	ldrb.w	r3, [sp, #3]
  *Service_Handle = btoh(resp.Service_Handle, 2);
 8001e6e:	f3c2 220f 	ubfx	r2, r2, #8, #16
 8001e72:	802a      	strh	r2, [r5, #0]
  *Dev_Name_Char_Handle = btoh(resp.Dev_Name_Char_Handle, 2);
 8001e74:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8001e78:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001e7c:	9a4e      	ldr	r2, [sp, #312]	; 0x138
 8001e7e:	8013      	strh	r3, [r2, #0]
  *Appearance_Char_Handle = btoh(resp.Appearance_Char_Handle, 2);
 8001e80:	9b01      	ldr	r3, [sp, #4]
 8001e82:	9a4f      	ldr	r2, [sp, #316]	; 0x13c
 8001e84:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8001e88:	8013      	strh	r3, [r2, #0]
  return BLE_STATUS_SUCCESS;
}
 8001e8a:	b048      	add	sp, #288	; 0x120
 8001e8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return BLE_STATUS_TIMEOUT;
 8001e90:	20ff      	movs	r0, #255	; 0xff
 8001e92:	e7fa      	b.n	8001e8a <aci_gap_init+0x7e>

08001e94 <aci_gap_update_adv_data>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gap_update_adv_data(uint8_t AdvDataLen,
                                   uint8_t AdvData[])
{
 8001e94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e96:	b0c9      	sub	sp, #292	; 0x124
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 8001e98:	2600      	movs	r6, #0
  int index_input = 0;
  cp0->AdvDataLen = htob(AdvDataLen, 1);
 8001e9a:	f88d 0020 	strb.w	r0, [sp, #32]
  index_input += 1;
  Osal_MemCpy((void *) &cp0->AdvData, (const void *) AdvData, AdvDataLen);
 8001e9e:	4602      	mov	r2, r0
{
 8001ea0:	4604      	mov	r4, r0
  Osal_MemCpy((void *) &cp0->AdvData, (const void *) AdvData, AdvDataLen);
 8001ea2:	f10d 0021 	add.w	r0, sp, #33	; 0x21
  tBleStatus status = 0;
 8001ea6:	f88d 6007 	strb.w	r6, [sp, #7]
  Osal_MemCpy((void *) &cp0->AdvData, (const void *) AdvData, AdvDataLen);
 8001eaa:	f000 fb7f 	bl	80025ac <Osal_MemCpy>
  index_input += AdvDataLen;
  Osal_MemSet(&rq, 0, sizeof(rq));
 8001eae:	2218      	movs	r2, #24
 8001eb0:	4631      	mov	r1, r6
 8001eb2:	a802      	add	r0, sp, #8
 8001eb4:	f000 fb7c 	bl	80025b0 <Osal_MemSet>
  rq.ogf = 0x3f;
 8001eb8:	233f      	movs	r3, #63	; 0x3f
 8001eba:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = 0x08e;
 8001ebe:	238e      	movs	r3, #142	; 0x8e
  tBleStatus status = 0;
 8001ec0:	f10d 0507 	add.w	r5, sp, #7
  rq.ocf = 0x08e;
 8001ec4:	f8ad 300a 	strh.w	r3, [sp, #10]
  cp0->AdvDataLen = htob(AdvDataLen, 1);
 8001ec8:	af08      	add	r7, sp, #32
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
  rq.rparam = &status;
  rq.rlen = 1;
 8001eca:	2301      	movs	r3, #1
  index_input += AdvDataLen;
 8001ecc:	3401      	adds	r4, #1
  if (hci_send_req(&rq, FALSE) < 0)
 8001ece:	4631      	mov	r1, r6
 8001ed0:	a802      	add	r0, sp, #8
  rq.cparam = cmd_buffer;
 8001ed2:	9704      	str	r7, [sp, #16]
  rq.clen = index_input;
 8001ed4:	9405      	str	r4, [sp, #20]
  rq.rparam = &status;
 8001ed6:	9506      	str	r5, [sp, #24]
  rq.rlen = 1;
 8001ed8:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8001eda:	f000 faeb 	bl	80024b4 <hci_send_req>
 8001ede:	42b0      	cmp	r0, r6
    return BLE_STATUS_TIMEOUT;
  if (status) 
 8001ee0:	bfac      	ite	ge
 8001ee2:	7828      	ldrbge	r0, [r5, #0]
    return BLE_STATUS_TIMEOUT;
 8001ee4:	20ff      	movlt	r0, #255	; 0xff
  {
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 8001ee6:	b049      	add	sp, #292	; 0x124
 8001ee8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001eea <aci_gap_configure_whitelist>:
  }
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gap_configure_whitelist(void)
{
 8001eea:	b510      	push	{r4, lr}
  struct hci_request rq;
  tBleStatus status = 0;
 8001eec:	2400      	movs	r4, #0
{
 8001eee:	b088      	sub	sp, #32
  Osal_MemSet(&rq, 0, sizeof(rq));
 8001ef0:	2218      	movs	r2, #24
 8001ef2:	4621      	mov	r1, r4
 8001ef4:	a802      	add	r0, sp, #8
  tBleStatus status = 0;
 8001ef6:	f88d 4007 	strb.w	r4, [sp, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 8001efa:	f000 fb59 	bl	80025b0 <Osal_MemSet>
  rq.ogf = 0x3f;
 8001efe:	233f      	movs	r3, #63	; 0x3f
 8001f00:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = 0x092;
 8001f04:	2392      	movs	r3, #146	; 0x92
 8001f06:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.rparam = &status;
 8001f0a:	f10d 0307 	add.w	r3, sp, #7
 8001f0e:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
  if (hci_send_req(&rq, FALSE) < 0)
 8001f10:	4621      	mov	r1, r4
  rq.rlen = 1;
 8001f12:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 8001f14:	a802      	add	r0, sp, #8
  rq.rlen = 1;
 8001f16:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8001f18:	f000 facc 	bl	80024b4 <hci_send_req>
 8001f1c:	42a0      	cmp	r0, r4
    return BLE_STATUS_TIMEOUT;
  if (status) 
 8001f1e:	bfac      	ite	ge
 8001f20:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 8001f24:	20ff      	movlt	r0, #255	; 0xff
  {
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 8001f26:	b008      	add	sp, #32
 8001f28:	bd10      	pop	{r4, pc}

08001f2a <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init(void)
{
 8001f2a:	b510      	push	{r4, lr}
  struct hci_request rq;
  tBleStatus status = 0;
 8001f2c:	2400      	movs	r4, #0
{
 8001f2e:	b088      	sub	sp, #32
  Osal_MemSet(&rq, 0, sizeof(rq));
 8001f30:	2218      	movs	r2, #24
 8001f32:	4621      	mov	r1, r4
 8001f34:	a802      	add	r0, sp, #8
  tBleStatus status = 0;
 8001f36:	f88d 4007 	strb.w	r4, [sp, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 8001f3a:	f000 fb39 	bl	80025b0 <Osal_MemSet>
  rq.ogf = 0x3f;
 8001f3e:	233f      	movs	r3, #63	; 0x3f
 8001f40:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = 0x101;
 8001f44:	f240 1301 	movw	r3, #257	; 0x101
 8001f48:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.rparam = &status;
 8001f4c:	f10d 0307 	add.w	r3, sp, #7
 8001f50:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
  if (hci_send_req(&rq, FALSE) < 0)
 8001f52:	4621      	mov	r1, r4
  rq.rlen = 1;
 8001f54:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 8001f56:	a802      	add	r0, sp, #8
  rq.rlen = 1;
 8001f58:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8001f5a:	f000 faab 	bl	80024b4 <hci_send_req>
 8001f5e:	42a0      	cmp	r0, r4
    return BLE_STATUS_TIMEOUT;
  if (status) 
 8001f60:	bfac      	ite	ge
 8001f62:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 8001f66:	20ff      	movlt	r0, #255	; 0xff
  {
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 8001f68:	b008      	add	sp, #32
 8001f6a:	bd10      	pop	{r4, pc}

08001f6c <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service(uint8_t Service_UUID_Type,
                                Service_UUID_t *Service_UUID,
                                uint8_t Service_Type,
                                uint8_t Max_Attribute_Records,
                                uint16_t *Service_Handle)
{
 8001f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8001f70:	2801      	cmp	r0, #1
{
 8001f72:	b0c9      	sub	sp, #292	; 0x124
 8001f74:	4604      	mov	r4, r0
 8001f76:	468a      	mov	sl, r1
 8001f78:	4691      	mov	r9, r2
 8001f7a:	4698      	mov	r8, r3
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8001f7c:	d03e      	beq.n	8001ffc <aci_gatt_add_service+0x90>
 8001f7e:	2802      	cmp	r0, #2
 8001f80:	bf0c      	ite	eq
 8001f82:	2711      	moveq	r7, #17
 8001f84:	2701      	movne	r7, #1
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet(&resp, 0, sizeof(resp));
 8001f86:	ad01      	add	r5, sp, #4
 8001f88:	2203      	movs	r2, #3
 8001f8a:	2100      	movs	r1, #0
 8001f8c:	4628      	mov	r0, r5
  int index_input = 0;
  cp0->Service_UUID_Type = htob(Service_UUID_Type, 1);
 8001f8e:	ae08      	add	r6, sp, #32
  Osal_MemSet(&resp, 0, sizeof(resp));
 8001f90:	f000 fb0e 	bl	80025b0 <Osal_MemSet>
  index_input += 1;
  /* var_len_data input */
  {
    uint8_t size;
    switch (Service_UUID_Type) {
 8001f94:	2c01      	cmp	r4, #1
  cp0->Service_UUID_Type = htob(Service_UUID_Type, 1);
 8001f96:	7034      	strb	r4, [r6, #0]
    switch (Service_UUID_Type) {
 8001f98:	d032      	beq.n	8002000 <aci_gatt_add_service+0x94>
 8001f9a:	2c02      	cmp	r4, #2
 8001f9c:	d132      	bne.n	8002004 <aci_gatt_add_service+0x98>
      case 1: size = 2; break;
      case 2: size = 16; break;
 8001f9e:	2410      	movs	r4, #16
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8001fa0:	eb06 0b07 	add.w	fp, r6, r7
      default: return BLE_STATUS_ERROR;
    }
    Osal_MemCpy((void *) &cp0->Service_UUID, (const void *) Service_UUID, size);
 8001fa4:	4622      	mov	r2, r4
 8001fa6:	4651      	mov	r1, sl
 8001fa8:	f10d 0021 	add.w	r0, sp, #33	; 0x21
 8001fac:	f000 fafe 	bl	80025ac <Osal_MemCpy>
    index_input += size;
    {
      cp1->Service_Type = htob(Service_Type, 1);
 8001fb0:	f806 9007 	strb.w	r9, [r6, r7]
    {
      cp1->Max_Attribute_Records = htob(Max_Attribute_Records, 1);
    }
    index_input += 1;
  }
  Osal_MemSet(&rq, 0, sizeof(rq));
 8001fb4:	2218      	movs	r2, #24
 8001fb6:	2100      	movs	r1, #0
      cp1->Max_Attribute_Records = htob(Max_Attribute_Records, 1);
 8001fb8:	f88b 8001 	strb.w	r8, [fp, #1]
  Osal_MemSet(&rq, 0, sizeof(rq));
 8001fbc:	a802      	add	r0, sp, #8
 8001fbe:	f000 faf7 	bl	80025b0 <Osal_MemSet>
  rq.ogf = 0x3f;
 8001fc2:	233f      	movs	r3, #63	; 0x3f
 8001fc4:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = 0x102;
 8001fc8:	f44f 7381 	mov.w	r3, #258	; 0x102
 8001fcc:	f8ad 300a 	strh.w	r3, [sp, #10]
    index_input += 1;
 8001fd0:	3403      	adds	r4, #3
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
  rq.rparam = &resp;
  rq.rlen = sizeof(resp);
 8001fd2:	2303      	movs	r3, #3
  if (hci_send_req(&rq, FALSE) < 0)
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	a802      	add	r0, sp, #8
  rq.cparam = cmd_buffer;
 8001fd8:	9604      	str	r6, [sp, #16]
  rq.clen = index_input;
 8001fda:	9405      	str	r4, [sp, #20]
  rq.rparam = &resp;
 8001fdc:	9506      	str	r5, [sp, #24]
  rq.rlen = sizeof(resp);
 8001fde:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8001fe0:	f000 fa68 	bl	80024b4 <hci_send_req>
 8001fe4:	2800      	cmp	r0, #0
 8001fe6:	db0f      	blt.n	8002008 <aci_gatt_add_service+0x9c>
    return BLE_STATUS_TIMEOUT;
  if (resp.Status) 
 8001fe8:	7828      	ldrb	r0, [r5, #0]
 8001fea:	b920      	cbnz	r0, 8001ff6 <aci_gatt_add_service+0x8a>
  {
    return resp.Status;
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 8001fec:	682b      	ldr	r3, [r5, #0]
 8001fee:	9a52      	ldr	r2, [sp, #328]	; 0x148
 8001ff0:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8001ff4:	8013      	strh	r3, [r2, #0]
  return BLE_STATUS_SUCCESS;
}
 8001ff6:	b049      	add	sp, #292	; 0x124
 8001ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8001ffc:	2703      	movs	r7, #3
 8001ffe:	e7c2      	b.n	8001f86 <aci_gatt_add_service+0x1a>
      case 1: size = 2; break;
 8002000:	2402      	movs	r4, #2
 8002002:	e7cd      	b.n	8001fa0 <aci_gatt_add_service+0x34>
      default: return BLE_STATUS_ERROR;
 8002004:	2047      	movs	r0, #71	; 0x47
 8002006:	e7f6      	b.n	8001ff6 <aci_gatt_add_service+0x8a>
    return BLE_STATUS_TIMEOUT;
 8002008:	20ff      	movs	r0, #255	; 0xff
 800200a:	e7f4      	b.n	8001ff6 <aci_gatt_add_service+0x8a>

0800200c <aci_gatt_add_char>:
                             uint8_t Security_Permissions,
                             uint8_t GATT_Evt_Mask,
                             uint8_t Enc_Key_Size,
                             uint8_t Is_Variable,
                             uint16_t *Char_Handle)
{
 800200c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8002010:	2901      	cmp	r1, #1
{
 8002012:	b0c9      	sub	sp, #292	; 0x124
 8002014:	4606      	mov	r6, r0
 8002016:	460c      	mov	r4, r1
 8002018:	4691      	mov	r9, r2
 800201a:	4698      	mov	r8, r3
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800201c:	d04b      	beq.n	80020b6 <aci_gatt_add_char+0xaa>
 800201e:	2902      	cmp	r1, #2
 8002020:	bf0c      	ite	eq
 8002022:	2713      	moveq	r7, #19
 8002024:	2703      	movne	r7, #3
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet(&resp, 0, sizeof(resp));
  int index_input = 0;
  cp0->Service_Handle = htob(Service_Handle, 2);
 8002026:	ad08      	add	r5, sp, #32
  Osal_MemSet(&resp, 0, sizeof(resp));
 8002028:	2203      	movs	r2, #3
 800202a:	2100      	movs	r1, #0
 800202c:	a801      	add	r0, sp, #4
 800202e:	f000 fabf 	bl	80025b0 <Osal_MemSet>
  cp0->Char_UUID_Type = htob(Char_UUID_Type, 1);
  index_input += 1;
  /* var_len_data input */
  {
    uint8_t size;
    switch (Char_UUID_Type) {
 8002032:	2c01      	cmp	r4, #1
  cp0->Service_Handle = htob(Service_Handle, 2);
 8002034:	802e      	strh	r6, [r5, #0]
  cp0->Char_UUID_Type = htob(Char_UUID_Type, 1);
 8002036:	70ac      	strb	r4, [r5, #2]
    switch (Char_UUID_Type) {
 8002038:	d03f      	beq.n	80020ba <aci_gatt_add_char+0xae>
 800203a:	2c02      	cmp	r4, #2
 800203c:	d13f      	bne.n	80020be <aci_gatt_add_char+0xb2>
      case 1: size = 2; break;
      case 2: size = 16; break;
 800203e:	2410      	movs	r4, #16
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8002040:	19ee      	adds	r6, r5, r7
      default: return BLE_STATUS_ERROR;
    }
    Osal_MemCpy((void *) &cp0->Char_UUID, (const void *) Char_UUID, size);
 8002042:	4622      	mov	r2, r4
 8002044:	4649      	mov	r1, r9
 8002046:	f10d 0023 	add.w	r0, sp, #35	; 0x23
 800204a:	f000 faaf 	bl	80025ac <Osal_MemCpy>
    {
      cp1->Char_Value_Length = htob(Char_Value_Length, 2);
    }
    index_input += 2;
    {
      cp1->Char_Properties = htob(Char_Properties, 1);
 800204e:	f89d 3140 	ldrb.w	r3, [sp, #320]	; 0x140
      cp1->Char_Value_Length = htob(Char_Value_Length, 2);
 8002052:	f825 8007 	strh.w	r8, [r5, r7]
      cp1->Char_Properties = htob(Char_Properties, 1);
 8002056:	70b3      	strb	r3, [r6, #2]
    }
    index_input += 1;
    {
      cp1->Security_Permissions = htob(Security_Permissions, 1);
 8002058:	f89d 3144 	ldrb.w	r3, [sp, #324]	; 0x144
 800205c:	70f3      	strb	r3, [r6, #3]
    }
    index_input += 1;
    {
      cp1->GATT_Evt_Mask = htob(GATT_Evt_Mask, 1);
 800205e:	f89d 3148 	ldrb.w	r3, [sp, #328]	; 0x148
 8002062:	7133      	strb	r3, [r6, #4]
    }
    index_input += 1;
    {
      cp1->Enc_Key_Size = htob(Enc_Key_Size, 1);
 8002064:	f89d 314c 	ldrb.w	r3, [sp, #332]	; 0x14c
 8002068:	7173      	strb	r3, [r6, #5]
    }
    index_input += 1;
    {
      cp1->Is_Variable = htob(Is_Variable, 1);
 800206a:	f89d 3150 	ldrb.w	r3, [sp, #336]	; 0x150
 800206e:	71b3      	strb	r3, [r6, #6]
    }
    index_input += 1;
  }
  Osal_MemSet(&rq, 0, sizeof(rq));
 8002070:	2218      	movs	r2, #24
 8002072:	2100      	movs	r1, #0
 8002074:	a802      	add	r0, sp, #8
 8002076:	f000 fa9b 	bl	80025b0 <Osal_MemSet>
  rq.ogf = 0x3f;
 800207a:	233f      	movs	r3, #63	; 0x3f
 800207c:	f8ad 3008 	strh.w	r3, [sp, #8]
    index_input += 1;
 8002080:	340a      	adds	r4, #10
  rq.ocf = 0x104;
 8002082:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002086:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
 800208a:	9405      	str	r4, [sp, #20]
  rq.rparam = &resp;
  rq.rlen = sizeof(resp);
 800208c:	2303      	movs	r3, #3
  rq.rparam = &resp;
 800208e:	ac01      	add	r4, sp, #4
  if (hci_send_req(&rq, FALSE) < 0)
 8002090:	2100      	movs	r1, #0
 8002092:	a802      	add	r0, sp, #8
  rq.cparam = cmd_buffer;
 8002094:	9504      	str	r5, [sp, #16]
  rq.rparam = &resp;
 8002096:	9406      	str	r4, [sp, #24]
  rq.rlen = sizeof(resp);
 8002098:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800209a:	f000 fa0b 	bl	80024b4 <hci_send_req>
 800209e:	2800      	cmp	r0, #0
 80020a0:	db0f      	blt.n	80020c2 <aci_gatt_add_char+0xb6>
    return BLE_STATUS_TIMEOUT;
  if (resp.Status) 
 80020a2:	7820      	ldrb	r0, [r4, #0]
 80020a4:	b920      	cbnz	r0, 80020b0 <aci_gatt_add_char+0xa4>
  {
    return resp.Status;
  }
  *Char_Handle = btoh(resp.Char_Handle, 2);
 80020a6:	6823      	ldr	r3, [r4, #0]
 80020a8:	9a55      	ldr	r2, [sp, #340]	; 0x154
 80020aa:	f3c3 230f 	ubfx	r3, r3, #8, #16
 80020ae:	8013      	strh	r3, [r2, #0]
  return BLE_STATUS_SUCCESS;
}
 80020b0:	b049      	add	sp, #292	; 0x124
 80020b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 80020b6:	2705      	movs	r7, #5
 80020b8:	e7b5      	b.n	8002026 <aci_gatt_add_char+0x1a>
      case 1: size = 2; break;
 80020ba:	2402      	movs	r4, #2
 80020bc:	e7c0      	b.n	8002040 <aci_gatt_add_char+0x34>
      default: return BLE_STATUS_ERROR;
 80020be:	2047      	movs	r0, #71	; 0x47
 80020c0:	e7f6      	b.n	80020b0 <aci_gatt_add_char+0xa4>
    return BLE_STATUS_TIMEOUT;
 80020c2:	20ff      	movs	r0, #255	; 0xff
 80020c4:	e7f4      	b.n	80020b0 <aci_gatt_add_char+0xa4>

080020c6 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t Service_Handle,
                                      uint16_t Char_Handle,
                                      uint8_t Val_Offset,
                                      uint8_t Char_Value_Length,
                                      uint8_t Char_Value[])
{
 80020c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020c8:	b0c9      	sub	sp, #292	; 0x124
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 80020ca:	2700      	movs	r7, #0
  int index_input = 0;
  cp0->Service_Handle = htob(Service_Handle, 2);
 80020cc:	f8ad 0020 	strh.w	r0, [sp, #32]
  index_input += 2;
  cp0->Char_Handle = htob(Char_Handle, 2);
 80020d0:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
  index_input += 2;
  cp0->Val_Offset = htob(Val_Offset, 1);
 80020d4:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
  index_input += 1;
  cp0->Char_Value_Length = htob(Char_Value_Length, 1);
  index_input += 1;
  Osal_MemCpy((void *) &cp0->Char_Value, (const void *) Char_Value, Char_Value_Length);
 80020d8:	994e      	ldr	r1, [sp, #312]	; 0x138
  cp0->Char_Value_Length = htob(Char_Value_Length, 1);
 80020da:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  Osal_MemCpy((void *) &cp0->Char_Value, (const void *) Char_Value, Char_Value_Length);
 80020de:	461a      	mov	r2, r3
 80020e0:	f10d 0026 	add.w	r0, sp, #38	; 0x26
{
 80020e4:	461c      	mov	r4, r3
  tBleStatus status = 0;
 80020e6:	f88d 7007 	strb.w	r7, [sp, #7]
  Osal_MemCpy((void *) &cp0->Char_Value, (const void *) Char_Value, Char_Value_Length);
 80020ea:	f000 fa5f 	bl	80025ac <Osal_MemCpy>
  index_input += Char_Value_Length;
  Osal_MemSet(&rq, 0, sizeof(rq));
 80020ee:	2218      	movs	r2, #24
 80020f0:	4639      	mov	r1, r7
 80020f2:	a802      	add	r0, sp, #8
 80020f4:	f000 fa5c 	bl	80025b0 <Osal_MemSet>
  rq.ogf = 0x3f;
 80020f8:	233f      	movs	r3, #63	; 0x3f
 80020fa:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = 0x106;
 80020fe:	f44f 7383 	mov.w	r3, #262	; 0x106
  tBleStatus status = 0;
 8002102:	f10d 0607 	add.w	r6, sp, #7
  rq.ocf = 0x106;
 8002106:	f8ad 300a 	strh.w	r3, [sp, #10]
  cp0->Service_Handle = htob(Service_Handle, 2);
 800210a:	ad08      	add	r5, sp, #32
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
  rq.rparam = &status;
  rq.rlen = 1;
 800210c:	2301      	movs	r3, #1
  index_input += Char_Value_Length;
 800210e:	3406      	adds	r4, #6
  if (hci_send_req(&rq, FALSE) < 0)
 8002110:	4639      	mov	r1, r7
 8002112:	a802      	add	r0, sp, #8
  rq.cparam = cmd_buffer;
 8002114:	9504      	str	r5, [sp, #16]
  rq.clen = index_input;
 8002116:	9405      	str	r4, [sp, #20]
  rq.rparam = &status;
 8002118:	9606      	str	r6, [sp, #24]
  rq.rlen = 1;
 800211a:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800211c:	f000 f9ca 	bl	80024b4 <hci_send_req>
 8002120:	42b8      	cmp	r0, r7
    return BLE_STATUS_TIMEOUT;
  if (status) 
 8002122:	bfac      	ite	ge
 8002124:	7830      	ldrbge	r0, [r6, #0]
    return BLE_STATUS_TIMEOUT;
 8002126:	20ff      	movlt	r0, #255	; 0xff
  {
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 8002128:	b049      	add	sp, #292	; 0x124
 800212a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800212c <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data(uint8_t Offset,
                                     uint8_t Length,
                                     uint8_t Value[])
{
 800212c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800212e:	b0c9      	sub	sp, #292	; 0x124
 8002130:	460c      	mov	r4, r1
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 8002132:	2600      	movs	r6, #0
{
 8002134:	4611      	mov	r1, r2
  int index_input = 0;
  cp0->Offset = htob(Offset, 1);
 8002136:	f88d 0020 	strb.w	r0, [sp, #32]
  index_input += 1;
  cp0->Length = htob(Length, 1);
  index_input += 1;
  Osal_MemCpy((void *) &cp0->Value, (const void *) Value, Length);
 800213a:	4622      	mov	r2, r4
 800213c:	f10d 0022 	add.w	r0, sp, #34	; 0x22
  cp0->Length = htob(Length, 1);
 8002140:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
  tBleStatus status = 0;
 8002144:	f88d 6007 	strb.w	r6, [sp, #7]
  Osal_MemCpy((void *) &cp0->Value, (const void *) Value, Length);
 8002148:	f000 fa30 	bl	80025ac <Osal_MemCpy>
  index_input += Length;
  Osal_MemSet(&rq, 0, sizeof(rq));
 800214c:	2218      	movs	r2, #24
 800214e:	4631      	mov	r1, r6
 8002150:	a802      	add	r0, sp, #8
 8002152:	f000 fa2d 	bl	80025b0 <Osal_MemSet>
  rq.ogf = 0x3f;
 8002156:	233f      	movs	r3, #63	; 0x3f
 8002158:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = 0x00c;
 800215c:	230c      	movs	r3, #12
  tBleStatus status = 0;
 800215e:	f10d 0507 	add.w	r5, sp, #7
  rq.ocf = 0x00c;
 8002162:	f8ad 300a 	strh.w	r3, [sp, #10]
  cp0->Offset = htob(Offset, 1);
 8002166:	af08      	add	r7, sp, #32
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
  rq.rparam = &status;
  rq.rlen = 1;
 8002168:	2301      	movs	r3, #1
  index_input += Length;
 800216a:	3402      	adds	r4, #2
  if (hci_send_req(&rq, FALSE) < 0)
 800216c:	4631      	mov	r1, r6
 800216e:	a802      	add	r0, sp, #8
  rq.cparam = cmd_buffer;
 8002170:	9704      	str	r7, [sp, #16]
  rq.clen = index_input;
 8002172:	9405      	str	r4, [sp, #20]
  rq.rparam = &status;
 8002174:	9506      	str	r5, [sp, #24]
  rq.rlen = 1;
 8002176:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8002178:	f000 f99c 	bl	80024b4 <hci_send_req>
 800217c:	42b0      	cmp	r0, r6
    return BLE_STATUS_TIMEOUT;
  if (status) 
 800217e:	bfac      	ite	ge
 8002180:	7828      	ldrbge	r0, [r5, #0]
    return BLE_STATUS_TIMEOUT;
 8002182:	20ff      	movlt	r0, #255	; 0xff
  {
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 8002184:	b049      	add	sp, #292	; 0x124
 8002186:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002188 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level(uint8_t En_High_Power,
                                      uint8_t PA_Level)
{
 8002188:	b570      	push	{r4, r5, r6, lr}
 800218a:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 800218c:	2500      	movs	r5, #0
  int index_input = 0;
  cp0->En_High_Power = htob(En_High_Power, 1);
 800218e:	f88d 0020 	strb.w	r0, [sp, #32]
  index_input += 1;
  cp0->PA_Level = htob(PA_Level, 1);
 8002192:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
  index_input += 1;
  Osal_MemSet(&rq, 0, sizeof(rq));
 8002196:	2218      	movs	r2, #24
 8002198:	4629      	mov	r1, r5
 800219a:	a802      	add	r0, sp, #8
  tBleStatus status = 0;
 800219c:	f88d 5007 	strb.w	r5, [sp, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 80021a0:	f000 fa06 	bl	80025b0 <Osal_MemSet>
  rq.ogf = 0x3f;
 80021a4:	233f      	movs	r3, #63	; 0x3f
 80021a6:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = 0x00f;
 80021aa:	230f      	movs	r3, #15
 80021ac:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
 80021b0:	2302      	movs	r3, #2
  tBleStatus status = 0;
 80021b2:	f10d 0407 	add.w	r4, sp, #7
  rq.clen = index_input;
 80021b6:	9305      	str	r3, [sp, #20]
  cp0->En_High_Power = htob(En_High_Power, 1);
 80021b8:	ae08      	add	r6, sp, #32
  rq.rparam = &status;
  rq.rlen = 1;
 80021ba:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 80021bc:	4629      	mov	r1, r5
 80021be:	a802      	add	r0, sp, #8
  rq.cparam = cmd_buffer;
 80021c0:	9604      	str	r6, [sp, #16]
  rq.rparam = &status;
 80021c2:	9406      	str	r4, [sp, #24]
  rq.rlen = 1;
 80021c4:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 80021c6:	f000 f975 	bl	80024b4 <hci_send_req>
 80021ca:	42a8      	cmp	r0, r5
    return BLE_STATUS_TIMEOUT;
  if (status) 
 80021cc:	bfac      	ite	ge
 80021ce:	7820      	ldrbge	r0, [r4, #0]
    return BLE_STATUS_TIMEOUT;
 80021d0:	20ff      	movlt	r0, #255	; 0xff
  {
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 80021d2:	b048      	add	sp, #288	; 0x120
 80021d4:	bd70      	pop	{r4, r5, r6, pc}

080021d6 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy((void *) Link_Connection_Handle, (const void *) resp.Link_Connection_Handle, 16);
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask(uint16_t Radio_Activity_Mask)
{
 80021d6:	b570      	push	{r4, r5, r6, lr}
 80021d8:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 80021da:	2500      	movs	r5, #0
  int index_input = 0;
  cp0->Radio_Activity_Mask = htob(Radio_Activity_Mask, 2);
 80021dc:	f8ad 0020 	strh.w	r0, [sp, #32]
  index_input += 2;
  Osal_MemSet(&rq, 0, sizeof(rq));
 80021e0:	2218      	movs	r2, #24
 80021e2:	4629      	mov	r1, r5
 80021e4:	a802      	add	r0, sp, #8
  tBleStatus status = 0;
 80021e6:	f88d 5007 	strb.w	r5, [sp, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 80021ea:	f000 f9e1 	bl	80025b0 <Osal_MemSet>
  rq.ogf = 0x3f;
 80021ee:	233f      	movs	r3, #63	; 0x3f
 80021f0:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = 0x018;
 80021f4:	2318      	movs	r3, #24
 80021f6:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
 80021fa:	2302      	movs	r3, #2
  tBleStatus status = 0;
 80021fc:	f10d 0407 	add.w	r4, sp, #7
  rq.clen = index_input;
 8002200:	9305      	str	r3, [sp, #20]
  cp0->Radio_Activity_Mask = htob(Radio_Activity_Mask, 2);
 8002202:	ae08      	add	r6, sp, #32
  rq.rparam = &status;
  rq.rlen = 1;
 8002204:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 8002206:	4629      	mov	r1, r5
 8002208:	a802      	add	r0, sp, #8
  rq.cparam = cmd_buffer;
 800220a:	9604      	str	r6, [sp, #16]
  rq.rparam = &status;
 800220c:	9406      	str	r4, [sp, #24]
  rq.rlen = 1;
 800220e:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8002210:	f000 f950 	bl	80024b4 <hci_send_req>
 8002214:	42a8      	cmp	r0, r5
    return BLE_STATUS_TIMEOUT;
  if (status) 
 8002216:	bfac      	ite	ge
 8002218:	7820      	ldrbge	r0, [r4, #0]
    return BLE_STATUS_TIMEOUT;
 800221a:	20ff      	movlt	r0, #255	; 0xff
  {
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 800221c:	b048      	add	sp, #288	; 0x120
 800221e:	bd70      	pop	{r4, r5, r6, pc}

08002220 <hci_reset>:
  }
  return BLE_STATUS_SUCCESS;
}

tBleStatus hci_reset(void)
{
 8002220:	b510      	push	{r4, lr}
  struct hci_request rq;
  tBleStatus status = 0;
 8002222:	2400      	movs	r4, #0
{
 8002224:	b088      	sub	sp, #32
  Osal_MemSet(&rq, 0, sizeof(rq));
 8002226:	2218      	movs	r2, #24
 8002228:	4621      	mov	r1, r4
 800222a:	a802      	add	r0, sp, #8
  tBleStatus status = 0;
 800222c:	f88d 4007 	strb.w	r4, [sp, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 8002230:	f000 f9be 	bl	80025b0 <Osal_MemSet>
  rq.ogf = 0x03;
 8002234:	2303      	movs	r3, #3
 8002236:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = 0x003;
 800223a:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.rparam = &status;
 800223e:	f10d 0307 	add.w	r3, sp, #7
 8002242:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
  if (hci_send_req(&rq, FALSE) < 0)
 8002244:	4621      	mov	r1, r4
  rq.rlen = 1;
 8002246:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 8002248:	a802      	add	r0, sp, #8
  rq.rlen = 1;
 800224a:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800224c:	f000 f932 	bl	80024b4 <hci_send_req>
 8002250:	42a0      	cmp	r0, r4
    return BLE_STATUS_TIMEOUT;
  if (status) 
 8002252:	bfac      	ite	ge
 8002254:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 8002258:	20ff      	movlt	r0, #255	; 0xff
  {
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 800225a:	b008      	add	sp, #32
 800225c:	bd10      	pop	{r4, pc}

0800225e <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy(uint8_t ALL_PHYS,
                                  uint8_t TX_PHYS,
                                  uint8_t RX_PHYS)
{
 800225e:	b570      	push	{r4, r5, r6, lr}
 8002260:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 8002262:	2600      	movs	r6, #0
  int index_input = 0;
  cp0->ALL_PHYS = htob(ALL_PHYS, 1);
 8002264:	f88d 0020 	strb.w	r0, [sp, #32]
  index_input += 1;
  cp0->TX_PHYS = htob(TX_PHYS, 1);
 8002268:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
  index_input += 1;
  cp0->RX_PHYS = htob(RX_PHYS, 1);
 800226c:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
  index_input += 1;
  Osal_MemSet(&rq, 0, sizeof(rq));
 8002270:	4631      	mov	r1, r6
 8002272:	2218      	movs	r2, #24
 8002274:	a802      	add	r0, sp, #8
  tBleStatus status = 0;
 8002276:	f88d 6007 	strb.w	r6, [sp, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 800227a:	f000 f999 	bl	80025b0 <Osal_MemSet>
  rq.ogf = 0x08;
 800227e:	2308      	movs	r3, #8
 8002280:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = 0x031;
 8002284:	2331      	movs	r3, #49	; 0x31
 8002286:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
 800228a:	2303      	movs	r3, #3
  tBleStatus status = 0;
 800228c:	f10d 0507 	add.w	r5, sp, #7
  rq.clen = index_input;
 8002290:	9305      	str	r3, [sp, #20]
  cp0->ALL_PHYS = htob(ALL_PHYS, 1);
 8002292:	ac08      	add	r4, sp, #32
  rq.rparam = &status;
  rq.rlen = 1;
 8002294:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 8002296:	4631      	mov	r1, r6
 8002298:	a802      	add	r0, sp, #8
  rq.cparam = cmd_buffer;
 800229a:	9404      	str	r4, [sp, #16]
  rq.rparam = &status;
 800229c:	9506      	str	r5, [sp, #24]
  rq.rlen = 1;
 800229e:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 80022a0:	f000 f908 	bl	80024b4 <hci_send_req>
 80022a4:	42b0      	cmp	r0, r6
    return BLE_STATUS_TIMEOUT;
  if (status) 
 80022a6:	bfac      	ite	ge
 80022a8:	7828      	ldrbge	r0, [r5, #0]
    return BLE_STATUS_TIMEOUT;
 80022aa:	20ff      	movlt	r0, #255	; 0xff
  {
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 80022ac:	b048      	add	sp, #288	; 0x120
 80022ae:	bd70      	pop	{r4, r5, r6, pc}

080022b0 <aci_l2cap_connection_parameter_update_req>:
tBleStatus aci_l2cap_connection_parameter_update_req(uint16_t Connection_Handle,
                                                     uint16_t Conn_Interval_Min,
                                                     uint16_t Conn_Interval_Max,
                                                     uint16_t Slave_latency,
                                                     uint16_t Timeout_Multiplier)
{
 80022b0:	b570      	push	{r4, r5, r6, lr}
 80022b2:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_l2cap_connection_parameter_update_req_cp0 *cp0 = (aci_l2cap_connection_parameter_update_req_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 80022b4:	2600      	movs	r6, #0
  int index_input = 0;
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 80022b6:	f8ad 0020 	strh.w	r0, [sp, #32]
  index_input += 2;
  cp0->Conn_Interval_Min = htob(Conn_Interval_Min, 2);
 80022ba:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
  index_input += 2;
  cp0->Conn_Interval_Max = htob(Conn_Interval_Max, 2);
 80022be:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
  index_input += 2;
  cp0->Slave_latency = htob(Slave_latency, 2);
 80022c2:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
  index_input += 2;
  cp0->Timeout_Multiplier = htob(Timeout_Multiplier, 2);
  index_input += 2;
  Osal_MemSet(&rq, 0, sizeof(rq));
 80022c6:	2218      	movs	r2, #24
  cp0->Timeout_Multiplier = htob(Timeout_Multiplier, 2);
 80022c8:	f8bd 3130 	ldrh.w	r3, [sp, #304]	; 0x130
 80022cc:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
  Osal_MemSet(&rq, 0, sizeof(rq));
 80022d0:	4631      	mov	r1, r6
 80022d2:	a802      	add	r0, sp, #8
  tBleStatus status = 0;
 80022d4:	f88d 6007 	strb.w	r6, [sp, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 80022d8:	f000 f96a 	bl	80025b0 <Osal_MemSet>
  rq.ogf = 0x3f;
 80022dc:	233f      	movs	r3, #63	; 0x3f
 80022de:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = 0x181;
 80022e2:	f240 1381 	movw	r3, #385	; 0x181
 80022e6:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.event = 0x0F;
 80022ea:	230f      	movs	r3, #15
 80022ec:	9303      	str	r3, [sp, #12]
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
 80022ee:	230a      	movs	r3, #10
  tBleStatus status = 0;
 80022f0:	f10d 0507 	add.w	r5, sp, #7
  rq.clen = index_input;
 80022f4:	9305      	str	r3, [sp, #20]
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 80022f6:	ac08      	add	r4, sp, #32
  rq.rparam = &status;
  rq.rlen = 1;
 80022f8:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 80022fa:	4631      	mov	r1, r6
 80022fc:	a802      	add	r0, sp, #8
  rq.cparam = cmd_buffer;
 80022fe:	9404      	str	r4, [sp, #16]
  rq.rparam = &status;
 8002300:	9506      	str	r5, [sp, #24]
  rq.rlen = 1;
 8002302:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8002304:	f000 f8d6 	bl	80024b4 <hci_send_req>
 8002308:	42b0      	cmp	r0, r6
    return BLE_STATUS_TIMEOUT;
  if (status) 
 800230a:	bfac      	ite	ge
 800230c:	7828      	ldrbge	r0, [r5, #0]
    return BLE_STATUS_TIMEOUT;
 800230e:	20ff      	movlt	r0, #255	; 0xff
  {
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 8002310:	b048      	add	sp, #288	; 0x120
 8002312:	bd70      	pop	{r4, r5, r6, pc}

08002314 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 8002314:	b513      	push	{r0, r1, r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002316:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800231a:	b672      	cpsid	i

  BACKUP_PRIMASK();

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 800231c:	480c      	ldr	r0, [pc, #48]	; (8002350 <DbgTrace_TxCpltCallback+0x3c>)
 800231e:	f10d 0106 	add.w	r1, sp, #6
 8002322:	f000 fd18 	bl	8002d56 <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 8002326:	f10d 0106 	add.w	r1, sp, #6
 800232a:	4809      	ldr	r0, [pc, #36]	; (8002350 <DbgTrace_TxCpltCallback+0x3c>)
 800232c:	f000 fd74 	bl	8002e18 <CircularQueue_Sense>


  if ( buf != NULL) 
 8002330:	b140      	cbz	r0, 8002344 <DbgTrace_TxCpltCallback+0x30>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002332:	f384 8810 	msr	PRIMASK, r4
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 8002336:	4a07      	ldr	r2, [pc, #28]	; (8002354 <DbgTrace_TxCpltCallback+0x40>)
 8002338:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 800233c:	f7fe f9ab 	bl	8000696 <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 8002340:	b002      	add	sp, #8
 8002342:	bd10      	pop	{r4, pc}
    DbgTracePeripheralReady = SET;
 8002344:	4b04      	ldr	r3, [pc, #16]	; (8002358 <DbgTrace_TxCpltCallback+0x44>)
 8002346:	2201      	movs	r2, #1
 8002348:	701a      	strb	r2, [r3, #0]
 800234a:	f384 8810 	msr	PRIMASK, r4
}
 800234e:	e7f7      	b.n	8002340 <DbgTrace_TxCpltCallback+0x2c>
 8002350:	20000250 	.word	0x20000250
 8002354:	08002315 	.word	0x08002315
 8002358:	20000038 	.word	0x20000038

0800235c <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 800235c:	b507      	push	{r0, r1, r2, lr}
#if (( DBG_TRACE_FULL != 0 ) || ( DBG_TRACE_LIGTH != 0 ))
  DbgOutputInit();
 800235e:	f7fe f998 	bl	8000692 <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 8002362:	4806      	ldr	r0, [pc, #24]	; (800237c <DbgTraceInit+0x20>)
 8002364:	2302      	movs	r3, #2
 8002366:	9300      	str	r3, [sp, #0]
 8002368:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800236c:	2300      	movs	r3, #0
 800236e:	f100 0120 	add.w	r1, r0, #32
 8002372:	f000 fbd5 	bl	8002b20 <CircularQueue_Init>
#endif 
#endif
  return;
}
 8002376:	b003      	add	sp, #12
 8002378:	f85d fb04 	ldr.w	pc, [sp], #4
 800237c:	20000250 	.word	0x20000250

08002380 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 8002380:	b570      	push	{r4, r5, r6, lr}
 8002382:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002384:	f3ef 8510 	mrs	r5, PRIMASK
  uint8_t* buffer;

  BACKUP_PRIMASK();

  /* Ignore flushes */
  if ( handle == -1 )
 8002388:	1c43      	adds	r3, r0, #1
 800238a:	d01b      	beq.n	80023c4 <DbgTraceWrite+0x44>
  {
    chars_written = ( size_t ) 0;
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 800238c:	3801      	subs	r0, #1
 800238e:	2801      	cmp	r0, #1
 8002390:	d81a      	bhi.n	80023c8 <DbgTraceWrite+0x48>
  {
    chars_written = ( size_t ) - 1;
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 8002392:	b192      	cbz	r2, 80023ba <DbgTraceWrite+0x3a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002394:	b672      	cpsid	i
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 8002396:	b296      	uxth	r6, r2
 8002398:	2301      	movs	r3, #1
 800239a:	4632      	mov	r2, r6
 800239c:	480c      	ldr	r0, [pc, #48]	; (80023d0 <DbgTraceWrite+0x50>)
 800239e:	f000 fbd3 	bl	8002b48 <CircularQueue_Add>
    if (buffer && DbgTracePeripheralReady)
 80023a2:	b160      	cbz	r0, 80023be <DbgTraceWrite+0x3e>
 80023a4:	4b0b      	ldr	r3, [pc, #44]	; (80023d4 <DbgTraceWrite+0x54>)
 80023a6:	781a      	ldrb	r2, [r3, #0]
 80023a8:	b14a      	cbz	r2, 80023be <DbgTraceWrite+0x3e>
    {
      DbgTracePeripheralReady = RESET;
 80023aa:	2200      	movs	r2, #0
 80023ac:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023ae:	f385 8810 	msr	PRIMASK, r5
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 80023b2:	4a09      	ldr	r2, [pc, #36]	; (80023d8 <DbgTraceWrite+0x58>)
 80023b4:	4631      	mov	r1, r6
 80023b6:	f7fe f96e 	bl	8000696 <DbgOutputTraces>
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
}
 80023ba:	4620      	mov	r0, r4
 80023bc:	bd70      	pop	{r4, r5, r6, pc}
 80023be:	f385 8810 	msr	PRIMASK, r5
 80023c2:	e7fa      	b.n	80023ba <DbgTraceWrite+0x3a>
    chars_written = ( size_t ) 0;
 80023c4:	2400      	movs	r4, #0
 80023c6:	e7f8      	b.n	80023ba <DbgTraceWrite+0x3a>
    chars_written = ( size_t ) - 1;
 80023c8:	f04f 34ff 	mov.w	r4, #4294967295
 80023cc:	e7f5      	b.n	80023ba <DbgTraceWrite+0x3a>
 80023ce:	bf00      	nop
 80023d0:	20000250 	.word	0x20000250
 80023d4:	20000038 	.word	0x20000038
 80023d8:	08002315 	.word	0x08002315

080023dc <_write>:
  return ( DbgTraceWrite(handle, buf, bufSize) );
 80023dc:	f7ff bfd0 	b.w	8002380 <DbgTraceWrite>

080023e0 <TlEvtReceived>:

  return;
}

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 80023e0:	b508      	push	{r3, lr}
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80023e2:	7a43      	ldrb	r3, [r0, #9]
 80023e4:	3b0e      	subs	r3, #14
 80023e6:	2b01      	cmp	r3, #1
{
 80023e8:	4601      	mov	r1, r0
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80023ea:	d807      	bhi.n	80023fc <TlEvtReceived+0x1c>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 80023ec:	4807      	ldr	r0, [pc, #28]	; (800240c <TlEvtReceived+0x2c>)
 80023ee:	f000 fb74 	bl	8002ada <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 80023f2:	2000      	movs	r0, #0
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
  }

  return;
}
 80023f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 80023f8:	f7ff b96f 	b.w	80016da <hci_cmd_resp_release>
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 80023fc:	4804      	ldr	r0, [pc, #16]	; (8002410 <TlEvtReceived+0x30>)
 80023fe:	f000 fb6c 	bl	8002ada <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8002402:	4803      	ldr	r0, [pc, #12]	; (8002410 <TlEvtReceived+0x30>)
}
 8002404:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8002408:	f7ff b963 	b.w	80016d2 <hci_notify_asynch_evt>
 800240c:	20001270 	.word	0x20001270
 8002410:	200001ec 	.word	0x200001ec

08002414 <hci_init>:
{
 8002414:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8002416:	4c0f      	ldr	r4, [pc, #60]	; (8002454 <hci_init+0x40>)
 8002418:	684b      	ldr	r3, [r1, #4]
  hciContext.UserEvtRx = UserEvtRx;
 800241a:	62a0      	str	r0, [r4, #40]	; 0x28
{
 800241c:	460d      	mov	r5, r1
  hci_register_io_bus (&hciContext.io);
 800241e:	f104 000c 	add.w	r0, r4, #12
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8002422:	60a3      	str	r3, [r4, #8]
  hci_register_io_bus (&hciContext.io);
 8002424:	f000 fd9c 	bl	8002f60 <hci_register_io_bus>
  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8002428:	682e      	ldr	r6, [r5, #0]
  pCmdBuffer = p_cmdbuffer;
 800242a:	4d0b      	ldr	r5, [pc, #44]	; (8002458 <hci_init+0x44>)
  LST_init_head (&HciCmdEventQueue);
 800242c:	4620      	mov	r0, r4
 800242e:	f000 fb3b 	bl	8002aa8 <LST_init_head>
  LST_init_head (&HciAsynchEventQueue);
 8002432:	4628      	mov	r0, r5
  pCmdBuffer = p_cmdbuffer;
 8002434:	60ae      	str	r6, [r5, #8]
  LST_init_head (&HciAsynchEventQueue);
 8002436:	f000 fb37 	bl	8002aa8 <LST_init_head>
  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800243a:	2301      	movs	r3, #1
 800243c:	732b      	strb	r3, [r5, #12]
  if (hciContext.io.Init)
 800243e:	68e3      	ldr	r3, [r4, #12]
 8002440:	b12b      	cbz	r3, 800244e <hci_init+0x3a>
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8002442:	a804      	add	r0, sp, #16
 8002444:	4a05      	ldr	r2, [pc, #20]	; (800245c <hci_init+0x48>)
    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8002446:	9602      	str	r6, [sp, #8]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8002448:	f840 2d10 	str.w	r2, [r0, #-16]!
    hciContext.io.Init(&Conf);
 800244c:	4798      	blx	r3
}
 800244e:	b004      	add	sp, #16
 8002450:	bd70      	pop	{r4, r5, r6, pc}
 8002452:	bf00      	nop
 8002454:	20001270 	.word	0x20001270
 8002458:	200001ec 	.word	0x200001ec
 800245c:	080023e1 	.word	0x080023e1

08002460 <hci_user_evt_proc>:
{
 8002460:	b530      	push	{r4, r5, lr}
  while((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8002462:	4c12      	ldr	r4, [pc, #72]	; (80024ac <hci_user_evt_proc+0x4c>)
    if (hciContext.UserEvtRx != NULL)
 8002464:	4d12      	ldr	r5, [pc, #72]	; (80024b0 <hci_user_evt_proc+0x50>)
{
 8002466:	b085      	sub	sp, #20
  while((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8002468:	4810      	ldr	r0, [pc, #64]	; (80024ac <hci_user_evt_proc+0x4c>)
 800246a:	f000 fb20 	bl	8002aae <LST_is_empty>
 800246e:	b908      	cbnz	r0, 8002474 <hci_user_evt_proc+0x14>
 8002470:	7b23      	ldrb	r3, [r4, #12]
 8002472:	b90b      	cbnz	r3, 8002478 <hci_user_evt_proc+0x18>
}
 8002474:	b005      	add	sp, #20
 8002476:	bd30      	pop	{r4, r5, pc}
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8002478:	a901      	add	r1, sp, #4
 800247a:	4620      	mov	r0, r4
 800247c:	f000 fb44 	bl	8002b08 <LST_remove_head>
    UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8002480:	2301      	movs	r3, #1
 8002482:	7323      	strb	r3, [r4, #12]
    if (hciContext.UserEvtRx != NULL)
 8002484:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002486:	b133      	cbz	r3, 8002496 <hci_user_evt_proc+0x36>
      UserEvtRxParam.pckt = phcievtbuffer;
 8002488:	9a01      	ldr	r2, [sp, #4]
 800248a:	9203      	str	r2, [sp, #12]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800248c:	a802      	add	r0, sp, #8
 800248e:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8002490:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8002494:	7323      	strb	r3, [r4, #12]
    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8002496:	7b23      	ldrb	r3, [r4, #12]
 8002498:	b11b      	cbz	r3, 80024a2 <hci_user_evt_proc+0x42>
      TL_MM_EvtDone( phcievtbuffer );
 800249a:	9801      	ldr	r0, [sp, #4]
 800249c:	f000 fe5a 	bl	8003154 <TL_MM_EvtDone>
 80024a0:	e7e2      	b.n	8002468 <hci_user_evt_proc+0x8>
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80024a2:	9901      	ldr	r1, [sp, #4]
 80024a4:	4620      	mov	r0, r4
 80024a6:	f000 fb0c 	bl	8002ac2 <LST_insert_head>
 80024aa:	e7dd      	b.n	8002468 <hci_user_evt_proc+0x8>
 80024ac:	200001ec 	.word	0x200001ec
 80024b0:	20001270 	.word	0x20001270

080024b4 <hci_send_req>:
{
 80024b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    if(StatusNotCallBackFunction != 0)
 80024b8:	4f2c      	ldr	r7, [pc, #176]	; (800256c <hci_send_req+0xb8>)
 80024ba:	68bb      	ldr	r3, [r7, #8]
{
 80024bc:	4605      	mov	r5, r0
    if(StatusNotCallBackFunction != 0)
 80024be:	b10b      	cbz	r3, 80024c4 <hci_send_req+0x10>
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 80024c0:	2000      	movs	r0, #0
 80024c2:	4798      	blx	r3
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 80024c4:	886c      	ldrh	r4, [r5, #2]
 80024c6:	882b      	ldrh	r3, [r5, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 80024c8:	68ea      	ldr	r2, [r5, #12]
 80024ca:	68a9      	ldr	r1, [r5, #8]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80024cc:	f8df 909c 	ldr.w	r9, [pc, #156]	; 800256c <hci_send_req+0xb8>
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 80024d0:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80024d4:	ea44 2483 	orr.w	r4, r4, r3, lsl #10
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 80024d8:	4b25      	ldr	r3, [pc, #148]	; (8002570 <hci_send_req+0xbc>)
 80024da:	6898      	ldr	r0, [r3, #8]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 80024dc:	b2a4      	uxth	r4, r4
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 80024de:	72c2      	strb	r2, [r0, #11]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 80024e0:	f8a0 4009 	strh.w	r4, [r0, #9]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 80024e4:	b2d2      	uxtb	r2, r2
 80024e6:	300c      	adds	r0, #12
 80024e8:	f003 f82c 	bl	8005544 <memcpy>
  hciContext.io.Send(0,0);
 80024ec:	2100      	movs	r1, #0
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	4608      	mov	r0, r1
 80024f2:	4798      	blx	r3
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 80024f4:	f248 00e8 	movw	r0, #33000	; 0x80e8
 80024f8:	f7ff f8f2 	bl	80016e0 <hci_cmd_resp_wait>
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80024fc:	f04f 0800 	mov.w	r8, #0
 8002500:	4648      	mov	r0, r9
 8002502:	f000 fad4 	bl	8002aae <LST_is_empty>
 8002506:	b150      	cbz	r0, 800251e <hci_send_req+0x6a>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8002508:	f1b8 0f00 	cmp.w	r8, #0
 800250c:	d0f2      	beq.n	80024f4 <hci_send_req+0x40>
    if(StatusNotCallBackFunction != 0)
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	b10b      	cbz	r3, 8002516 <hci_send_req+0x62>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8002512:	2001      	movs	r0, #1
 8002514:	4798      	blx	r3
}
 8002516:	2000      	movs	r0, #0
 8002518:	b003      	add	sp, #12
 800251a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800251e:	a901      	add	r1, sp, #4
 8002520:	4648      	mov	r0, r9
 8002522:	f000 faf1 	bl	8002b08 <LST_remove_head>
      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8002526:	9e01      	ldr	r6, [sp, #4]
 8002528:	7a73      	ldrb	r3, [r6, #9]
 800252a:	2b0f      	cmp	r3, #15
 800252c:	d10c      	bne.n	8002548 <hci_send_req+0x94>
        if(pcommand_status_event->cmdcode == opcode)
 800252e:	f8b6 300d 	ldrh.w	r3, [r6, #13]
 8002532:	42a3      	cmp	r3, r4
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8002534:	bf02      	ittt	eq
 8002536:	692b      	ldreq	r3, [r5, #16]
 8002538:	7af2      	ldrbeq	r2, [r6, #11]
 800253a:	701a      	strbeq	r2, [r3, #0]
        if(pcommand_status_event->numcmd != 0)
 800253c:	7b33      	ldrb	r3, [r6, #12]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d0de      	beq.n	8002500 <hci_send_req+0x4c>
          local_cmd_status = HCI_TL_CmdAvailable;
 8002542:	f04f 0801 	mov.w	r8, #1
 8002546:	e7db      	b.n	8002500 <hci_send_req+0x4c>
        if(pcommand_complete_event->cmdcode == opcode)
 8002548:	89b3      	ldrh	r3, [r6, #12]
 800254a:	42a3      	cmp	r3, r4
 800254c:	d10c      	bne.n	8002568 <hci_send_req+0xb4>
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800254e:	7ab2      	ldrb	r2, [r6, #10]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8002550:	696b      	ldr	r3, [r5, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8002552:	6928      	ldr	r0, [r5, #16]
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8002554:	3a03      	subs	r2, #3
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8002556:	b2d2      	uxtb	r2, r2
 8002558:	429a      	cmp	r2, r3
 800255a:	bfa8      	it	ge
 800255c:	461a      	movge	r2, r3
 800255e:	616a      	str	r2, [r5, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8002560:	f106 010e 	add.w	r1, r6, #14
 8002564:	f002 ffee 	bl	8005544 <memcpy>
        if(pcommand_complete_event->numcmd != 0)
 8002568:	7af3      	ldrb	r3, [r6, #11]
 800256a:	e7e8      	b.n	800253e <hci_send_req+0x8a>
 800256c:	20001270 	.word	0x20001270
 8002570:	200001ec 	.word	0x200001ec

08002574 <LPM_SetConf>:
__weak void LPM_ExitOffMode(void);

/* Functions Definition ------------------------------------------------------*/
void LPM_SetConf(LPM_Conf_t *p_conf)
{
  LowPowerModeConfiguration.Stop_Mode_Config = p_conf->Stop_Mode_Config;
 8002574:	4b02      	ldr	r3, [pc, #8]	; (8002580 <LPM_SetConf+0xc>)
 8002576:	7802      	ldrb	r2, [r0, #0]
 8002578:	701a      	strb	r2, [r3, #0]
  LowPowerModeConfiguration.OFF_Mode_Config = p_conf->OFF_Mode_Config;
 800257a:	7842      	ldrb	r2, [r0, #1]
 800257c:	705a      	strb	r2, [r3, #1]
 800257e:	4770      	bx	lr
 8002580:	2000129c 	.word	0x2000129c

08002584 <LPM_SetOffMode>:

  return;
}

void LPM_SetOffMode(uint32_t id, LPM_OffModeSel_t mode)
{
 8002584:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002586:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800258a:	b672      	cpsid	i
 800258c:	4b06      	ldr	r3, [pc, #24]	; (80025a8 <LPM_SetOffMode+0x24>)
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  if(mode == LPM_OffMode_En)
 800258e:	2901      	cmp	r1, #1
  {
    LowPowerModeSel &= (~id);
 8002590:	bf0b      	itete	eq
 8002592:	6859      	ldreq	r1, [r3, #4]
  }
  else
  {
    LowPowerModeSel |= id;
 8002594:	685a      	ldrne	r2, [r3, #4]
    LowPowerModeSel &= (~id);
 8002596:	4381      	biceq	r1, r0
    LowPowerModeSel |= id;
 8002598:	4302      	orrne	r2, r0
    LowPowerModeSel &= (~id);
 800259a:	bf0c      	ite	eq
 800259c:	6059      	streq	r1, [r3, #4]
    LowPowerModeSel |= id;
 800259e:	605a      	strne	r2, [r3, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025a0:	f384 8810 	msr	PRIMASK, r4
 80025a4:	bd10      	pop	{r4, pc}
 80025a6:	bf00      	nop
 80025a8:	2000129c 	.word	0x2000129c

080025ac <Osal_MemCpy>:
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
  return memcpy( dest, src, size ); 
 80025ac:	f002 bfca 	b.w	8005544 <memcpy>

080025b0 <Osal_MemSet>:
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
  return memset( ptr, value, size );
 80025b0:	f002 bfd3 	b.w	800555a <memset>

080025b4 <OTP_Read>:

uint8_t * OTP_Read( uint8_t id )
{
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 80025b4:	4b05      	ldr	r3, [pc, #20]	; (80025cc <OTP_Read+0x18>)

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80025b6:	4a06      	ldr	r2, [pc, #24]	; (80025d0 <OTP_Read+0x1c>)
 80025b8:	79d9      	ldrb	r1, [r3, #7]
 80025ba:	4281      	cmp	r1, r0
 80025bc:	d002      	beq.n	80025c4 <OTP_Read+0x10>
 80025be:	4293      	cmp	r3, r2
 80025c0:	d102      	bne.n	80025c8 <OTP_Read+0x14>
    p_id -= 8 ;
  }

  if((*( p_id + 7 )) != id)
  {
    p_id = 0 ;
 80025c2:	2300      	movs	r3, #0
  }

  return p_id ;
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	4770      	bx	lr
    p_id -= 8 ;
 80025c8:	3b08      	subs	r3, #8
 80025ca:	e7f5      	b.n	80025b8 <OTP_Read+0x4>
 80025cc:	1fff73f8 	.word	0x1fff73f8
 80025d0:	1fff7000 	.word	0x1fff7000

080025d4 <PeerToPeer_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t PeerToPeer_Event_Handler(void *Event)
{
 80025d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);

  switch(event_pckt->evt)
 80025d6:	7843      	ldrb	r3, [r0, #1]
 80025d8:	2bff      	cmp	r3, #255	; 0xff
{
 80025da:	4604      	mov	r4, r0
  switch(event_pckt->evt)
 80025dc:	d12f      	bne.n	800263e <PeerToPeer_Event_Handler+0x6a>
  {
    case EVT_VENDOR:
    {
      blue_evt = (evt_blue_aci*)event_pckt->data;
      switch(blue_evt->ecode)
 80025de:	f8b0 2003 	ldrh.w	r2, [r0, #3]
 80025e2:	f640 4301 	movw	r3, #3073	; 0xc01
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d129      	bne.n	800263e <PeerToPeer_Event_Handler+0x6a>
      {
        case EVT_BLUE_GATT_ATTRIBUTE_MODIFIED:
       {
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blue_evt->data;
            if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PNotifyServerToClientCharHdle + 2))
 80025ea:	4916      	ldr	r1, [pc, #88]	; (8002644 <PeerToPeer_Event_Handler+0x70>)
 80025ec:	f8b0 2007 	ldrh.w	r2, [r0, #7]
 80025f0:	888b      	ldrh	r3, [r1, #4]
 80025f2:	3302      	adds	r3, #2
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d10f      	bne.n	8002618 <PeerToPeer_Event_Handler+0x44>
               */
              return_value = SVCCTL_EvtAckFlowEnable;
              /**
               * Notify to application
               */
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 80025f8:	7b43      	ldrb	r3, [r0, #13]
 80025fa:	07db      	lsls	r3, r3, #31
 80025fc:	d508      	bpl.n	8002610 <PeerToPeer_Event_Handler+0x3c>
              {
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 80025fe:	2300      	movs	r3, #0
 8002600:	f88d 3000 	strb.w	r3, [sp]
                P2PS_STM_App_Notification(&Notification);
 8002604:	4668      	mov	r0, sp
 8002606:	f7ff f8a3 	bl	8001750 <P2PS_STM_App_Notification>
 800260a:	2001      	movs	r0, #1
    default:
      break;
  }

  return(return_value);
}/* end SVCCTL_EvtAckStatus_t */
 800260c:	b004      	add	sp, #16
 800260e:	bd10      	pop	{r4, pc}
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 8002610:	2401      	movs	r4, #1
 8002612:	f88d 4000 	strb.w	r4, [sp]
 8002616:	e7f5      	b.n	8002604 <PeerToPeer_Event_Handler+0x30>
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PWriteClientToServerCharHdle + 1))
 8002618:	884b      	ldrh	r3, [r1, #2]
 800261a:	3301      	adds	r3, #1
 800261c:	429a      	cmp	r2, r3
 800261e:	d10e      	bne.n	800263e <PeerToPeer_Event_Handler+0x6a>
              BLE_DBG_P2P_STM_MSG("-- GATT : LED CONFIGURATION RECEIVED\n");
 8002620:	4809      	ldr	r0, [pc, #36]	; (8002648 <PeerToPeer_Event_Handler+0x74>)
 8002622:	f003 f817 	bl	8005654 <puts>
              Notification.P2P_Evt_Opcode = P2PS_STM_WRITE_EVT;
 8002626:	2303      	movs	r3, #3
 8002628:	f88d 3000 	strb.w	r3, [sp]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 800262c:	f8b4 300b 	ldrh.w	r3, [r4, #11]
 8002630:	f88d 3008 	strb.w	r3, [sp, #8]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 8002634:	340d      	adds	r4, #13
              P2PS_STM_App_Notification(&Notification);  
 8002636:	4668      	mov	r0, sp
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 8002638:	9401      	str	r4, [sp, #4]
              P2PS_STM_App_Notification(&Notification);  
 800263a:	f7ff f889 	bl	8001750 <P2PS_STM_App_Notification>
  return_value = SVCCTL_EvtNotAck;
 800263e:	2000      	movs	r0, #0
 8002640:	e7e4      	b.n	800260c <PeerToPeer_Event_Handler+0x38>
 8002642:	bf00      	nop
 8002644:	200001fa 	.word	0x200001fa
 8002648:	08006982 	.word	0x08006982

0800264c <P2PS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PS_STM_Init(void)
{
 800264c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 8002650:	4861      	ldr	r0, [pc, #388]	; (80027d8 <P2PS_STM_Init+0x18c>)
     *                                2 for P2P Notify characteristic +
     *                                1 for client char configuration descriptor +
     *                                
     */
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
    aci_gatt_add_service(UUID_TYPE_128,
 8002652:	4d62      	ldr	r5, [pc, #392]	; (80027dc <P2PS_STM_Init+0x190>)
{
 8002654:	b08b      	sub	sp, #44	; 0x2c
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 8002656:	f000 fc55 	bl	8002f04 <SVCCTL_RegisterSvcHandler>
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 800265a:	238f      	movs	r3, #143	; 0x8f
 800265c:	f88d 3018 	strb.w	r3, [sp, #24]
 8002660:	23e5      	movs	r3, #229	; 0xe5
 8002662:	f88d 3019 	strb.w	r3, [sp, #25]
 8002666:	23b3      	movs	r3, #179	; 0xb3
 8002668:	f88d 301a 	strb.w	r3, [sp, #26]
 800266c:	23d5      	movs	r3, #213	; 0xd5
 800266e:	f88d 301b 	strb.w	r3, [sp, #27]
 8002672:	232e      	movs	r3, #46	; 0x2e
 8002674:	f88d 301c 	strb.w	r3, [sp, #28]
 8002678:	237f      	movs	r3, #127	; 0x7f
 800267a:	f88d 301d 	strb.w	r3, [sp, #29]
 800267e:	234a      	movs	r3, #74	; 0x4a
 8002680:	f88d 301e 	strb.w	r3, [sp, #30]
 8002684:	2398      	movs	r3, #152	; 0x98
 8002686:	f88d 301f 	strb.w	r3, [sp, #31]
 800268a:	232a      	movs	r3, #42	; 0x2a
 800268c:	f88d 3020 	strb.w	r3, [sp, #32]
 8002690:	2348      	movs	r3, #72	; 0x48
 8002692:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 8002696:	237a      	movs	r3, #122	; 0x7a
 8002698:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
 800269c:	23cc      	movs	r3, #204	; 0xcc
 800269e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 80026a2:	2340      	movs	r3, #64	; 0x40
 80026a4:	2400      	movs	r4, #0
 80026a6:	f04f 08fe 	mov.w	r8, #254	; 0xfe
 80026aa:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    aci_gatt_add_service(UUID_TYPE_128,
 80026ae:	9500      	str	r5, [sp, #0]
 80026b0:	a906      	add	r1, sp, #24
 80026b2:	2308      	movs	r3, #8
 80026b4:	2201      	movs	r2, #1
 80026b6:	2002      	movs	r0, #2
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 80026b8:	f88d 8025 	strb.w	r8, [sp, #37]	; 0x25
 80026bc:	f88d 4026 	strb.w	r4, [sp, #38]	; 0x26
 80026c0:	f88d 4027 	strb.w	r4, [sp, #39]	; 0x27
    aci_gatt_add_service(UUID_TYPE_128,
 80026c4:	f7ff fc52 	bl	8001f6c <aci_gatt_add_service>
                      &(aPeerToPeerContext.PeerToPeerSvcHdle));

    /**
     *  Add LED Characteristic
     */
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 80026c8:	f06f 037d 	mvn.w	r3, #125	; 0x7d
 80026cc:	f88d 301a 	strb.w	r3, [sp, #26]
 80026d0:	f06f 0351 	mvn.w	r3, #81	; 0x51
 80026d4:	f88d 301b 	strb.w	r3, [sp, #27]
 80026d8:	f04f 0321 	mov.w	r3, #33	; 0x21
 80026dc:	f88d 301d 	strb.w	r3, [sp, #29]
 80026e0:	f04f 034c 	mov.w	r3, #76	; 0x4c
 80026e4:	f88d 301e 	strb.w	r3, [sp, #30]
 80026e8:	f06f 0362 	mvn.w	r3, #98	; 0x62
 80026ec:	f88d 301f 	strb.w	r3, [sp, #31]
 80026f0:	f04f 0345 	mov.w	r3, #69	; 0x45
 80026f4:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 80026f8:	f04f 0322 	mov.w	r3, #34	; 0x22
 80026fc:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 8002700:	462b      	mov	r3, r5
 8002702:	2601      	movs	r6, #1
 8002704:	f833 0b02 	ldrh.w	r0, [r3], #2
 8002708:	9305      	str	r3, [sp, #20]
 800270a:	230a      	movs	r3, #10
 800270c:	9303      	str	r3, [sp, #12]
 800270e:	2306      	movs	r3, #6
 8002710:	9300      	str	r3, [sp, #0]
 8002712:	2302      	movs	r3, #2
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 8002714:	27ed      	movs	r7, #237	; 0xed
 8002716:	f04f 0941 	mov.w	r9, #65	; 0x41
 800271a:	f04f 0b19 	mov.w	fp, #25
 800271e:	f04f 0a8e 	mov.w	sl, #142	; 0x8e
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 8002722:	aa06      	add	r2, sp, #24
 8002724:	4619      	mov	r1, r3
 8002726:	9604      	str	r6, [sp, #16]
 8002728:	9602      	str	r6, [sp, #8]
 800272a:	9401      	str	r4, [sp, #4]
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 800272c:	f88d b018 	strb.w	fp, [sp, #24]
 8002730:	f88d 7019 	strb.w	r7, [sp, #25]
 8002734:	f88d 701c 	strb.w	r7, [sp, #28]
 8002738:	f88d 9020 	strb.w	r9, [sp, #32]
 800273c:	f88d a023 	strb.w	sl, [sp, #35]	; 0x23
 8002740:	f88d 9024 	strb.w	r9, [sp, #36]	; 0x24
 8002744:	f88d 8025 	strb.w	r8, [sp, #37]	; 0x25
 8002748:	f88d 4026 	strb.w	r4, [sp, #38]	; 0x26
 800274c:	f88d 4027 	strb.w	r4, [sp, #39]	; 0x27
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 8002750:	f7ff fc5c 	bl	800200c <aci_gatt_add_char>
                      &(aPeerToPeerContext.P2PWriteClientToServerCharHdle));

    /**
     *   Add Button Characteristic
     */
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 8002754:	f06f 037d 	mvn.w	r3, #125	; 0x7d
 8002758:	f88d 301a 	strb.w	r3, [sp, #26]
 800275c:	f06f 0351 	mvn.w	r3, #81	; 0x51
 8002760:	f88d 301b 	strb.w	r3, [sp, #27]
 8002764:	f04f 0321 	mov.w	r3, #33	; 0x21
 8002768:	f88d 301d 	strb.w	r3, [sp, #29]
 800276c:	f04f 034c 	mov.w	r3, #76	; 0x4c
 8002770:	f88d 301e 	strb.w	r3, [sp, #30]
 8002774:	f06f 0362 	mvn.w	r3, #98	; 0x62
 8002778:	f88d 301f 	strb.w	r3, [sp, #31]
 800277c:	f04f 0345 	mov.w	r3, #69	; 0x45
 8002780:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 8002784:	f04f 0322 	mov.w	r3, #34	; 0x22
 8002788:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
 800278c:	2342      	movs	r3, #66	; 0x42
 800278e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 8002792:	230a      	movs	r3, #10
 8002794:	9303      	str	r3, [sp, #12]
 8002796:	2310      	movs	r3, #16
 8002798:	f835 0b04 	ldrh.w	r0, [r5], #4
 800279c:	9300      	str	r3, [sp, #0]
 800279e:	2302      	movs	r3, #2
 80027a0:	9505      	str	r5, [sp, #20]
 80027a2:	9604      	str	r6, [sp, #16]
 80027a4:	9602      	str	r6, [sp, #8]
 80027a6:	9401      	str	r4, [sp, #4]
 80027a8:	aa06      	add	r2, sp, #24
 80027aa:	4619      	mov	r1, r3
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 80027ac:	f88d b018 	strb.w	fp, [sp, #24]
 80027b0:	f88d 7019 	strb.w	r7, [sp, #25]
 80027b4:	f88d 701c 	strb.w	r7, [sp, #28]
 80027b8:	f88d 9020 	strb.w	r9, [sp, #32]
 80027bc:	f88d a023 	strb.w	sl, [sp, #35]	; 0x23
 80027c0:	f88d 8025 	strb.w	r8, [sp, #37]	; 0x25
 80027c4:	f88d 4026 	strb.w	r4, [sp, #38]	; 0x26
 80027c8:	f88d 4027 	strb.w	r4, [sp, #39]	; 0x27
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 80027cc:	f7ff fc1e 	bl	800200c <aci_gatt_add_char>
                      &(aPeerToPeerContext.RebootReqCharHdle));
#endif    

    
  return;
}
 80027d0:	b00b      	add	sp, #44	; 0x2c
 80027d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80027d6:	bf00      	nop
 80027d8:	080025d5 	.word	0x080025d5
 80027dc:	200001fa 	.word	0x200001fa

080027e0 <P2PS_STM_App_Update_Char>:
 * 
 */
tBleStatus P2PS_STM_App_Update_Char(uint16_t UUID, uint8_t *pPayload) 
{
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
  switch(UUID)
 80027e0:	f64f 6342 	movw	r3, #65090	; 0xfe42
 80027e4:	4298      	cmp	r0, r3
{
 80027e6:	b507      	push	{r0, r1, r2, lr}
 80027e8:	460a      	mov	r2, r1
  switch(UUID)
 80027ea:	d10a      	bne.n	8002802 <P2PS_STM_App_Update_Char+0x22>
  {
    case P2P_NOTIFY_CHAR_UUID:
      
     result = aci_gatt_update_char_value(aPeerToPeerContext.PeerToPeerSvcHdle,
 80027ec:	4b06      	ldr	r3, [pc, #24]	; (8002808 <P2PS_STM_App_Update_Char+0x28>)
 80027ee:	8899      	ldrh	r1, [r3, #4]
 80027f0:	8818      	ldrh	r0, [r3, #0]
 80027f2:	9200      	str	r2, [sp, #0]
 80027f4:	2302      	movs	r3, #2
 80027f6:	2200      	movs	r2, #0
 80027f8:	f7ff fc65 	bl	80020c6 <aci_gatt_update_char_value>
    default:
      break;
  }

  return result;
}/* end P2PS_STM_Init() */
 80027fc:	b003      	add	sp, #12
 80027fe:	f85d fb04 	ldr.w	pc, [sp], #4
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 8002802:	2042      	movs	r0, #66	; 0x42
 8002804:	e7fa      	b.n	80027fc <P2PS_STM_App_Update_Char+0x1c>
 8002806:	bf00      	nop
 8002808:	200001fa 	.word	0x200001fa

0800280c <SCH_RegTask>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800280c:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8002810:	b672      	cpsid	i
{
  BACKUP_PRIMASK();

  DISABLE_IRQ();

  TaskCb[task_id] = task;
 8002812:	4a03      	ldr	r2, [pc, #12]	; (8002820 <SCH_RegTask+0x14>)
 8002814:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002818:	f383 8810 	msr	PRIMASK, r3
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	200012a8 	.word	0x200012a8

08002824 <SCH_SetTask>:

/**
 *  this function can be nested
 */
void SCH_SetTask( uint32_t task_id_bm , uint32_t task_prio )
{
 8002824:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002826:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800282a:	b672      	cpsid	i
  BACKUP_PRIMASK();

  DISABLE_IRQ();

  TaskSet |= task_id_bm;
 800282c:	4b05      	ldr	r3, [pc, #20]	; (8002844 <SCH_SetTask+0x20>)
 800282e:	691c      	ldr	r4, [r3, #16]
 8002830:	4304      	orrs	r4, r0
 8002832:	611c      	str	r4, [r3, #16]
  TaskPrio[task_prio].priority |= task_id_bm;
 8002834:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8002838:	6959      	ldr	r1, [r3, #20]
 800283a:	4301      	orrs	r1, r0
 800283c:	6159      	str	r1, [r3, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800283e:	f382 8810 	msr	PRIMASK, r2
 8002842:	bd10      	pop	{r4, pc}
 8002844:	200012a8 	.word	0x200012a8

08002848 <SCH_PauseTask>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002848:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800284c:	b672      	cpsid	i
{
  BACKUP_PRIMASK();

  DISABLE_IRQ();

  TaskMask &= (~task_id_bm);
 800284e:	4904      	ldr	r1, [pc, #16]	; (8002860 <SCH_PauseTask+0x18>)
 8002850:	680a      	ldr	r2, [r1, #0]
 8002852:	ea22 0200 	bic.w	r2, r2, r0
 8002856:	600a      	str	r2, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002858:	f383 8810 	msr	PRIMASK, r3
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	2000003c 	.word	0x2000003c

08002864 <SCH_ResumeTask>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002864:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8002868:	b672      	cpsid	i
{
  BACKUP_PRIMASK();

  DISABLE_IRQ();

  TaskMask |= task_id_bm;
 800286a:	4903      	ldr	r1, [pc, #12]	; (8002878 <SCH_ResumeTask+0x14>)
 800286c:	680a      	ldr	r2, [r1, #0]
 800286e:	4302      	orrs	r2, r0
 8002870:	600a      	str	r2, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002872:	f383 8810 	msr	PRIMASK, r3
 8002876:	4770      	bx	lr
 8002878:	2000003c 	.word	0x2000003c

0800287c <SCH_SetEvt>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800287c:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8002880:	b672      	cpsid	i
{
  BACKUP_PRIMASK();

  DISABLE_IRQ();

  EvtSet |= evt_id_bm;
 8002882:	4903      	ldr	r1, [pc, #12]	; (8002890 <SCH_SetEvt+0x14>)
 8002884:	69ca      	ldr	r2, [r1, #28]
 8002886:	4302      	orrs	r2, r0
 8002888:	61ca      	str	r2, [r1, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800288a:	f383 8810 	msr	PRIMASK, r3
 800288e:	4770      	bx	lr
 8002890:	200012a8 	.word	0x200012a8

08002894 <SCH_Run>:
{
 8002894:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002898:	f3ef 8510 	mrs	r5, PRIMASK
  super_mask_backup = SuperMask;
 800289c:	4e22      	ldr	r6, [pc, #136]	; (8002928 <SCH_Run+0x94>)
  while(TaskSet & TaskMask & SuperMask)
 800289e:	4f23      	ldr	r7, [pc, #140]	; (800292c <SCH_Run+0x98>)
  super_mask_backup = SuperMask;
 80028a0:	6874      	ldr	r4, [r6, #4]
  SuperMask &= mask_bm;
 80028a2:	4020      	ands	r0, r4
 80028a4:	6070      	str	r0, [r6, #4]
 80028a6:	46b8      	mov	r8, r7
      TaskPrio[counter].round_robin = (~0);
 80028a8:	f04f 39ff 	mov.w	r9, #4294967295
  while(TaskSet & TaskMask & SuperMask)
 80028ac:	6833      	ldr	r3, [r6, #0]
 80028ae:	693a      	ldr	r2, [r7, #16]
 80028b0:	6871      	ldr	r1, [r6, #4]
 80028b2:	401a      	ands	r2, r3
 80028b4:	420a      	tst	r2, r1
 80028b6:	d111      	bne.n	80028dc <SCH_Run+0x48>
  __ASM volatile ("cpsid i" : : : "memory");
 80028b8:	b672      	cpsid	i
  if (!((TaskSet & TaskMask & SuperMask) || (EvtSet & EvtWaited)))
 80028ba:	6832      	ldr	r2, [r6, #0]
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	4013      	ands	r3, r2
 80028c0:	6872      	ldr	r2, [r6, #4]
 80028c2:	4213      	tst	r3, r2
 80028c4:	d105      	bne.n	80028d2 <SCH_Run+0x3e>
 80028c6:	69fa      	ldr	r2, [r7, #28]
 80028c8:	6a3b      	ldr	r3, [r7, #32]
 80028ca:	421a      	tst	r2, r3
 80028cc:	d101      	bne.n	80028d2 <SCH_Run+0x3e>
    SCH_Idle();
 80028ce:	f7fd fed1 	bl	8000674 <SCH_Idle>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028d2:	f385 8810 	msr	PRIMASK, r5
  SuperMask = super_mask_backup;
 80028d6:	6074      	str	r4, [r6, #4]
 80028d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    while(!(TaskPrio[counter].priority & TaskMask & SuperMask))
 80028dc:	697a      	ldr	r2, [r7, #20]
 80028de:	400b      	ands	r3, r1
 80028e0:	4013      	ands	r3, r2
    if (!(TaskPrio[counter].round_robin & current_task_set))
 80028e2:	69ba      	ldr	r2, [r7, #24]
 80028e4:	4213      	tst	r3, r2
      TaskPrio[counter].round_robin = (~0);
 80028e6:	bf08      	it	eq
 80028e8:	f8c7 9018 	streq.w	r9, [r7, #24]
    bit_nbr = COUNT_LEAD_ZERO(current_task_set & TaskPrio[counter].round_robin);
 80028ec:	f8d8 2018 	ldr.w	r2, [r8, #24]
 80028f0:	4013      	ands	r3, r2
 80028f2:	fab3 f383 	clz	r3, r3
    TaskPrio[counter].round_robin &= ~(1 << (31 - bit_nbr));
 80028f6:	f1c3 031f 	rsb	r3, r3, #31
 80028fa:	2001      	movs	r0, #1
 80028fc:	4098      	lsls	r0, r3
 80028fe:	43c0      	mvns	r0, r0
 8002900:	4002      	ands	r2, r0
 8002902:	f8c8 2018 	str.w	r2, [r8, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 8002906:	b672      	cpsid	i
    TaskSet &= ~(1 << (31 - bit_nbr));
 8002908:	f8d8 1010 	ldr.w	r1, [r8, #16]
      TaskPrio[counter - 1].priority &= ~(1 << (31 - bit_nbr));
 800290c:	f8d8 2014 	ldr.w	r2, [r8, #20]
    TaskSet &= ~(1 << (31 - bit_nbr));
 8002910:	4001      	ands	r1, r0
      TaskPrio[counter - 1].priority &= ~(1 << (31 - bit_nbr));
 8002912:	4002      	ands	r2, r0
    TaskSet &= ~(1 << (31 - bit_nbr));
 8002914:	f8c8 1010 	str.w	r1, [r8, #16]
      TaskPrio[counter - 1].priority &= ~(1 << (31 - bit_nbr));
 8002918:	f8c8 2014 	str.w	r2, [r8, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800291c:	f385 8810 	msr	PRIMASK, r5
    TaskCb[31 - bit_nbr]();
 8002920:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8002924:	4798      	blx	r3
 8002926:	e7c1      	b.n	80028ac <SCH_Run+0x18>
 8002928:	2000003c 	.word	0x2000003c
 800292c:	200012a8 	.word	0x200012a8

08002930 <SCH_WaitEvt>:

/**
 *  this function can be nested
 */
void SCH_WaitEvt( uint32_t evt_id_bm )
{
 8002930:	b538      	push	{r3, r4, r5, lr}
  uint32_t event_waited_id_backup;

  /** backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 8002932:	4c07      	ldr	r4, [pc, #28]	; (8002950 <SCH_WaitEvt+0x20>)
 8002934:	6a25      	ldr	r5, [r4, #32]
  EvtWaited = evt_id_bm;
 8002936:	6220      	str	r0, [r4, #32]
   *  the while loop below.
   *  The system is waiting only for the last waited event.
   *  When it will go out, it will wait again fro the previous one.
   *  It case it occurs while waiting for the second one, the while loop will exit immediately
   */
  while((EvtSet & EvtWaited) == 0)
 8002938:	69e3      	ldr	r3, [r4, #28]
 800293a:	6a20      	ldr	r0, [r4, #32]
 800293c:	4203      	tst	r3, r0
 800293e:	d004      	beq.n	800294a <SCH_WaitEvt+0x1a>
  {
    SCH_EvtIdle(EvtWaited);
  }
  EvtSet &= (~EvtWaited);
 8002940:	ea23 0300 	bic.w	r3, r3, r0
 8002944:	61e3      	str	r3, [r4, #28]
  EvtWaited = event_waited_id_backup;
 8002946:	6225      	str	r5, [r4, #32]
 8002948:	bd38      	pop	{r3, r4, r5, pc}
    SCH_EvtIdle(EvtWaited);
 800294a:	f7fd fe94 	bl	8000676 <SCH_EvtIdle>
 800294e:	e7f3      	b.n	8002938 <SCH_WaitEvt+0x8>
 8002950:	200012a8 	.word	0x200012a8

08002954 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8002954:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8002956:	f100 020c 	add.w	r2, r0, #12
 800295a:	466b      	mov	r3, sp
 800295c:	2121      	movs	r1, #33	; 0x21
 800295e:	f64f 4066 	movw	r0, #64614	; 0xfc66
 8002962:	f000 f873 	bl	8002a4c <shci_send>
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}
 8002966:	f89d 000e 	ldrb.w	r0, [sp, #14]
 800296a:	b005      	add	sp, #20
 800296c:	f85d fb04 	ldr.w	pc, [sp], #4

08002970 <TlUserEvtReceived>:

  return;
}

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8002970:	b510      	push	{r4, lr}
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8002972:	4c05      	ldr	r4, [pc, #20]	; (8002988 <TlUserEvtReceived+0x18>)
 8002974:	4601      	mov	r1, r0
 8002976:	4620      	mov	r0, r4
 8002978:	f000 f8af 	bl	8002ada <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800297c:	4620      	mov	r0, r4

  return;
}
 800297e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8002982:	f7fd be7c 	b.w	800067e <shci_notify_asynch_evt>
 8002986:	bf00      	nop
 8002988:	2000020c 	.word	0x2000020c

0800298c <TlCmdEvtReceived>:
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800298c:	2000      	movs	r0, #0
 800298e:	f7fd be7a 	b.w	8000686 <shci_cmd_resp_release>
	...

08002994 <Cmd_SetStatus.constprop.1>:
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8002994:	4b03      	ldr	r3, [pc, #12]	; (80029a4 <Cmd_SetStatus.constprop.1+0x10>)
 8002996:	2001      	movs	r0, #1
 8002998:	7218      	strb	r0, [r3, #8]
    if(StatusNotCallBackFunction != 0)
 800299a:	4b03      	ldr	r3, [pc, #12]	; (80029a8 <Cmd_SetStatus.constprop.1+0x14>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	b103      	cbz	r3, 80029a2 <Cmd_SetStatus.constprop.1+0xe>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 80029a0:	4718      	bx	r3
 80029a2:	4770      	bx	lr
 80029a4:	2000020c 	.word	0x2000020c
 80029a8:	200012cc 	.word	0x200012cc

080029ac <shci_init>:
{
 80029ac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80029ae:	4c0e      	ldr	r4, [pc, #56]	; (80029e8 <shci_init+0x3c>)
 80029b0:	684b      	ldr	r3, [r1, #4]
  shciContext.UserEvtRx = UserEvtRx;
 80029b2:	6220      	str	r0, [r4, #32]
{
 80029b4:	460d      	mov	r5, r1
  shci_register_io_bus (&shciContext.io);
 80029b6:	1d20      	adds	r0, r4, #4
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80029b8:	6023      	str	r3, [r4, #0]
  shci_register_io_bus (&shciContext.io);
 80029ba:	f000 fadb 	bl	8002f74 <shci_register_io_bus>
  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80029be:	682e      	ldr	r6, [r5, #0]
  pCmdBuffer = p_cmdbuffer;
 80029c0:	4d0a      	ldr	r5, [pc, #40]	; (80029ec <shci_init+0x40>)
  LST_init_head (&SHciAsynchEventQueue);
 80029c2:	4628      	mov	r0, r5
  pCmdBuffer = p_cmdbuffer;
 80029c4:	60ee      	str	r6, [r5, #12]
  LST_init_head (&SHciAsynchEventQueue);
 80029c6:	f000 f86f 	bl	8002aa8 <LST_init_head>
  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80029ca:	f7ff ffe3 	bl	8002994 <Cmd_SetStatus.constprop.1>
  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80029ce:	2301      	movs	r3, #1
 80029d0:	742b      	strb	r3, [r5, #16]
  if (shciContext.io.Init)
 80029d2:	6863      	ldr	r3, [r4, #4]
 80029d4:	b133      	cbz	r3, 80029e4 <shci_init+0x38>
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 80029d6:	4a06      	ldr	r2, [pc, #24]	; (80029f0 <shci_init+0x44>)
 80029d8:	9201      	str	r2, [sp, #4]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 80029da:	4a06      	ldr	r2, [pc, #24]	; (80029f4 <shci_init+0x48>)
    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80029dc:	9603      	str	r6, [sp, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 80029de:	9202      	str	r2, [sp, #8]
    shciContext.io.Init(&Conf);
 80029e0:	a801      	add	r0, sp, #4
 80029e2:	4798      	blx	r3
}
 80029e4:	b004      	add	sp, #16
 80029e6:	bd70      	pop	{r4, r5, r6, pc}
 80029e8:	200012cc 	.word	0x200012cc
 80029ec:	2000020c 	.word	0x2000020c
 80029f0:	0800298d 	.word	0x0800298d
 80029f4:	08002971 	.word	0x08002971

080029f8 <shci_user_evt_proc>:
{
 80029f8:	b530      	push	{r4, r5, lr}
  while((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80029fa:	4c12      	ldr	r4, [pc, #72]	; (8002a44 <shci_user_evt_proc+0x4c>)
    if (shciContext.UserEvtRx != NULL)
 80029fc:	4d12      	ldr	r5, [pc, #72]	; (8002a48 <shci_user_evt_proc+0x50>)
{
 80029fe:	b085      	sub	sp, #20
  while((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8002a00:	4810      	ldr	r0, [pc, #64]	; (8002a44 <shci_user_evt_proc+0x4c>)
 8002a02:	f000 f854 	bl	8002aae <LST_is_empty>
 8002a06:	b908      	cbnz	r0, 8002a0c <shci_user_evt_proc+0x14>
 8002a08:	7c23      	ldrb	r3, [r4, #16]
 8002a0a:	b90b      	cbnz	r3, 8002a10 <shci_user_evt_proc+0x18>
}
 8002a0c:	b005      	add	sp, #20
 8002a0e:	bd30      	pop	{r4, r5, pc}
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8002a10:	a901      	add	r1, sp, #4
 8002a12:	4620      	mov	r0, r4
 8002a14:	f000 f878 	bl	8002b08 <LST_remove_head>
    SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	7423      	strb	r3, [r4, #16]
    if (shciContext.UserEvtRx != NULL)
 8002a1c:	6a2b      	ldr	r3, [r5, #32]
 8002a1e:	b133      	cbz	r3, 8002a2e <shci_user_evt_proc+0x36>
      UserEvtRxParam.pckt = phcievtbuffer;
 8002a20:	9a01      	ldr	r2, [sp, #4]
 8002a22:	9203      	str	r2, [sp, #12]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8002a24:	a802      	add	r0, sp, #8
 8002a26:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8002a28:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8002a2c:	7423      	strb	r3, [r4, #16]
    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8002a2e:	7c23      	ldrb	r3, [r4, #16]
 8002a30:	b11b      	cbz	r3, 8002a3a <shci_user_evt_proc+0x42>
      TL_MM_EvtDone( phcievtbuffer );
 8002a32:	9801      	ldr	r0, [sp, #4]
 8002a34:	f000 fb8e 	bl	8003154 <TL_MM_EvtDone>
 8002a38:	e7e2      	b.n	8002a00 <shci_user_evt_proc+0x8>
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8002a3a:	9901      	ldr	r1, [sp, #4]
 8002a3c:	4620      	mov	r0, r4
 8002a3e:	f000 f840 	bl	8002ac2 <LST_insert_head>
 8002a42:	e7dd      	b.n	8002a00 <shci_user_evt_proc+0x8>
 8002a44:	2000020c 	.word	0x2000020c
 8002a48:	200012cc 	.word	0x200012cc

08002a4c <shci_send>:
{
 8002a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if(StatusNotCallBackFunction != 0)
 8002a50:	4c13      	ldr	r4, [pc, #76]	; (8002aa0 <shci_send+0x54>)
{
 8002a52:	4698      	mov	r8, r3
    if(StatusNotCallBackFunction != 0)
 8002a54:	6823      	ldr	r3, [r4, #0]
{
 8002a56:	4681      	mov	r9, r0
 8002a58:	460f      	mov	r7, r1
 8002a5a:	4692      	mov	sl, r2
    if(StatusNotCallBackFunction != 0)
 8002a5c:	b10b      	cbz	r3, 8002a62 <shci_send+0x16>
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8002a5e:	2000      	movs	r0, #0
 8002a60:	4798      	blx	r3
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8002a62:	4d10      	ldr	r5, [pc, #64]	; (8002aa4 <shci_send+0x58>)
  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8002a64:	68e8      	ldr	r0, [r5, #12]
  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8002a66:	463a      	mov	r2, r7
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8002a68:	2600      	movs	r6, #0
  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8002a6a:	f8a0 9009 	strh.w	r9, [r0, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8002a6e:	72c7      	strb	r7, [r0, #11]
  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8002a70:	4651      	mov	r1, sl
 8002a72:	300c      	adds	r0, #12
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8002a74:	722e      	strb	r6, [r5, #8]
  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8002a76:	f002 fd65 	bl	8005544 <memcpy>
  shciContext.io.Send(0,0);
 8002a7a:	6963      	ldr	r3, [r4, #20]
 8002a7c:	4631      	mov	r1, r6
 8002a7e:	4630      	mov	r0, r6
 8002a80:	4798      	blx	r3
  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8002a82:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8002a86:	f7fd fe01 	bl	800068c <shci_cmd_resp_wait>
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8002a8a:	68e9      	ldr	r1, [r5, #12]
 8002a8c:	788a      	ldrb	r2, [r1, #2]
 8002a8e:	f108 0008 	add.w	r0, r8, #8
 8002a92:	3203      	adds	r2, #3
 8002a94:	f002 fd56 	bl	8005544 <memcpy>
}
 8002a98:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8002a9c:	f7ff bf7a 	b.w	8002994 <Cmd_SetStatus.constprop.1>
 8002aa0:	200012cc 	.word	0x200012cc
 8002aa4:	2000020c 	.word	0x2000020c

08002aa8 <LST_init_head>:
/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
  listHead->next = listHead;
 8002aa8:	6000      	str	r0, [r0, #0]
  listHead->prev = listHead;
 8002aaa:	6040      	str	r0, [r0, #4]
 8002aac:	4770      	bx	lr

08002aae <LST_is_empty>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002aae:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8002ab2:	b672      	cpsid	i
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8002ab4:	6803      	ldr	r3, [r0, #0]
  {
    return_value = TRUE;
 8002ab6:	1a1b      	subs	r3, r3, r0
 8002ab8:	4258      	negs	r0, r3
 8002aba:	4158      	adcs	r0, r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002abc:	f382 8810 	msr	PRIMASK, r2
    return_value = FALSE;
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
}
 8002ac0:	4770      	bx	lr

08002ac2 <LST_insert_head>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002ac2:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8002ac6:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8002ac8:	6802      	ldr	r2, [r0, #0]
 8002aca:	600a      	str	r2, [r1, #0]
  node->prev = listHead;
 8002acc:	6048      	str	r0, [r1, #4]
  listHead->next = node;
 8002ace:	6001      	str	r1, [r0, #0]
  (node->next)->prev = node;
 8002ad0:	680a      	ldr	r2, [r1, #0]
 8002ad2:	6051      	str	r1, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ad4:	f383 8810 	msr	PRIMASK, r3
 8002ad8:	4770      	bx	lr

08002ada <LST_insert_tail>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002ada:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8002ade:	b672      	cpsid	i

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
  node->prev = listHead->prev;
 8002ae0:	6842      	ldr	r2, [r0, #4]
 8002ae2:	604a      	str	r2, [r1, #4]
  node->next = listHead;
 8002ae4:	6008      	str	r0, [r1, #0]
  listHead->prev = node;
 8002ae6:	6041      	str	r1, [r0, #4]
  (node->prev)->next = node;
 8002ae8:	684a      	ldr	r2, [r1, #4]
 8002aea:	6011      	str	r1, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002aec:	f383 8810 	msr	PRIMASK, r3
 8002af0:	4770      	bx	lr

08002af2 <LST_remove_node>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002af2:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8002af6:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8002af8:	e890 0006 	ldmia.w	r0, {r1, r2}
 8002afc:	6011      	str	r1, [r2, #0]
  (node->next)->prev = node->prev;
 8002afe:	6801      	ldr	r1, [r0, #0]
 8002b00:	604a      	str	r2, [r1, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b02:	f383 8810 	msr	PRIMASK, r3
 8002b06:	4770      	bx	lr

08002b08 <LST_remove_head>:
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8002b08:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002b0a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8002b0e:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8002b10:	6803      	ldr	r3, [r0, #0]
 8002b12:	600b      	str	r3, [r1, #0]
  LST_remove_node (listHead->next);
 8002b14:	6800      	ldr	r0, [r0, #0]
 8002b16:	f7ff ffec 	bl	8002af2 <LST_remove_node>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b1a:	f384 8810 	msr	PRIMASK, r4
 8002b1e:	bd10      	pop	{r4, pc}

08002b20 <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 8002b20:	b510      	push	{r4, lr}
 8002b22:	f89d 4008 	ldrb.w	r4, [sp, #8]
  q->qBuff = queueBuffer;
 8002b26:	6001      	str	r1, [r0, #0]
  q->first = 0;
 8002b28:	2100      	movs	r1, #0
 8002b2a:	60c1      	str	r1, [r0, #12]
  q->last = 0; /* queueSize-1; */
 8002b2c:	6101      	str	r1, [r0, #16]
  q->byteCount = 0;
 8002b2e:	6141      	str	r1, [r0, #20]
  q->elementCount = 0;
 8002b30:	6181      	str	r1, [r0, #24]
  q->queueMaxSize = queueSize;
 8002b32:	6042      	str	r2, [r0, #4]
  q->elementSize = elementSize;
 8002b34:	8103      	strh	r3, [r0, #8]
  q->optionFlags = optionFlags;
 8002b36:	7704      	strb	r4, [r0, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 8002b38:	f014 0002 	ands.w	r0, r4, #2
 8002b3c:	d003      	beq.n	8002b46 <CircularQueue_Init+0x26>
 8002b3e:	1a58      	subs	r0, r3, r1
 8002b40:	bf18      	it	ne
 8002b42:	2001      	movne	r0, #1
 8002b44:	4240      	negs	r0, r0
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
  }
  return 0;
}
 8002b46:	bd10      	pop	{r4, pc}

08002b48 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 8002b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicat size of parta of elemenet that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 8002b4c:	8906      	ldrh	r6, [r0, #8]
{
 8002b4e:	4604      	mov	r4, r0
 8002b50:	b085      	sub	sp, #20
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 8002b52:	6940      	ldr	r0, [r0, #20]
{
 8002b54:	9302      	str	r3, [sp, #8]
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 8002b56:	2e00      	cmp	r6, #0
 8002b58:	bf14      	ite	ne
 8002b5a:	f04f 0a00 	movne.w	sl, #0
 8002b5e:	f04f 0a02 	moveq.w	sl, #2
 8002b62:	f8d4 e010 	ldr.w	lr, [r4, #16]
  if (q->byteCount)
 8002b66:	2800      	cmp	r0, #0
 8002b68:	d036      	beq.n	8002bd8 <CircularQueue_Add+0x90>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 8002b6a:	2e00      	cmp	r6, #0
 8002b6c:	d137      	bne.n	8002bde <CircularQueue_Add+0x96>
 8002b6e:	6866      	ldr	r6, [r4, #4]
 8002b70:	6823      	ldr	r3, [r4, #0]
 8002b72:	f10e 0501 	add.w	r5, lr, #1
 8002b76:	42b5      	cmp	r5, r6
 8002b78:	bf28      	it	cs
 8002b7a:	1bad      	subcs	r5, r5, r6
 8002b7c:	f813 700e 	ldrb.w	r7, [r3, lr]
 8002b80:	5d5b      	ldrb	r3, [r3, r5]
 8002b82:	3702      	adds	r7, #2
 8002b84:	eb07 2703 	add.w	r7, r7, r3, lsl #8
 8002b88:	b2bf      	uxth	r7, r7
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 8002b8a:	4616      	mov	r6, r2
  {
    elementSize = q->elementSize;
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 8002b8c:	68e5      	ldr	r5, [r4, #12]
 8002b8e:	45ae      	cmp	lr, r5
 8002b90:	bf22      	ittt	cs
 8002b92:	6863      	ldrcs	r3, [r4, #4]
 8002b94:	eba3 030e 	subcs.w	r3, r3, lr
 8002b98:	1bda      	subcs	r2, r3, r7

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 8002b9a:	9b02      	ldr	r3, [sp, #8]
 8002b9c:	eb06 0e0a 	add.w	lr, r6, sl
   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 8002ba0:	bf38      	it	cc
 8002ba2:	2200      	movcc	r2, #0
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 8002ba4:	fb03 f50e 	mul.w	r5, r3, lr
 8002ba8:	42aa      	cmp	r2, r5
 8002baa:	d81c      	bhi.n	8002be6 <CircularQueue_Add+0x9e>
 8002bac:	fbb2 f3fe 	udiv	r3, r2, lr
 8002bb0:	fb0e 2313 	mls	r3, lr, r3, r2
 8002bb4:	b2db      	uxtb	r3, r3
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 8002bb6:	459a      	cmp	sl, r3
 8002bb8:	d215      	bcs.n	8002be6 <CircularQueue_Add+0x9e>
 8002bba:	7f22      	ldrb	r2, [r4, #28]
 8002bbc:	f012 0f01 	tst.w	r2, #1
 8002bc0:	bf08      	it	eq
 8002bc2:	2300      	moveq	r3, #0
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 8002bc4:	0792      	lsls	r2, r2, #30
 8002bc6:	f140 80c4 	bpl.w	8002d52 <CircularQueue_Add+0x20a>
 8002bca:	fa1f f38a 	uxth.w	r3, sl
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 8002bce:	b966      	cbnz	r6, 8002bea <CircularQueue_Add+0xa2>
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
  }
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
 8002bd0:	2000      	movs	r0, #0
  }
  return ptr;
}
 8002bd2:	b005      	add	sp, #20
 8002bd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (q->elementSize > 0)               
 8002bd8:	b91e      	cbnz	r6, 8002be2 <CircularQueue_Add+0x9a>
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 8002bda:	4637      	mov	r7, r6
 8002bdc:	e7d5      	b.n	8002b8a <CircularQueue_Add+0x42>
 8002bde:	4637      	mov	r7, r6
 8002be0:	e7d4      	b.n	8002b8c <CircularQueue_Add+0x44>
 8002be2:	4607      	mov	r7, r0
 8002be4:	e7d2      	b.n	8002b8c <CircularQueue_Add+0x44>
 8002be6:	2300      	movs	r3, #0
 8002be8:	e7f1      	b.n	8002bce <CircularQueue_Add+0x86>
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 8002bea:	4428      	add	r0, r5
 8002bec:	6862      	ldr	r2, [r4, #4]
 8002bee:	4403      	add	r3, r0
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d8ed      	bhi.n	8002bd0 <CircularQueue_Add+0x88>
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 8002bf4:	0a33      	lsrs	r3, r6, #8
 8002bf6:	9301      	str	r3, [sp, #4]
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 8002bf8:	eb06 030a 	add.w	r3, r6, sl
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8002bfc:	f04f 0800 	mov.w	r8, #0
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 8002c00:	b29b      	uxth	r3, r3
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8002c02:	4689      	mov	r9, r1
 8002c04:	46c3      	mov	fp, r8
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 8002c06:	9303      	str	r3, [sp, #12]
    for (i=0; i < nbElements; i++) 
 8002c08:	9b02      	ldr	r3, [sp, #8]
 8002c0a:	6920      	ldr	r0, [r4, #16]
 8002c0c:	6862      	ldr	r2, [r4, #4]
 8002c0e:	459b      	cmp	fp, r3
 8002c10:	d108      	bne.n	8002c24 <CircularQueue_Add+0xdc>
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 8002c12:	4482      	add	sl, r0
 8002c14:	6823      	ldr	r3, [r4, #0]
 8002c16:	4592      	cmp	sl, r2
 8002c18:	bf28      	it	cs
 8002c1a:	ebaa 0a02 	subcs.w	sl, sl, r2
 8002c1e:	eb03 000a 	add.w	r0, r3, sl
  return ptr;
 8002c22:	e7d6      	b.n	8002bd2 <CircularQueue_Add+0x8a>
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 8002c24:	4438      	add	r0, r7
 8002c26:	4290      	cmp	r0, r2
      if (q->elementSize == 0) 
 8002c28:	8923      	ldrh	r3, [r4, #8]
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 8002c2a:	bf28      	it	cs
 8002c2c:	1a80      	subcs	r0, r0, r2
 8002c2e:	6120      	str	r0, [r4, #16]
      if (q->elementSize == 0) 
 8002c30:	b993      	cbnz	r3, 8002c58 <CircularQueue_Add+0x110>
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 8002c32:	6822      	ldr	r2, [r4, #0]
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 8002c34:	f89d 1004 	ldrb.w	r1, [sp, #4]
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 8002c38:	5416      	strb	r6, [r2, r0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 8002c3a:	6862      	ldr	r2, [r4, #4]
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 8002c3c:	1c43      	adds	r3, r0, #1
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	bf28      	it	cs
 8002c42:	1a9b      	subcs	r3, r3, r2
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 8002c44:	6822      	ldr	r2, [r4, #0]
 8002c46:	54d1      	strb	r1, [r2, r3]
 8002c48:	1c58      	adds	r0, r3, #1
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 8002c4a:	6863      	ldr	r3, [r4, #4]
 8002c4c:	4298      	cmp	r0, r3
 8002c4e:	bf28      	it	cs
 8002c50:	1ac0      	subcs	r0, r0, r3
        q->byteCount += 2;
 8002c52:	6963      	ldr	r3, [r4, #20]
 8002c54:	3302      	adds	r3, #2
 8002c56:	6163      	str	r3, [r4, #20]
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 8002c58:	6865      	ldr	r5, [r4, #4]
 8002c5a:	1a2d      	subs	r5, r5, r0
 8002c5c:	42b5      	cmp	r5, r6
 8002c5e:	bf28      	it	cs
 8002c60:	4635      	movcs	r5, r6
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 8002c62:	42ae      	cmp	r6, r5
 8002c64:	d002      	beq.n	8002c6c <CircularQueue_Add+0x124>
 8002c66:	d920      	bls.n	8002caa <CircularQueue_Add+0x162>
 8002c68:	7f23      	ldrb	r3, [r4, #28]
 8002c6a:	b9f3      	cbnz	r3, 8002caa <CircularQueue_Add+0x162>
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 8002c6c:	6823      	ldr	r3, [r4, #0]
 8002c6e:	462a      	mov	r2, r5
 8002c70:	4418      	add	r0, r3
 8002c72:	4649      	mov	r1, r9
 8002c74:	f002 fc66 	bl	8005544 <memcpy>
        q->byteCount += NbBytesToCopy;
 8002c78:	6963      	ldr	r3, [r4, #20]
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 8002c7a:	9f03      	ldr	r7, [sp, #12]
        q->byteCount += NbBytesToCopy;
 8002c7c:	442b      	add	r3, r5
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 8002c7e:	46a8      	mov	r8, r5
        q->byteCount += NbBytesToCopy;
 8002c80:	6163      	str	r3, [r4, #20]
        NbBytesToCopy = elementSize - NbBytesToCopy;
 8002c82:	1b75      	subs	r5, r6, r5
        curBuffPosition = 0; 
 8002c84:	2000      	movs	r0, #0
      if (NbBytesToCopy)      
 8002c86:	b14d      	cbz	r5, 8002c9c <CircularQueue_Add+0x154>
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 8002c88:	6823      	ldr	r3, [r4, #0]
 8002c8a:	462a      	mov	r2, r5
 8002c8c:	4418      	add	r0, r3
 8002c8e:	eb08 0109 	add.w	r1, r8, r9
 8002c92:	f002 fc57 	bl	8005544 <memcpy>
        q->byteCount += NbBytesToCopy;
 8002c96:	6963      	ldr	r3, [r4, #20]
 8002c98:	441d      	add	r5, r3
 8002c9a:	6165      	str	r5, [r4, #20]
      q->elementCount++;
 8002c9c:	69a3      	ldr	r3, [r4, #24]
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	61a3      	str	r3, [r4, #24]
    for (i=0; i < nbElements; i++) 
 8002ca2:	f10b 0b01 	add.w	fp, fp, #1
 8002ca6:	44b1      	add	r9, r6
 8002ca8:	e7ae      	b.n	8002c08 <CircularQueue_Add+0xc0>
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 8002caa:	2d00      	cmp	r5, #0
 8002cac:	d0f6      	beq.n	8002c9c <CircularQueue_Add+0x154>
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 8002cae:	7f23      	ldrb	r3, [r4, #28]
 8002cb0:	07da      	lsls	r2, r3, #31
 8002cb2:	d522      	bpl.n	8002cfa <CircularQueue_Add+0x1b2>
          if (q->elementSize == 0)
 8002cb4:	8923      	ldrh	r3, [r4, #8]
 8002cb6:	b943      	cbnz	r3, 8002cca <CircularQueue_Add+0x182>
             q->qBuff[curBuffPosition-2] = 0xFF;
 8002cb8:	6823      	ldr	r3, [r4, #0]
 8002cba:	4403      	add	r3, r0
 8002cbc:	22ff      	movs	r2, #255	; 0xff
 8002cbe:	f803 2c02 	strb.w	r2, [r3, #-2]
             q->qBuff[curBuffPosition-1] = 0xFF;
 8002cc2:	6823      	ldr	r3, [r4, #0]
 8002cc4:	4418      	add	r0, r3
 8002cc6:	f800 2c01 	strb.w	r2, [r0, #-1]
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 8002cca:	6963      	ldr	r3, [r4, #20]
          if (q->elementSize == 0)
 8002ccc:	8922      	ldrh	r2, [r4, #8]
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 8002cce:	441d      	add	r5, r3
 8002cd0:	6165      	str	r5, [r4, #20]
          if (q->elementSize == 0)
 8002cd2:	2a00      	cmp	r2, #0
 8002cd4:	d138      	bne.n	8002d48 <CircularQueue_Add+0x200>
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 8002cd6:	6823      	ldr	r3, [r4, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8002cd8:	f89d 1004 	ldrb.w	r1, [sp, #4]
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 8002cdc:	701e      	strb	r6, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8002cde:	6823      	ldr	r3, [r4, #0]
 8002ce0:	7059      	strb	r1, [r3, #1]
            q->byteCount += 2;   
 8002ce2:	6963      	ldr	r3, [r4, #20]
 8002ce4:	3302      	adds	r3, #2
 8002ce6:	6163      	str	r3, [r4, #20]
 8002ce8:	4635      	mov	r5, r6
          NbCopiedBytes = 0;
 8002cea:	4690      	mov	r8, r2
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8002cec:	2002      	movs	r0, #2
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 8002cee:	eb0a 0705 	add.w	r7, sl, r5
        q->last = 0;        
 8002cf2:	2300      	movs	r3, #0
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 8002cf4:	b2bf      	uxth	r7, r7
        q->last = 0;        
 8002cf6:	6123      	str	r3, [r4, #16]
 8002cf8:	e7c5      	b.n	8002c86 <CircularQueue_Add+0x13e>
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 8002cfa:	079b      	lsls	r3, r3, #30
 8002cfc:	d5f7      	bpl.n	8002cee <CircularQueue_Add+0x1a6>
          if (q->elementSize == 0)
 8002cfe:	8923      	ldrh	r3, [r4, #8]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	f47f af65 	bne.w	8002bd0 <CircularQueue_Add+0x88>
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 8002d06:	6823      	ldr	r3, [r4, #0]
 8002d08:	4403      	add	r3, r0
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8002d0a:	0a2a      	lsrs	r2, r5, #8
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 8002d0c:	f803 5c02 	strb.w	r5, [r3, #-2]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8002d10:	6823      	ldr	r3, [r4, #0]
 8002d12:	4403      	add	r3, r0
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 8002d14:	4649      	mov	r1, r9
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8002d16:	f803 2c01 	strb.w	r2, [r3, #-1]
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 8002d1a:	6823      	ldr	r3, [r4, #0]
 8002d1c:	462a      	mov	r2, r5
 8002d1e:	4418      	add	r0, r3
 8002d20:	f002 fc10 	bl	8005544 <memcpy>
             q->elementCount++;
 8002d24:	69a2      	ldr	r2, [r4, #24]
             q->byteCount += NbBytesToCopy; 
 8002d26:	6963      	ldr	r3, [r4, #20]
             q->elementCount++;
 8002d28:	3201      	adds	r2, #1
             q->byteCount += NbBytesToCopy; 
 8002d2a:	442b      	add	r3, r5
             q->elementCount++;
 8002d2c:	61a2      	str	r2, [r4, #24]
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 8002d2e:	6822      	ldr	r2, [r4, #0]
             q->byteCount += NbBytesToCopy; 
 8002d30:	6163      	str	r3, [r4, #20]
             NbBytesToCopy = elementSize - NbBytesToCopy;
 8002d32:	1b73      	subs	r3, r6, r5
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 8002d34:	7013      	strb	r3, [r2, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8002d36:	6822      	ldr	r2, [r4, #0]
 8002d38:	0a19      	lsrs	r1, r3, #8
 8002d3a:	7051      	strb	r1, [r2, #1]
             q->byteCount += 2;              
 8002d3c:	6962      	ldr	r2, [r4, #20]
 8002d3e:	3202      	adds	r2, #2
 8002d40:	46a8      	mov	r8, r5
 8002d42:	6162      	str	r2, [r4, #20]
             NbBytesToCopy = elementSize - NbBytesToCopy;
 8002d44:	461d      	mov	r5, r3
 8002d46:	e7d1      	b.n	8002cec <CircularQueue_Add+0x1a4>
          NbCopiedBytes = 0;
 8002d48:	f04f 0800 	mov.w	r8, #0
 8002d4c:	4635      	mov	r5, r6
          curBuffPosition = 0; 
 8002d4e:	4640      	mov	r0, r8
 8002d50:	e7cd      	b.n	8002cee <CircularQueue_Add+0x1a6>
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	e73b      	b.n	8002bce <CircularQueue_Add+0x86>

08002d56 <CircularQueue_Remove>:
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
  uint8_t  elemSizeStorageRoom = 0;
  uint8_t* ptr= NULL;
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 8002d56:	8902      	ldrh	r2, [r0, #8]
{
 8002d58:	4603      	mov	r3, r0
  *elementSize = 0;
  if (q->byteCount > 0) 
 8002d5a:	6940      	ldr	r0, [r0, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 8002d5c:	2a00      	cmp	r2, #0
  *elementSize = 0;
 8002d5e:	f04f 0200 	mov.w	r2, #0
{
 8002d62:	b5f0      	push	{r4, r5, r6, r7, lr}
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 8002d64:	bf14      	ite	ne
 8002d66:	2600      	movne	r6, #0
 8002d68:	2602      	moveq	r6, #2
  *elementSize = 0;
 8002d6a:	800a      	strh	r2, [r1, #0]
  if (q->byteCount > 0) 
 8002d6c:	2800      	cmp	r0, #0
 8002d6e:	d052      	beq.n	8002e16 <CircularQueue_Remove+0xc0>
  {
    /* retreive element Size */
    *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8002d70:	891d      	ldrh	r5, [r3, #8]
 8002d72:	681f      	ldr	r7, [r3, #0]
 8002d74:	68dc      	ldr	r4, [r3, #12]
 8002d76:	685a      	ldr	r2, [r3, #4]
 8002d78:	b95d      	cbnz	r5, 8002d92 <CircularQueue_Remove+0x3c>
 8002d7a:	f104 0e01 	add.w	lr, r4, #1
 8002d7e:	4596      	cmp	lr, r2
 8002d80:	bf28      	it	cs
 8002d82:	ebae 0e02 	subcs.w	lr, lr, r2
 8002d86:	5d3d      	ldrb	r5, [r7, r4]
 8002d88:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8002d8c:	eb05 250e 	add.w	r5, r5, lr, lsl #8
 8002d90:	b2ad      	uxth	r5, r5
 8002d92:	800d      	strh	r5, [r1, #0]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 8002d94:	f893 e01c 	ldrb.w	lr, [r3, #28]
 8002d98:	f00e 0e03 	and.w	lr, lr, #3
 8002d9c:	f1be 0f01 	cmp.w	lr, #1
 8002da0:	d120      	bne.n	8002de4 <CircularQueue_Remove+0x8e>
     {
       if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 8002da2:	f64f 7eff 	movw	lr, #65535	; 0xffff
 8002da6:	4575      	cmp	r5, lr
 8002da8:	d101      	bne.n	8002dae <CircularQueue_Remove+0x58>
 8002daa:	891d      	ldrh	r5, [r3, #8]
 8002dac:	b145      	cbz	r5, 8002dc0 <CircularQueue_Remove+0x6a>
 8002dae:	691d      	ldr	r5, [r3, #16]
 8002db0:	42ac      	cmp	r4, r5
 8002db2:	d917      	bls.n	8002de4 <CircularQueue_Remove+0x8e>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8002db4:	891d      	ldrh	r5, [r3, #8]
 8002db6:	b1ad      	cbz	r5, 8002de4 <CircularQueue_Remove+0x8e>
 8002db8:	eba2 0e04 	sub.w	lr, r2, r4
 8002dbc:	45ae      	cmp	lr, r5
 8002dbe:	d211      	bcs.n	8002de4 <CircularQueue_Remove+0x8e>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 8002dc0:	4404      	add	r4, r0
          /* Adjust first element pos */
          q->first = 0;
 8002dc2:	2000      	movs	r0, #0
 8002dc4:	60d8      	str	r0, [r3, #12]
          /* retrieve the rigth size after the wrap [if varaible size element] */
          *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8002dc6:	8918      	ldrh	r0, [r3, #8]
          q->byteCount -= (q->queueMaxSize - q->first);
 8002dc8:	1aa4      	subs	r4, r4, r2
 8002dca:	615c      	str	r4, [r3, #20]
          *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8002dcc:	b948      	cbnz	r0, 8002de2 <CircularQueue_Remove+0x8c>
 8002dce:	2a01      	cmp	r2, #1
 8002dd0:	bf94      	ite	ls
 8002dd2:	f1c2 0401 	rsbls	r4, r2, #1
 8002dd6:	2401      	movhi	r4, #1
 8002dd8:	7838      	ldrb	r0, [r7, #0]
 8002dda:	5d3c      	ldrb	r4, [r7, r4]
 8002ddc:	eb00 2004 	add.w	r0, r0, r4, lsl #8
 8002de0:	b280      	uxth	r0, r0
 8002de2:	8008      	strh	r0, [r1, #0]
       }
     }

    /* retreive element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 8002de4:	f8d3 e00c 	ldr.w	lr, [r3, #12]

    /* adjust byte count */
    q->byteCount -= (*elementSize + elemSizeStorageRoom) ;
 8002de8:	880c      	ldrh	r4, [r1, #0]
 8002dea:	695d      	ldr	r5, [r3, #20]
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 8002dec:	eb0e 0006 	add.w	r0, lr, r6
 8002df0:	4290      	cmp	r0, r2
    q->byteCount -= (*elementSize + elemSizeStorageRoom) ;
 8002df2:	eb04 0106 	add.w	r1, r4, r6
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 8002df6:	bf28      	it	cs
 8002df8:	1a80      	subcs	r0, r0, r2
    q->byteCount -= (*elementSize + elemSizeStorageRoom) ;
 8002dfa:	1a6d      	subs	r5, r5, r1
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 8002dfc:	4438      	add	r0, r7
    q->byteCount -= (*elementSize + elemSizeStorageRoom) ;
 8002dfe:	615d      	str	r5, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 8002e00:	b135      	cbz	r5, 8002e10 <CircularQueue_Remove+0xba>
    {
      q->first = MOD((q->first+ *elementSize + elemSizeStorageRoom ), q->queueMaxSize);
 8002e02:	eb04 010e 	add.w	r1, r4, lr
 8002e06:	4431      	add	r1, r6
 8002e08:	428a      	cmp	r2, r1
 8002e0a:	bf98      	it	ls
 8002e0c:	1a89      	subls	r1, r1, r2
 8002e0e:	60d9      	str	r1, [r3, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 8002e10:	699a      	ldr	r2, [r3, #24]
 8002e12:	3a01      	subs	r2, #1
 8002e14:	619a      	str	r2, [r3, #24]
  }
  return ptr;
}
 8002e16:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e18 <CircularQueue_Sense>:
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
  uint8_t  elemSizeStorageRoom = 0;
  uint8_t* x= NULL;
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 8002e18:	8903      	ldrh	r3, [r0, #8]
 8002e1a:	2b00      	cmp	r3, #0
  *elementSize = 0;
 8002e1c:	f04f 0300 	mov.w	r3, #0
 8002e20:	800b      	strh	r3, [r1, #0]
  uint32_t FirstElemetPos = 0;
    
  if (q->byteCount > 0) 
 8002e22:	6943      	ldr	r3, [r0, #20]
{
 8002e24:	b5f0      	push	{r4, r5, r6, r7, lr}
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 8002e26:	bf14      	ite	ne
 8002e28:	2200      	movne	r2, #0
 8002e2a:	2202      	moveq	r2, #2
  if (q->byteCount > 0) 
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d035      	beq.n	8002e9c <CircularQueue_Sense+0x84>
  {
    FirstElemetPos = q->first;
    *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8002e30:	8904      	ldrh	r4, [r0, #8]
    FirstElemetPos = q->first;
 8002e32:	68c6      	ldr	r6, [r0, #12]
 8002e34:	e890 0028 	ldmia.w	r0, {r3, r5}
    *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8002e38:	b944      	cbnz	r4, 8002e4c <CircularQueue_Sense+0x34>
 8002e3a:	1c77      	adds	r7, r6, #1
 8002e3c:	42af      	cmp	r7, r5
 8002e3e:	bf28      	it	cs
 8002e40:	1b7f      	subcs	r7, r7, r5
 8002e42:	5d9c      	ldrb	r4, [r3, r6]
 8002e44:	5ddf      	ldrb	r7, [r3, r7]
 8002e46:	eb04 2407 	add.w	r4, r4, r7, lsl #8
 8002e4a:	b2a4      	uxth	r4, r4
 8002e4c:	800c      	strh	r4, [r1, #0]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 8002e4e:	7f07      	ldrb	r7, [r0, #28]
 8002e50:	f007 0703 	and.w	r7, r7, #3
 8002e54:	2f01      	cmp	r7, #1
 8002e56:	d11b      	bne.n	8002e90 <CircularQueue_Sense+0x78>
    { 
      if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 8002e58:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8002e5c:	42bc      	cmp	r4, r7
 8002e5e:	d101      	bne.n	8002e64 <CircularQueue_Sense+0x4c>
 8002e60:	8904      	ldrh	r4, [r0, #8]
 8002e62:	b13c      	cbz	r4, 8002e74 <CircularQueue_Sense+0x5c>
 8002e64:	6904      	ldr	r4, [r0, #16]
 8002e66:	42a6      	cmp	r6, r4
 8002e68:	d912      	bls.n	8002e90 <CircularQueue_Sense+0x78>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8002e6a:	8904      	ldrh	r4, [r0, #8]
 8002e6c:	b184      	cbz	r4, 8002e90 <CircularQueue_Sense+0x78>
 8002e6e:	1baf      	subs	r7, r5, r6
 8002e70:	42a7      	cmp	r7, r4
 8002e72:	d20d      	bcs.n	8002e90 <CircularQueue_Sense+0x78>
      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */

        /* retrieve the rigth size after the wrap [if varaible size element] */
        *elementSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 8002e74:	8900      	ldrh	r0, [r0, #8]
 8002e76:	b948      	cbnz	r0, 8002e8c <CircularQueue_Sense+0x74>
 8002e78:	2d01      	cmp	r5, #1
 8002e7a:	bf94      	ite	ls
 8002e7c:	f1c5 0401 	rsbls	r4, r5, #1
 8002e80:	2401      	movhi	r4, #1
 8002e82:	7818      	ldrb	r0, [r3, #0]
 8002e84:	5d1c      	ldrb	r4, [r3, r4]
 8002e86:	eb00 2004 	add.w	r0, r0, r4, lsl #8
 8002e8a:	b280      	uxth	r0, r0
 8002e8c:	8008      	strh	r0, [r1, #0]
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 8002e8e:	2600      	movs	r6, #0
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 8002e90:	1990      	adds	r0, r2, r6
 8002e92:	42a8      	cmp	r0, r5
 8002e94:	bf28      	it	cs
 8002e96:	1b40      	subcs	r0, r0, r5
 8002e98:	4418      	add	r0, r3
 8002e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint8_t* x= NULL;
 8002e9c:	4618      	mov	r0, r3
  }
  return x;
}
 8002e9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ea0 <BLS_Init>:
 8002ea0:	4770      	bx	lr

08002ea2 <CRS_STM_Init>:
 8002ea2:	4770      	bx	lr

08002ea4 <DIS_Init>:
 8002ea4:	4770      	bx	lr

08002ea6 <EDS_STM_Init>:
 8002ea6:	4770      	bx	lr

08002ea8 <HIDS_Init>:
 8002ea8:	4770      	bx	lr

08002eaa <HRS_Init>:
 8002eaa:	4770      	bx	lr

08002eac <HTS_Init>:
 8002eac:	4770      	bx	lr

08002eae <IAS_Init>:
 8002eae:	4770      	bx	lr

08002eb0 <LLS_Init>:
 8002eb0:	4770      	bx	lr

08002eb2 <TPS_Init>:
 8002eb2:	4770      	bx	lr

08002eb4 <OTAS_STM_Init>:
 8002eb4:	4770      	bx	lr

08002eb6 <MESH_Init>:
 8002eb6:	4770      	bx	lr

08002eb8 <SVCCTL_InitCustomSvc>:
__weak void MESH_Init( void )
{
  return;
}
__weak void SVCCTL_InitCustomSvc( void )
{
 8002eb8:	4770      	bx	lr
	...

08002ebc <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8002ebc:	b508      	push	{r3, lr}
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8002ebe:	4b10      	ldr	r3, [pc, #64]	; (8002f00 <SVCCTL_Init+0x44>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	711a      	strb	r2, [r3, #4]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8002ec4:	721a      	strb	r2, [r3, #8]

  /**
   * Add and Initialize requested services
   */

  BLS_Init();
 8002ec6:	f7ff ffeb 	bl	8002ea0 <BLS_Init>

  CRS_STM_Init();
 8002eca:	f7ff ffea 	bl	8002ea2 <CRS_STM_Init>

  DIS_Init();
 8002ece:	f7ff ffe9 	bl	8002ea4 <DIS_Init>

  EDS_STM_Init();
 8002ed2:	f7ff ffe8 	bl	8002ea6 <EDS_STM_Init>

  HIDS_Init();
 8002ed6:	f7ff ffe7 	bl	8002ea8 <HIDS_Init>

  HRS_Init();
 8002eda:	f7ff ffe6 	bl	8002eaa <HRS_Init>

  HTS_Init();
 8002ede:	f7ff ffe5 	bl	8002eac <HTS_Init>

  IAS_Init();
 8002ee2:	f7ff ffe4 	bl	8002eae <IAS_Init>

  LLS_Init();
 8002ee6:	f7ff ffe3 	bl	8002eb0 <LLS_Init>

  TPS_Init();
 8002eea:	f7ff ffe2 	bl	8002eb2 <TPS_Init>

  P2PS_STM_Init();
 8002eee:	f7ff fbad 	bl	800264c <P2PS_STM_Init>

  OTAS_STM_Init();
 8002ef2:	f7ff ffdf 	bl	8002eb4 <OTAS_STM_Init>

  SVCCTL_InitCustomSvc();
 8002ef6:	f7ff ffdf 	bl	8002eb8 <SVCCTL_InitCustomSvc>
  
  MESH_Init();
 8002efa:	f7ff ffdc 	bl	8002eb6 <MESH_Init>
 8002efe:	bd08      	pop	{r3, pc}
 8002f00:	20000200 	.word	0x20000200

08002f04 <SVCCTL_RegisterSvcHandler>:
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8002f04:	4a03      	ldr	r2, [pc, #12]	; (8002f14 <SVCCTL_RegisterSvcHandler+0x10>)
 8002f06:	7913      	ldrb	r3, [r2, #4]
 8002f08:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
#endif
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	7113      	strb	r3, [r2, #4]
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	20000200 	.word	0x20000200

08002f18 <SVCCTL_UserEvtRx>:

  return;
}

SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8002f18:	b570      	push	{r4, r5, r6, lr}
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
  event_notification_status = SVCCTL_EvtNotAck;

  switch (event_pckt->evt)
 8002f1a:	7843      	ldrb	r3, [r0, #1]
 8002f1c:	2bff      	cmp	r3, #255	; 0xff
{
 8002f1e:	4604      	mov	r4, r0
  switch (event_pckt->evt)
 8002f20:	d106      	bne.n	8002f30 <SVCCTL_UserEvtRx+0x18>
  {
    case EVT_VENDOR:
    {
      blue_evt = (evt_blue_aci*) event_pckt->data;

      switch ((blue_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8002f22:	f8b0 3003 	ldrh.w	r3, [r0, #3]
 8002f26:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002f2a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f2e:	d004      	beq.n	8002f3a <SVCCTL_UserEvtRx+0x22>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8002f30:	4620      	mov	r0, r4
      return_status = SVCCTL_UserEvtFlowEnable;
      break;
  }

  return (return_status);
}
 8002f32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return_status = SVCCTL_App_Notification(pckt);
 8002f36:	f7fe bb15 	b.w	8001564 <SVCCTL_App_Notification>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8002f3a:	4e08      	ldr	r6, [pc, #32]	; (8002f5c <SVCCTL_UserEvtRx+0x44>)
      switch ((blue_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8002f3c:	2500      	movs	r5, #0
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8002f3e:	7932      	ldrb	r2, [r6, #4]
 8002f40:	b2eb      	uxtb	r3, r5
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d9f4      	bls.n	8002f30 <SVCCTL_UserEvtRx+0x18>
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8002f46:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8002f4a:	4620      	mov	r0, r4
 8002f4c:	4798      	blx	r3
 8002f4e:	3501      	adds	r5, #1
            if (event_notification_status != SVCCTL_EvtNotAck)
 8002f50:	2800      	cmp	r0, #0
 8002f52:	d0f4      	beq.n	8002f3e <SVCCTL_UserEvtRx+0x26>
      return_status = SVCCTL_UserEvtFlowEnable;
 8002f54:	3802      	subs	r0, #2
 8002f56:	bf18      	it	ne
 8002f58:	2001      	movne	r0, #1
}
 8002f5a:	bd70      	pop	{r4, r5, r6, pc}
 8002f5c:	20000200 	.word	0x20000200

08002f60 <hci_register_io_bus>:


void hci_register_io_bus(tHciIO* fops)
{
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8002f60:	4b02      	ldr	r3, [pc, #8]	; (8002f6c <hci_register_io_bus+0xc>)
 8002f62:	6003      	str	r3, [r0, #0]
  fops->Send    = TL_BLE_SendCmd;
 8002f64:	4b02      	ldr	r3, [pc, #8]	; (8002f70 <hci_register_io_bus+0x10>)
 8002f66:	6103      	str	r3, [r0, #16]
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop
 8002f6c:	08002ff9 	.word	0x08002ff9
 8002f70:	08003039 	.word	0x08003039

08002f74 <shci_register_io_bus>:
}

void shci_register_io_bus(tSHciIO* fops)
{
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8002f74:	4b02      	ldr	r3, [pc, #8]	; (8002f80 <shci_register_io_bus+0xc>)
 8002f76:	6003      	str	r3, [r0, #0]
  fops->Send    = TL_SYS_SendCmd;
 8002f78:	4b02      	ldr	r3, [pc, #8]	; (8002f84 <shci_register_io_bus+0x10>)
 8002f7a:	6103      	str	r3, [r0, #16]
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	08003089 	.word	0x08003089
 8002f84:	080030bd 	.word	0x080030bd

08002f88 <SendFreeBuf>:

  return;
}

static void SendFreeBuf( void )
{
 8002f88:	b537      	push	{r0, r1, r2, r4, r5, lr}
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8002f8a:	4c09      	ldr	r4, [pc, #36]	; (8002fb0 <SendFreeBuf+0x28>)
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8002f8c:	4d09      	ldr	r5, [pc, #36]	; (8002fb4 <SendFreeBuf+0x2c>)
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8002f8e:	4808      	ldr	r0, [pc, #32]	; (8002fb0 <SendFreeBuf+0x28>)
 8002f90:	f7ff fd8d 	bl	8002aae <LST_is_empty>
 8002f94:	b108      	cbz	r0, 8002f9a <SendFreeBuf+0x12>
  }

  return;
}
 8002f96:	b003      	add	sp, #12
 8002f98:	bd30      	pop	{r4, r5, pc}
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8002f9a:	a901      	add	r1, sp, #4
 8002f9c:	4620      	mov	r0, r4
 8002f9e:	f7ff fdb3 	bl	8002b08 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8002fa2:	692b      	ldr	r3, [r5, #16]
 8002fa4:	9901      	ldr	r1, [sp, #4]
 8002fa6:	6918      	ldr	r0, [r3, #16]
 8002fa8:	f7ff fd97 	bl	8002ada <LST_insert_tail>
 8002fac:	e7ef      	b.n	8002f8e <SendFreeBuf+0x6>
 8002fae:	bf00      	nop
 8002fb0:	200012f0 	.word	0x200012f0
 8002fb4:	20030000 	.word	0x20030000

08002fb8 <TL_Enable>:
  HW_IPCC_Enable();
 8002fb8:	f7fe bc4c 	b.w	8001854 <HW_IPCC_Enable>

08002fbc <TL_Init>:
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8002fbc:	4b0c      	ldr	r3, [pc, #48]	; (8002ff0 <TL_Init+0x34>)
 8002fbe:	4a0d      	ldr	r2, [pc, #52]	; (8002ff4 <TL_Init+0x38>)
  TL_RefTable.p_ble_table = &TL_BleTable;
 8002fc0:	f103 0120 	add.w	r1, r3, #32
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8002fc4:	6013      	str	r3, [r2, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8002fc6:	6051      	str	r1, [r2, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8002fc8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8002fcc:	6091      	str	r1, [r2, #8]
  TL_RefTable.p_sys_table = &TL_SysTable;
 8002fce:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8002fd2:	60d1      	str	r1, [r2, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8002fd4:	f103 0144 	add.w	r1, r3, #68	; 0x44
 8002fd8:	6111      	str	r1, [r2, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8002fda:	f103 0160 	add.w	r1, r3, #96	; 0x60
 8002fde:	6151      	str	r1, [r2, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8002fe0:	f103 0164 	add.w	r1, r3, #100	; 0x64
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8002fe4:	3370      	adds	r3, #112	; 0x70
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8002fe6:	6191      	str	r1, [r2, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8002fe8:	61d3      	str	r3, [r2, #28]
  HW_IPCC_Init();
 8002fea:	f7fe bc3d 	b.w	8001868 <HW_IPCC_Init>
 8002fee:	bf00      	nop
 8002ff0:	2003012c 	.word	0x2003012c
 8002ff4:	20030000 	.word	0x20030000

08002ff8 <TL_BLE_Init>:
{
 8002ff8:	b538      	push	{r3, r4, r5, lr}
  LST_init_head (&EvtQueue);
 8002ffa:	4d0c      	ldr	r5, [pc, #48]	; (800302c <TL_BLE_Init+0x34>)
{
 8002ffc:	4604      	mov	r4, r0
  LST_init_head (&EvtQueue);
 8002ffe:	4628      	mov	r0, r5
 8003000:	f7ff fd52 	bl	8002aa8 <LST_init_head>
  p_bletable = TL_RefTable.p_ble_table;
 8003004:	4b0a      	ldr	r3, [pc, #40]	; (8003030 <TL_BLE_Init+0x38>)
  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8003006:	68a2      	ldr	r2, [r4, #8]
  p_bletable = TL_RefTable.p_ble_table;
 8003008:	685b      	ldr	r3, [r3, #4]
  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800300a:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800300c:	68e2      	ldr	r2, [r4, #12]
 800300e:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8003010:	f105 0208 	add.w	r2, r5, #8
 8003014:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8003016:	609d      	str	r5, [r3, #8]
  HW_IPCC_BLE_Init();
 8003018:	f7fe fc46 	bl	80018a8 <HW_IPCC_BLE_Init>
  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800301c:	4b05      	ldr	r3, [pc, #20]	; (8003034 <TL_BLE_Init+0x3c>)
 800301e:	6822      	ldr	r2, [r4, #0]
 8003020:	609a      	str	r2, [r3, #8]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8003022:	6862      	ldr	r2, [r4, #4]
 8003024:	60da      	str	r2, [r3, #12]
}
 8003026:	2000      	movs	r0, #0
 8003028:	bd38      	pop	{r3, r4, r5, pc}
 800302a:	bf00      	nop
 800302c:	20030a18 	.word	0x20030a18
 8003030:	20030000 	.word	0x20030000
 8003034:	200012f0 	.word	0x200012f0

08003038 <TL_BLE_SendCmd>:
{
 8003038:	b508      	push	{r3, lr}
  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800303a:	4b04      	ldr	r3, [pc, #16]	; (800304c <TL_BLE_SendCmd+0x14>)
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2201      	movs	r2, #1
 8003042:	721a      	strb	r2, [r3, #8]
  HW_IPCC_BLE_SendCmd();
 8003044:	f7fe fc38 	bl	80018b8 <HW_IPCC_BLE_SendCmd>
}
 8003048:	2000      	movs	r0, #0
 800304a:	bd08      	pop	{r3, pc}
 800304c:	20030000 	.word	0x20030000

08003050 <HW_IPCC_BLE_RxEvtNot>:
{
 8003050:	b537      	push	{r0, r1, r2, r4, r5, lr}
  while(LST_is_empty(&EvtQueue) == FALSE)
 8003052:	4c08      	ldr	r4, [pc, #32]	; (8003074 <HW_IPCC_BLE_RxEvtNot+0x24>)
    BLE_IoBusEvtCallBackFunction(phcievt);
 8003054:	4d08      	ldr	r5, [pc, #32]	; (8003078 <HW_IPCC_BLE_RxEvtNot+0x28>)
  while(LST_is_empty(&EvtQueue) == FALSE)
 8003056:	4807      	ldr	r0, [pc, #28]	; (8003074 <HW_IPCC_BLE_RxEvtNot+0x24>)
 8003058:	f7ff fd29 	bl	8002aae <LST_is_empty>
 800305c:	b108      	cbz	r0, 8003062 <HW_IPCC_BLE_RxEvtNot+0x12>
}
 800305e:	b003      	add	sp, #12
 8003060:	bd30      	pop	{r4, r5, pc}
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8003062:	4620      	mov	r0, r4
 8003064:	a901      	add	r1, sp, #4
 8003066:	f7ff fd4f 	bl	8002b08 <LST_remove_head>
    BLE_IoBusEvtCallBackFunction(phcievt);
 800306a:	9801      	ldr	r0, [sp, #4]
 800306c:	68ab      	ldr	r3, [r5, #8]
 800306e:	4798      	blx	r3
 8003070:	e7f1      	b.n	8003056 <HW_IPCC_BLE_RxEvtNot+0x6>
 8003072:	bf00      	nop
 8003074:	20030a18 	.word	0x20030a18
 8003078:	200012f0 	.word	0x200012f0

0800307c <HW_IPCC_BLE_AclDataAckNot>:
  BLE_IoBusAclDataTxAck( );
 800307c:	4b01      	ldr	r3, [pc, #4]	; (8003084 <HW_IPCC_BLE_AclDataAckNot+0x8>)
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	4718      	bx	r3
 8003082:	bf00      	nop
 8003084:	200012f0 	.word	0x200012f0

08003088 <TL_SYS_Init>:
{
 8003088:	b538      	push	{r3, r4, r5, lr}
  LST_init_head (&SystemEvtQueue);
 800308a:	4d09      	ldr	r5, [pc, #36]	; (80030b0 <TL_SYS_Init+0x28>)
{
 800308c:	4604      	mov	r4, r0
  LST_init_head (&SystemEvtQueue);
 800308e:	4628      	mov	r0, r5
 8003090:	f7ff fd0a 	bl	8002aa8 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8003094:	4b07      	ldr	r3, [pc, #28]	; (80030b4 <TL_SYS_Init+0x2c>)
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8003096:	68a2      	ldr	r2, [r4, #8]
  p_systable = TL_RefTable.p_sys_table;
 8003098:	68db      	ldr	r3, [r3, #12]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800309a:	e883 0024 	stmia.w	r3, {r2, r5}
  HW_IPCC_SYS_Init();
 800309e:	f7fe fc13 	bl	80018c8 <HW_IPCC_SYS_Init>
  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 80030a2:	4b05      	ldr	r3, [pc, #20]	; (80030b8 <TL_SYS_Init+0x30>)
 80030a4:	6822      	ldr	r2, [r4, #0]
 80030a6:	611a      	str	r2, [r3, #16]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 80030a8:	6862      	ldr	r2, [r4, #4]
 80030aa:	615a      	str	r2, [r3, #20]
}
 80030ac:	2000      	movs	r0, #0
 80030ae:	bd38      	pop	{r3, r4, r5, pc}
 80030b0:	20030a30 	.word	0x20030a30
 80030b4:	20030000 	.word	0x20030000
 80030b8:	200012f0 	.word	0x200012f0

080030bc <TL_SYS_SendCmd>:
{
 80030bc:	b508      	push	{r3, lr}
  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 80030be:	4b04      	ldr	r3, [pc, #16]	; (80030d0 <TL_SYS_SendCmd+0x14>)
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2210      	movs	r2, #16
 80030c6:	721a      	strb	r2, [r3, #8]
  HW_IPCC_SYS_SendCmd();
 80030c8:	f7fe fc06 	bl	80018d8 <HW_IPCC_SYS_SendCmd>
}
 80030cc:	2000      	movs	r0, #0
 80030ce:	bd08      	pop	{r3, pc}
 80030d0:	20030000 	.word	0x20030000

080030d4 <HW_IPCC_SYS_CmdEvtNot>:
  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 80030d4:	4b02      	ldr	r3, [pc, #8]	; (80030e0 <HW_IPCC_SYS_CmdEvtNot+0xc>)
 80030d6:	68da      	ldr	r2, [r3, #12]
 80030d8:	4b02      	ldr	r3, [pc, #8]	; (80030e4 <HW_IPCC_SYS_CmdEvtNot+0x10>)
 80030da:	6810      	ldr	r0, [r2, #0]
 80030dc:	691b      	ldr	r3, [r3, #16]
 80030de:	4718      	bx	r3
 80030e0:	20030000 	.word	0x20030000
 80030e4:	200012f0 	.word	0x200012f0

080030e8 <HW_IPCC_SYS_EvtNot>:
{
 80030e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 80030ea:	4c08      	ldr	r4, [pc, #32]	; (800310c <HW_IPCC_SYS_EvtNot+0x24>)
    SYS_EVT_IoBusCallBackFunction( p_evt );
 80030ec:	4d08      	ldr	r5, [pc, #32]	; (8003110 <HW_IPCC_SYS_EvtNot+0x28>)
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 80030ee:	4807      	ldr	r0, [pc, #28]	; (800310c <HW_IPCC_SYS_EvtNot+0x24>)
 80030f0:	f7ff fcdd 	bl	8002aae <LST_is_empty>
 80030f4:	b108      	cbz	r0, 80030fa <HW_IPCC_SYS_EvtNot+0x12>
}
 80030f6:	b003      	add	sp, #12
 80030f8:	bd30      	pop	{r4, r5, pc}
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 80030fa:	4620      	mov	r0, r4
 80030fc:	a901      	add	r1, sp, #4
 80030fe:	f7ff fd03 	bl	8002b08 <LST_remove_head>
    SYS_EVT_IoBusCallBackFunction( p_evt );
 8003102:	9801      	ldr	r0, [sp, #4]
 8003104:	696b      	ldr	r3, [r5, #20]
 8003106:	4798      	blx	r3
 8003108:	e7f1      	b.n	80030ee <HW_IPCC_SYS_EvtNot+0x6>
 800310a:	bf00      	nop
 800310c:	20030a30 	.word	0x20030a30
 8003110:	200012f0 	.word	0x200012f0

08003114 <TL_MM_Init>:
{
 8003114:	b538      	push	{r3, r4, r5, lr}
  LST_init_head (&FreeBufQueue);
 8003116:	4d0c      	ldr	r5, [pc, #48]	; (8003148 <TL_MM_Init+0x34>)
{
 8003118:	4604      	mov	r4, r0
  LST_init_head (&FreeBufQueue);
 800311a:	4628      	mov	r0, r5
 800311c:	f7ff fcc4 	bl	8002aa8 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8003120:	480a      	ldr	r0, [pc, #40]	; (800314c <TL_MM_Init+0x38>)
 8003122:	f7ff fcc1 	bl	8002aa8 <LST_init_head>
  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8003126:	4b0a      	ldr	r3, [pc, #40]	; (8003150 <TL_MM_Init+0x3c>)
  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8003128:	68a2      	ldr	r2, [r4, #8]
  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800312a:	691b      	ldr	r3, [r3, #16]
  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800312c:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800312e:	68e2      	ldr	r2, [r4, #12]
 8003130:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8003132:	6822      	ldr	r2, [r4, #0]
 8003134:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8003136:	6862      	ldr	r2, [r4, #4]
 8003138:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800313a:	6922      	ldr	r2, [r4, #16]
 800313c:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800313e:	6962      	ldr	r2, [r4, #20]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8003140:	611d      	str	r5, [r3, #16]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8003142:	619a      	str	r2, [r3, #24]
 8003144:	bd38      	pop	{r3, r4, r5, pc}
 8003146:	bf00      	nop
 8003148:	200301a8 	.word	0x200301a8
 800314c:	200012f0 	.word	0x200012f0
 8003150:	20030000 	.word	0x20030000

08003154 <TL_MM_EvtDone>:
{
 8003154:	b508      	push	{r3, lr}
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8003156:	4601      	mov	r1, r0
 8003158:	4803      	ldr	r0, [pc, #12]	; (8003168 <TL_MM_EvtDone+0x14>)
 800315a:	f7ff fcbe 	bl	8002ada <LST_insert_tail>
  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800315e:	4803      	ldr	r0, [pc, #12]	; (800316c <TL_MM_EvtDone+0x18>)
}
 8003160:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8003164:	f7fe bc06 	b.w	8001974 <HW_IPCC_MM_SendFreeBuf>
 8003168:	200012f0 	.word	0x200012f0
 800316c:	08002f89 	.word	0x08002f89

08003170 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8003170:	b510      	push	{r4, lr}
  LST_init_head (&TracesEvtQueue);
 8003172:	4c05      	ldr	r4, [pc, #20]	; (8003188 <TL_TRACES_Init+0x18>)
 8003174:	4620      	mov	r0, r4
 8003176:	f7ff fc97 	bl	8002aa8 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800317a:	4b04      	ldr	r3, [pc, #16]	; (800318c <TL_TRACES_Init+0x1c>)
 800317c:	695b      	ldr	r3, [r3, #20]
 800317e:	601c      	str	r4, [r3, #0]

  HW_IPCC_TRACES_Init();

  return;
}
 8003180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HW_IPCC_TRACES_Init();
 8003184:	f7fe bc0c 	b.w	80019a0 <HW_IPCC_TRACES_Init>
 8003188:	200301b0 	.word	0x200301b0
 800318c:	20030000 	.word	0x20030000

08003190 <TL_TRACES_EvtReceived>:
  }

  return;
}

__weak void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt ){};
 8003190:	4770      	bx	lr
	...

08003194 <HW_IPCC_TRACES_EvtNot>:
{
 8003194:	b513      	push	{r0, r1, r4, lr}
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8003196:	4c07      	ldr	r4, [pc, #28]	; (80031b4 <HW_IPCC_TRACES_EvtNot+0x20>)
 8003198:	4806      	ldr	r0, [pc, #24]	; (80031b4 <HW_IPCC_TRACES_EvtNot+0x20>)
 800319a:	f7ff fc88 	bl	8002aae <LST_is_empty>
 800319e:	b108      	cbz	r0, 80031a4 <HW_IPCC_TRACES_EvtNot+0x10>
}
 80031a0:	b002      	add	sp, #8
 80031a2:	bd10      	pop	{r4, pc}
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 80031a4:	4620      	mov	r0, r4
 80031a6:	a901      	add	r1, sp, #4
 80031a8:	f7ff fcae 	bl	8002b08 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 80031ac:	9801      	ldr	r0, [sp, #4]
 80031ae:	f7ff ffef 	bl	8003190 <TL_TRACES_EvtReceived>
 80031b2:	e7f1      	b.n	8003198 <HW_IPCC_TRACES_EvtNot+0x4>
 80031b4:	200301b0 	.word	0x200301b0

080031b8 <HAL_Init>:
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031b8:	4a09      	ldr	r2, [pc, #36]	; (80031e0 <HAL_Init+0x28>)
 80031ba:	6813      	ldr	r3, [r2, #0]
 80031bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 80031c0:	b510      	push	{r4, lr}
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031c2:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031c4:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031c6:	f000 f82d 	bl	8003224 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80031ca:	2000      	movs	r0, #0
 80031cc:	f7fd ff06 	bl	8000fdc <HAL_InitTick>
 80031d0:	4604      	mov	r4, r0
 80031d2:	b918      	cbnz	r0, 80031dc <HAL_Init+0x24>
    status = HAL_ERROR;
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80031d4:	f7fd ff15 	bl	8001002 <HAL_MspInit>
  }

  /* Return function status */
  return status;
}
 80031d8:	4620      	mov	r0, r4
 80031da:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80031dc:	2401      	movs	r4, #1
 80031de:	e7fb      	b.n	80031d8 <HAL_Init+0x20>
 80031e0:	58004000 	.word	0x58004000

080031e4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80031e4:	4a03      	ldr	r2, [pc, #12]	; (80031f4 <HAL_IncTick+0x10>)
 80031e6:	4904      	ldr	r1, [pc, #16]	; (80031f8 <HAL_IncTick+0x14>)
 80031e8:	6813      	ldr	r3, [r2, #0]
 80031ea:	6809      	ldr	r1, [r1, #0]
 80031ec:	440b      	add	r3, r1
 80031ee:	6013      	str	r3, [r2, #0]
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	20001528 	.word	0x20001528
 80031f8:	20000044 	.word	0x20000044

080031fc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80031fc:	4b01      	ldr	r3, [pc, #4]	; (8003204 <HAL_GetTick+0x8>)
 80031fe:	6818      	ldr	r0, [r3, #0]
}
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	20001528 	.word	0x20001528

08003208 <HAL_GetTickPrio>:
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
  return uwTickPrio;
}
 8003208:	4b01      	ldr	r3, [pc, #4]	; (8003210 <HAL_GetTickPrio+0x8>)
 800320a:	6858      	ldr	r0, [r3, #4]
 800320c:	4770      	bx	lr
 800320e:	bf00      	nop
 8003210:	20000044 	.word	0x20000044

08003214 <HAL_DBGMCU_EnableDBGSleepMode>:
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8003214:	4a02      	ldr	r2, [pc, #8]	; (8003220 <HAL_DBGMCU_EnableDBGSleepMode+0xc>)
 8003216:	6853      	ldr	r3, [r2, #4]
 8003218:	f043 0301 	orr.w	r3, r3, #1
 800321c:	6053      	str	r3, [r2, #4]
 800321e:	4770      	bx	lr
 8003220:	e0042000 	.word	0xe0042000

08003224 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003224:	4a07      	ldr	r2, [pc, #28]	; (8003244 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8003226:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003228:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800322c:	041b      	lsls	r3, r3, #16
 800322e:	0c1b      	lsrs	r3, r3, #16
 8003230:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8003234:	0200      	lsls	r0, r0, #8
 8003236:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800323a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800323e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8003240:	60d3      	str	r3, [r2, #12]
 8003242:	4770      	bx	lr
 8003244:	e000ed00 	.word	0xe000ed00

08003248 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003248:	4b17      	ldr	r3, [pc, #92]	; (80032a8 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800324a:	b530      	push	{r4, r5, lr}
 800324c:	68dc      	ldr	r4, [r3, #12]
 800324e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003252:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003256:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003258:	2b04      	cmp	r3, #4
 800325a:	bf28      	it	cs
 800325c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800325e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003260:	f04f 0501 	mov.w	r5, #1
 8003264:	fa05 f303 	lsl.w	r3, r5, r3
 8003268:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800326c:	bf8c      	ite	hi
 800326e:	3c03      	subhi	r4, #3
 8003270:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003272:	4019      	ands	r1, r3
 8003274:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003276:	fa05 f404 	lsl.w	r4, r5, r4
 800327a:	3c01      	subs	r4, #1
 800327c:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800327e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003280:	ea42 0201 	orr.w	r2, r2, r1
 8003284:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003288:	bfaf      	iteee	ge
 800328a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800328e:	f000 000f 	andlt.w	r0, r0, #15
 8003292:	4b06      	ldrlt	r3, [pc, #24]	; (80032ac <HAL_NVIC_SetPriority+0x64>)
 8003294:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003296:	bfa5      	ittet	ge
 8003298:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 800329c:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800329e:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032a0:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80032a4:	bd30      	pop	{r4, r5, pc}
 80032a6:	bf00      	nop
 80032a8:	e000ed00 	.word	0xe000ed00
 80032ac:	e000ed14 	.word	0xe000ed14

080032b0 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80032b0:	0942      	lsrs	r2, r0, #5
 80032b2:	2301      	movs	r3, #1
 80032b4:	f000 001f 	and.w	r0, r0, #31
 80032b8:	fa03 f000 	lsl.w	r0, r3, r0
 80032bc:	4b01      	ldr	r3, [pc, #4]	; (80032c4 <HAL_NVIC_EnableIRQ+0x14>)
 80032be:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80032c2:	4770      	bx	lr
 80032c4:	e000e100 	.word	0xe000e100

080032c8 <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80032c8:	0943      	lsrs	r3, r0, #5
 80032ca:	2201      	movs	r2, #1
 80032cc:	f000 001f 	and.w	r0, r0, #31
 80032d0:	fa02 f000 	lsl.w	r0, r2, r0
 80032d4:	3320      	adds	r3, #32
 80032d6:	4a02      	ldr	r2, [pc, #8]	; (80032e0 <HAL_NVIC_DisableIRQ+0x18>)
 80032d8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	e000e100 	.word	0xe000e100

080032e4 <HAL_NVIC_SetPendingIRQ>:
  NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80032e4:	0943      	lsrs	r3, r0, #5
 80032e6:	2201      	movs	r2, #1
 80032e8:	f000 001f 	and.w	r0, r0, #31
 80032ec:	fa02 f000 	lsl.w	r0, r2, r0
 80032f0:	3340      	adds	r3, #64	; 0x40
 80032f2:	4a02      	ldr	r2, [pc, #8]	; (80032fc <HAL_NVIC_SetPendingIRQ+0x18>)
 80032f4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop
 80032fc:	e000e100 	.word	0xe000e100

08003300 <HAL_NVIC_ClearPendingIRQ>:
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8003300:	0943      	lsrs	r3, r0, #5
 8003302:	2201      	movs	r2, #1
 8003304:	f000 001f 	and.w	r0, r0, #31
 8003308:	fa02 f000 	lsl.w	r0, r2, r0
 800330c:	3360      	adds	r3, #96	; 0x60
 800330e:	4a02      	ldr	r2, [pc, #8]	; (8003318 <HAL_NVIC_ClearPendingIRQ+0x18>)
 8003310:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop
 8003318:	e000e100 	.word	0xe000e100

0800331c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800331c:	b570      	push	{r4, r5, r6, lr}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800331e:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 8003320:	6d05      	ldr	r5, [r0, #80]	; 0x50
 8003322:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003324:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8003326:	b114      	cbz	r4, 800332e <DMA_SetConfig+0x12>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003328:	6d84      	ldr	r4, [r0, #88]	; 0x58
 800332a:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 800332c:	6065      	str	r5, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800332e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003330:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8003332:	f004 051c 	and.w	r5, r4, #28
 8003336:	2401      	movs	r4, #1
 8003338:	40ac      	lsls	r4, r5
 800333a:	6074      	str	r4, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800333c:	6804      	ldr	r4, [r0, #0]
 800333e:	6063      	str	r3, [r4, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003340:	6883      	ldr	r3, [r0, #8]
 8003342:	2b10      	cmp	r3, #16
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003344:	bf0b      	itete	eq
 8003346:	60a2      	streq	r2, [r4, #8]
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8003348:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 800334a:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800334c:	60e2      	strne	r2, [r4, #12]
 800334e:	bd70      	pop	{r4, r5, r6, pc}

08003350 <DMA_CalcDMAMUXChannelBaseAndMask>:
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003350:	6803      	ldr	r3, [r0, #0]
 8003352:	4a10      	ldr	r2, [pc, #64]	; (8003394 <DMA_CalcDMAMUXChannelBaseAndMask+0x44>)
 8003354:	4293      	cmp	r3, r2
 8003356:	6c42      	ldr	r2, [r0, #68]	; 0x44
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003358:	bf88      	it	hi
 800335a:	490f      	ldrhi	r1, [pc, #60]	; (8003398 <DMA_CalcDMAMUXChannelBaseAndMask+0x48>)
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800335c:	f022 0203 	bic.w	r2, r2, #3
 8003360:	bf9b      	ittet	ls
 8003362:	f102 4280 	addls.w	r2, r2, #1073741824	; 0x40000000
 8003366:	f502 3202 	addls.w	r2, r2, #133120	; 0x20800
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800336a:	1889      	addhi	r1, r1, r2
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800336c:	6482      	strls	r2, [r0, #72]	; 0x48
  }
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800336e:	b2db      	uxtb	r3, r3
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003370:	4a0a      	ldr	r2, [pc, #40]	; (800339c <DMA_CalcDMAMUXChannelBaseAndMask+0x4c>)
 8003372:	64c2      	str	r2, [r0, #76]	; 0x4c
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003374:	f1a3 0308 	sub.w	r3, r3, #8
 8003378:	f04f 0214 	mov.w	r2, #20
 800337c:	fbb3 f3f2 	udiv	r3, r3, r2
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8003380:	f04f 0201 	mov.w	r2, #1
 8003384:	f003 031c 	and.w	r3, r3, #28
 8003388:	fa02 f303 	lsl.w	r3, r2, r3
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800338c:	bf88      	it	hi
 800338e:	6481      	strhi	r1, [r0, #72]	; 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8003390:	6503      	str	r3, [r0, #80]	; 0x50
 8003392:	4770      	bx	lr
 8003394:	40020407 	.word	0x40020407
 8003398:	4002081c 	.word	0x4002081c
 800339c:	40020880 	.word	0x40020880

080033a0 <HAL_DMA_Init>:
{
 80033a0:	b510      	push	{r4, lr}
  if (hdma == NULL)
 80033a2:	4604      	mov	r4, r0
 80033a4:	2800      	cmp	r0, #0
 80033a6:	d05d      	beq.n	8003464 <HAL_DMA_Init+0xc4>
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80033a8:	6801      	ldr	r1, [r0, #0]
 80033aa:	4b2f      	ldr	r3, [pc, #188]	; (8003468 <HAL_DMA_Init+0xc8>)
 80033ac:	4299      	cmp	r1, r3
 80033ae:	f04f 0014 	mov.w	r0, #20
 80033b2:	d84a      	bhi.n	800344a <HAL_DMA_Init+0xaa>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80033b4:	4a2d      	ldr	r2, [pc, #180]	; (800346c <HAL_DMA_Init+0xcc>)
 80033b6:	440a      	add	r2, r1
 80033b8:	fbb2 f2f0 	udiv	r2, r2, r0
 80033bc:	0092      	lsls	r2, r2, #2
 80033be:	6462      	str	r2, [r4, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80033c0:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
    hdma->DmaBaseAddress = DMA2;
 80033c4:	6423      	str	r3, [r4, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 80033c6:	2302      	movs	r3, #2
 80033c8:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  tmp |=  hdma->Init.Direction        |
 80033cc:	68e0      	ldr	r0, [r4, #12]
 80033ce:	68a3      	ldr	r3, [r4, #8]
  tmp = hdma->Instance->CCR;
 80033d0:	680a      	ldr	r2, [r1, #0]
  tmp |=  hdma->Init.Direction        |
 80033d2:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033d4:	6920      	ldr	r0, [r4, #16]
 80033d6:	4303      	orrs	r3, r0
 80033d8:	6960      	ldr	r0, [r4, #20]
 80033da:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033dc:	69a0      	ldr	r0, [r4, #24]
 80033de:	4303      	orrs	r3, r0
 80033e0:	69e0      	ldr	r0, [r4, #28]
 80033e2:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 80033e4:	6a20      	ldr	r0, [r4, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80033e6:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 80033ea:	f022 0270 	bic.w	r2, r2, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 80033ee:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 80033f0:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;
 80033f2:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80033f4:	4620      	mov	r0, r4
 80033f6:	f7ff ffab 	bl	8003350 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80033fa:	68a3      	ldr	r3, [r4, #8]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80033fc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80033fe:	6d20      	ldr	r0, [r4, #80]	; 0x50
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003400:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003404:	bf04      	itt	eq
 8003406:	2300      	moveq	r3, #0
 8003408:	6063      	streq	r3, [r4, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800340a:	6862      	ldr	r2, [r4, #4]
 800340c:	b2d3      	uxtb	r3, r2
 800340e:	600b      	str	r3, [r1, #0]
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003410:	3a01      	subs	r2, #1
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003412:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003414:	2a03      	cmp	r2, #3
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003416:	6048      	str	r0, [r1, #4]
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003418:	d81f      	bhi.n	800345a <HAL_DMA_Init+0xba>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800341a:	4a15      	ldr	r2, [pc, #84]	; (8003470 <HAL_DMA_Init+0xd0>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800341c:	4815      	ldr	r0, [pc, #84]	; (8003474 <HAL_DMA_Init+0xd4>)
 800341e:	65a0      	str	r0, [r4, #88]	; 0x58
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003420:	441a      	add	r2, r3

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003422:	3b01      	subs	r3, #1
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003424:	0092      	lsls	r2, r2, #2
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003426:	2101      	movs	r1, #1
 8003428:	f003 0303 	and.w	r3, r3, #3
 800342c:	fa01 f303 	lsl.w	r3, r1, r3
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003430:	2100      	movs	r1, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003432:	6562      	str	r2, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003434:	65e3      	str	r3, [r4, #92]	; 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003436:	6011      	str	r1, [r2, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003438:	6043      	str	r3, [r0, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800343a:	2000      	movs	r0, #0
  hdma->State  = HAL_DMA_STATE_READY;
 800343c:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800343e:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->Lock = HAL_UNLOCKED;
 8003440:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 8003444:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  return HAL_OK;
 8003448:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800344a:	4b0b      	ldr	r3, [pc, #44]	; (8003478 <HAL_DMA_Init+0xd8>)
 800344c:	440b      	add	r3, r1
 800344e:	fbb3 f3f0 	udiv	r3, r3, r0
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	6463      	str	r3, [r4, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003456:	4b09      	ldr	r3, [pc, #36]	; (800347c <HAL_DMA_Init+0xdc>)
 8003458:	e7b4      	b.n	80033c4 <HAL_DMA_Init+0x24>
    hdma->DMAmuxRequestGen = 0U;
 800345a:	2300      	movs	r3, #0
 800345c:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800345e:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003460:	65e3      	str	r3, [r4, #92]	; 0x5c
 8003462:	e7ea      	b.n	800343a <HAL_DMA_Init+0x9a>
    return HAL_ERROR;
 8003464:	2001      	movs	r0, #1
}
 8003466:	bd10      	pop	{r4, pc}
 8003468:	40020407 	.word	0x40020407
 800346c:	bffdfff8 	.word	0xbffdfff8
 8003470:	1000823f 	.word	0x1000823f
 8003474:	40020940 	.word	0x40020940
 8003478:	bffdfbf8 	.word	0xbffdfbf8
 800347c:	40020400 	.word	0x40020400

08003480 <HAL_DMA_Start_IT>:
{
 8003480:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8003482:	f890 5024 	ldrb.w	r5, [r0, #36]	; 0x24
 8003486:	2d01      	cmp	r5, #1
{
 8003488:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 800348a:	d039      	beq.n	8003500 <HAL_DMA_Start_IT+0x80>
 800348c:	2501      	movs	r5, #1
 800348e:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
  if (HAL_DMA_STATE_READY == hdma->State)
 8003492:	f890 5025 	ldrb.w	r5, [r0, #37]	; 0x25
 8003496:	2d01      	cmp	r5, #1
 8003498:	f04f 0600 	mov.w	r6, #0
 800349c:	f04f 0502 	mov.w	r5, #2
 80034a0:	d12c      	bne.n	80034fc <HAL_DMA_Start_IT+0x7c>
    hdma->State = HAL_DMA_STATE_BUSY;
 80034a2:	f880 5025 	strb.w	r5, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034a6:	63c6      	str	r6, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 80034a8:	6806      	ldr	r6, [r0, #0]
 80034aa:	6835      	ldr	r5, [r6, #0]
 80034ac:	f025 0501 	bic.w	r5, r5, #1
 80034b0:	6035      	str	r5, [r6, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80034b2:	f7ff ff33 	bl	800331c <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 80034b6:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80034b8:	6803      	ldr	r3, [r0, #0]
 80034ba:	b1ba      	cbz	r2, 80034ec <HAL_DMA_Start_IT+0x6c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	f042 020e 	orr.w	r2, r2, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80034c2:	601a      	str	r2, [r3, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80034c4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80034c6:	6811      	ldr	r1, [r2, #0]
 80034c8:	03c9      	lsls	r1, r1, #15
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80034ca:	bf42      	ittt	mi
 80034cc:	6811      	ldrmi	r1, [r2, #0]
 80034ce:	f441 7180 	orrmi.w	r1, r1, #256	; 0x100
 80034d2:	6011      	strmi	r1, [r2, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 80034d4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80034d6:	b11a      	cbz	r2, 80034e0 <HAL_DMA_Start_IT+0x60>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80034d8:	6811      	ldr	r1, [r2, #0]
 80034da:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80034de:	6011      	str	r1, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	f042 0201 	orr.w	r2, r2, #1
 80034e6:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034e8:	2000      	movs	r0, #0
 80034ea:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	f022 0204 	bic.w	r2, r2, #4
 80034f2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	f042 020a 	orr.w	r2, r2, #10
 80034fa:	e7e2      	b.n	80034c2 <HAL_DMA_Start_IT+0x42>
    __HAL_UNLOCK(hdma);
 80034fc:	f880 6024 	strb.w	r6, [r0, #36]	; 0x24
  __HAL_LOCK(hdma);
 8003500:	2002      	movs	r0, #2
}
 8003502:	bd70      	pop	{r4, r5, r6, pc}

08003504 <HAL_DMA_Abort_IT>:
  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003504:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8003508:	2b02      	cmp	r3, #2
{
 800350a:	b510      	push	{r4, lr}
  if (HAL_DMA_STATE_BUSY != hdma->State)
 800350c:	d003      	beq.n	8003516 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800350e:	2304      	movs	r3, #4
 8003510:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8003512:	2001      	movs	r0, #1
 8003514:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003516:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003518:	6c01      	ldr	r1, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	f022 020e 	bic.w	r2, r2, #14
 8003520:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	f022 0201 	bic.w	r2, r2, #1
 8003528:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800352a:	6c82      	ldr	r2, [r0, #72]	; 0x48
 800352c:	6813      	ldr	r3, [r2, #0]
 800352e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003532:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003534:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003536:	f003 021c 	and.w	r2, r3, #28
 800353a:	2301      	movs	r3, #1
 800353c:	4093      	lsls	r3, r2
 800353e:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003540:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8003542:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8003544:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8003546:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8003548:	b133      	cbz	r3, 8003558 <HAL_DMA_Abort_IT+0x54>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003550:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003552:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8003554:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8003556:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8003558:	2301      	movs	r3, #1
 800355a:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    if (hdma->XferAbortCallback != NULL)
 800355e:	6b83      	ldr	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8003560:	2400      	movs	r4, #0
 8003562:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 8003566:	b113      	cbz	r3, 800356e <HAL_DMA_Abort_IT+0x6a>
      hdma->XferAbortCallback(hdma);
 8003568:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800356a:	4620      	mov	r0, r4
 800356c:	bd10      	pop	{r4, pc}
 800356e:	4618      	mov	r0, r3
}
 8003570:	bd10      	pop	{r4, pc}

08003572 <HAL_DMA_IRQHandler>:
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003572:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003574:	6c42      	ldr	r2, [r0, #68]	; 0x44
  uint32_t source_it = hdma->Instance->CCR;
 8003576:	6803      	ldr	r3, [r0, #0]
{
 8003578:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800357a:	f002 021c 	and.w	r2, r2, #28
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800357e:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8003580:	681d      	ldr	r5, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003582:	2404      	movs	r4, #4
 8003584:	4094      	lsls	r4, r2
 8003586:	4226      	tst	r6, r4
 8003588:	d00e      	beq.n	80035a8 <HAL_DMA_IRQHandler+0x36>
 800358a:	f015 0f04 	tst.w	r5, #4
 800358e:	d00b      	beq.n	80035a8 <HAL_DMA_IRQHandler+0x36>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	0692      	lsls	r2, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003594:	bf5e      	ittt	pl
 8003596:	681a      	ldrpl	r2, [r3, #0]
 8003598:	f022 0204 	bicpl.w	r2, r2, #4
 800359c:	601a      	strpl	r2, [r3, #0]
    if (hdma->XferHalfCpltCallback != NULL)
 800359e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU));
 80035a0:	604c      	str	r4, [r1, #4]
    if (hdma->XferErrorCallback != NULL)
 80035a2:	b373      	cbz	r3, 8003602 <HAL_DMA_IRQHandler+0x90>
}
 80035a4:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 80035a6:	4718      	bx	r3
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80035a8:	2402      	movs	r4, #2
 80035aa:	4094      	lsls	r4, r2
 80035ac:	4226      	tst	r6, r4
 80035ae:	d012      	beq.n	80035d6 <HAL_DMA_IRQHandler+0x64>
 80035b0:	f015 0f02 	tst.w	r5, #2
 80035b4:	d00f      	beq.n	80035d6 <HAL_DMA_IRQHandler+0x64>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	0695      	lsls	r5, r2, #26
 80035ba:	d406      	bmi.n	80035ca <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	f022 020a 	bic.w	r2, r2, #10
 80035c2:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80035c4:	2301      	movs	r3, #1
 80035c6:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80035ca:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80035cc:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 80035ce:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferCpltCallback != NULL)
 80035d2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80035d4:	e7e5      	b.n	80035a2 <HAL_DMA_IRQHandler+0x30>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 80035d6:	2408      	movs	r4, #8
 80035d8:	4094      	lsls	r4, r2
 80035da:	4234      	tst	r4, r6
 80035dc:	d011      	beq.n	8003602 <HAL_DMA_IRQHandler+0x90>
 80035de:	072c      	lsls	r4, r5, #28
 80035e0:	d50f      	bpl.n	8003602 <HAL_DMA_IRQHandler+0x90>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035e2:	681c      	ldr	r4, [r3, #0]
 80035e4:	f024 040e 	bic.w	r4, r4, #14
 80035e8:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80035ea:	2301      	movs	r3, #1
 80035ec:	fa03 f202 	lsl.w	r2, r3, r2
 80035f0:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80035f2:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 80035f4:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80035f8:	2300      	movs	r3, #0
 80035fa:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 80035fe:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003600:	e7cf      	b.n	80035a2 <HAL_DMA_IRQHandler+0x30>
}
 8003602:	bc70      	pop	{r4, r5, r6}
 8003604:	4770      	bx	lr
	...

08003608 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800360c:	4a55      	ldr	r2, [pc, #340]	; (8003764 <HAL_GPIO_Init+0x15c>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800360e:	f8d1 8000 	ldr.w	r8, [r1]
  uint32_t position = 0x00u;
 8003612:	2300      	movs	r3, #0
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003614:	f04f 090f 	mov.w	r9, #15
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003618:	fa38 f403 	lsrs.w	r4, r8, r3
 800361c:	d101      	bne.n	8003622 <HAL_GPIO_Init+0x1a>
      }
    }
    
    position++;
  }
}
 800361e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003622:	2401      	movs	r4, #1
 8003624:	fa04 fa03 	lsl.w	sl, r4, r3
    if (iocurrent != 0x00u)
 8003628:	ea18 050a 	ands.w	r5, r8, sl
 800362c:	f000 808f 	beq.w	800374e <HAL_GPIO_Init+0x146>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003630:	684c      	ldr	r4, [r1, #4]
 8003632:	f024 0b10 	bic.w	fp, r4, #16
 8003636:	f1bb 0f02 	cmp.w	fp, #2
 800363a:	d111      	bne.n	8003660 <HAL_GPIO_Init+0x58>
        temp = GPIOx->AFR[position >> 3u];
 800363c:	08df      	lsrs	r7, r3, #3
 800363e:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003642:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8003646:	6a3e      	ldr	r6, [r7, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003648:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800364c:	fa09 fc0e 	lsl.w	ip, r9, lr
 8003650:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003654:	690e      	ldr	r6, [r1, #16]
 8003656:	fa06 f60e 	lsl.w	r6, r6, lr
 800365a:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3u] = temp;
 800365e:	623e      	str	r6, [r7, #32]
 8003660:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003664:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 8003666:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003668:	fa07 f70c 	lsl.w	r7, r7, ip
 800366c:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800366e:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003672:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003674:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003678:	f10b 3bff 	add.w	fp, fp, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800367c:	ea4e 0606 	orr.w	r6, lr, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003680:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 8003684:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003686:	d811      	bhi.n	80036ac <HAL_GPIO_Init+0xa4>
        temp = GPIOx->OSPEEDR;
 8003688:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800368a:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 800368e:	68ce      	ldr	r6, [r1, #12]
 8003690:	fa06 fe0c 	lsl.w	lr, r6, ip
 8003694:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 8003698:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 800369a:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800369c:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80036a0:	f3c4 1600 	ubfx	r6, r4, #4, #1
 80036a4:	409e      	lsls	r6, r3
 80036a6:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 80036aa:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 80036ac:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80036ae:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80036b0:	688e      	ldr	r6, [r1, #8]
 80036b2:	fa06 f60c 	lsl.w	r6, r6, ip
 80036b6:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80036b8:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 80036ba:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80036bc:	d547      	bpl.n	800374e <HAL_GPIO_Init+0x146>
 80036be:	f023 0703 	bic.w	r7, r3, #3
 80036c2:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80036c6:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80036ca:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2u];
 80036ce:	68be      	ldr	r6, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80036d0:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80036d4:	fa09 fc0e 	lsl.w	ip, r9, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80036d8:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80036dc:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80036e0:	d037      	beq.n	8003752 <HAL_GPIO_Init+0x14a>
 80036e2:	4e21      	ldr	r6, [pc, #132]	; (8003768 <HAL_GPIO_Init+0x160>)
 80036e4:	42b0      	cmp	r0, r6
 80036e6:	d036      	beq.n	8003756 <HAL_GPIO_Init+0x14e>
 80036e8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80036ec:	42b0      	cmp	r0, r6
 80036ee:	d034      	beq.n	800375a <HAL_GPIO_Init+0x152>
 80036f0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80036f4:	42b0      	cmp	r0, r6
 80036f6:	d032      	beq.n	800375e <HAL_GPIO_Init+0x156>
 80036f8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80036fc:	42b0      	cmp	r0, r6
 80036fe:	bf14      	ite	ne
 8003700:	2607      	movne	r6, #7
 8003702:	2604      	moveq	r6, #4
 8003704:	fa06 f60e 	lsl.w	r6, r6, lr
 8003708:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 800370c:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR1;
 800370e:	f8d2 6080 	ldr.w	r6, [r2, #128]	; 0x80
        temp &= ~(iocurrent);
 8003712:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003714:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~(iocurrent);
 8003718:	bf0c      	ite	eq
 800371a:	403e      	andeq	r6, r7
          temp |= iocurrent;
 800371c:	432e      	orrne	r6, r5
        EXTI->IMR1 = temp;
 800371e:	f8c2 6080 	str.w	r6, [r2, #128]	; 0x80
        temp = EXTI->EMR1;
 8003722:	f8d2 6084 	ldr.w	r6, [r2, #132]	; 0x84
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003726:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~(iocurrent);
 800372a:	bf0c      	ite	eq
 800372c:	403e      	andeq	r6, r7
          temp |= iocurrent;
 800372e:	432e      	orrne	r6, r5
        EXTI->EMR1 = temp;
 8003730:	f8c2 6084 	str.w	r6, [r2, #132]	; 0x84
        temp = EXTI->RTSR1;
 8003734:	6816      	ldr	r6, [r2, #0]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003736:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~(iocurrent);
 800373a:	bf0c      	ite	eq
 800373c:	403e      	andeq	r6, r7
          temp |= iocurrent;
 800373e:	432e      	orrne	r6, r5
        EXTI->RTSR1 = temp;
 8003740:	6016      	str	r6, [r2, #0]
        temp = EXTI->FTSR1;
 8003742:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003744:	02a4      	lsls	r4, r4, #10
        temp &= ~(iocurrent);
 8003746:	bf54      	ite	pl
 8003748:	403e      	andpl	r6, r7
          temp |= iocurrent;
 800374a:	432e      	orrmi	r6, r5
        EXTI->FTSR1 = temp;
 800374c:	6056      	str	r6, [r2, #4]
    position++;
 800374e:	3301      	adds	r3, #1
 8003750:	e762      	b.n	8003618 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003752:	2600      	movs	r6, #0
 8003754:	e7d6      	b.n	8003704 <HAL_GPIO_Init+0xfc>
 8003756:	2601      	movs	r6, #1
 8003758:	e7d4      	b.n	8003704 <HAL_GPIO_Init+0xfc>
 800375a:	2602      	movs	r6, #2
 800375c:	e7d2      	b.n	8003704 <HAL_GPIO_Init+0xfc>
 800375e:	2603      	movs	r6, #3
 8003760:	e7d0      	b.n	8003704 <HAL_GPIO_Init+0xfc>
 8003762:	bf00      	nop
 8003764:	58000800 	.word	0x58000800
 8003768:	48000400 	.word	0x48000400

0800376c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800376c:	b10a      	cbz	r2, 8003772 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800376e:	6181      	str	r1, [r0, #24]
 8003770:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003772:	6281      	str	r1, [r0, #40]	; 0x28
 8003774:	4770      	bx	lr
	...

08003778 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003778:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800377a:	4b04      	ldr	r3, [pc, #16]	; (800378c <HAL_GPIO_EXTI_IRQHandler+0x14>)
 800377c:	68d9      	ldr	r1, [r3, #12]
 800377e:	4201      	tst	r1, r0
 8003780:	d002      	beq.n	8003788 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003782:	60d8      	str	r0, [r3, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003784:	f7fc ff8d 	bl	80006a2 <HAL_GPIO_EXTI_Callback>
 8003788:	bd08      	pop	{r3, pc}
 800378a:	bf00      	nop
 800378c:	58000800 	.word	0x58000800

08003790 <HAL_PWR_EnableBkUpAccess>:
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003790:	4a02      	ldr	r2, [pc, #8]	; (800379c <HAL_PWR_EnableBkUpAccess+0xc>)
 8003792:	6813      	ldr	r3, [r2, #0]
 8003794:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003798:	6013      	str	r3, [r2, #0]
 800379a:	4770      	bx	lr
 800379c:	58000400 	.word	0x58000400

080037a0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return  (PWR->CR1 & PWR_CR1_VOS);
 80037a0:	4b02      	ldr	r3, [pc, #8]	; (80037ac <HAL_PWREx_GetVoltageRange+0xc>)
 80037a2:	6818      	ldr	r0, [r3, #0]
}
 80037a4:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop
 80037ac:	58000400 	.word	0x58000400

080037b0 <LL_RCC_HSE_IsReady>:
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80037b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037b4:	6818      	ldr	r0, [r3, #0]
}
 80037b6:	f3c0 4040 	ubfx	r0, r0, #17, #1
 80037ba:	4770      	bx	lr

080037bc <LL_RCC_HSI_IsReady>:
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80037bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037c0:	6818      	ldr	r0, [r3, #0]
}
 80037c2:	f3c0 2080 	ubfx	r0, r0, #10, #1
 80037c6:	4770      	bx	lr

080037c8 <LL_RCC_LSI1_IsReady>:
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80037c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037cc:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
}
 80037d0:	f3c0 0040 	ubfx	r0, r0, #1, #1
 80037d4:	4770      	bx	lr

080037d6 <LL_RCC_MSI_IsReady>:
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80037d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037da:	6818      	ldr	r0, [r3, #0]
}
 80037dc:	f3c0 0040 	ubfx	r0, r0, #1, #1
 80037e0:	4770      	bx	lr

080037e2 <LL_RCC_MSI_SetRange>:
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80037e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037e6:	6813      	ldr	r3, [r2, #0]
 80037e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037ec:	4318      	orrs	r0, r3
 80037ee:	6010      	str	r0, [r2, #0]
 80037f0:	4770      	bx	lr

080037f2 <LL_RCC_MSI_GetRange>:
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80037f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037f6:	6818      	ldr	r0, [r3, #0]
 80037f8:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
}
 80037fc:	28b0      	cmp	r0, #176	; 0xb0
 80037fe:	bf28      	it	cs
 8003800:	20b0      	movcs	r0, #176	; 0xb0
 8003802:	4770      	bx	lr

08003804 <LL_RCC_MSI_SetCalibTrimming>:
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003804:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003808:	6853      	ldr	r3, [r2, #4]
 800380a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800380e:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8003812:	6050      	str	r0, [r2, #4]
 8003814:	4770      	bx	lr

08003816 <LL_RCC_PLL_IsReady>:
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003816:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800381a:	6818      	ldr	r0, [r3, #0]
}
 800381c:	f3c0 6040 	ubfx	r0, r0, #25, #1
 8003820:	4770      	bx	lr
	...

08003824 <RCC_SetFlashLatencyFromMSIRange>:

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));
  
  /* MSI frequency range in Hz */
  if(MSI_Range > RCC_MSIRANGE_11)
 8003824:	28b0      	cmp	r0, #176	; 0xb0
 8003826:	4b32      	ldr	r3, [pc, #200]	; (80038f0 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
  }
  
  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8003828:	4a32      	ldr	r2, [pc, #200]	; (80038f4 <RCC_SetFlashLatencyFromMSIRange+0xd0>)
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800382a:	bf98      	it	ls
 800382c:	0900      	lsrls	r0, r0, #4
{
 800382e:	b5f0      	push	{r4, r5, r6, r7, lr}
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8003830:	bf8c      	ite	hi
 8003832:	6add      	ldrhi	r5, [r3, #44]	; 0x2c
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8003834:	f853 5020 	ldrls.w	r5, [r3, r0, lsl #2]
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8003838:	4c2f      	ldr	r4, [pc, #188]	; (80038f8 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800383a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
{
 800383e:	b08d      	sub	sp, #52	; 0x34
 8003840:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8003844:	f003 030f 	and.w	r3, r3, #15
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8003848:	ae04      	add	r6, sp, #16
  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800384a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800384e:	fbb5 f5f3 	udiv	r5, r5, r3
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003852:	4b2a      	ldr	r3, [pc, #168]	; (80038fc <RCC_SetFlashLatencyFromMSIRange+0xd8>)
 8003854:	fbb5 f5f3 	udiv	r5, r5, r3
 8003858:	f7ff ffa2 	bl	80037a0 <HAL_PWREx_GetVoltageRange>
 800385c:	4607      	mov	r7, r0
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800385e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003862:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8003866:	f104 0210 	add.w	r2, r4, #16
 800386a:	ca07      	ldmia	r2, {r0, r1, r2}
 800386c:	ab01      	add	r3, sp, #4
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800386e:	341c      	adds	r4, #28
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8003870:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8003874:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003878:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800387c:	ac0c      	add	r4, sp, #48	; 0x30
 800387e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003882:	d11f      	bne.n	80038c4 <RCC_SetFlashLatencyFromMSIRange+0xa0>
 8003884:	2300      	movs	r3, #0
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003886:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
 800388a:	4295      	cmp	r5, r2
 800388c:	d815      	bhi.n	80038ba <RCC_SetFlashLatencyFromMSIRange+0x96>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
      {
        latency = FLASH_LATENCY_RANGE[index];
 800388e:	aa0c      	add	r2, sp, #48	; 0x30
 8003890:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003894:	f853 4c10 	ldr.w	r4, [r3, #-16]
        break;
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003898:	4d19      	ldr	r5, [pc, #100]	; (8003900 <RCC_SetFlashLatencyFromMSIRange+0xdc>)
 800389a:	682b      	ldr	r3, [r5, #0]
 800389c:	f023 0307 	bic.w	r3, r3, #7
 80038a0:	4323      	orrs	r3, r4
 80038a2:	602b      	str	r3, [r5, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80038a4:	f7ff fcaa 	bl	80031fc <HAL_GetTick>
 80038a8:	4606      	mov	r6, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80038aa:	682b      	ldr	r3, [r5, #0]
 80038ac:	f003 0307 	and.w	r3, r3, #7
 80038b0:	429c      	cmp	r4, r3
 80038b2:	d116      	bne.n	80038e2 <RCC_SetFlashLatencyFromMSIRange+0xbe>
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 80038b4:	2000      	movs	r0, #0
}
 80038b6:	b00d      	add	sp, #52	; 0x34
 80038b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80038ba:	3301      	adds	r3, #1
 80038bc:	2b04      	cmp	r3, #4
 80038be:	d1e2      	bne.n	8003886 <RCC_SetFlashLatencyFromMSIRange+0x62>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80038c0:	2400      	movs	r4, #0
 80038c2:	e7e9      	b.n	8003898 <RCC_SetFlashLatencyFromMSIRange+0x74>
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80038c4:	9b01      	ldr	r3, [sp, #4]
 80038c6:	429d      	cmp	r5, r3
 80038c8:	d907      	bls.n	80038da <RCC_SetFlashLatencyFromMSIRange+0xb6>
 80038ca:	9b02      	ldr	r3, [sp, #8]
 80038cc:	429d      	cmp	r5, r3
 80038ce:	d906      	bls.n	80038de <RCC_SetFlashLatencyFromMSIRange+0xba>
 80038d0:	9b03      	ldr	r3, [sp, #12]
 80038d2:	429d      	cmp	r5, r3
 80038d4:	d8f4      	bhi.n	80038c0 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80038d6:	2302      	movs	r3, #2
 80038d8:	e7d9      	b.n	800388e <RCC_SetFlashLatencyFromMSIRange+0x6a>
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80038da:	2300      	movs	r3, #0
 80038dc:	e7d7      	b.n	800388e <RCC_SetFlashLatencyFromMSIRange+0x6a>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80038de:	2301      	movs	r3, #1
 80038e0:	e7d5      	b.n	800388e <RCC_SetFlashLatencyFromMSIRange+0x6a>
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80038e2:	f7ff fc8b 	bl	80031fc <HAL_GetTick>
 80038e6:	1b80      	subs	r0, r0, r6
 80038e8:	2802      	cmp	r0, #2
 80038ea:	d9de      	bls.n	80038aa <RCC_SetFlashLatencyFromMSIRange+0x86>
      return HAL_TIMEOUT;
 80038ec:	2003      	movs	r0, #3
 80038ee:	e7e2      	b.n	80038b6 <RCC_SetFlashLatencyFromMSIRange+0x92>
 80038f0:	08006518 	.word	0x08006518
 80038f4:	08006558 	.word	0x08006558
 80038f8:	08006618 	.word	0x08006618
 80038fc:	000f4240 	.word	0x000f4240
 8003900:	58004000 	.word	0x58004000

08003904 <HAL_RCC_OscConfig>:
{
 8003904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(RCC_OscInitStruct == NULL)
 8003906:	4604      	mov	r4, r0
 8003908:	b908      	cbnz	r0, 800390e <HAL_RCC_OscConfig+0xa>
        return HAL_ERROR;
 800390a:	2001      	movs	r0, #1
 800390c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800390e:	6803      	ldr	r3, [r0, #0]
 8003910:	069d      	lsls	r5, r3, #26
 8003912:	d529      	bpl.n	8003968 <HAL_RCC_OscConfig+0x64>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003914:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003918:	6893      	ldr	r3, [r2, #8]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800391a:	68d2      	ldr	r2, [r2, #12]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800391c:	f013 030c 	ands.w	r3, r3, #12
 8003920:	d005      	beq.n	800392e <HAL_RCC_OscConfig+0x2a>
 8003922:	2b0c      	cmp	r3, #12
 8003924:	d145      	bne.n	80039b2 <HAL_RCC_OscConfig+0xae>
 8003926:	f002 0303 	and.w	r3, r2, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800392a:	2b01      	cmp	r3, #1
 800392c:	d141      	bne.n	80039b2 <HAL_RCC_OscConfig+0xae>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800392e:	f7ff ff52 	bl	80037d6 <LL_RCC_MSI_IsReady>
 8003932:	b110      	cbz	r0, 800393a <HAL_RCC_OscConfig+0x36>
 8003934:	69e3      	ldr	r3, [r4, #28]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d0e7      	beq.n	800390a <HAL_RCC_OscConfig+0x6>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800393a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800393c:	f7ff ff59 	bl	80037f2 <LL_RCC_MSI_GetRange>
 8003940:	4282      	cmp	r2, r0
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003942:	6a60      	ldr	r0, [r4, #36]	; 0x24
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003944:	d92a      	bls.n	800399c <HAL_RCC_OscConfig+0x98>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003946:	f7ff ff6d 	bl	8003824 <RCC_SetFlashLatencyFromMSIRange>
 800394a:	2800      	cmp	r0, #0
 800394c:	d1dd      	bne.n	800390a <HAL_RCC_OscConfig+0x6>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800394e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003950:	f7ff ff47 	bl	80037e2 <LL_RCC_MSI_SetRange>
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003954:	6a20      	ldr	r0, [r4, #32]
 8003956:	f7ff ff55 	bl	8003804 <LL_RCC_MSI_SetCalibTrimming>
        SystemCoreClockUpdate();  
 800395a:	f7fe f923 	bl	8001ba4 <SystemCoreClockUpdate>
        if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800395e:	2000      	movs	r0, #0
 8003960:	f7fd fb3c 	bl	8000fdc <HAL_InitTick>
 8003964:	2800      	cmp	r0, #0
 8003966:	d1d0      	bne.n	800390a <HAL_RCC_OscConfig+0x6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003968:	6823      	ldr	r3, [r4, #0]
 800396a:	07d8      	lsls	r0, r3, #31
 800396c:	d44e      	bmi.n	8003a0c <HAL_RCC_OscConfig+0x108>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800396e:	6823      	ldr	r3, [r4, #0]
 8003970:	0799      	lsls	r1, r3, #30
 8003972:	f100 8098 	bmi.w	8003aa6 <HAL_RCC_OscConfig+0x1a2>
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003976:	6823      	ldr	r3, [r4, #0]
 8003978:	f013 0f18 	tst.w	r3, #24
 800397c:	f040 80d9 	bne.w	8003b32 <HAL_RCC_OscConfig+0x22e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003980:	6823      	ldr	r3, [r4, #0]
 8003982:	075a      	lsls	r2, r3, #29
 8003984:	f100 8165 	bmi.w	8003c52 <HAL_RCC_OscConfig+0x34e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003988:	6823      	ldr	r3, [r4, #0]
 800398a:	065a      	lsls	r2, r3, #25
 800398c:	f100 81b7 	bmi.w	8003cfe <HAL_RCC_OscConfig+0x3fa>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003990:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003992:	2900      	cmp	r1, #0
 8003994:	f040 81df 	bne.w	8003d56 <HAL_RCC_OscConfig+0x452>
  return HAL_OK;
 8003998:	2000      	movs	r0, #0
 800399a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800399c:	f7ff ff21 	bl	80037e2 <LL_RCC_MSI_SetRange>
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039a0:	6a20      	ldr	r0, [r4, #32]
 80039a2:	f7ff ff2f 	bl	8003804 <LL_RCC_MSI_SetCalibTrimming>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80039a6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80039a8:	f7ff ff3c 	bl	8003824 <RCC_SetFlashLatencyFromMSIRange>
 80039ac:	2800      	cmp	r0, #0
 80039ae:	d0d4      	beq.n	800395a <HAL_RCC_OscConfig+0x56>
 80039b0:	e7ab      	b.n	800390a <HAL_RCC_OscConfig+0x6>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80039b2:	69e2      	ldr	r2, [r4, #28]
 80039b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039b8:	b1ba      	cbz	r2, 80039ea <HAL_RCC_OscConfig+0xe6>
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	f042 0201 	orr.w	r2, r2, #1
 80039c0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80039c2:	f7ff fc1b 	bl	80031fc <HAL_GetTick>
 80039c6:	4605      	mov	r5, r0
        while (LL_RCC_MSI_IsReady() == 0U)
 80039c8:	f7ff ff05 	bl	80037d6 <LL_RCC_MSI_IsReady>
 80039cc:	b130      	cbz	r0, 80039dc <HAL_RCC_OscConfig+0xd8>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039ce:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80039d0:	f7ff ff07 	bl	80037e2 <LL_RCC_MSI_SetRange>
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039d4:	6a20      	ldr	r0, [r4, #32]
 80039d6:	f7ff ff15 	bl	8003804 <LL_RCC_MSI_SetCalibTrimming>
 80039da:	e7c5      	b.n	8003968 <HAL_RCC_OscConfig+0x64>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80039dc:	f7ff fc0e 	bl	80031fc <HAL_GetTick>
 80039e0:	1b40      	subs	r0, r0, r5
 80039e2:	2802      	cmp	r0, #2
 80039e4:	d9f0      	bls.n	80039c8 <HAL_RCC_OscConfig+0xc4>
            return HAL_TIMEOUT;
 80039e6:	2003      	movs	r0, #3
 80039e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	f022 0201 	bic.w	r2, r2, #1
 80039f0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80039f2:	f7ff fc03 	bl	80031fc <HAL_GetTick>
 80039f6:	4605      	mov	r5, r0
        while (LL_RCC_MSI_IsReady() != 0U)
 80039f8:	f7ff feed 	bl	80037d6 <LL_RCC_MSI_IsReady>
 80039fc:	2800      	cmp	r0, #0
 80039fe:	d0b3      	beq.n	8003968 <HAL_RCC_OscConfig+0x64>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a00:	f7ff fbfc 	bl	80031fc <HAL_GetTick>
 8003a04:	1b40      	subs	r0, r0, r5
 8003a06:	2802      	cmp	r0, #2
 8003a08:	d9f6      	bls.n	80039f8 <HAL_RCC_OscConfig+0xf4>
 8003a0a:	e7ec      	b.n	80039e6 <HAL_RCC_OscConfig+0xe2>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003a0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a10:	6893      	ldr	r3, [r2, #8]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003a12:	68d2      	ldr	r2, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003a14:	f003 030c 	and.w	r3, r3, #12
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003a18:	2b08      	cmp	r3, #8
 8003a1a:	d005      	beq.n	8003a28 <HAL_RCC_OscConfig+0x124>
 8003a1c:	2b0c      	cmp	r3, #12
 8003a1e:	d10b      	bne.n	8003a38 <HAL_RCC_OscConfig+0x134>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003a20:	f002 0303 	and.w	r3, r2, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8003a24:	2b03      	cmp	r3, #3
 8003a26:	d107      	bne.n	8003a38 <HAL_RCC_OscConfig+0x134>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a28:	f7ff fec2 	bl	80037b0 <LL_RCC_HSE_IsReady>
 8003a2c:	2800      	cmp	r0, #0
 8003a2e:	d09e      	beq.n	800396e <HAL_RCC_OscConfig+0x6a>
 8003a30:	6863      	ldr	r3, [r4, #4]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d19b      	bne.n	800396e <HAL_RCC_OscConfig+0x6a>
 8003a36:	e768      	b.n	800390a <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a38:	6862      	ldr	r2, [r4, #4]
 8003a3a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8003a3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a42:	d110      	bne.n	8003a66 <HAL_RCC_OscConfig+0x162>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003a4a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003a4c:	f7ff fbd6 	bl	80031fc <HAL_GetTick>
 8003a50:	4605      	mov	r5, r0
        while (LL_RCC_HSE_IsReady() == 0U)
 8003a52:	f7ff fead 	bl	80037b0 <LL_RCC_HSE_IsReady>
 8003a56:	2800      	cmp	r0, #0
 8003a58:	d189      	bne.n	800396e <HAL_RCC_OscConfig+0x6a>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a5a:	f7ff fbcf 	bl	80031fc <HAL_GetTick>
 8003a5e:	1b40      	subs	r0, r0, r5
 8003a60:	2864      	cmp	r0, #100	; 0x64
 8003a62:	d9f6      	bls.n	8003a52 <HAL_RCC_OscConfig+0x14e>
 8003a64:	e7bf      	b.n	80039e6 <HAL_RCC_OscConfig+0xe2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a66:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8003a6a:	d104      	bne.n	8003a76 <HAL_RCC_OscConfig+0x172>
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003a72:	601a      	str	r2, [r3, #0]
 8003a74:	e7e6      	b.n	8003a44 <HAL_RCC_OscConfig+0x140>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003a76:	6819      	ldr	r1, [r3, #0]
 8003a78:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8003a7c:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8003a7e:	6819      	ldr	r1, [r3, #0]
 8003a80:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8003a84:	6019      	str	r1, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a86:	2a00      	cmp	r2, #0
 8003a88:	d1e0      	bne.n	8003a4c <HAL_RCC_OscConfig+0x148>
        tickstart = HAL_GetTick();
 8003a8a:	f7ff fbb7 	bl	80031fc <HAL_GetTick>
 8003a8e:	4605      	mov	r5, r0
        while (LL_RCC_HSE_IsReady() != 0U)
 8003a90:	f7ff fe8e 	bl	80037b0 <LL_RCC_HSE_IsReady>
 8003a94:	2800      	cmp	r0, #0
 8003a96:	f43f af6a 	beq.w	800396e <HAL_RCC_OscConfig+0x6a>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a9a:	f7ff fbaf 	bl	80031fc <HAL_GetTick>
 8003a9e:	1b40      	subs	r0, r0, r5
 8003aa0:	2864      	cmp	r0, #100	; 0x64
 8003aa2:	d9f5      	bls.n	8003a90 <HAL_RCC_OscConfig+0x18c>
 8003aa4:	e79f      	b.n	80039e6 <HAL_RCC_OscConfig+0xe2>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003aa6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003aaa:	6893      	ldr	r3, [r2, #8]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003aac:	68d2      	ldr	r2, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003aae:	f003 030c 	and.w	r3, r3, #12
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003ab2:	2b04      	cmp	r3, #4
 8003ab4:	d005      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x1be>
 8003ab6:	2b0c      	cmp	r3, #12
 8003ab8:	d114      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x1e0>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003aba:	f002 0303 	and.w	r3, r2, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d110      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x1e0>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ac2:	f7ff fe7b 	bl	80037bc <LL_RCC_HSI_IsReady>
 8003ac6:	b118      	cbz	r0, 8003ad0 <HAL_RCC_OscConfig+0x1cc>
 8003ac8:	68e3      	ldr	r3, [r4, #12]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	f43f af1d 	beq.w	800390a <HAL_RCC_OscConfig+0x6>
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003ad0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ad4:	6921      	ldr	r1, [r4, #16]
 8003ad6:	6853      	ldr	r3, [r2, #4]
 8003ad8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003adc:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003ae0:	6053      	str	r3, [r2, #4]
 8003ae2:	e748      	b.n	8003976 <HAL_RCC_OscConfig+0x72>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ae4:	68e2      	ldr	r2, [r4, #12]
 8003ae6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003aea:	b182      	cbz	r2, 8003b0e <HAL_RCC_OscConfig+0x20a>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003af2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003af4:	f7ff fb82 	bl	80031fc <HAL_GetTick>
 8003af8:	4605      	mov	r5, r0
        while (LL_RCC_HSI_IsReady() == 0U)
 8003afa:	f7ff fe5f 	bl	80037bc <LL_RCC_HSI_IsReady>
 8003afe:	2800      	cmp	r0, #0
 8003b00:	d1e6      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x1cc>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b02:	f7ff fb7b 	bl	80031fc <HAL_GetTick>
 8003b06:	1b40      	subs	r0, r0, r5
 8003b08:	2802      	cmp	r0, #2
 8003b0a:	d9f6      	bls.n	8003afa <HAL_RCC_OscConfig+0x1f6>
 8003b0c:	e76b      	b.n	80039e6 <HAL_RCC_OscConfig+0xe2>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b14:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003b16:	f7ff fb71 	bl	80031fc <HAL_GetTick>
 8003b1a:	4605      	mov	r5, r0
        while (LL_RCC_HSI_IsReady() != 0U)
 8003b1c:	f7ff fe4e 	bl	80037bc <LL_RCC_HSI_IsReady>
 8003b20:	2800      	cmp	r0, #0
 8003b22:	f43f af28 	beq.w	8003976 <HAL_RCC_OscConfig+0x72>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b26:	f7ff fb69 	bl	80031fc <HAL_GetTick>
 8003b2a:	1b40      	subs	r0, r0, r5
 8003b2c:	2802      	cmp	r0, #2
 8003b2e:	d9f5      	bls.n	8003b1c <HAL_RCC_OscConfig+0x218>
 8003b30:	e759      	b.n	80039e6 <HAL_RCC_OscConfig+0xe2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b32:	6962      	ldr	r2, [r4, #20]
 8003b34:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8003b38:	2a00      	cmp	r2, #0
 8003b3a:	d06b      	beq.n	8003c14 <HAL_RCC_OscConfig+0x310>
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8003b3c:	06db      	lsls	r3, r3, #27
 8003b3e:	d543      	bpl.n	8003bc8 <HAL_RCC_OscConfig+0x2c4>
        if (LL_RCC_LSI1_IsReady() == 0U)
 8003b40:	f7ff fe42 	bl	80037c8 <LL_RCC_LSI1_IsReady>
 8003b44:	b310      	cbz	r0, 8003b8c <HAL_RCC_OscConfig+0x288>
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003b46:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8003b4a:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8003b4e:	f043 0304 	orr.w	r3, r3, #4
 8003b52:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
        tickstart = HAL_GetTick();
 8003b56:	f7ff fb51 	bl	80031fc <HAL_GetTick>
 8003b5a:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8003b5c:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8003b60:	071f      	lsls	r7, r3, #28
 8003b62:	f140 8178 	bpl.w	8003e56 <HAL_RCC_OscConfig+0x552>
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8003b66:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8003b6a:	69a2      	ldr	r2, [r4, #24]
 8003b6c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003b70:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003b74:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003b78:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8003b7c:	f023 0301 	bic.w	r3, r3, #1
 8003b80:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
        tickstart = HAL_GetTick();
 8003b84:	f7ff fb3a 	bl	80031fc <HAL_GetTick>
 8003b88:	4605      	mov	r5, r0
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003b8a:	e018      	b.n	8003bbe <HAL_RCC_OscConfig+0x2ba>
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003b8c:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8003b90:	f043 0301 	orr.w	r3, r3, #1
 8003b94:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
          tickstart = HAL_GetTick();
 8003b98:	f7ff fb30 	bl	80031fc <HAL_GetTick>
 8003b9c:	4605      	mov	r5, r0
          while(LL_RCC_LSI1_IsReady() == 0U)
 8003b9e:	f7ff fe13 	bl	80037c8 <LL_RCC_LSI1_IsReady>
 8003ba2:	2800      	cmp	r0, #0
 8003ba4:	d1cf      	bne.n	8003b46 <HAL_RCC_OscConfig+0x242>
            if((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003ba6:	f7ff fb29 	bl	80031fc <HAL_GetTick>
 8003baa:	1b40      	subs	r0, r0, r5
 8003bac:	2802      	cmp	r0, #2
 8003bae:	d9f6      	bls.n	8003b9e <HAL_RCC_OscConfig+0x29a>
 8003bb0:	e719      	b.n	80039e6 <HAL_RCC_OscConfig+0xe2>
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003bb2:	f7ff fb23 	bl	80031fc <HAL_GetTick>
 8003bb6:	1b40      	subs	r0, r0, r5
 8003bb8:	2802      	cmp	r0, #2
 8003bba:	f63f af14 	bhi.w	80039e6 <HAL_RCC_OscConfig+0xe2>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003bbe:	f7ff fe03 	bl	80037c8 <LL_RCC_LSI1_IsReady>
 8003bc2:	2800      	cmp	r0, #0
 8003bc4:	d1f5      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x2ae>
 8003bc6:	e6db      	b.n	8003980 <HAL_RCC_OscConfig+0x7c>
 8003bc8:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8003bcc:	f043 0301 	orr.w	r3, r3, #1
 8003bd0:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
        tickstart = HAL_GetTick();
 8003bd4:	f7ff fb12 	bl	80031fc <HAL_GetTick>
 8003bd8:	4606      	mov	r6, r0
        while (LL_RCC_LSI1_IsReady() == 0U)
 8003bda:	f7ff fdf5 	bl	80037c8 <LL_RCC_LSI1_IsReady>
 8003bde:	b198      	cbz	r0, 8003c08 <HAL_RCC_OscConfig+0x304>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003be0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8003be4:	461d      	mov	r5, r3
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003be6:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8003bea:	f022 0204 	bic.w	r2, r2, #4
 8003bee:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8003bf2:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8003bf6:	0718      	lsls	r0, r3, #28
 8003bf8:	f57f aec2 	bpl.w	8003980 <HAL_RCC_OscConfig+0x7c>
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003bfc:	f7ff fafe 	bl	80031fc <HAL_GetTick>
 8003c00:	1b80      	subs	r0, r0, r6
 8003c02:	2803      	cmp	r0, #3
 8003c04:	d9f5      	bls.n	8003bf2 <HAL_RCC_OscConfig+0x2ee>
 8003c06:	e6ee      	b.n	80039e6 <HAL_RCC_OscConfig+0xe2>
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003c08:	f7ff faf8 	bl	80031fc <HAL_GetTick>
 8003c0c:	1b80      	subs	r0, r0, r6
 8003c0e:	2802      	cmp	r0, #2
 8003c10:	d9e3      	bls.n	8003bda <HAL_RCC_OscConfig+0x2d6>
 8003c12:	e6e8      	b.n	80039e6 <HAL_RCC_OscConfig+0xe2>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003c14:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8003c18:	f023 0304 	bic.w	r3, r3, #4
 8003c1c:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 8003c20:	f7ff faec 	bl	80031fc <HAL_GetTick>
 8003c24:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8003c26:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8003c2a:	0719      	lsls	r1, r3, #28
 8003c2c:	f140 811a 	bpl.w	8003e64 <HAL_RCC_OscConfig+0x560>
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003c30:	f7ff fae4 	bl	80031fc <HAL_GetTick>
 8003c34:	1b80      	subs	r0, r0, r6
 8003c36:	2803      	cmp	r0, #3
 8003c38:	d9f5      	bls.n	8003c26 <HAL_RCC_OscConfig+0x322>
 8003c3a:	e6d4      	b.n	80039e6 <HAL_RCC_OscConfig+0xe2>
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003c3c:	f7ff fade 	bl	80031fc <HAL_GetTick>
 8003c40:	1b40      	subs	r0, r0, r5
 8003c42:	2802      	cmp	r0, #2
 8003c44:	f63f aecf 	bhi.w	80039e6 <HAL_RCC_OscConfig+0xe2>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003c48:	f7ff fdbe 	bl	80037c8 <LL_RCC_LSI1_IsReady>
 8003c4c:	2800      	cmp	r0, #0
 8003c4e:	d1f5      	bne.n	8003c3c <HAL_RCC_OscConfig+0x338>
 8003c50:	e696      	b.n	8003980 <HAL_RCC_OscConfig+0x7c>
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c52:	4d89      	ldr	r5, [pc, #548]	; (8003e78 <HAL_RCC_OscConfig+0x574>)
 8003c54:	682b      	ldr	r3, [r5, #0]
 8003c56:	05db      	lsls	r3, r3, #23
 8003c58:	d51c      	bpl.n	8003c94 <HAL_RCC_OscConfig+0x390>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c5a:	68a3      	ldr	r3, [r4, #8]
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8003c62:	d125      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x3ac>
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003c64:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8003c68:	f043 0301 	orr.w	r3, r3, #1
 8003c6c:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
      tickstart = HAL_GetTick();
 8003c70:	f7ff fac4 	bl	80031fc <HAL_GetTick>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003c74:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 8003c78:	4606      	mov	r6, r0
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c7a:	f241 3588 	movw	r5, #5000	; 0x1388
 8003c7e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003c82:	0798      	lsls	r0, r3, #30
 8003c84:	f53f ae80 	bmi.w	8003988 <HAL_RCC_OscConfig+0x84>
 8003c88:	f7ff fab8 	bl	80031fc <HAL_GetTick>
 8003c8c:	1b80      	subs	r0, r0, r6
 8003c8e:	42a8      	cmp	r0, r5
 8003c90:	d9f5      	bls.n	8003c7e <HAL_RCC_OscConfig+0x37a>
 8003c92:	e6a8      	b.n	80039e6 <HAL_RCC_OscConfig+0xe2>
      HAL_PWR_EnableBkUpAccess();
 8003c94:	f7ff fd7c 	bl	8003790 <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 8003c98:	f7ff fab0 	bl	80031fc <HAL_GetTick>
 8003c9c:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c9e:	682b      	ldr	r3, [r5, #0]
 8003ca0:	05df      	lsls	r7, r3, #23
 8003ca2:	d4da      	bmi.n	8003c5a <HAL_RCC_OscConfig+0x356>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ca4:	f7ff faaa 	bl	80031fc <HAL_GetTick>
 8003ca8:	1b80      	subs	r0, r0, r6
 8003caa:	2802      	cmp	r0, #2
 8003cac:	d9f7      	bls.n	8003c9e <HAL_RCC_OscConfig+0x39a>
 8003cae:	e69a      	b.n	80039e6 <HAL_RCC_OscConfig+0xe2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cb0:	2b05      	cmp	r3, #5
 8003cb2:	d106      	bne.n	8003cc2 <HAL_RCC_OscConfig+0x3be>
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003cb4:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8003cb8:	f043 0304 	orr.w	r3, r3, #4
 8003cbc:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
 8003cc0:	e7d0      	b.n	8003c64 <HAL_RCC_OscConfig+0x360>
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003cc2:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 8003cc6:	f022 0201 	bic.w	r2, r2, #1
 8003cca:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003cce:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 8003cd2:	f022 0204 	bic.w	r2, r2, #4
 8003cd6:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d1c8      	bne.n	8003c70 <HAL_RCC_OscConfig+0x36c>
      tickstart = HAL_GetTick();
 8003cde:	f7ff fa8d 	bl	80031fc <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ce2:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8003ce6:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003ce8:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8003cec:	0799      	lsls	r1, r3, #30
 8003cee:	f57f ae4b 	bpl.w	8003988 <HAL_RCC_OscConfig+0x84>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cf2:	f7ff fa83 	bl	80031fc <HAL_GetTick>
 8003cf6:	1bc0      	subs	r0, r0, r7
 8003cf8:	42b0      	cmp	r0, r6
 8003cfa:	d9f5      	bls.n	8003ce8 <HAL_RCC_OscConfig+0x3e4>
 8003cfc:	e673      	b.n	80039e6 <HAL_RCC_OscConfig+0xe2>
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003cfe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003d00:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8003d04:	b19b      	cbz	r3, 8003d2e <HAL_RCC_OscConfig+0x42a>
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003d06:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8003d0a:	f043 0301 	orr.w	r3, r3, #1
 8003d0e:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 8003d12:	f7ff fa73 	bl	80031fc <HAL_GetTick>
 8003d16:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8003d18:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8003d1c:	079a      	lsls	r2, r3, #30
 8003d1e:	f53f ae37 	bmi.w	8003990 <HAL_RCC_OscConfig+0x8c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d22:	f7ff fa6b 	bl	80031fc <HAL_GetTick>
 8003d26:	1b80      	subs	r0, r0, r6
 8003d28:	2802      	cmp	r0, #2
 8003d2a:	d9f5      	bls.n	8003d18 <HAL_RCC_OscConfig+0x414>
 8003d2c:	e65b      	b.n	80039e6 <HAL_RCC_OscConfig+0xe2>
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003d2e:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8003d32:	f023 0301 	bic.w	r3, r3, #1
 8003d36:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 8003d3a:	f7ff fa5f 	bl	80031fc <HAL_GetTick>
 8003d3e:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8003d40:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8003d44:	079b      	lsls	r3, r3, #30
 8003d46:	f57f ae23 	bpl.w	8003990 <HAL_RCC_OscConfig+0x8c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d4a:	f7ff fa57 	bl	80031fc <HAL_GetTick>
 8003d4e:	1b80      	subs	r0, r0, r6
 8003d50:	2802      	cmp	r0, #2
 8003d52:	d9f5      	bls.n	8003d40 <HAL_RCC_OscConfig+0x43c>
 8003d54:	e647      	b.n	80039e6 <HAL_RCC_OscConfig+0xe2>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003d56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d5a:	689a      	ldr	r2, [r3, #8]
 8003d5c:	f002 020c 	and.w	r2, r2, #12
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d60:	2a0c      	cmp	r2, #12
 8003d62:	d052      	beq.n	8003e0a <HAL_RCC_OscConfig+0x506>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003d64:	681a      	ldr	r2, [r3, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003d66:	2902      	cmp	r1, #2
 8003d68:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8003d6c:	601a      	str	r2, [r3, #0]
 8003d6e:	d134      	bne.n	8003dda <HAL_RCC_OscConfig+0x4d6>
        tickstart = HAL_GetTick();
 8003d70:	f7ff fa44 	bl	80031fc <HAL_GetTick>
 8003d74:	4605      	mov	r5, r0
        while (LL_RCC_PLL_IsReady() != 0U)
 8003d76:	f7ff fd4e 	bl	8003816 <LL_RCC_PLL_IsReady>
 8003d7a:	bb40      	cbnz	r0, 8003dce <HAL_RCC_OscConfig+0x4ca>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003d82:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003d84:	68d0      	ldr	r0, [r2, #12]
 8003d86:	430b      	orrs	r3, r1
 8003d88:	493c      	ldr	r1, [pc, #240]	; (8003e7c <HAL_RCC_OscConfig+0x578>)
 8003d8a:	4001      	ands	r1, r0
 8003d8c:	430b      	orrs	r3, r1
 8003d8e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8003d90:	430b      	orrs	r3, r1
 8003d92:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003d94:	430b      	orrs	r3, r1
 8003d96:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003d98:	430b      	orrs	r3, r1
 8003d9a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003d9c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003da0:	60d3      	str	r3, [r2, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003da2:	6813      	ldr	r3, [r2, #0]
 8003da4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003da8:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003daa:	68d3      	ldr	r3, [r2, #12]
 8003dac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003db0:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8003db2:	f7ff fa23 	bl	80031fc <HAL_GetTick>
 8003db6:	4604      	mov	r4, r0
        while (LL_RCC_PLL_IsReady() == 0U)
 8003db8:	f7ff fd2d 	bl	8003816 <LL_RCC_PLL_IsReady>
 8003dbc:	2800      	cmp	r0, #0
 8003dbe:	f47f adeb 	bne.w	8003998 <HAL_RCC_OscConfig+0x94>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dc2:	f7ff fa1b 	bl	80031fc <HAL_GetTick>
 8003dc6:	1b00      	subs	r0, r0, r4
 8003dc8:	2802      	cmp	r0, #2
 8003dca:	d9f5      	bls.n	8003db8 <HAL_RCC_OscConfig+0x4b4>
 8003dcc:	e60b      	b.n	80039e6 <HAL_RCC_OscConfig+0xe2>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dce:	f7ff fa15 	bl	80031fc <HAL_GetTick>
 8003dd2:	1b40      	subs	r0, r0, r5
 8003dd4:	2802      	cmp	r0, #2
 8003dd6:	d9ce      	bls.n	8003d76 <HAL_RCC_OscConfig+0x472>
 8003dd8:	e605      	b.n	80039e6 <HAL_RCC_OscConfig+0xe2>
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8003dda:	68da      	ldr	r2, [r3, #12]
 8003ddc:	f022 0203 	bic.w	r2, r2, #3
 8003de0:	60da      	str	r2, [r3, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8003de2:	68da      	ldr	r2, [r3, #12]
 8003de4:	f022 5288 	bic.w	r2, r2, #285212672	; 0x11000000
 8003de8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003dec:	60da      	str	r2, [r3, #12]
        tickstart = HAL_GetTick();
 8003dee:	f7ff fa05 	bl	80031fc <HAL_GetTick>
 8003df2:	4604      	mov	r4, r0
        while (LL_RCC_PLL_IsReady() != 0U)
 8003df4:	f7ff fd0f 	bl	8003816 <LL_RCC_PLL_IsReady>
 8003df8:	2800      	cmp	r0, #0
 8003dfa:	f43f adcd 	beq.w	8003998 <HAL_RCC_OscConfig+0x94>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dfe:	f7ff f9fd 	bl	80031fc <HAL_GetTick>
 8003e02:	1b00      	subs	r0, r0, r4
 8003e04:	2802      	cmp	r0, #2
 8003e06:	d9f5      	bls.n	8003df4 <HAL_RCC_OscConfig+0x4f0>
 8003e08:	e5ed      	b.n	80039e6 <HAL_RCC_OscConfig+0xe2>
      uint32_t pllcfgr = RCC->PLLCFGR;
 8003e0a:	68d8      	ldr	r0, [r3, #12]
      if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e0c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003e0e:	f000 0203 	and.w	r2, r0, #3
 8003e12:	429a      	cmp	r2, r3
 8003e14:	f47f ad79 	bne.w	800390a <HAL_RCC_OscConfig+0x6>
 8003e18:	6b62      	ldr	r2, [r4, #52]	; 0x34
         (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e1a:	f000 0370 	and.w	r3, r0, #112	; 0x70
      if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	f47f ad73 	bne.w	800390a <HAL_RCC_OscConfig+0x6>
         (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e24:	6ba2      	ldr	r2, [r4, #56]	; 0x38
         ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003e26:	f3c0 2306 	ubfx	r3, r0, #8, #7
         (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	f47f ad6d 	bne.w	800390a <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003e30:	6be2      	ldr	r2, [r4, #60]	; 0x3c
         (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003e32:	f400 1378 	and.w	r3, r0, #4063232	; 0x3e0000
         ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003e36:	4293      	cmp	r3, r2
 8003e38:	f47f ad67 	bne.w	800390a <HAL_RCC_OscConfig+0x6>
         (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003e3c:	6c22      	ldr	r2, [r4, #64]	; 0x40
         (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003e3e:	f000 6360 	and.w	r3, r0, #234881024	; 0xe000000
         (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003e42:	4293      	cmp	r3, r2
 8003e44:	f47f ad61 	bne.w	800390a <HAL_RCC_OscConfig+0x6>
         (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003e48:	6c63      	ldr	r3, [r4, #68]	; 0x44
         (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003e4a:	f000 4060 	and.w	r0, r0, #3758096384	; 0xe0000000
    return HAL_ERROR;
 8003e4e:	1ac0      	subs	r0, r0, r3
 8003e50:	bf18      	it	ne
 8003e52:	2001      	movne	r0, #1
 8003e54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003e56:	f7ff f9d1 	bl	80031fc <HAL_GetTick>
 8003e5a:	1b80      	subs	r0, r0, r6
 8003e5c:	2803      	cmp	r0, #3
 8003e5e:	f67f ae7d 	bls.w	8003b5c <HAL_RCC_OscConfig+0x258>
 8003e62:	e5c0      	b.n	80039e6 <HAL_RCC_OscConfig+0xe2>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003e64:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8003e68:	f023 0301 	bic.w	r3, r3, #1
 8003e6c:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 8003e70:	f7ff f9c4 	bl	80031fc <HAL_GetTick>
 8003e74:	4605      	mov	r5, r0
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003e76:	e6e7      	b.n	8003c48 <HAL_RCC_OscConfig+0x344>
 8003e78:	58000400 	.word	0x58000400
 8003e7c:	11c1808c 	.word	0x11c1808c

08003e80 <HAL_RCC_ClockConfig>:
{
 8003e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e84:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8003e86:	4604      	mov	r4, r0
 8003e88:	b910      	cbnz	r0, 8003e90 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8003e8a:	2001      	movs	r0, #1
 8003e8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e90:	4e79      	ldr	r6, [pc, #484]	; (8004078 <HAL_RCC_ClockConfig+0x1f8>)
 8003e92:	6833      	ldr	r3, [r6, #0]
 8003e94:	f003 0307 	and.w	r3, r3, #7
 8003e98:	428b      	cmp	r3, r1
 8003e9a:	d372      	bcc.n	8003f82 <HAL_RCC_ClockConfig+0x102>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e9c:	6823      	ldr	r3, [r4, #0]
 8003e9e:	0799      	lsls	r1, r3, #30
 8003ea0:	d50e      	bpl.n	8003ec0 <HAL_RCC_ClockConfig+0x40>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003ea2:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8003ea6:	68a2      	ldr	r2, [r4, #8]
 8003ea8:	68b3      	ldr	r3, [r6, #8]
 8003eaa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8003eb2:	f7ff f9a3 	bl	80031fc <HAL_GetTick>
 8003eb6:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8003eb8:	68b3      	ldr	r3, [r6, #8]
 8003eba:	03db      	lsls	r3, r3, #15
 8003ebc:	f140 80b8 	bpl.w	8004030 <HAL_RCC_ClockConfig+0x1b0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003ec0:	6823      	ldr	r3, [r4, #0]
 8003ec2:	069a      	lsls	r2, r3, #26
 8003ec4:	d511      	bpl.n	8003eea <HAL_RCC_ClockConfig+0x6a>
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8003ec6:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8003eca:	6962      	ldr	r2, [r4, #20]
 8003ecc:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 8003ed0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
    tickstart = HAL_GetTick();
 8003eda:	f7ff f98f 	bl	80031fc <HAL_GetTick>
 8003ede:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8003ee0:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 8003ee4:	0399      	lsls	r1, r3, #14
 8003ee6:	f140 80aa 	bpl.w	800403e <HAL_RCC_ClockConfig+0x1be>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8003eea:	6823      	ldr	r3, [r4, #0]
 8003eec:	0658      	lsls	r0, r3, #25
 8003eee:	d512      	bpl.n	8003f16 <HAL_RCC_ClockConfig+0x96>
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003ef0:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8003ef4:	69a2      	ldr	r2, [r4, #24]
 8003ef6:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 8003efa:	f023 030f 	bic.w	r3, r3, #15
 8003efe:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
 8003f02:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
    tickstart = HAL_GetTick();
 8003f06:	f7ff f979 	bl	80031fc <HAL_GetTick>
 8003f0a:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8003f0c:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 8003f10:	03db      	lsls	r3, r3, #15
 8003f12:	f140 809b 	bpl.w	800404c <HAL_RCC_ClockConfig+0x1cc>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f16:	6823      	ldr	r3, [r4, #0]
 8003f18:	075a      	lsls	r2, r3, #29
 8003f1a:	d50e      	bpl.n	8003f3a <HAL_RCC_ClockConfig+0xba>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003f1c:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8003f20:	68e2      	ldr	r2, [r4, #12]
 8003f22:	68b3      	ldr	r3, [r6, #8]
 8003f24:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8003f2c:	f7ff f966 	bl	80031fc <HAL_GetTick>
 8003f30:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8003f32:	68b3      	ldr	r3, [r6, #8]
 8003f34:	0399      	lsls	r1, r3, #14
 8003f36:	f140 8090 	bpl.w	800405a <HAL_RCC_ClockConfig+0x1da>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f3a:	6823      	ldr	r3, [r4, #0]
 8003f3c:	0718      	lsls	r0, r3, #28
 8003f3e:	d50f      	bpl.n	8003f60 <HAL_RCC_ClockConfig+0xe0>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003f40:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003f44:	6922      	ldr	r2, [r4, #16]
 8003f46:	68b3      	ldr	r3, [r6, #8]
 8003f48:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003f4c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003f50:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8003f52:	f7ff f953 	bl	80031fc <HAL_GetTick>
 8003f56:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8003f58:	68b3      	ldr	r3, [r6, #8]
 8003f5a:	035b      	lsls	r3, r3, #13
 8003f5c:	f140 8084 	bpl.w	8004068 <HAL_RCC_ClockConfig+0x1e8>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f60:	6823      	ldr	r3, [r4, #0]
 8003f62:	07da      	lsls	r2, r3, #31
 8003f64:	d423      	bmi.n	8003fae <HAL_RCC_ClockConfig+0x12e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f66:	4c44      	ldr	r4, [pc, #272]	; (8004078 <HAL_RCC_ClockConfig+0x1f8>)
 8003f68:	6823      	ldr	r3, [r4, #0]
 8003f6a:	f003 0307 	and.w	r3, r3, #7
 8003f6e:	429d      	cmp	r5, r3
 8003f70:	d34b      	bcc.n	800400a <HAL_RCC_ClockConfig+0x18a>
  SystemCoreClockUpdate();
 8003f72:	f7fd fe17 	bl	8001ba4 <SystemCoreClockUpdate>
  return HAL_InitTick (HAL_GetTickPrio());
 8003f76:	f7ff f947 	bl	8003208 <HAL_GetTickPrio>
}
 8003f7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return HAL_InitTick (HAL_GetTickPrio());
 8003f7e:	f7fd b82d 	b.w	8000fdc <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f82:	6833      	ldr	r3, [r6, #0]
 8003f84:	f023 0307 	bic.w	r3, r3, #7
 8003f88:	430b      	orrs	r3, r1
 8003f8a:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8003f8c:	f7ff f936 	bl	80031fc <HAL_GetTick>
 8003f90:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f92:	6833      	ldr	r3, [r6, #0]
 8003f94:	f003 0307 	and.w	r3, r3, #7
 8003f98:	429d      	cmp	r5, r3
 8003f9a:	f43f af7f 	beq.w	8003e9c <HAL_RCC_ClockConfig+0x1c>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003f9e:	f7ff f92d 	bl	80031fc <HAL_GetTick>
 8003fa2:	1bc0      	subs	r0, r0, r7
 8003fa4:	2802      	cmp	r0, #2
 8003fa6:	d9f4      	bls.n	8003f92 <HAL_RCC_ClockConfig+0x112>
        return HAL_TIMEOUT;
 8003fa8:	2003      	movs	r0, #3
 8003faa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fae:	6863      	ldr	r3, [r4, #4]
 8003fb0:	2b02      	cmp	r3, #2
 8003fb2:	d11e      	bne.n	8003ff2 <HAL_RCC_ClockConfig+0x172>
      if (LL_RCC_HSE_IsReady() == 0U)
 8003fb4:	f7ff fbfc 	bl	80037b0 <LL_RCC_HSE_IsReady>
      if (LL_RCC_HSI_IsReady() == 0U)
 8003fb8:	2800      	cmp	r0, #0
 8003fba:	f43f af66 	beq.w	8003e8a <HAL_RCC_ClockConfig+0xa>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003fbe:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8003fc2:	6862      	ldr	r2, [r4, #4]
 8003fc4:	68b3      	ldr	r3, [r6, #8]
 8003fc6:	f023 0303 	bic.w	r3, r3, #3
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8003fce:	f7ff f915 	bl	80031fc <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fd2:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8003fd6:	4607      	mov	r7, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003fd8:	68b3      	ldr	r3, [r6, #8]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fda:	6862      	ldr	r2, [r4, #4]
 8003fdc:	f003 030c 	and.w	r3, r3, #12
 8003fe0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003fe4:	d0bf      	beq.n	8003f66 <HAL_RCC_ClockConfig+0xe6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fe6:	f7ff f909 	bl	80031fc <HAL_GetTick>
 8003fea:	1bc0      	subs	r0, r0, r7
 8003fec:	4540      	cmp	r0, r8
 8003fee:	d9f3      	bls.n	8003fd8 <HAL_RCC_ClockConfig+0x158>
 8003ff0:	e7da      	b.n	8003fa8 <HAL_RCC_ClockConfig+0x128>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ff2:	2b03      	cmp	r3, #3
 8003ff4:	d102      	bne.n	8003ffc <HAL_RCC_ClockConfig+0x17c>
      if (LL_RCC_PLL_IsReady() == 0U)
 8003ff6:	f7ff fc0e 	bl	8003816 <LL_RCC_PLL_IsReady>
 8003ffa:	e7dd      	b.n	8003fb8 <HAL_RCC_ClockConfig+0x138>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003ffc:	b913      	cbnz	r3, 8004004 <HAL_RCC_ClockConfig+0x184>
      if (LL_RCC_MSI_IsReady() == 0U)
 8003ffe:	f7ff fbea 	bl	80037d6 <LL_RCC_MSI_IsReady>
 8004002:	e7d9      	b.n	8003fb8 <HAL_RCC_ClockConfig+0x138>
      if (LL_RCC_HSI_IsReady() == 0U)
 8004004:	f7ff fbda 	bl	80037bc <LL_RCC_HSI_IsReady>
 8004008:	e7d6      	b.n	8003fb8 <HAL_RCC_ClockConfig+0x138>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800400a:	6823      	ldr	r3, [r4, #0]
 800400c:	f023 0307 	bic.w	r3, r3, #7
 8004010:	432b      	orrs	r3, r5
 8004012:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8004014:	f7ff f8f2 	bl	80031fc <HAL_GetTick>
 8004018:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800401a:	6823      	ldr	r3, [r4, #0]
 800401c:	f003 0307 	and.w	r3, r3, #7
 8004020:	429d      	cmp	r5, r3
 8004022:	d0a6      	beq.n	8003f72 <HAL_RCC_ClockConfig+0xf2>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004024:	f7ff f8ea 	bl	80031fc <HAL_GetTick>
 8004028:	1b80      	subs	r0, r0, r6
 800402a:	2802      	cmp	r0, #2
 800402c:	d9f5      	bls.n	800401a <HAL_RCC_ClockConfig+0x19a>
 800402e:	e7bb      	b.n	8003fa8 <HAL_RCC_ClockConfig+0x128>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004030:	f7ff f8e4 	bl	80031fc <HAL_GetTick>
 8004034:	1bc0      	subs	r0, r0, r7
 8004036:	2802      	cmp	r0, #2
 8004038:	f67f af3e 	bls.w	8003eb8 <HAL_RCC_ClockConfig+0x38>
 800403c:	e7b4      	b.n	8003fa8 <HAL_RCC_ClockConfig+0x128>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800403e:	f7ff f8dd 	bl	80031fc <HAL_GetTick>
 8004042:	1bc0      	subs	r0, r0, r7
 8004044:	2802      	cmp	r0, #2
 8004046:	f67f af4b 	bls.w	8003ee0 <HAL_RCC_ClockConfig+0x60>
 800404a:	e7ad      	b.n	8003fa8 <HAL_RCC_ClockConfig+0x128>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800404c:	f7ff f8d6 	bl	80031fc <HAL_GetTick>
 8004050:	1bc0      	subs	r0, r0, r7
 8004052:	2802      	cmp	r0, #2
 8004054:	f67f af5a 	bls.w	8003f0c <HAL_RCC_ClockConfig+0x8c>
 8004058:	e7a6      	b.n	8003fa8 <HAL_RCC_ClockConfig+0x128>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800405a:	f7ff f8cf 	bl	80031fc <HAL_GetTick>
 800405e:	1bc0      	subs	r0, r0, r7
 8004060:	2802      	cmp	r0, #2
 8004062:	f67f af66 	bls.w	8003f32 <HAL_RCC_ClockConfig+0xb2>
 8004066:	e79f      	b.n	8003fa8 <HAL_RCC_ClockConfig+0x128>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004068:	f7ff f8c8 	bl	80031fc <HAL_GetTick>
 800406c:	1bc0      	subs	r0, r0, r7
 800406e:	2802      	cmp	r0, #2
 8004070:	f67f af72 	bls.w	8003f58 <HAL_RCC_ClockConfig+0xd8>
 8004074:	e798      	b.n	8003fa8 <HAL_RCC_ClockConfig+0x128>
 8004076:	bf00      	nop
 8004078:	58004000 	.word	0x58004000

0800407c <HAL_RCC_GetSysClockFreq>:
 800407c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
{
 8004080:	b508      	push	{r3, lr}
 8004082:	6893      	ldr	r3, [r2, #8]
  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004084:	f013 030c 	ands.w	r3, r3, #12
 8004088:	d107      	bne.n	800409a <HAL_RCC_GetSysClockFreq+0x1e>
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800408a:	f7ff fbb2 	bl	80037f2 <LL_RCC_MSI_GetRange>
 800408e:	4b1f      	ldr	r3, [pc, #124]	; (800410c <HAL_RCC_GetSysClockFreq+0x90>)
 8004090:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8004094:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8004098:	bd08      	pop	{r3, pc}
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800409a:	2b04      	cmp	r3, #4
 800409c:	d033      	beq.n	8004106 <HAL_RCC_GetSysClockFreq+0x8a>
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800409e:	2b08      	cmp	r3, #8
 80040a0:	d107      	bne.n	80040b2 <HAL_RCC_GetSysClockFreq+0x36>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80040a2:	6813      	ldr	r3, [r2, #0]
       sysclockfreq = HSE_VALUE;
 80040a4:	481a      	ldr	r0, [pc, #104]	; (8004110 <HAL_RCC_GetSysClockFreq+0x94>)
 80040a6:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80040aa:	4b1a      	ldr	r3, [pc, #104]	; (8004114 <HAL_RCC_GetSysClockFreq+0x98>)
 80040ac:	bf08      	it	eq
 80040ae:	4618      	moveq	r0, r3
 80040b0:	bd08      	pop	{r3, pc}
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80040b2:	68d3      	ldr	r3, [r2, #12]
 80040b4:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 80040b8:	2b02      	cmp	r3, #2
 80040ba:	d022      	beq.n	8004102 <HAL_RCC_GetSysClockFreq+0x86>
 80040bc:	2b03      	cmp	r3, #3
 80040be:	d118      	bne.n	80040f2 <HAL_RCC_GetSysClockFreq+0x76>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80040c0:	6813      	ldr	r3, [r2, #0]
        pllinputfreq = HSE_VALUE;
 80040c2:	4814      	ldr	r0, [pc, #80]	; (8004114 <HAL_RCC_GetSysClockFreq+0x98>)
 80040c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80040c8:	4b11      	ldr	r3, [pc, #68]	; (8004110 <HAL_RCC_GetSysClockFreq+0x94>)
 80040ca:	bf08      	it	eq
 80040cc:	4603      	moveq	r3, r0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80040ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040d2:	68d0      	ldr	r0, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80040d4:	68d1      	ldr	r1, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80040d6:	68d2      	ldr	r2, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80040d8:	f3c0 2006 	ubfx	r0, r0, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 80040dc:	4358      	muls	r0, r3
 80040de:	f3c1 1302 	ubfx	r3, r1, #4, #3
 80040e2:	3301      	adds	r3, #1
 80040e4:	fbb0 f0f3 	udiv	r0, r0, r3
 80040e8:	0f53      	lsrs	r3, r2, #29
 80040ea:	3301      	adds	r3, #1
 80040ec:	fbb0 f0f3 	udiv	r0, r0, r3
 80040f0:	bd08      	pop	{r3, pc}
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80040f2:	f7ff fb7e 	bl	80037f2 <LL_RCC_MSI_GetRange>
 80040f6:	4b05      	ldr	r3, [pc, #20]	; (800410c <HAL_RCC_GetSysClockFreq+0x90>)
 80040f8:	f3c0 1003 	ubfx	r0, r0, #4, #4
 80040fc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8004100:	e7e5      	b.n	80040ce <HAL_RCC_GetSysClockFreq+0x52>
        pllinputfreq = HSI_VALUE;
 8004102:	4b03      	ldr	r3, [pc, #12]	; (8004110 <HAL_RCC_GetSysClockFreq+0x94>)
 8004104:	e7e3      	b.n	80040ce <HAL_RCC_GetSysClockFreq+0x52>
    sysclockfreq = HSI_VALUE;
 8004106:	4802      	ldr	r0, [pc, #8]	; (8004110 <HAL_RCC_GetSysClockFreq+0x94>)
}
 8004108:	bd08      	pop	{r3, pc}
 800410a:	bf00      	nop
 800410c:	08006518 	.word	0x08006518
 8004110:	00f42400 	.word	0x00f42400
 8004114:	01e84800 	.word	0x01e84800

08004118 <HAL_RCC_GetHCLKFreq>:
{
 8004118:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800411a:	f7ff ffaf 	bl	800407c <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800411e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004122:	4a04      	ldr	r2, [pc, #16]	; (8004134 <HAL_RCC_GetHCLKFreq+0x1c>)
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800412a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800412e:	fbb0 f0f3 	udiv	r0, r0, r3
 8004132:	bd08      	pop	{r3, pc}
 8004134:	08006558 	.word	0x08006558

08004138 <HAL_RCC_GetPCLK1Freq>:
{
 8004138:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800413a:	f7ff ffed 	bl	8004118 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800413e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004142:	4a05      	ldr	r2, [pc, #20]	; (8004158 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800414a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800414e:	f003 031f 	and.w	r3, r3, #31
}
 8004152:	40d8      	lsrs	r0, r3
 8004154:	bd08      	pop	{r3, pc}
 8004156:	bf00      	nop
 8004158:	080065f8 	.word	0x080065f8

0800415c <HAL_RCC_GetPCLK2Freq>:
{
 800415c:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800415e:	f7ff ffdb 	bl	8004118 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004162:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004166:	4a05      	ldr	r2, [pc, #20]	; (800417c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800416e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004172:	f003 031f 	and.w	r3, r3, #31
}
 8004176:	40d8      	lsrs	r0, r3
 8004178:	bd08      	pop	{r3, pc}
 800417a:	bf00      	nop
 800417c:	080065f8 	.word	0x080065f8

08004180 <LL_RCC_LSE_IsReady>:
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004180:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004184:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
}
 8004188:	f3c0 0040 	ubfx	r0, r0, #1, #1
 800418c:	4770      	bx	lr

0800418e <LL_RCC_SetI2CClockSource>:
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800418e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004192:	0902      	lsrs	r2, r0, #4
 8004194:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004198:	f402 227f 	and.w	r2, r2, #1044480	; 0xff000
 800419c:	0100      	lsls	r0, r0, #4
 800419e:	ea23 0302 	bic.w	r3, r3, r2
 80041a2:	f400 207f 	and.w	r0, r0, #1044480	; 0xff000
 80041a6:	4318      	orrs	r0, r3
 80041a8:	f8c1 0088 	str.w	r0, [r1, #136]	; 0x88
 80041ac:	4770      	bx	lr

080041ae <LL_RCC_PLLSAI1_Enable>:
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80041ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041b2:	6813      	ldr	r3, [r2, #0]
 80041b4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80041b8:	6013      	str	r3, [r2, #0]
 80041ba:	4770      	bx	lr

080041bc <LL_RCC_PLLSAI1_Disable>:
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80041bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041c0:	6813      	ldr	r3, [r2, #0]
 80041c2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80041c6:	6013      	str	r3, [r2, #0]
 80041c8:	4770      	bx	lr

080041ca <LL_RCC_PLLSAI1_IsReady>:
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80041ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041ce:	6818      	ldr	r0, [r3, #0]
}
 80041d0:	f3c0 60c0 	ubfx	r0, r0, #27, #1
 80041d4:	4770      	bx	lr

080041d6 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80041d8:	6805      	ldr	r5, [r0, #0]
 80041da:	f015 0540 	ands.w	r5, r5, #64	; 0x40
{
 80041de:	4604      	mov	r4, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80041e0:	d043      	beq.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x94>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80041e2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80041e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041e8:	d015      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80041ea:	d802      	bhi.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 80041ec:	b1d3      	cbz	r3, 8004224 <HAL_RCCEx_PeriphCLKConfig+0x4e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80041ee:	2501      	movs	r5, #1
 80041f0:	e03b      	b.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x94>
    switch (PeriphClkInit->Sai1ClockSelection)
 80041f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80041f6:	d002      	beq.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x28>
 80041f8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80041fc:	d1f7      	bne.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x18>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80041fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004202:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004204:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004208:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800420c:	430b      	orrs	r3, r1
 800420e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8004212:	2500      	movs	r5, #0
 8004214:	e029      	b.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x94>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8004216:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800421a:	68d3      	ldr	r3, [r2, #12]
 800421c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004220:	60d3      	str	r3, [r2, #12]
        break;
 8004222:	e7ec      	b.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x28>
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004224:	f7ff ffca 	bl	80041bc <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004228:	f7fe ffe8 	bl	80031fc <HAL_GetTick>
 800422c:	4605      	mov	r5, r0

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800422e:	f7ff ffcc 	bl	80041ca <LL_RCC_PLLSAI1_IsReady>
 8004232:	b9a0      	cbnz	r0, 800425e <HAL_RCCEx_PeriphCLKConfig+0x88>
  }

  if (status == HAL_OK)
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004234:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004238:	6861      	ldr	r1, [r4, #4]
 800423a:	6913      	ldr	r3, [r2, #16]
 800423c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004240:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004244:	6113      	str	r3, [r2, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8004246:	6913      	ldr	r3, [r2, #16]
 8004248:	68a1      	ldr	r1, [r4, #8]
 800424a:	f423 1378 	bic.w	r3, r3, #4063232	; 0x3e0000
 800424e:	430b      	orrs	r3, r1
 8004250:	6113      	str	r3, [r2, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004252:	f7ff ffac 	bl	80041ae <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004256:	f7fe ffd1 	bl	80031fc <HAL_GetTick>
 800425a:	4605      	mov	r5, r0
 800425c:	e0ba      	b.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800425e:	f7fe ffcd 	bl	80031fc <HAL_GetTick>
 8004262:	1b40      	subs	r0, r0, r5
 8004264:	2802      	cmp	r0, #2
 8004266:	d9e2      	bls.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x58>
      status = HAL_TIMEOUT;
 8004268:	2503      	movs	r5, #3
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800426a:	6823      	ldr	r3, [r4, #0]
 800426c:	051a      	lsls	r2, r3, #20
 800426e:	d515      	bpl.n	800429c <HAL_RCCEx_PeriphCLKConfig+0xc6>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004270:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
    if(rtcclocksource != PeriphClkInit->RTCClockSelection)
 8004274:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004276:	f8d6 7090 	ldr.w	r7, [r6, #144]	; 0x90
 800427a:	f407 7740 	and.w	r7, r7, #768	; 0x300
 800427e:	42bb      	cmp	r3, r7
 8004280:	d00c      	beq.n	800429c <HAL_RCCEx_PeriphCLKConfig+0xc6>
      HAL_PWR_EnableBkUpAccess();
 8004282:	f7ff fa85 	bl	8003790 <HAL_PWR_EnableBkUpAccess>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004286:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
      if(rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800428a:	2f00      	cmp	r7, #0
 800428c:	f040 80ad 	bne.w	80043ea <HAL_RCCEx_PeriphCLKConfig+0x214>
 8004290:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004292:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004296:	4313      	orrs	r3, r2
 8004298:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800429c:	6823      	ldr	r3, [r4, #0]
 800429e:	07df      	lsls	r7, r3, #31
 80042a0:	d509      	bpl.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80042a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042a6:	69a0      	ldr	r0, [r4, #24]
 80042a8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80042ac:	f022 0203 	bic.w	r2, r2, #3
 80042b0:	4302      	orrs	r2, r0
 80042b2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80042b6:	079e      	lsls	r6, r3, #30
 80042b8:	d509      	bpl.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0xf8>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80042ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042be:	69e0      	ldr	r0, [r4, #28]
 80042c0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80042c4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80042c8:	4302      	orrs	r2, r0
 80042ca:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80042ce:	06d8      	lsls	r0, r3, #27
 80042d0:	d50c      	bpl.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x116>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80042d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80042d4:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 80042d8:	0c31      	lsrs	r1, r6, #16
 80042da:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80042de:	0409      	lsls	r1, r1, #16
 80042e0:	ea22 0201 	bic.w	r2, r2, r1
 80042e4:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80042e8:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80042ec:	0699      	lsls	r1, r3, #26
 80042ee:	d50c      	bpl.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x134>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80042f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80042f2:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 80042f6:	0c31      	lsrs	r1, r6, #16
 80042f8:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80042fc:	0409      	lsls	r1, r1, #16
 80042fe:	ea22 0201 	bic.w	r2, r2, r1
 8004302:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8004306:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800430a:	075a      	lsls	r2, r3, #29
 800430c:	d502      	bpl.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800430e:	6a20      	ldr	r0, [r4, #32]
 8004310:	f7ff ff3d 	bl	800418e <LL_RCC_SetI2CClockSource>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004314:	6823      	ldr	r3, [r4, #0]
 8004316:	071b      	lsls	r3, r3, #28
 8004318:	d502      	bpl.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x14a>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800431a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800431c:	f7ff ff37 	bl	800418e <LL_RCC_SetI2CClockSource>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004320:	6823      	ldr	r3, [r4, #0]
 8004322:	05df      	lsls	r7, r3, #23
 8004324:	d510      	bpl.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x172>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8004326:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800432a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800432c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004330:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8004334:	430b      	orrs	r3, r1
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004336:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
 800433a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800433e:	d17d      	bne.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x266>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8004340:	68d3      	ldr	r3, [r2, #12]
 8004342:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004346:	60d3      	str	r3, [r2, #12]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004348:	6822      	ldr	r2, [r4, #0]
 800434a:	0596      	lsls	r6, r2, #22
 800434c:	d509      	bpl.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800434e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004352:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004354:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004358:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800435c:	4303      	orrs	r3, r0
 800435e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004362:	0550      	lsls	r0, r2, #21
 8004364:	d511      	bpl.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004366:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800436a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800436c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004370:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8004374:	430b      	orrs	r3, r1
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8004376:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 800437a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800437e:	f040 8094 	bne.w	80044aa <HAL_RCCEx_PeriphCLKConfig+0x2d4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004382:	68d3      	ldr	r3, [r2, #12]
 8004384:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004388:	60d3      	str	r3, [r2, #12]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800438a:	6822      	ldr	r2, [r4, #0]
 800438c:	04d1      	lsls	r1, r2, #19
 800438e:	d509      	bpl.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8004390:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004394:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8004396:	f8d1 3094 	ldr.w	r3, [r1, #148]	; 0x94
 800439a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800439e:	4303      	orrs	r3, r0
 80043a0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80043a4:	0493      	lsls	r3, r2, #18
 80043a6:	d50d      	bpl.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80043a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043ac:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80043ae:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80043b0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80043b4:	430b      	orrs	r3, r1
 80043b6:	6253      	str	r3, [r2, #36]	; 0x24
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80043b8:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80043ba:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80043bc:	f023 0303 	bic.w	r3, r3, #3
 80043c0:	430b      	orrs	r3, r1
 80043c2:	6253      	str	r3, [r2, #36]	; 0x24
}
 80043c4:	4628      	mov	r0, r5
 80043c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80043c8:	f7fe ff18 	bl	80031fc <HAL_GetTick>
 80043cc:	1b40      	subs	r0, r0, r5
 80043ce:	2802      	cmp	r0, #2
 80043d0:	f63f af4a 	bhi.w	8004268 <HAL_RCCEx_PeriphCLKConfig+0x92>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80043d4:	f7ff fef9 	bl	80041ca <LL_RCC_PLLSAI1_IsReady>
 80043d8:	2801      	cmp	r0, #1
 80043da:	d1f5      	bne.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
    }

    if (status == HAL_OK)
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80043dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043e0:	6961      	ldr	r1, [r4, #20]
 80043e2:	6913      	ldr	r3, [r2, #16]
 80043e4:	430b      	orrs	r3, r1
 80043e6:	6113      	str	r3, [r2, #16]
 80043e8:	e709      	b.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x28>
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80043ea:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 80043ee:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80043f2:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80043f6:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 80043fa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80043fe:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8004402:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004404:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004408:	4313      	orrs	r3, r2
        LL_RCC_WriteReg(BDCR, bdcr);
 800440a:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800440e:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8004412:	07db      	lsls	r3, r3, #31
 8004414:	f57f af42 	bpl.w	800429c <HAL_RCCEx_PeriphCLKConfig+0xc6>
          tickstart = HAL_GetTick();
 8004418:	f7fe fef0 	bl	80031fc <HAL_GetTick>
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800441c:	f241 3688 	movw	r6, #5000	; 0x1388
          tickstart = HAL_GetTick();
 8004420:	4607      	mov	r7, r0
          while (LL_RCC_LSE_IsReady() != 1U)
 8004422:	e004      	b.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x258>
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004424:	f7fe feea 	bl	80031fc <HAL_GetTick>
 8004428:	1bc0      	subs	r0, r0, r7
 800442a:	42b0      	cmp	r0, r6
 800442c:	d804      	bhi.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x262>
          while (LL_RCC_LSE_IsReady() != 1U)
 800442e:	f7ff fea7 	bl	8004180 <LL_RCC_LSE_IsReady>
 8004432:	2801      	cmp	r0, #1
 8004434:	d1f6      	bne.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8004436:	e731      	b.n	800429c <HAL_RCCEx_PeriphCLKConfig+0xc6>
              ret = HAL_TIMEOUT;
 8004438:	2503      	movs	r5, #3
 800443a:	e72f      	b.n	800429c <HAL_RCCEx_PeriphCLKConfig+0xc6>
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800443c:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8004440:	d182      	bne.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x172>
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004442:	f7ff febb 	bl	80041bc <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004446:	f7fe fed9 	bl	80031fc <HAL_GetTick>
 800444a:	4606      	mov	r6, r0

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800444c:	f7ff febd 	bl	80041ca <LL_RCC_PLLSAI1_IsReady>
 8004450:	b9a0      	cbnz	r0, 800447c <HAL_RCCEx_PeriphCLKConfig+0x2a6>
  }

  if (status == HAL_OK)
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004452:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004456:	6861      	ldr	r1, [r4, #4]
 8004458:	6913      	ldr	r3, [r2, #16]
 800445a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800445e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004462:	6113      	str	r3, [r2, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8004464:	6913      	ldr	r3, [r2, #16]
 8004466:	68e1      	ldr	r1, [r4, #12]
 8004468:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 800446c:	430b      	orrs	r3, r1
 800446e:	6113      	str	r3, [r2, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004470:	f7ff fe9d 	bl	80041ae <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004474:	f7fe fec2 	bl	80031fc <HAL_GetTick>
 8004478:	4606      	mov	r6, r0
 800447a:	e00b      	b.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800447c:	f7fe febe 	bl	80031fc <HAL_GetTick>
 8004480:	1b80      	subs	r0, r0, r6
 8004482:	2802      	cmp	r0, #2
 8004484:	d9e2      	bls.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x276>
              ret = HAL_TIMEOUT;
 8004486:	2503      	movs	r5, #3
 8004488:	e75e      	b.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x172>

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800448a:	f7fe feb7 	bl	80031fc <HAL_GetTick>
 800448e:	1b80      	subs	r0, r0, r6
 8004490:	2802      	cmp	r0, #2
 8004492:	d8f8      	bhi.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004494:	f7ff fe99 	bl	80041ca <LL_RCC_PLLSAI1_IsReady>
 8004498:	2801      	cmp	r0, #1
 800449a:	d1f6      	bne.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    }

    if (status == HAL_OK)
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800449c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044a0:	6961      	ldr	r1, [r4, #20]
 80044a2:	6913      	ldr	r3, [r2, #16]
 80044a4:	430b      	orrs	r3, r1
 80044a6:	6113      	str	r3, [r2, #16]
 80044a8:	e74e      	b.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x172>
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80044aa:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 80044ae:	f47f af6c 	bne.w	800438a <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80044b2:	f7ff fe83 	bl	80041bc <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80044b6:	f7fe fea1 	bl	80031fc <HAL_GetTick>
 80044ba:	4606      	mov	r6, r0

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80044bc:	f7ff fe85 	bl	80041ca <LL_RCC_PLLSAI1_IsReady>
 80044c0:	b9a0      	cbnz	r0, 80044ec <HAL_RCCEx_PeriphCLKConfig+0x316>
  }

  if (status == HAL_OK)
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80044c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044c6:	6861      	ldr	r1, [r4, #4]
 80044c8:	6913      	ldr	r3, [r2, #16]
 80044ca:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80044ce:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80044d2:	6113      	str	r3, [r2, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80044d4:	6913      	ldr	r3, [r2, #16]
 80044d6:	6921      	ldr	r1, [r4, #16]
 80044d8:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 80044dc:	430b      	orrs	r3, r1
 80044de:	6113      	str	r3, [r2, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80044e0:	f7ff fe65 	bl	80041ae <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044e4:	f7fe fe8a 	bl	80031fc <HAL_GetTick>
 80044e8:	4606      	mov	r6, r0
 80044ea:	e00b      	b.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x32e>
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80044ec:	f7fe fe86 	bl	80031fc <HAL_GetTick>
 80044f0:	1b80      	subs	r0, r0, r6
 80044f2:	2802      	cmp	r0, #2
 80044f4:	d9e2      	bls.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x2e6>
              ret = HAL_TIMEOUT;
 80044f6:	2503      	movs	r5, #3
 80044f8:	e747      	b.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80044fa:	f7fe fe7f 	bl	80031fc <HAL_GetTick>
 80044fe:	1b80      	subs	r0, r0, r6
 8004500:	2802      	cmp	r0, #2
 8004502:	d8f8      	bhi.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x320>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004504:	f7ff fe61 	bl	80041ca <LL_RCC_PLLSAI1_IsReady>
 8004508:	2801      	cmp	r0, #1
 800450a:	d1f6      	bne.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x324>
    }

    if (status == HAL_OK)
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800450c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004510:	6961      	ldr	r1, [r4, #20]
 8004512:	6913      	ldr	r3, [r2, #16]
 8004514:	430b      	orrs	r3, r1
 8004516:	6113      	str	r3, [r2, #16]
 8004518:	e737      	b.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x1b4>

0800451a <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800451a:	6802      	ldr	r2, [r0, #0]
{
 800451c:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800451e:	68d3      	ldr	r3, [r2, #12]
 8004520:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004524:	60d3      	str	r3, [r2, #12]
{
 8004526:	4604      	mov	r4, r0

  tickstart = HAL_GetTick();
 8004528:	f7fe fe68 	bl	80031fc <HAL_GetTick>
 800452c:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800452e:	6823      	ldr	r3, [r4, #0]
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	069b      	lsls	r3, r3, #26
 8004534:	d501      	bpl.n	800453a <HAL_RTC_WaitForSynchro+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8004536:	2000      	movs	r0, #0
 8004538:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800453a:	f7fe fe5f 	bl	80031fc <HAL_GetTick>
 800453e:	1b40      	subs	r0, r0, r5
 8004540:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004544:	d9f3      	bls.n	800452e <HAL_RTC_WaitForSynchro+0x14>
      return HAL_TIMEOUT;
 8004546:	2003      	movs	r0, #3
}
 8004548:	bd38      	pop	{r3, r4, r5, pc}

0800454a <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800454a:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800454c:	6803      	ldr	r3, [r0, #0]
 800454e:	68da      	ldr	r2, [r3, #12]
 8004550:	0652      	lsls	r2, r2, #25
{
 8004552:	4604      	mov	r4, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004554:	d501      	bpl.n	800455a <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8004556:	2000      	movs	r0, #0
 8004558:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800455a:	f04f 32ff 	mov.w	r2, #4294967295
 800455e:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8004560:	f7fe fe4c 	bl	80031fc <HAL_GetTick>
 8004564:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004566:	6823      	ldr	r3, [r4, #0]
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	065b      	lsls	r3, r3, #25
 800456c:	d4f3      	bmi.n	8004556 <RTC_EnterInitMode+0xc>
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800456e:	f7fe fe45 	bl	80031fc <HAL_GetTick>
 8004572:	1b40      	subs	r0, r0, r5
 8004574:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004578:	d9f5      	bls.n	8004566 <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 800457a:	2003      	movs	r0, #3
}
 800457c:	bd38      	pop	{r3, r4, r5, pc}

0800457e <HAL_RTC_Init>:
{
 800457e:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 8004580:	4604      	mov	r4, r0
 8004582:	b1d8      	cbz	r0, 80045bc <HAL_RTC_Init+0x3e>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8004584:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8004588:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800458c:	b91b      	cbnz	r3, 8004596 <HAL_RTC_Init+0x18>
    hrtc->Lock = HAL_UNLOCKED;
 800458e:	f880 2020 	strb.w	r2, [r0, #32]
    HAL_RTC_MspInit(hrtc);
 8004592:	f7fc fdf1 	bl	8001178 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004596:	2302      	movs	r3, #2
 8004598:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800459c:	6823      	ldr	r3, [r4, #0]
 800459e:	22ca      	movs	r2, #202	; 0xca
 80045a0:	625a      	str	r2, [r3, #36]	; 0x24
 80045a2:	2253      	movs	r2, #83	; 0x53
 80045a4:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80045a6:	4620      	mov	r0, r4
 80045a8:	f7ff ffcf 	bl	800454a <RTC_EnterInitMode>
 80045ac:	6823      	ldr	r3, [r4, #0]
 80045ae:	4605      	mov	r5, r0
 80045b0:	b130      	cbz	r0, 80045c0 <HAL_RTC_Init+0x42>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80045b2:	22ff      	movs	r2, #255	; 0xff
 80045b4:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80045b6:	2304      	movs	r3, #4
 80045b8:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
     return HAL_ERROR;
 80045bc:	2501      	movs	r5, #1
 80045be:	e038      	b.n	8004632 <HAL_RTC_Init+0xb4>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80045c0:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80045c2:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80045c4:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 80045c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045cc:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80045ce:	6862      	ldr	r2, [r4, #4]
 80045d0:	6899      	ldr	r1, [r3, #8]
 80045d2:	4302      	orrs	r2, r0
 80045d4:	69a0      	ldr	r0, [r4, #24]
 80045d6:	4302      	orrs	r2, r0
 80045d8:	430a      	orrs	r2, r1
 80045da:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80045dc:	68e2      	ldr	r2, [r4, #12]
 80045de:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80045e0:	691a      	ldr	r2, [r3, #16]
 80045e2:	68a1      	ldr	r1, [r4, #8]
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80045e4:	6960      	ldr	r0, [r4, #20]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80045e6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80045ea:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80045ec:	68da      	ldr	r2, [r3, #12]
 80045ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045f2:	60da      	str	r2, [r3, #12]
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80045f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80045f6:	f022 0203 	bic.w	r2, r2, #3
 80045fa:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80045fc:	69e2      	ldr	r2, [r4, #28]
 80045fe:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004600:	4302      	orrs	r2, r0
 8004602:	430a      	orrs	r2, r1
 8004604:	64da      	str	r2, [r3, #76]	; 0x4c
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	069b      	lsls	r3, r3, #26
 800460a:	d40c      	bmi.n	8004626 <HAL_RTC_Init+0xa8>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800460c:	4620      	mov	r0, r4
 800460e:	f7ff ff84 	bl	800451a <HAL_RTC_WaitForSynchro>
 8004612:	b140      	cbz	r0, 8004626 <HAL_RTC_Init+0xa8>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004614:	6823      	ldr	r3, [r4, #0]
 8004616:	22ff      	movs	r2, #255	; 0xff
 8004618:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 800461a:	2304      	movs	r3, #4
 800461c:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
        __HAL_UNLOCK(hrtc);
 8004620:	f884 5020 	strb.w	r5, [r4, #32]
 8004624:	e7ca      	b.n	80045bc <HAL_RTC_Init+0x3e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004626:	6823      	ldr	r3, [r4, #0]
 8004628:	22ff      	movs	r2, #255	; 0xff
 800462a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 800462c:	2301      	movs	r3, #1
 800462e:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 8004632:	4628      	mov	r0, r5
 8004634:	bd38      	pop	{r3, r4, r5, pc}

08004636 <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef* hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004636:	f890 3020 	ldrb.w	r3, [r0, #32]
 800463a:	2b01      	cmp	r3, #1
 800463c:	f04f 0302 	mov.w	r3, #2
 8004640:	d012      	beq.n	8004668 <HAL_RTCEx_EnableBypassShadow+0x32>

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004642:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004646:	6803      	ldr	r3, [r0, #0]
 8004648:	22ca      	movs	r2, #202	; 0xca
 800464a:	625a      	str	r2, [r3, #36]	; 0x24
 800464c:	2253      	movs	r2, #83	; 0x53
 800464e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8004650:	689a      	ldr	r2, [r3, #8]
 8004652:	f042 0220 	orr.w	r2, r2, #32
 8004656:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004658:	22ff      	movs	r2, #255	; 0xff
 800465a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800465c:	2301      	movs	r3, #1
 800465e:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004662:	2300      	movs	r3, #0
 8004664:	f880 3020 	strb.w	r3, [r0, #32]
  __HAL_LOCK(hrtc);
 8004668:	4618      	mov	r0, r3

  return HAL_OK;
}
 800466a:	4770      	bx	lr

0800466c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800466c:	6802      	ldr	r2, [r0, #0]
 800466e:	6813      	ldr	r3, [r2, #0]
 8004670:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004674:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004676:	6893      	ldr	r3, [r2, #8]
 8004678:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800467c:	f023 0301 	bic.w	r3, r3, #1
 8004680:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004682:	2320      	movs	r3, #32
 8004684:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004688:	2300      	movs	r3, #0
 800468a:	66c3      	str	r3, [r0, #108]	; 0x6c
 800468c:	4770      	bx	lr
	...

08004690 <HAL_UART_Transmit_DMA>:
{
 8004690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004692:	4604      	mov	r4, r0
 8004694:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8004696:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
 800469a:	2f20      	cmp	r7, #32
 800469c:	d135      	bne.n	800470a <HAL_UART_Transmit_DMA+0x7a>
    if ((pData == NULL) || (Size == 0U))
 800469e:	b339      	cbz	r1, 80046f0 <HAL_UART_Transmit_DMA+0x60>
 80046a0:	b332      	cbz	r2, 80046f0 <HAL_UART_Transmit_DMA+0x60>
    __HAL_LOCK(huart);
 80046a2:	f894 207c 	ldrb.w	r2, [r4, #124]	; 0x7c
 80046a6:	2a01      	cmp	r2, #1
 80046a8:	d02f      	beq.n	800470a <HAL_UART_Transmit_DMA+0x7a>
    if (huart->hdmatx != NULL)
 80046aa:	6f60      	ldr	r0, [r4, #116]	; 0x74
    huart->TxXferCount = Size;
 80046ac:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    __HAL_LOCK(huart);
 80046b0:	2501      	movs	r5, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046b2:	2600      	movs	r6, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046b4:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046b6:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
    __HAL_LOCK(huart);
 80046ba:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
    huart->pTxBuffPtr  = pData;
 80046be:	6521      	str	r1, [r4, #80]	; 0x50
    huart->TxXferSize  = Size;
 80046c0:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046c4:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
    if (huart->hdmatx != NULL)
 80046c8:	b1a0      	cbz	r0, 80046f4 <HAL_UART_Transmit_DMA+0x64>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80046ca:	4a11      	ldr	r2, [pc, #68]	; (8004710 <HAL_UART_Transmit_DMA+0x80>)
 80046cc:	62c2      	str	r2, [r0, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80046ce:	4a11      	ldr	r2, [pc, #68]	; (8004714 <HAL_UART_Transmit_DMA+0x84>)
 80046d0:	6302      	str	r2, [r0, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80046d2:	4a11      	ldr	r2, [pc, #68]	; (8004718 <HAL_UART_Transmit_DMA+0x88>)
 80046d4:	6342      	str	r2, [r0, #52]	; 0x34
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80046d6:	6822      	ldr	r2, [r4, #0]
      huart->hdmatx->XferAbortCallback = NULL;
 80046d8:	6386      	str	r6, [r0, #56]	; 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80046da:	3228      	adds	r2, #40	; 0x28
 80046dc:	f7fe fed0 	bl	8003480 <HAL_DMA_Start_IT>
 80046e0:	b140      	cbz	r0, 80046f4 <HAL_UART_Transmit_DMA+0x64>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80046e2:	2310      	movs	r3, #16
 80046e4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        __HAL_UNLOCK(huart);
 80046e8:	f884 607c 	strb.w	r6, [r4, #124]	; 0x7c
        huart->gState = HAL_UART_STATE_READY;
 80046ec:	f8c4 7080 	str.w	r7, [r4, #128]	; 0x80
      return HAL_ERROR;
 80046f0:	2001      	movs	r0, #1
 80046f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80046f4:	6823      	ldr	r3, [r4, #0]
 80046f6:	2240      	movs	r2, #64	; 0x40
 80046f8:	621a      	str	r2, [r3, #32]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80046fa:	689a      	ldr	r2, [r3, #8]
    __HAL_UNLOCK(huart);
 80046fc:	2000      	movs	r0, #0
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80046fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    __HAL_UNLOCK(huart);
 8004702:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004706:	609a      	str	r2, [r3, #8]
    return HAL_OK;
 8004708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 800470a:	2002      	movs	r0, #2
}
 800470c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800470e:	bf00      	nop
 8004710:	0800471d 	.word	0x0800471d
 8004714:	0800474d 	.word	0x0800474d
 8004718:	08004759 	.word	0x08004759

0800471c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800471c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800471e:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004720:	6a82      	ldr	r2, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f013 0320 	ands.w	r3, r3, #32
 8004728:	d10b      	bne.n	8004742 <UART_DMATransmitCplt+0x26>
  {
    huart->TxXferCount = 0U;
 800472a:	f8a2 3056 	strh.w	r3, [r2, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800472e:	6813      	ldr	r3, [r2, #0]
 8004730:	689a      	ldr	r2, [r3, #8]
 8004732:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004736:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800473e:	601a      	str	r2, [r3, #0]
 8004740:	bd08      	pop	{r3, pc}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 8004742:	4610      	mov	r0, r2
 8004744:	f7fc fad6 	bl	8000cf4 <HAL_UART_TxCpltCallback>
 8004748:	bd08      	pop	{r3, pc}

0800474a <HAL_UART_TxHalfCpltCallback>:
 800474a:	4770      	bx	lr

0800474c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800474c:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800474e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8004750:	f7ff fffb 	bl	800474a <HAL_UART_TxHalfCpltCallback>
 8004754:	bd08      	pop	{r3, pc}

08004756 <HAL_UART_ErrorCallback>:
 8004756:	4770      	bx	lr

08004758 <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004758:	6a81      	ldr	r1, [r0, #40]	; 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800475a:	680b      	ldr	r3, [r1, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800475c:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004760:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
{
 8004764:	b510      	push	{r4, lr}
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004766:	689c      	ldr	r4, [r3, #8]
 8004768:	0624      	lsls	r4, r4, #24
 800476a:	d50f      	bpl.n	800478c <UART_DMAError+0x34>
 800476c:	2a21      	cmp	r2, #33	; 0x21
 800476e:	d10d      	bne.n	800478c <UART_DMAError+0x34>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004770:	2200      	movs	r2, #0
 8004772:	f8a1 2056 	strh.w	r2, [r1, #86]	; 0x56
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800477c:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800477e:	689a      	ldr	r2, [r3, #8]
 8004780:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8004784:	609a      	str	r2, [r3, #8]
  huart->gState = HAL_UART_STATE_READY;
 8004786:	2220      	movs	r2, #32
 8004788:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	065b      	lsls	r3, r3, #25
 8004790:	d507      	bpl.n	80047a2 <UART_DMAError+0x4a>
 8004792:	2822      	cmp	r0, #34	; 0x22
 8004794:	d105      	bne.n	80047a2 <UART_DMAError+0x4a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004796:	2300      	movs	r3, #0
 8004798:	f8a1 305e 	strh.w	r3, [r1, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800479c:	4608      	mov	r0, r1
 800479e:	f7ff ff65 	bl	800466c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80047a2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80047a6:	f043 0310 	orr.w	r3, r3, #16
 80047aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80047ae:	4608      	mov	r0, r1
 80047b0:	f7ff ffd1 	bl	8004756 <HAL_UART_ErrorCallback>
 80047b4:	bd10      	pop	{r4, pc}
	...

080047b8 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80047b8:	6802      	ldr	r2, [r0, #0]
 80047ba:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80047bc:	6811      	ldr	r1, [r2, #0]
{
 80047be:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == 0U)
 80047c0:	071d      	lsls	r5, r3, #28
{
 80047c2:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80047c4:	6890      	ldr	r0, [r2, #8]
  if (errorflags == 0U)
 80047c6:	d10b      	bne.n	80047e0 <HAL_UART_IRQHandler+0x28>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80047c8:	069e      	lsls	r6, r3, #26
 80047ca:	d577      	bpl.n	80048bc <HAL_UART_IRQHandler+0x104>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80047cc:	068d      	lsls	r5, r1, #26
 80047ce:	d401      	bmi.n	80047d4 <HAL_UART_IRQHandler+0x1c>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80047d0:	00c6      	lsls	r6, r0, #3
 80047d2:	d573      	bpl.n	80048bc <HAL_UART_IRQHandler+0x104>
      if (huart->RxISR != NULL)
 80047d4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    if (huart->TxISR != NULL)
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	f000 80a7 	beq.w	800492a <HAL_UART_IRQHandler+0x172>
      huart->TxISR(huart);
 80047dc:	4620      	mov	r0, r4
 80047de:	e061      	b.n	80048a4 <HAL_UART_IRQHandler+0xec>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80047e0:	4e52      	ldr	r6, [pc, #328]	; (800492c <HAL_UART_IRQHandler+0x174>)
 80047e2:	4006      	ands	r6, r0
 80047e4:	d102      	bne.n	80047ec <HAL_UART_IRQHandler+0x34>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U))))
 80047e6:	f411 7f90 	tst.w	r1, #288	; 0x120
 80047ea:	d067      	beq.n	80048bc <HAL_UART_IRQHandler+0x104>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80047ec:	07dd      	lsls	r5, r3, #31
 80047ee:	d509      	bpl.n	8004804 <HAL_UART_IRQHandler+0x4c>
 80047f0:	05cd      	lsls	r5, r1, #23
 80047f2:	d507      	bpl.n	8004804 <HAL_UART_IRQHandler+0x4c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80047f4:	2501      	movs	r5, #1
 80047f6:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80047f8:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 80047fc:	f045 0501 	orr.w	r5, r5, #1
 8004800:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004804:	079d      	lsls	r5, r3, #30
 8004806:	d509      	bpl.n	800481c <HAL_UART_IRQHandler+0x64>
 8004808:	07c5      	lsls	r5, r0, #31
 800480a:	d507      	bpl.n	800481c <HAL_UART_IRQHandler+0x64>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800480c:	2502      	movs	r5, #2
 800480e:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004810:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 8004814:	f045 0504 	orr.w	r5, r5, #4
 8004818:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800481c:	075d      	lsls	r5, r3, #29
 800481e:	d509      	bpl.n	8004834 <HAL_UART_IRQHandler+0x7c>
 8004820:	07c5      	lsls	r5, r0, #31
 8004822:	d507      	bpl.n	8004834 <HAL_UART_IRQHandler+0x7c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004824:	2504      	movs	r5, #4
 8004826:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004828:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 800482c:	f045 0502 	orr.w	r5, r5, #2
 8004830:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004834:	071d      	lsls	r5, r3, #28
 8004836:	d509      	bpl.n	800484c <HAL_UART_IRQHandler+0x94>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004838:	068d      	lsls	r5, r1, #26
 800483a:	d400      	bmi.n	800483e <HAL_UART_IRQHandler+0x86>
 800483c:	b136      	cbz	r6, 800484c <HAL_UART_IRQHandler+0x94>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800483e:	2508      	movs	r5, #8
 8004840:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004842:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 8004846:	432a      	orrs	r2, r5
 8004848:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800484c:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 8004850:	2a00      	cmp	r2, #0
 8004852:	d06a      	beq.n	800492a <HAL_UART_IRQHandler+0x172>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004854:	069e      	lsls	r6, r3, #26
 8004856:	d507      	bpl.n	8004868 <HAL_UART_IRQHandler+0xb0>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004858:	068d      	lsls	r5, r1, #26
 800485a:	d401      	bmi.n	8004860 <HAL_UART_IRQHandler+0xa8>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800485c:	00c0      	lsls	r0, r0, #3
 800485e:	d503      	bpl.n	8004868 <HAL_UART_IRQHandler+0xb0>
        if (huart->RxISR != NULL)
 8004860:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8004862:	b10b      	cbz	r3, 8004868 <HAL_UART_IRQHandler+0xb0>
          huart->RxISR(huart);
 8004864:	4620      	mov	r0, r4
 8004866:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004868:	6822      	ldr	r2, [r4, #0]
      errorcode = huart->ErrorCode;
 800486a:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800486e:	6892      	ldr	r2, [r2, #8]
 8004870:	0651      	lsls	r1, r2, #25
        UART_EndRxTransfer(huart);
 8004872:	4620      	mov	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004874:	d402      	bmi.n	800487c <HAL_UART_IRQHandler+0xc4>
 8004876:	f015 0508 	ands.w	r5, r5, #8
 800487a:	d01a      	beq.n	80048b2 <HAL_UART_IRQHandler+0xfa>
        UART_EndRxTransfer(huart);
 800487c:	f7ff fef6 	bl	800466c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004880:	6823      	ldr	r3, [r4, #0]
 8004882:	689a      	ldr	r2, [r3, #8]
 8004884:	0652      	lsls	r2, r2, #25
 8004886:	d510      	bpl.n	80048aa <HAL_UART_IRQHandler+0xf2>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004888:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 800488a:	6fa0      	ldr	r0, [r4, #120]	; 0x78
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800488c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004890:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8004892:	b150      	cbz	r0, 80048aa <HAL_UART_IRQHandler+0xf2>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004894:	4b26      	ldr	r3, [pc, #152]	; (8004930 <HAL_UART_IRQHandler+0x178>)
 8004896:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004898:	f7fe fe34 	bl	8003504 <HAL_DMA_Abort_IT>
 800489c:	2800      	cmp	r0, #0
 800489e:	d044      	beq.n	800492a <HAL_UART_IRQHandler+0x172>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80048a0:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 80048a2:	6b83      	ldr	r3, [r0, #56]	; 0x38
}
 80048a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80048a8:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 80048aa:	4620      	mov	r0, r4
 80048ac:	f7ff ff53 	bl	8004756 <HAL_UART_ErrorCallback>
 80048b0:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 80048b2:	f7ff ff50 	bl	8004756 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048b6:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
 80048ba:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80048bc:	02de      	lsls	r6, r3, #11
 80048be:	d509      	bpl.n	80048d4 <HAL_UART_IRQHandler+0x11c>
 80048c0:	0245      	lsls	r5, r0, #9
 80048c2:	d507      	bpl.n	80048d4 <HAL_UART_IRQHandler+0x11c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80048c4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 80048c8:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80048ca:	6213      	str	r3, [r2, #32]
}
 80048cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 80048d0:	f000 bdad 	b.w	800542e <HAL_UARTEx_WakeupCallback>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80048d4:	061e      	lsls	r6, r3, #24
 80048d6:	d505      	bpl.n	80048e4 <HAL_UART_IRQHandler+0x12c>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80048d8:	060d      	lsls	r5, r1, #24
 80048da:	d401      	bmi.n	80048e0 <HAL_UART_IRQHandler+0x128>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80048dc:	0200      	lsls	r0, r0, #8
 80048de:	d501      	bpl.n	80048e4 <HAL_UART_IRQHandler+0x12c>
    if (huart->TxISR != NULL)
 80048e0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80048e2:	e778      	b.n	80047d6 <HAL_UART_IRQHandler+0x1e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80048e4:	065e      	lsls	r6, r3, #25
 80048e6:	d50e      	bpl.n	8004906 <HAL_UART_IRQHandler+0x14e>
 80048e8:	064d      	lsls	r5, r1, #25
 80048ea:	d50c      	bpl.n	8004906 <HAL_UART_IRQHandler+0x14e>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80048ec:	6813      	ldr	r3, [r2, #0]
 80048ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048f2:	6013      	str	r3, [r2, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80048f4:	2320      	movs	r3, #32
 80048f6:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80048fa:	2300      	movs	r3, #0
 80048fc:	6723      	str	r3, [r4, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80048fe:	4620      	mov	r0, r4
 8004900:	f7fc f9f8 	bl	8000cf4 <HAL_UART_TxCpltCallback>
 8004904:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004906:	0218      	lsls	r0, r3, #8
 8004908:	d506      	bpl.n	8004918 <HAL_UART_IRQHandler+0x160>
 800490a:	004a      	lsls	r2, r1, #1
 800490c:	d504      	bpl.n	8004918 <HAL_UART_IRQHandler+0x160>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800490e:	4620      	mov	r0, r4
}
 8004910:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004914:	f000 bd8d 	b.w	8005432 <HAL_UARTEx_TxFifoEmptyCallback>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004918:	01db      	lsls	r3, r3, #7
 800491a:	d506      	bpl.n	800492a <HAL_UART_IRQHandler+0x172>
 800491c:	2900      	cmp	r1, #0
 800491e:	da04      	bge.n	800492a <HAL_UART_IRQHandler+0x172>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004920:	4620      	mov	r0, r4
}
 8004922:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004926:	f000 bd83 	b.w	8005430 <HAL_UARTEx_RxFifoFullCallback>
 800492a:	bd70      	pop	{r4, r5, r6, pc}
 800492c:	10000001 	.word	0x10000001
 8004930:	08004935 	.word	0x08004935

08004934 <UART_DMAAbortOnError>:
{
 8004934:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004936:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8004938:	2300      	movs	r3, #0
 800493a:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800493e:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 8004942:	f7ff ff08 	bl	8004756 <HAL_UART_ErrorCallback>
 8004946:	bd08      	pop	{r3, pc}

08004948 <UART_SetConfig>:
  if (UART_INSTANCE_LOWPOWER(huart))
 8004948:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800494a:	69c1      	ldr	r1, [r0, #28]
 800494c:	6883      	ldr	r3, [r0, #8]
{
 800494e:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8004952:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004954:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004956:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004958:	4303      	orrs	r3, r0
 800495a:	6960      	ldr	r0, [r4, #20]
 800495c:	4303      	orrs	r3, r0
  tmpreg |= (uint32_t)huart->FifoMode;
 800495e:	6e60      	ldr	r0, [r4, #100]	; 0x64
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004960:	430b      	orrs	r3, r1
  tmpreg |= (uint32_t)huart->FifoMode;
 8004962:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004964:	48ac      	ldr	r0, [pc, #688]	; (8004c18 <UART_SetConfig+0x2d0>)
 8004966:	4028      	ands	r0, r5
 8004968:	4303      	orrs	r3, r0
 800496a:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800496c:	6853      	ldr	r3, [r2, #4]
 800496e:	68e0      	ldr	r0, [r4, #12]
 8004970:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004974:	4303      	orrs	r3, r0
 8004976:	6053      	str	r3, [r2, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004978:	4ba8      	ldr	r3, [pc, #672]	; (8004c1c <UART_SetConfig+0x2d4>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800497a:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800497c:	429a      	cmp	r2, r3
    tmpreg |= huart->Init.OneBitSampling;
 800497e:	bf1c      	itt	ne
 8004980:	6a23      	ldrne	r3, [r4, #32]
 8004982:	4318      	orrne	r0, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004984:	6893      	ldr	r3, [r2, #8]
 8004986:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800498a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800498e:	4303      	orrs	r3, r0
 8004990:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004992:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 8004994:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004996:	f020 000f 	bic.w	r0, r0, #15
 800499a:	4318      	orrs	r0, r3
 800499c:	62d0      	str	r0, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800499e:	48a0      	ldr	r0, [pc, #640]	; (8004c20 <UART_SetConfig+0x2d8>)
 80049a0:	4282      	cmp	r2, r0
 80049a2:	d11a      	bne.n	80049da <UART_SetConfig+0x92>
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80049a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049a8:	489e      	ldr	r0, [pc, #632]	; (8004c24 <UART_SetConfig+0x2dc>)
 80049aa:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80049ae:	f002 0203 	and.w	r2, r2, #3
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049b2:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80049b6:	5c82      	ldrb	r2, [r0, r2]
 80049b8:	f102 32ff 	add.w	r2, r2, #4294967295
 80049bc:	f000 8220 	beq.w	8004e00 <UART_SetConfig+0x4b8>
    switch (clocksource)
 80049c0:	2a07      	cmp	r2, #7
 80049c2:	f200 83e7 	bhi.w	8005194 <UART_SetConfig+0x84c>
 80049c6:	e8df f012 	tbh	[pc, r2, lsl #1]
 80049ca:	0327      	.short	0x0327
 80049cc:	03e50349 	.word	0x03e50349
 80049d0:	03e5038c 	.word	0x03e5038c
 80049d4:	03e503e5 	.word	0x03e503e5
 80049d8:	03a5      	.short	0x03a5
  UART_GETCLOCKSOURCE(huart, clocksource);
 80049da:	4890      	ldr	r0, [pc, #576]	; (8004c1c <UART_SetConfig+0x2d4>)
 80049dc:	4282      	cmp	r2, r0
 80049de:	f040 83d5 	bne.w	800518c <UART_SetConfig+0x844>
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80049e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049e6:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80049ea:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 80049ee:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80049f2:	f000 8094 	beq.w	8004b1e <UART_SetConfig+0x1d6>
 80049f6:	d80c      	bhi.n	8004a12 <UART_SetConfig+0xca>
 80049f8:	b3ca      	cbz	r2, 8004a6e <UART_SetConfig+0x126>
        ret = HAL_ERROR;
 80049fa:	2201      	movs	r2, #1
  huart->NbTxDataToProcess = 1;
 80049fc:	2301      	movs	r3, #1
 80049fe:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004a02:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 8004a06:	2300      	movs	r3, #0
 8004a08:	66e3      	str	r3, [r4, #108]	; 0x6c
  huart->TxISR = NULL;
 8004a0a:	6723      	str	r3, [r4, #112]	; 0x70
}
 8004a0c:	4610      	mov	r0, r2
 8004a0e:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a12:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8004a16:	d064      	beq.n	8004ae2 <UART_SetConfig+0x19a>
 8004a18:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8004a1c:	d1ed      	bne.n	80049fa <UART_SetConfig+0xb2>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	f000 80e1 	beq.w	8004be6 <UART_SetConfig+0x29e>
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	f000 80e1 	beq.w	8004bec <UART_SetConfig+0x2a4>
 8004a2a:	2b02      	cmp	r3, #2
 8004a2c:	f000 80e1 	beq.w	8004bf2 <UART_SetConfig+0x2aa>
 8004a30:	2b03      	cmp	r3, #3
 8004a32:	f000 80e1 	beq.w	8004bf8 <UART_SetConfig+0x2b0>
 8004a36:	2b04      	cmp	r3, #4
 8004a38:	f000 80e1 	beq.w	8004bfe <UART_SetConfig+0x2b6>
 8004a3c:	2b05      	cmp	r3, #5
 8004a3e:	f000 80e1 	beq.w	8004c04 <UART_SetConfig+0x2bc>
 8004a42:	2b06      	cmp	r3, #6
 8004a44:	f000 80e1 	beq.w	8004c0a <UART_SetConfig+0x2c2>
 8004a48:	2b07      	cmp	r3, #7
 8004a4a:	f000 80e1 	beq.w	8004c10 <UART_SetConfig+0x2c8>
 8004a4e:	2b08      	cmp	r3, #8
 8004a50:	f000 8100 	beq.w	8004c54 <UART_SetConfig+0x30c>
 8004a54:	2b09      	cmp	r3, #9
 8004a56:	f000 8100 	beq.w	8004c5a <UART_SetConfig+0x312>
 8004a5a:	2b0a      	cmp	r3, #10
 8004a5c:	f000 8100 	beq.w	8004c60 <UART_SetConfig+0x318>
 8004a60:	2b0b      	cmp	r3, #11
 8004a62:	bf14      	ite	ne
 8004a64:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 8004a68:	2080      	moveq	r0, #128	; 0x80
 8004a6a:	2308      	movs	r3, #8
 8004a6c:	e093      	b.n	8004b96 <UART_SetConfig+0x24e>
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004a6e:	f7ff fb63 	bl	8004138 <HAL_RCC_GetPCLK1Freq>
 8004a72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a74:	b1fb      	cbz	r3, 8004ab6 <UART_SetConfig+0x16e>
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d01f      	beq.n	8004aba <UART_SetConfig+0x172>
 8004a7a:	2b02      	cmp	r3, #2
 8004a7c:	d01f      	beq.n	8004abe <UART_SetConfig+0x176>
 8004a7e:	2b03      	cmp	r3, #3
 8004a80:	d01f      	beq.n	8004ac2 <UART_SetConfig+0x17a>
 8004a82:	2b04      	cmp	r3, #4
 8004a84:	d01f      	beq.n	8004ac6 <UART_SetConfig+0x17e>
 8004a86:	2b05      	cmp	r3, #5
 8004a88:	d01f      	beq.n	8004aca <UART_SetConfig+0x182>
 8004a8a:	2b06      	cmp	r3, #6
 8004a8c:	d01f      	beq.n	8004ace <UART_SetConfig+0x186>
 8004a8e:	2b07      	cmp	r3, #7
 8004a90:	d01f      	beq.n	8004ad2 <UART_SetConfig+0x18a>
 8004a92:	2b08      	cmp	r3, #8
 8004a94:	d01f      	beq.n	8004ad6 <UART_SetConfig+0x18e>
 8004a96:	2b09      	cmp	r3, #9
 8004a98:	d01f      	beq.n	8004ada <UART_SetConfig+0x192>
 8004a9a:	2b0a      	cmp	r3, #10
 8004a9c:	d01f      	beq.n	8004ade <UART_SetConfig+0x196>
 8004a9e:	2b0b      	cmp	r3, #11
 8004aa0:	bf14      	ite	ne
 8004aa2:	2301      	movne	r3, #1
 8004aa4:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8004aa8:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 8004aac:	2300      	movs	r3, #0
    if (lpuart_ker_ck_pres != 0U)
 8004aae:	2800      	cmp	r0, #0
 8004ab0:	d171      	bne.n	8004b96 <UART_SetConfig+0x24e>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	e7a2      	b.n	80049fc <UART_SetConfig+0xb4>
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e7f6      	b.n	8004aa8 <UART_SetConfig+0x160>
 8004aba:	2302      	movs	r3, #2
 8004abc:	e7f4      	b.n	8004aa8 <UART_SetConfig+0x160>
 8004abe:	2304      	movs	r3, #4
 8004ac0:	e7f2      	b.n	8004aa8 <UART_SetConfig+0x160>
 8004ac2:	2306      	movs	r3, #6
 8004ac4:	e7f0      	b.n	8004aa8 <UART_SetConfig+0x160>
 8004ac6:	2308      	movs	r3, #8
 8004ac8:	e7ee      	b.n	8004aa8 <UART_SetConfig+0x160>
 8004aca:	230a      	movs	r3, #10
 8004acc:	e7ec      	b.n	8004aa8 <UART_SetConfig+0x160>
 8004ace:	230c      	movs	r3, #12
 8004ad0:	e7ea      	b.n	8004aa8 <UART_SetConfig+0x160>
 8004ad2:	2310      	movs	r3, #16
 8004ad4:	e7e8      	b.n	8004aa8 <UART_SetConfig+0x160>
 8004ad6:	2320      	movs	r3, #32
 8004ad8:	e7e6      	b.n	8004aa8 <UART_SetConfig+0x160>
 8004ada:	2340      	movs	r3, #64	; 0x40
 8004adc:	e7e4      	b.n	8004aa8 <UART_SetConfig+0x160>
 8004ade:	2380      	movs	r3, #128	; 0x80
 8004ae0:	e7e2      	b.n	8004aa8 <UART_SetConfig+0x160>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d052      	beq.n	8004b8c <UART_SetConfig+0x244>
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d052      	beq.n	8004b90 <UART_SetConfig+0x248>
 8004aea:	2b02      	cmp	r3, #2
 8004aec:	d052      	beq.n	8004b94 <UART_SetConfig+0x24c>
 8004aee:	2b03      	cmp	r3, #3
 8004af0:	d069      	beq.n	8004bc6 <UART_SetConfig+0x27e>
 8004af2:	2b04      	cmp	r3, #4
 8004af4:	d069      	beq.n	8004bca <UART_SetConfig+0x282>
 8004af6:	2b05      	cmp	r3, #5
 8004af8:	d069      	beq.n	8004bce <UART_SetConfig+0x286>
 8004afa:	2b06      	cmp	r3, #6
 8004afc:	d069      	beq.n	8004bd2 <UART_SetConfig+0x28a>
 8004afe:	2b07      	cmp	r3, #7
 8004b00:	d069      	beq.n	8004bd6 <UART_SetConfig+0x28e>
 8004b02:	2b08      	cmp	r3, #8
 8004b04:	d069      	beq.n	8004bda <UART_SetConfig+0x292>
 8004b06:	2b09      	cmp	r3, #9
 8004b08:	d069      	beq.n	8004bde <UART_SetConfig+0x296>
 8004b0a:	2b0a      	cmp	r3, #10
 8004b0c:	d069      	beq.n	8004be2 <UART_SetConfig+0x29a>
 8004b0e:	4846      	ldr	r0, [pc, #280]	; (8004c28 <UART_SetConfig+0x2e0>)
 8004b10:	f24f 4224 	movw	r2, #62500	; 0xf424
 8004b14:	2b0b      	cmp	r3, #11
 8004b16:	bf08      	it	eq
 8004b18:	4610      	moveq	r0, r2
 8004b1a:	2302      	movs	r3, #2
 8004b1c:	e03b      	b.n	8004b96 <UART_SetConfig+0x24e>
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004b1e:	f7ff faad 	bl	800407c <HAL_RCC_GetSysClockFreq>
 8004b22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b24:	b1e3      	cbz	r3, 8004b60 <UART_SetConfig+0x218>
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d01c      	beq.n	8004b64 <UART_SetConfig+0x21c>
 8004b2a:	2b02      	cmp	r3, #2
 8004b2c:	d01c      	beq.n	8004b68 <UART_SetConfig+0x220>
 8004b2e:	2b03      	cmp	r3, #3
 8004b30:	d01c      	beq.n	8004b6c <UART_SetConfig+0x224>
 8004b32:	2b04      	cmp	r3, #4
 8004b34:	d01c      	beq.n	8004b70 <UART_SetConfig+0x228>
 8004b36:	2b05      	cmp	r3, #5
 8004b38:	d01c      	beq.n	8004b74 <UART_SetConfig+0x22c>
 8004b3a:	2b06      	cmp	r3, #6
 8004b3c:	d01c      	beq.n	8004b78 <UART_SetConfig+0x230>
 8004b3e:	2b07      	cmp	r3, #7
 8004b40:	d01c      	beq.n	8004b7c <UART_SetConfig+0x234>
 8004b42:	2b08      	cmp	r3, #8
 8004b44:	d01c      	beq.n	8004b80 <UART_SetConfig+0x238>
 8004b46:	2b09      	cmp	r3, #9
 8004b48:	d01c      	beq.n	8004b84 <UART_SetConfig+0x23c>
 8004b4a:	2b0a      	cmp	r3, #10
 8004b4c:	d01c      	beq.n	8004b88 <UART_SetConfig+0x240>
 8004b4e:	2b0b      	cmp	r3, #11
 8004b50:	bf14      	ite	ne
 8004b52:	2301      	movne	r3, #1
 8004b54:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8004b58:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 8004b5c:	2304      	movs	r3, #4
 8004b5e:	e7a6      	b.n	8004aae <UART_SetConfig+0x166>
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004b60:	2301      	movs	r3, #1
 8004b62:	e7f9      	b.n	8004b58 <UART_SetConfig+0x210>
 8004b64:	2302      	movs	r3, #2
 8004b66:	e7f7      	b.n	8004b58 <UART_SetConfig+0x210>
 8004b68:	2304      	movs	r3, #4
 8004b6a:	e7f5      	b.n	8004b58 <UART_SetConfig+0x210>
 8004b6c:	2306      	movs	r3, #6
 8004b6e:	e7f3      	b.n	8004b58 <UART_SetConfig+0x210>
 8004b70:	2308      	movs	r3, #8
 8004b72:	e7f1      	b.n	8004b58 <UART_SetConfig+0x210>
 8004b74:	230a      	movs	r3, #10
 8004b76:	e7ef      	b.n	8004b58 <UART_SetConfig+0x210>
 8004b78:	230c      	movs	r3, #12
 8004b7a:	e7ed      	b.n	8004b58 <UART_SetConfig+0x210>
 8004b7c:	2310      	movs	r3, #16
 8004b7e:	e7eb      	b.n	8004b58 <UART_SetConfig+0x210>
 8004b80:	2320      	movs	r3, #32
 8004b82:	e7e9      	b.n	8004b58 <UART_SetConfig+0x210>
 8004b84:	2340      	movs	r3, #64	; 0x40
 8004b86:	e7e7      	b.n	8004b58 <UART_SetConfig+0x210>
 8004b88:	2380      	movs	r3, #128	; 0x80
 8004b8a:	e7e5      	b.n	8004b58 <UART_SetConfig+0x210>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004b8c:	4826      	ldr	r0, [pc, #152]	; (8004c28 <UART_SetConfig+0x2e0>)
 8004b8e:	e7c4      	b.n	8004b1a <UART_SetConfig+0x1d2>
 8004b90:	4826      	ldr	r0, [pc, #152]	; (8004c2c <UART_SetConfig+0x2e4>)
 8004b92:	e7c2      	b.n	8004b1a <UART_SetConfig+0x1d2>
 8004b94:	4826      	ldr	r0, [pc, #152]	; (8004c30 <UART_SetConfig+0x2e8>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004b96:	6862      	ldr	r2, [r4, #4]
 8004b98:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8004b9c:	4281      	cmp	r1, r0
 8004b9e:	f63f af2c 	bhi.w	80049fa <UART_SetConfig+0xb2>
 8004ba2:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8004ba6:	f63f af28 	bhi.w	80049fa <UART_SetConfig+0xb2>
        switch (clocksource)
 8004baa:	2b08      	cmp	r3, #8
 8004bac:	f200 8125 	bhi.w	8004dfa <UART_SetConfig+0x4b2>
 8004bb0:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004bb4:	01230059 	.word	0x01230059
 8004bb8:	01230095 	.word	0x01230095
 8004bbc:	012300d1 	.word	0x012300d1
 8004bc0:	01230123 	.word	0x01230123
 8004bc4:	00ea      	.short	0x00ea
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004bc6:	481b      	ldr	r0, [pc, #108]	; (8004c34 <UART_SetConfig+0x2ec>)
 8004bc8:	e7a7      	b.n	8004b1a <UART_SetConfig+0x1d2>
 8004bca:	481b      	ldr	r0, [pc, #108]	; (8004c38 <UART_SetConfig+0x2f0>)
 8004bcc:	e7a5      	b.n	8004b1a <UART_SetConfig+0x1d2>
 8004bce:	481b      	ldr	r0, [pc, #108]	; (8004c3c <UART_SetConfig+0x2f4>)
 8004bd0:	e7a3      	b.n	8004b1a <UART_SetConfig+0x1d2>
 8004bd2:	481b      	ldr	r0, [pc, #108]	; (8004c40 <UART_SetConfig+0x2f8>)
 8004bd4:	e7a1      	b.n	8004b1a <UART_SetConfig+0x1d2>
 8004bd6:	481b      	ldr	r0, [pc, #108]	; (8004c44 <UART_SetConfig+0x2fc>)
 8004bd8:	e79f      	b.n	8004b1a <UART_SetConfig+0x1d2>
 8004bda:	481b      	ldr	r0, [pc, #108]	; (8004c48 <UART_SetConfig+0x300>)
 8004bdc:	e79d      	b.n	8004b1a <UART_SetConfig+0x1d2>
 8004bde:	481b      	ldr	r0, [pc, #108]	; (8004c4c <UART_SetConfig+0x304>)
 8004be0:	e79b      	b.n	8004b1a <UART_SetConfig+0x1d2>
 8004be2:	481b      	ldr	r0, [pc, #108]	; (8004c50 <UART_SetConfig+0x308>)
 8004be4:	e799      	b.n	8004b1a <UART_SetConfig+0x1d2>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004be6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004bea:	e73e      	b.n	8004a6a <UART_SetConfig+0x122>
 8004bec:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004bf0:	e73b      	b.n	8004a6a <UART_SetConfig+0x122>
 8004bf2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004bf6:	e738      	b.n	8004a6a <UART_SetConfig+0x122>
 8004bf8:	f241 5055 	movw	r0, #5461	; 0x1555
 8004bfc:	e735      	b.n	8004a6a <UART_SetConfig+0x122>
 8004bfe:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004c02:	e732      	b.n	8004a6a <UART_SetConfig+0x122>
 8004c04:	f640 40cc 	movw	r0, #3276	; 0xccc
 8004c08:	e72f      	b.n	8004a6a <UART_SetConfig+0x122>
 8004c0a:	f640 20aa 	movw	r0, #2730	; 0xaaa
 8004c0e:	e72c      	b.n	8004a6a <UART_SetConfig+0x122>
 8004c10:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004c14:	e729      	b.n	8004a6a <UART_SetConfig+0x122>
 8004c16:	bf00      	nop
 8004c18:	cfff69f3 	.word	0xcfff69f3
 8004c1c:	40008000 	.word	0x40008000
 8004c20:	40013800 	.word	0x40013800
 8004c24:	08006644 	.word	0x08006644
 8004c28:	00f42400 	.word	0x00f42400
 8004c2c:	007a1200 	.word	0x007a1200
 8004c30:	003d0900 	.word	0x003d0900
 8004c34:	0028b0aa 	.word	0x0028b0aa
 8004c38:	001e8480 	.word	0x001e8480
 8004c3c:	00186a00 	.word	0x00186a00
 8004c40:	00145855 	.word	0x00145855
 8004c44:	000f4240 	.word	0x000f4240
 8004c48:	0007a120 	.word	0x0007a120
 8004c4c:	0003d090 	.word	0x0003d090
 8004c50:	0001e848 	.word	0x0001e848
 8004c54:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004c58:	e79d      	b.n	8004b96 <UART_SetConfig+0x24e>
 8004c5a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004c5e:	e704      	b.n	8004a6a <UART_SetConfig+0x122>
 8004c60:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004c64:	e701      	b.n	8004a6a <UART_SetConfig+0x122>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c66:	f7ff fa67 	bl	8004138 <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	f000 8089 	beq.w	8004d84 <UART_SetConfig+0x43c>
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d072      	beq.n	8004d5c <UART_SetConfig+0x414>
 8004c76:	2b02      	cmp	r3, #2
 8004c78:	d072      	beq.n	8004d60 <UART_SetConfig+0x418>
 8004c7a:	2b03      	cmp	r3, #3
 8004c7c:	d072      	beq.n	8004d64 <UART_SetConfig+0x41c>
 8004c7e:	2b04      	cmp	r3, #4
 8004c80:	d072      	beq.n	8004d68 <UART_SetConfig+0x420>
 8004c82:	2b05      	cmp	r3, #5
 8004c84:	d072      	beq.n	8004d6c <UART_SetConfig+0x424>
 8004c86:	2b06      	cmp	r3, #6
 8004c88:	d072      	beq.n	8004d70 <UART_SetConfig+0x428>
 8004c8a:	2b07      	cmp	r3, #7
 8004c8c:	d072      	beq.n	8004d74 <UART_SetConfig+0x42c>
 8004c8e:	2b08      	cmp	r3, #8
 8004c90:	d072      	beq.n	8004d78 <UART_SetConfig+0x430>
 8004c92:	2b09      	cmp	r3, #9
 8004c94:	d072      	beq.n	8004d7c <UART_SetConfig+0x434>
 8004c96:	2b0a      	cmp	r3, #10
 8004c98:	d072      	beq.n	8004d80 <UART_SetConfig+0x438>
 8004c9a:	2b0b      	cmp	r3, #11
 8004c9c:	d172      	bne.n	8004d84 <UART_SetConfig+0x43c>
 8004c9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	2100      	movs	r1, #0
 8004ca6:	f7fb fabb 	bl	8000220 <__aeabi_uldivmod>
 8004caa:	6865      	ldr	r5, [r4, #4]
 8004cac:	020f      	lsls	r7, r1, #8
 8004cae:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 8004cb2:	0206      	lsls	r6, r0, #8
 8004cb4:	0868      	lsrs	r0, r5, #1
 8004cb6:	eb16 0b00 	adds.w	fp, r6, r0
 8004cba:	f147 0c00 	adc.w	ip, r7, #0
 8004cbe:	462a      	mov	r2, r5
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	4658      	mov	r0, fp
 8004cc4:	4661      	mov	r1, ip
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004cc6:	f7fb faab 	bl	8000220 <__aeabi_uldivmod>
            break;
 8004cca:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004ccc:	4b9a      	ldr	r3, [pc, #616]	; (8004f38 <UART_SetConfig+0x5f0>)
 8004cce:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8004cd2:	4299      	cmp	r1, r3
 8004cd4:	f63f ae91 	bhi.w	80049fa <UART_SetConfig+0xb2>
          huart->Instance->BRR = usartdiv;
 8004cd8:	6823      	ldr	r3, [r4, #0]
 8004cda:	60d8      	str	r0, [r3, #12]
 8004cdc:	e68e      	b.n	80049fc <UART_SetConfig+0xb4>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004cde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d036      	beq.n	8004d52 <UART_SetConfig+0x40a>
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d016      	beq.n	8004d16 <UART_SetConfig+0x3ce>
 8004ce8:	2b02      	cmp	r3, #2
 8004cea:	d016      	beq.n	8004d1a <UART_SetConfig+0x3d2>
 8004cec:	2b03      	cmp	r3, #3
 8004cee:	d016      	beq.n	8004d1e <UART_SetConfig+0x3d6>
 8004cf0:	2b04      	cmp	r3, #4
 8004cf2:	d01e      	beq.n	8004d32 <UART_SetConfig+0x3ea>
 8004cf4:	2b05      	cmp	r3, #5
 8004cf6:	d01e      	beq.n	8004d36 <UART_SetConfig+0x3ee>
 8004cf8:	2b06      	cmp	r3, #6
 8004cfa:	d01e      	beq.n	8004d3a <UART_SetConfig+0x3f2>
 8004cfc:	2b07      	cmp	r3, #7
 8004cfe:	d020      	beq.n	8004d42 <UART_SetConfig+0x3fa>
 8004d00:	2b08      	cmp	r3, #8
 8004d02:	d020      	beq.n	8004d46 <UART_SetConfig+0x3fe>
 8004d04:	2b09      	cmp	r3, #9
 8004d06:	d020      	beq.n	8004d4a <UART_SetConfig+0x402>
 8004d08:	2b0a      	cmp	r3, #10
 8004d0a:	d020      	beq.n	8004d4e <UART_SetConfig+0x406>
 8004d0c:	2b0b      	cmp	r3, #11
 8004d0e:	d120      	bne.n	8004d52 <UART_SetConfig+0x40a>
 8004d10:	488a      	ldr	r0, [pc, #552]	; (8004f3c <UART_SetConfig+0x5f4>)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d12:	2100      	movs	r1, #0
 8004d14:	e006      	b.n	8004d24 <UART_SetConfig+0x3dc>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d16:	488a      	ldr	r0, [pc, #552]	; (8004f40 <UART_SetConfig+0x5f8>)
 8004d18:	e7fb      	b.n	8004d12 <UART_SetConfig+0x3ca>
 8004d1a:	488a      	ldr	r0, [pc, #552]	; (8004f44 <UART_SetConfig+0x5fc>)
 8004d1c:	e7f9      	b.n	8004d12 <UART_SetConfig+0x3ca>
 8004d1e:	a182      	add	r1, pc, #520	; (adr r1, 8004f28 <UART_SetConfig+0x5e0>)
 8004d20:	e9d1 0100 	ldrd	r0, r1, [r1]
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d24:	0855      	lsrs	r5, r2, #1
 8004d26:	1940      	adds	r0, r0, r5
 8004d28:	f04f 0300 	mov.w	r3, #0
 8004d2c:	f141 0100 	adc.w	r1, r1, #0
 8004d30:	e7c9      	b.n	8004cc6 <UART_SetConfig+0x37e>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d32:	4885      	ldr	r0, [pc, #532]	; (8004f48 <UART_SetConfig+0x600>)
 8004d34:	e7ed      	b.n	8004d12 <UART_SetConfig+0x3ca>
 8004d36:	4885      	ldr	r0, [pc, #532]	; (8004f4c <UART_SetConfig+0x604>)
 8004d38:	e7eb      	b.n	8004d12 <UART_SetConfig+0x3ca>
 8004d3a:	a17d      	add	r1, pc, #500	; (adr r1, 8004f30 <UART_SetConfig+0x5e8>)
 8004d3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d40:	e7f0      	b.n	8004d24 <UART_SetConfig+0x3dc>
 8004d42:	4883      	ldr	r0, [pc, #524]	; (8004f50 <UART_SetConfig+0x608>)
 8004d44:	e7e5      	b.n	8004d12 <UART_SetConfig+0x3ca>
 8004d46:	4883      	ldr	r0, [pc, #524]	; (8004f54 <UART_SetConfig+0x60c>)
 8004d48:	e7e3      	b.n	8004d12 <UART_SetConfig+0x3ca>
 8004d4a:	4883      	ldr	r0, [pc, #524]	; (8004f58 <UART_SetConfig+0x610>)
 8004d4c:	e7e1      	b.n	8004d12 <UART_SetConfig+0x3ca>
 8004d4e:	4883      	ldr	r0, [pc, #524]	; (8004f5c <UART_SetConfig+0x614>)
 8004d50:	e7df      	b.n	8004d12 <UART_SetConfig+0x3ca>
 8004d52:	4883      	ldr	r0, [pc, #524]	; (8004f60 <UART_SetConfig+0x618>)
 8004d54:	e7dd      	b.n	8004d12 <UART_SetConfig+0x3ca>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d56:	f7ff f991 	bl	800407c <HAL_RCC_GetSysClockFreq>
 8004d5a:	e786      	b.n	8004c6a <UART_SetConfig+0x322>
 8004d5c:	2202      	movs	r2, #2
 8004d5e:	e7a0      	b.n	8004ca2 <UART_SetConfig+0x35a>
 8004d60:	2204      	movs	r2, #4
 8004d62:	e79e      	b.n	8004ca2 <UART_SetConfig+0x35a>
 8004d64:	2206      	movs	r2, #6
 8004d66:	e79c      	b.n	8004ca2 <UART_SetConfig+0x35a>
 8004d68:	2208      	movs	r2, #8
 8004d6a:	e79a      	b.n	8004ca2 <UART_SetConfig+0x35a>
 8004d6c:	220a      	movs	r2, #10
 8004d6e:	e798      	b.n	8004ca2 <UART_SetConfig+0x35a>
 8004d70:	220c      	movs	r2, #12
 8004d72:	e796      	b.n	8004ca2 <UART_SetConfig+0x35a>
 8004d74:	2210      	movs	r2, #16
 8004d76:	e794      	b.n	8004ca2 <UART_SetConfig+0x35a>
 8004d78:	2220      	movs	r2, #32
 8004d7a:	e792      	b.n	8004ca2 <UART_SetConfig+0x35a>
 8004d7c:	2240      	movs	r2, #64	; 0x40
 8004d7e:	e790      	b.n	8004ca2 <UART_SetConfig+0x35a>
 8004d80:	2280      	movs	r2, #128	; 0x80
 8004d82:	e78e      	b.n	8004ca2 <UART_SetConfig+0x35a>
 8004d84:	2201      	movs	r2, #1
 8004d86:	e78c      	b.n	8004ca2 <UART_SetConfig+0x35a>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d8a:	b39b      	cbz	r3, 8004df4 <UART_SetConfig+0x4ac>
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d016      	beq.n	8004dbe <UART_SetConfig+0x476>
 8004d90:	2b02      	cmp	r3, #2
 8004d92:	d017      	beq.n	8004dc4 <UART_SetConfig+0x47c>
 8004d94:	2b03      	cmp	r3, #3
 8004d96:	d018      	beq.n	8004dca <UART_SetConfig+0x482>
 8004d98:	2b04      	cmp	r3, #4
 8004d9a:	d018      	beq.n	8004dce <UART_SetConfig+0x486>
 8004d9c:	2b05      	cmp	r3, #5
 8004d9e:	d019      	beq.n	8004dd4 <UART_SetConfig+0x48c>
 8004da0:	2b06      	cmp	r3, #6
 8004da2:	d019      	beq.n	8004dd8 <UART_SetConfig+0x490>
 8004da4:	2b07      	cmp	r3, #7
 8004da6:	d019      	beq.n	8004ddc <UART_SetConfig+0x494>
 8004da8:	2b08      	cmp	r3, #8
 8004daa:	d01a      	beq.n	8004de2 <UART_SetConfig+0x49a>
 8004dac:	2b09      	cmp	r3, #9
 8004dae:	d01b      	beq.n	8004de8 <UART_SetConfig+0x4a0>
 8004db0:	2b0a      	cmp	r3, #10
 8004db2:	d01c      	beq.n	8004dee <UART_SetConfig+0x4a6>
 8004db4:	2b0b      	cmp	r3, #11
 8004db6:	d11d      	bne.n	8004df4 <UART_SetConfig+0x4ac>
 8004db8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004dbc:	e7a9      	b.n	8004d12 <UART_SetConfig+0x3ca>
 8004dbe:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8004dc2:	e7a6      	b.n	8004d12 <UART_SetConfig+0x3ca>
 8004dc4:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8004dc8:	e7a3      	b.n	8004d12 <UART_SetConfig+0x3ca>
 8004dca:	4866      	ldr	r0, [pc, #408]	; (8004f64 <UART_SetConfig+0x61c>)
 8004dcc:	e7a1      	b.n	8004d12 <UART_SetConfig+0x3ca>
 8004dce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8004dd2:	e79e      	b.n	8004d12 <UART_SetConfig+0x3ca>
 8004dd4:	4864      	ldr	r0, [pc, #400]	; (8004f68 <UART_SetConfig+0x620>)
 8004dd6:	e79c      	b.n	8004d12 <UART_SetConfig+0x3ca>
 8004dd8:	4864      	ldr	r0, [pc, #400]	; (8004f6c <UART_SetConfig+0x624>)
 8004dda:	e79a      	b.n	8004d12 <UART_SetConfig+0x3ca>
 8004ddc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004de0:	e797      	b.n	8004d12 <UART_SetConfig+0x3ca>
 8004de2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8004de6:	e794      	b.n	8004d12 <UART_SetConfig+0x3ca>
 8004de8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8004dec:	e791      	b.n	8004d12 <UART_SetConfig+0x3ca>
 8004dee:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8004df2:	e78e      	b.n	8004d12 <UART_SetConfig+0x3ca>
 8004df4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8004df8:	e78b      	b.n	8004d12 <UART_SetConfig+0x3ca>
            ret = HAL_ERROR;
 8004dfa:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8004dfc:	2000      	movs	r0, #0
 8004dfe:	e765      	b.n	8004ccc <UART_SetConfig+0x384>
    switch (clocksource)
 8004e00:	2a07      	cmp	r2, #7
 8004e02:	f200 8106 	bhi.w	8005012 <UART_SetConfig+0x6ca>
 8004e06:	e8df f012 	tbh	[pc, r2, lsl #1]
 8004e0a:	0008      	.short	0x0008
 8004e0c:	0104003f 	.word	0x0104003f
 8004e10:	01040076 	.word	0x01040076
 8004e14:	01040104 	.word	0x01040104
 8004e18:	00c7      	.short	0x00c7
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e1a:	f7ff f99f 	bl	800415c <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e1e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004e20:	2900      	cmp	r1, #0
 8004e22:	d06b      	beq.n	8004efc <UART_SetConfig+0x5b4>
 8004e24:	2901      	cmp	r1, #1
 8004e26:	d06b      	beq.n	8004f00 <UART_SetConfig+0x5b8>
 8004e28:	2902      	cmp	r1, #2
 8004e2a:	d06b      	beq.n	8004f04 <UART_SetConfig+0x5bc>
 8004e2c:	2903      	cmp	r1, #3
 8004e2e:	d06b      	beq.n	8004f08 <UART_SetConfig+0x5c0>
 8004e30:	2904      	cmp	r1, #4
 8004e32:	d06b      	beq.n	8004f0c <UART_SetConfig+0x5c4>
 8004e34:	2905      	cmp	r1, #5
 8004e36:	d06b      	beq.n	8004f10 <UART_SetConfig+0x5c8>
 8004e38:	2906      	cmp	r1, #6
 8004e3a:	d06b      	beq.n	8004f14 <UART_SetConfig+0x5cc>
 8004e3c:	2907      	cmp	r1, #7
 8004e3e:	d06b      	beq.n	8004f18 <UART_SetConfig+0x5d0>
 8004e40:	2908      	cmp	r1, #8
 8004e42:	d06b      	beq.n	8004f1c <UART_SetConfig+0x5d4>
 8004e44:	2909      	cmp	r1, #9
 8004e46:	d06b      	beq.n	8004f20 <UART_SetConfig+0x5d8>
 8004e48:	290a      	cmp	r1, #10
 8004e4a:	d06b      	beq.n	8004f24 <UART_SetConfig+0x5dc>
 8004e4c:	290b      	cmp	r1, #11
 8004e4e:	bf14      	ite	ne
 8004e50:	2201      	movne	r2, #1
 8004e52:	f44f 7280 	moveq.w	r2, #256	; 0x100
 8004e56:	6861      	ldr	r1, [r4, #4]
 8004e58:	fbb0 f2f2 	udiv	r2, r0, r2
 8004e5c:	084b      	lsrs	r3, r1, #1
 8004e5e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8004e62:	fbb3 f3f1 	udiv	r3, r3, r1
 8004e66:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e68:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e6a:	f1a3 0010 	sub.w	r0, r3, #16
 8004e6e:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8004e72:	4288      	cmp	r0, r1
 8004e74:	f63f adc1 	bhi.w	80049fa <UART_SetConfig+0xb2>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e78:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 8004e7c:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e7e:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8004e82:	430b      	orrs	r3, r1
 8004e84:	60c3      	str	r3, [r0, #12]
 8004e86:	e5b9      	b.n	80049fc <UART_SetConfig+0xb4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e88:	b1fb      	cbz	r3, 8004eca <UART_SetConfig+0x582>
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d01f      	beq.n	8004ece <UART_SetConfig+0x586>
 8004e8e:	2b02      	cmp	r3, #2
 8004e90:	d01f      	beq.n	8004ed2 <UART_SetConfig+0x58a>
 8004e92:	2b03      	cmp	r3, #3
 8004e94:	d01f      	beq.n	8004ed6 <UART_SetConfig+0x58e>
 8004e96:	2b04      	cmp	r3, #4
 8004e98:	d01f      	beq.n	8004eda <UART_SetConfig+0x592>
 8004e9a:	2b05      	cmp	r3, #5
 8004e9c:	d01f      	beq.n	8004ede <UART_SetConfig+0x596>
 8004e9e:	2b06      	cmp	r3, #6
 8004ea0:	d01f      	beq.n	8004ee2 <UART_SetConfig+0x59a>
 8004ea2:	2b07      	cmp	r3, #7
 8004ea4:	d01f      	beq.n	8004ee6 <UART_SetConfig+0x59e>
 8004ea6:	2b08      	cmp	r3, #8
 8004ea8:	d01f      	beq.n	8004eea <UART_SetConfig+0x5a2>
 8004eaa:	2b09      	cmp	r3, #9
 8004eac:	d01f      	beq.n	8004eee <UART_SetConfig+0x5a6>
 8004eae:	2b0a      	cmp	r3, #10
 8004eb0:	d01f      	beq.n	8004ef2 <UART_SetConfig+0x5aa>
 8004eb2:	492f      	ldr	r1, [pc, #188]	; (8004f70 <UART_SetConfig+0x628>)
 8004eb4:	4a29      	ldr	r2, [pc, #164]	; (8004f5c <UART_SetConfig+0x614>)
 8004eb6:	2b0b      	cmp	r3, #11
 8004eb8:	bf14      	ite	ne
 8004eba:	4613      	movne	r3, r2
 8004ebc:	460b      	moveq	r3, r1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ebe:	6862      	ldr	r2, [r4, #4]
 8004ec0:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8004ec4:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ec8:	e7cd      	b.n	8004e66 <UART_SetConfig+0x51e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004eca:	4b24      	ldr	r3, [pc, #144]	; (8004f5c <UART_SetConfig+0x614>)
 8004ecc:	e7f7      	b.n	8004ebe <UART_SetConfig+0x576>
 8004ece:	4b1b      	ldr	r3, [pc, #108]	; (8004f3c <UART_SetConfig+0x5f4>)
 8004ed0:	e7f5      	b.n	8004ebe <UART_SetConfig+0x576>
 8004ed2:	4b28      	ldr	r3, [pc, #160]	; (8004f74 <UART_SetConfig+0x62c>)
 8004ed4:	e7f3      	b.n	8004ebe <UART_SetConfig+0x576>
 8004ed6:	4b28      	ldr	r3, [pc, #160]	; (8004f78 <UART_SetConfig+0x630>)
 8004ed8:	e7f1      	b.n	8004ebe <UART_SetConfig+0x576>
 8004eda:	4b28      	ldr	r3, [pc, #160]	; (8004f7c <UART_SetConfig+0x634>)
 8004edc:	e7ef      	b.n	8004ebe <UART_SetConfig+0x576>
 8004ede:	4b28      	ldr	r3, [pc, #160]	; (8004f80 <UART_SetConfig+0x638>)
 8004ee0:	e7ed      	b.n	8004ebe <UART_SetConfig+0x576>
 8004ee2:	4b28      	ldr	r3, [pc, #160]	; (8004f84 <UART_SetConfig+0x63c>)
 8004ee4:	e7eb      	b.n	8004ebe <UART_SetConfig+0x576>
 8004ee6:	4b28      	ldr	r3, [pc, #160]	; (8004f88 <UART_SetConfig+0x640>)
 8004ee8:	e7e9      	b.n	8004ebe <UART_SetConfig+0x576>
 8004eea:	4b28      	ldr	r3, [pc, #160]	; (8004f8c <UART_SetConfig+0x644>)
 8004eec:	e7e7      	b.n	8004ebe <UART_SetConfig+0x576>
 8004eee:	4b28      	ldr	r3, [pc, #160]	; (8004f90 <UART_SetConfig+0x648>)
 8004ef0:	e7e5      	b.n	8004ebe <UART_SetConfig+0x576>
 8004ef2:	4b28      	ldr	r3, [pc, #160]	; (8004f94 <UART_SetConfig+0x64c>)
 8004ef4:	e7e3      	b.n	8004ebe <UART_SetConfig+0x576>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ef6:	f7ff f8c1 	bl	800407c <HAL_RCC_GetSysClockFreq>
 8004efa:	e790      	b.n	8004e1e <UART_SetConfig+0x4d6>
 8004efc:	2201      	movs	r2, #1
 8004efe:	e7aa      	b.n	8004e56 <UART_SetConfig+0x50e>
 8004f00:	2202      	movs	r2, #2
 8004f02:	e7a8      	b.n	8004e56 <UART_SetConfig+0x50e>
 8004f04:	2204      	movs	r2, #4
 8004f06:	e7a6      	b.n	8004e56 <UART_SetConfig+0x50e>
 8004f08:	2206      	movs	r2, #6
 8004f0a:	e7a4      	b.n	8004e56 <UART_SetConfig+0x50e>
 8004f0c:	2208      	movs	r2, #8
 8004f0e:	e7a2      	b.n	8004e56 <UART_SetConfig+0x50e>
 8004f10:	220a      	movs	r2, #10
 8004f12:	e7a0      	b.n	8004e56 <UART_SetConfig+0x50e>
 8004f14:	220c      	movs	r2, #12
 8004f16:	e79e      	b.n	8004e56 <UART_SetConfig+0x50e>
 8004f18:	2210      	movs	r2, #16
 8004f1a:	e79c      	b.n	8004e56 <UART_SetConfig+0x50e>
 8004f1c:	2220      	movs	r2, #32
 8004f1e:	e79a      	b.n	8004e56 <UART_SetConfig+0x50e>
 8004f20:	2240      	movs	r2, #64	; 0x40
 8004f22:	e798      	b.n	8004e56 <UART_SetConfig+0x50e>
 8004f24:	2280      	movs	r2, #128	; 0x80
 8004f26:	e796      	b.n	8004e56 <UART_SetConfig+0x50e>
 8004f28:	28b0aa00 	.word	0x28b0aa00
 8004f2c:	00000000 	.word	0x00000000
 8004f30:	14585500 	.word	0x14585500
 8004f34:	00000000 	.word	0x00000000
 8004f38:	000ffcff 	.word	0x000ffcff
 8004f3c:	00f42400 	.word	0x00f42400
 8004f40:	7a120000 	.word	0x7a120000
 8004f44:	3d090000 	.word	0x3d090000
 8004f48:	1e848000 	.word	0x1e848000
 8004f4c:	186a0000 	.word	0x186a0000
 8004f50:	0f424000 	.word	0x0f424000
 8004f54:	07a12000 	.word	0x07a12000
 8004f58:	03d09000 	.word	0x03d09000
 8004f5c:	01e84800 	.word	0x01e84800
 8004f60:	f4240000 	.word	0xf4240000
 8004f64:	00155500 	.word	0x00155500
 8004f68:	000ccc00 	.word	0x000ccc00
 8004f6c:	000aaa00 	.word	0x000aaa00
 8004f70:	0001e848 	.word	0x0001e848
 8004f74:	007a1200 	.word	0x007a1200
 8004f78:	00516154 	.word	0x00516154
 8004f7c:	003d0900 	.word	0x003d0900
 8004f80:	0030d400 	.word	0x0030d400
 8004f84:	0028b0aa 	.word	0x0028b0aa
 8004f88:	001e8480 	.word	0x001e8480
 8004f8c:	000f4240 	.word	0x000f4240
 8004f90:	0007a120 	.word	0x0007a120
 8004f94:	0003d090 	.word	0x0003d090
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f98:	b1d3      	cbz	r3, 8004fd0 <UART_SetConfig+0x688>
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d01b      	beq.n	8004fd6 <UART_SetConfig+0x68e>
 8004f9e:	2b02      	cmp	r3, #2
 8004fa0:	d01c      	beq.n	8004fdc <UART_SetConfig+0x694>
 8004fa2:	2b03      	cmp	r3, #3
 8004fa4:	d01d      	beq.n	8004fe2 <UART_SetConfig+0x69a>
 8004fa6:	2b04      	cmp	r3, #4
 8004fa8:	d01e      	beq.n	8004fe8 <UART_SetConfig+0x6a0>
 8004faa:	2b05      	cmp	r3, #5
 8004fac:	d01f      	beq.n	8004fee <UART_SetConfig+0x6a6>
 8004fae:	2b06      	cmp	r3, #6
 8004fb0:	d020      	beq.n	8004ff4 <UART_SetConfig+0x6ac>
 8004fb2:	2b07      	cmp	r3, #7
 8004fb4:	d021      	beq.n	8004ffa <UART_SetConfig+0x6b2>
 8004fb6:	2b08      	cmp	r3, #8
 8004fb8:	d022      	beq.n	8005000 <UART_SetConfig+0x6b8>
 8004fba:	2b09      	cmp	r3, #9
 8004fbc:	d023      	beq.n	8005006 <UART_SetConfig+0x6be>
 8004fbe:	2b0a      	cmp	r3, #10
 8004fc0:	d024      	beq.n	800500c <UART_SetConfig+0x6c4>
 8004fc2:	2b0b      	cmp	r3, #11
 8004fc4:	bf14      	ite	ne
 8004fc6:	f44f 3380 	movne.w	r3, #65536	; 0x10000
 8004fca:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8004fce:	e776      	b.n	8004ebe <UART_SetConfig+0x576>
 8004fd0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004fd4:	e773      	b.n	8004ebe <UART_SetConfig+0x576>
 8004fd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fda:	e770      	b.n	8004ebe <UART_SetConfig+0x576>
 8004fdc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004fe0:	e76d      	b.n	8004ebe <UART_SetConfig+0x576>
 8004fe2:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8004fe6:	e76a      	b.n	8004ebe <UART_SetConfig+0x576>
 8004fe8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004fec:	e767      	b.n	8004ebe <UART_SetConfig+0x576>
 8004fee:	f641 1398 	movw	r3, #6552	; 0x1998
 8004ff2:	e764      	b.n	8004ebe <UART_SetConfig+0x576>
 8004ff4:	f241 5354 	movw	r3, #5460	; 0x1554
 8004ff8:	e761      	b.n	8004ebe <UART_SetConfig+0x576>
 8004ffa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ffe:	e75e      	b.n	8004ebe <UART_SetConfig+0x576>
 8005000:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005004:	e75b      	b.n	8004ebe <UART_SetConfig+0x576>
 8005006:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800500a:	e758      	b.n	8004ebe <UART_SetConfig+0x576>
 800500c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005010:	e755      	b.n	8004ebe <UART_SetConfig+0x576>
        ret = HAL_ERROR;
 8005012:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8005014:	2300      	movs	r3, #0
 8005016:	e728      	b.n	8004e6a <UART_SetConfig+0x522>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005018:	f7ff f8a0 	bl	800415c <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800501c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800501e:	2b00      	cmp	r3, #0
 8005020:	d062      	beq.n	80050e8 <UART_SetConfig+0x7a0>
 8005022:	2b01      	cmp	r3, #1
 8005024:	d062      	beq.n	80050ec <UART_SetConfig+0x7a4>
 8005026:	2b02      	cmp	r3, #2
 8005028:	d062      	beq.n	80050f0 <UART_SetConfig+0x7a8>
 800502a:	2b03      	cmp	r3, #3
 800502c:	d062      	beq.n	80050f4 <UART_SetConfig+0x7ac>
 800502e:	2b04      	cmp	r3, #4
 8005030:	d062      	beq.n	80050f8 <UART_SetConfig+0x7b0>
 8005032:	2b05      	cmp	r3, #5
 8005034:	d062      	beq.n	80050fc <UART_SetConfig+0x7b4>
 8005036:	2b06      	cmp	r3, #6
 8005038:	d062      	beq.n	8005100 <UART_SetConfig+0x7b8>
 800503a:	2b07      	cmp	r3, #7
 800503c:	d062      	beq.n	8005104 <UART_SetConfig+0x7bc>
 800503e:	2b08      	cmp	r3, #8
 8005040:	d062      	beq.n	8005108 <UART_SetConfig+0x7c0>
 8005042:	2b09      	cmp	r3, #9
 8005044:	d062      	beq.n	800510c <UART_SetConfig+0x7c4>
 8005046:	2b0a      	cmp	r3, #10
 8005048:	d062      	beq.n	8005110 <UART_SetConfig+0x7c8>
 800504a:	2b0b      	cmp	r3, #11
 800504c:	bf14      	ite	ne
 800504e:	2301      	movne	r3, #1
 8005050:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8005054:	6862      	ldr	r2, [r4, #4]
 8005056:	fbb0 f3f3 	udiv	r3, r0, r3
 800505a:	e01c      	b.n	8005096 <UART_SetConfig+0x74e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800505c:	b35b      	cbz	r3, 80050b6 <UART_SetConfig+0x76e>
 800505e:	2b01      	cmp	r3, #1
 8005060:	d02b      	beq.n	80050ba <UART_SetConfig+0x772>
 8005062:	2b02      	cmp	r3, #2
 8005064:	d02b      	beq.n	80050be <UART_SetConfig+0x776>
 8005066:	2b03      	cmp	r3, #3
 8005068:	d02b      	beq.n	80050c2 <UART_SetConfig+0x77a>
 800506a:	2b04      	cmp	r3, #4
 800506c:	d02b      	beq.n	80050c6 <UART_SetConfig+0x77e>
 800506e:	2b05      	cmp	r3, #5
 8005070:	d02b      	beq.n	80050ca <UART_SetConfig+0x782>
 8005072:	2b06      	cmp	r3, #6
 8005074:	d02b      	beq.n	80050ce <UART_SetConfig+0x786>
 8005076:	2b07      	cmp	r3, #7
 8005078:	d02b      	beq.n	80050d2 <UART_SetConfig+0x78a>
 800507a:	2b08      	cmp	r3, #8
 800507c:	d02b      	beq.n	80050d6 <UART_SetConfig+0x78e>
 800507e:	2b09      	cmp	r3, #9
 8005080:	d02b      	beq.n	80050da <UART_SetConfig+0x792>
 8005082:	2b0a      	cmp	r3, #10
 8005084:	d02b      	beq.n	80050de <UART_SetConfig+0x796>
 8005086:	4a45      	ldr	r2, [pc, #276]	; (800519c <UART_SetConfig+0x854>)
 8005088:	f24f 4124 	movw	r1, #62500	; 0xf424
 800508c:	2b0b      	cmp	r3, #11
 800508e:	bf14      	ite	ne
 8005090:	4613      	movne	r3, r2
 8005092:	460b      	moveq	r3, r1
 8005094:	6862      	ldr	r2, [r4, #4]
 8005096:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800509a:	fbb3 f3f2 	udiv	r3, r3, r2
  HAL_StatusTypeDef ret               = HAL_OK;
 800509e:	2200      	movs	r2, #0
 80050a0:	b29b      	uxth	r3, r3
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050a2:	f1a3 0010 	sub.w	r0, r3, #16
 80050a6:	f64f 71ef 	movw	r1, #65519	; 0xffef
 80050aa:	4288      	cmp	r0, r1
 80050ac:	f63f aca5 	bhi.w	80049fa <UART_SetConfig+0xb2>
      huart->Instance->BRR = usartdiv;
 80050b0:	6821      	ldr	r1, [r4, #0]
 80050b2:	60cb      	str	r3, [r1, #12]
 80050b4:	e4a2      	b.n	80049fc <UART_SetConfig+0xb4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80050b6:	4b39      	ldr	r3, [pc, #228]	; (800519c <UART_SetConfig+0x854>)
 80050b8:	e7ec      	b.n	8005094 <UART_SetConfig+0x74c>
 80050ba:	4b39      	ldr	r3, [pc, #228]	; (80051a0 <UART_SetConfig+0x858>)
 80050bc:	e7ea      	b.n	8005094 <UART_SetConfig+0x74c>
 80050be:	4b39      	ldr	r3, [pc, #228]	; (80051a4 <UART_SetConfig+0x85c>)
 80050c0:	e7e8      	b.n	8005094 <UART_SetConfig+0x74c>
 80050c2:	4b39      	ldr	r3, [pc, #228]	; (80051a8 <UART_SetConfig+0x860>)
 80050c4:	e7e6      	b.n	8005094 <UART_SetConfig+0x74c>
 80050c6:	4b39      	ldr	r3, [pc, #228]	; (80051ac <UART_SetConfig+0x864>)
 80050c8:	e7e4      	b.n	8005094 <UART_SetConfig+0x74c>
 80050ca:	4b39      	ldr	r3, [pc, #228]	; (80051b0 <UART_SetConfig+0x868>)
 80050cc:	e7e2      	b.n	8005094 <UART_SetConfig+0x74c>
 80050ce:	4b39      	ldr	r3, [pc, #228]	; (80051b4 <UART_SetConfig+0x86c>)
 80050d0:	e7e0      	b.n	8005094 <UART_SetConfig+0x74c>
 80050d2:	4b39      	ldr	r3, [pc, #228]	; (80051b8 <UART_SetConfig+0x870>)
 80050d4:	e7de      	b.n	8005094 <UART_SetConfig+0x74c>
 80050d6:	4b39      	ldr	r3, [pc, #228]	; (80051bc <UART_SetConfig+0x874>)
 80050d8:	e7dc      	b.n	8005094 <UART_SetConfig+0x74c>
 80050da:	4b39      	ldr	r3, [pc, #228]	; (80051c0 <UART_SetConfig+0x878>)
 80050dc:	e7da      	b.n	8005094 <UART_SetConfig+0x74c>
 80050de:	4b39      	ldr	r3, [pc, #228]	; (80051c4 <UART_SetConfig+0x87c>)
 80050e0:	e7d8      	b.n	8005094 <UART_SetConfig+0x74c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80050e2:	f7fe ffcb 	bl	800407c <HAL_RCC_GetSysClockFreq>
 80050e6:	e799      	b.n	800501c <UART_SetConfig+0x6d4>
 80050e8:	2301      	movs	r3, #1
 80050ea:	e7b3      	b.n	8005054 <UART_SetConfig+0x70c>
 80050ec:	2302      	movs	r3, #2
 80050ee:	e7b1      	b.n	8005054 <UART_SetConfig+0x70c>
 80050f0:	2304      	movs	r3, #4
 80050f2:	e7af      	b.n	8005054 <UART_SetConfig+0x70c>
 80050f4:	2306      	movs	r3, #6
 80050f6:	e7ad      	b.n	8005054 <UART_SetConfig+0x70c>
 80050f8:	2308      	movs	r3, #8
 80050fa:	e7ab      	b.n	8005054 <UART_SetConfig+0x70c>
 80050fc:	230a      	movs	r3, #10
 80050fe:	e7a9      	b.n	8005054 <UART_SetConfig+0x70c>
 8005100:	230c      	movs	r3, #12
 8005102:	e7a7      	b.n	8005054 <UART_SetConfig+0x70c>
 8005104:	2310      	movs	r3, #16
 8005106:	e7a5      	b.n	8005054 <UART_SetConfig+0x70c>
 8005108:	2320      	movs	r3, #32
 800510a:	e7a3      	b.n	8005054 <UART_SetConfig+0x70c>
 800510c:	2340      	movs	r3, #64	; 0x40
 800510e:	e7a1      	b.n	8005054 <UART_SetConfig+0x70c>
 8005110:	2380      	movs	r3, #128	; 0x80
 8005112:	e79f      	b.n	8005054 <UART_SetConfig+0x70c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005114:	b1cb      	cbz	r3, 800514a <UART_SetConfig+0x802>
 8005116:	2b01      	cmp	r3, #1
 8005118:	d01a      	beq.n	8005150 <UART_SetConfig+0x808>
 800511a:	2b02      	cmp	r3, #2
 800511c:	d01b      	beq.n	8005156 <UART_SetConfig+0x80e>
 800511e:	2b03      	cmp	r3, #3
 8005120:	d01c      	beq.n	800515c <UART_SetConfig+0x814>
 8005122:	2b04      	cmp	r3, #4
 8005124:	d01d      	beq.n	8005162 <UART_SetConfig+0x81a>
 8005126:	2b05      	cmp	r3, #5
 8005128:	d01e      	beq.n	8005168 <UART_SetConfig+0x820>
 800512a:	2b06      	cmp	r3, #6
 800512c:	d01f      	beq.n	800516e <UART_SetConfig+0x826>
 800512e:	2b07      	cmp	r3, #7
 8005130:	d020      	beq.n	8005174 <UART_SetConfig+0x82c>
 8005132:	2b08      	cmp	r3, #8
 8005134:	d021      	beq.n	800517a <UART_SetConfig+0x832>
 8005136:	2b09      	cmp	r3, #9
 8005138:	d022      	beq.n	8005180 <UART_SetConfig+0x838>
 800513a:	2b0a      	cmp	r3, #10
 800513c:	d023      	beq.n	8005186 <UART_SetConfig+0x83e>
 800513e:	2b0b      	cmp	r3, #11
 8005140:	bf14      	ite	ne
 8005142:	f44f 4300 	movne.w	r3, #32768	; 0x8000
 8005146:	2380      	moveq	r3, #128	; 0x80
 8005148:	e7a4      	b.n	8005094 <UART_SetConfig+0x74c>
 800514a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800514e:	e7a1      	b.n	8005094 <UART_SetConfig+0x74c>
 8005150:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005154:	e79e      	b.n	8005094 <UART_SetConfig+0x74c>
 8005156:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800515a:	e79b      	b.n	8005094 <UART_SetConfig+0x74c>
 800515c:	f241 5355 	movw	r3, #5461	; 0x1555
 8005160:	e798      	b.n	8005094 <UART_SetConfig+0x74c>
 8005162:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005166:	e795      	b.n	8005094 <UART_SetConfig+0x74c>
 8005168:	f640 43cc 	movw	r3, #3276	; 0xccc
 800516c:	e792      	b.n	8005094 <UART_SetConfig+0x74c>
 800516e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8005172:	e78f      	b.n	8005094 <UART_SetConfig+0x74c>
 8005174:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005178:	e78c      	b.n	8005094 <UART_SetConfig+0x74c>
 800517a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800517e:	e789      	b.n	8005094 <UART_SetConfig+0x74c>
 8005180:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005184:	e786      	b.n	8005094 <UART_SetConfig+0x74c>
 8005186:	f44f 7380 	mov.w	r3, #256	; 0x100
 800518a:	e783      	b.n	8005094 <UART_SetConfig+0x74c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800518c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8005190:	f43f af3f 	beq.w	8005012 <UART_SetConfig+0x6ca>
        ret = HAL_ERROR;
 8005194:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8005196:	2300      	movs	r3, #0
 8005198:	e783      	b.n	80050a2 <UART_SetConfig+0x75a>
 800519a:	bf00      	nop
 800519c:	00f42400 	.word	0x00f42400
 80051a0:	007a1200 	.word	0x007a1200
 80051a4:	003d0900 	.word	0x003d0900
 80051a8:	0028b0aa 	.word	0x0028b0aa
 80051ac:	001e8480 	.word	0x001e8480
 80051b0:	00186a00 	.word	0x00186a00
 80051b4:	00145855 	.word	0x00145855
 80051b8:	000f4240 	.word	0x000f4240
 80051bc:	0007a120 	.word	0x0007a120
 80051c0:	0003d090 	.word	0x0003d090
 80051c4:	0001e848 	.word	0x0001e848

080051c8 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80051c8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80051ca:	07da      	lsls	r2, r3, #31
{
 80051cc:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80051ce:	d506      	bpl.n	80051de <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80051d0:	6801      	ldr	r1, [r0, #0]
 80051d2:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80051d4:	684a      	ldr	r2, [r1, #4]
 80051d6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80051da:	4322      	orrs	r2, r4
 80051dc:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80051de:	079c      	lsls	r4, r3, #30
 80051e0:	d506      	bpl.n	80051f0 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80051e2:	6801      	ldr	r1, [r0, #0]
 80051e4:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80051e6:	684a      	ldr	r2, [r1, #4]
 80051e8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80051ec:	4322      	orrs	r2, r4
 80051ee:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80051f0:	0759      	lsls	r1, r3, #29
 80051f2:	d506      	bpl.n	8005202 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80051f4:	6801      	ldr	r1, [r0, #0]
 80051f6:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80051f8:	684a      	ldr	r2, [r1, #4]
 80051fa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80051fe:	4322      	orrs	r2, r4
 8005200:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005202:	071a      	lsls	r2, r3, #28
 8005204:	d506      	bpl.n	8005214 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005206:	6801      	ldr	r1, [r0, #0]
 8005208:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800520a:	684a      	ldr	r2, [r1, #4]
 800520c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005210:	4322      	orrs	r2, r4
 8005212:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005214:	06dc      	lsls	r4, r3, #27
 8005216:	d506      	bpl.n	8005226 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005218:	6801      	ldr	r1, [r0, #0]
 800521a:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800521c:	688a      	ldr	r2, [r1, #8]
 800521e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005222:	4322      	orrs	r2, r4
 8005224:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005226:	0699      	lsls	r1, r3, #26
 8005228:	d506      	bpl.n	8005238 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800522a:	6801      	ldr	r1, [r0, #0]
 800522c:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800522e:	688a      	ldr	r2, [r1, #8]
 8005230:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005234:	4322      	orrs	r2, r4
 8005236:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005238:	065a      	lsls	r2, r3, #25
 800523a:	d50f      	bpl.n	800525c <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800523c:	6801      	ldr	r1, [r0, #0]
 800523e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8005240:	684a      	ldr	r2, [r1, #4]
 8005242:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8005246:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005248:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800524c:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800524e:	d105      	bne.n	800525c <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005250:	684a      	ldr	r2, [r1, #4]
 8005252:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8005254:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8005258:	4322      	orrs	r2, r4
 800525a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800525c:	061b      	lsls	r3, r3, #24
 800525e:	d506      	bpl.n	800526e <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005260:	6802      	ldr	r2, [r0, #0]
 8005262:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8005264:	6853      	ldr	r3, [r2, #4]
 8005266:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800526a:	430b      	orrs	r3, r1
 800526c:	6053      	str	r3, [r2, #4]
 800526e:	bd10      	pop	{r4, pc}

08005270 <UART_WaitOnFlagUntilTimeout>:
{
 8005270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005274:	9d06      	ldr	r5, [sp, #24]
 8005276:	4604      	mov	r4, r0
 8005278:	460f      	mov	r7, r1
 800527a:	4616      	mov	r6, r2
 800527c:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800527e:	6821      	ldr	r1, [r4, #0]
 8005280:	69ca      	ldr	r2, [r1, #28]
 8005282:	ea37 0302 	bics.w	r3, r7, r2
 8005286:	bf0c      	ite	eq
 8005288:	2201      	moveq	r2, #1
 800528a:	2200      	movne	r2, #0
 800528c:	42b2      	cmp	r2, r6
 800528e:	d002      	beq.n	8005296 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8005290:	2000      	movs	r0, #0
}
 8005292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8005296:	1c6b      	adds	r3, r5, #1
 8005298:	d0f2      	beq.n	8005280 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800529a:	f7fd ffaf 	bl	80031fc <HAL_GetTick>
 800529e:	eba0 0008 	sub.w	r0, r0, r8
 80052a2:	4285      	cmp	r5, r0
 80052a4:	d301      	bcc.n	80052aa <UART_WaitOnFlagUntilTimeout+0x3a>
 80052a6:	2d00      	cmp	r5, #0
 80052a8:	d1e9      	bne.n	800527e <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80052aa:	6823      	ldr	r3, [r4, #0]
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80052b2:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052b4:	689a      	ldr	r2, [r3, #8]
 80052b6:	f022 0201 	bic.w	r2, r2, #1
 80052ba:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 80052bc:	2320      	movs	r3, #32
 80052be:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80052c2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        __HAL_UNLOCK(huart);
 80052c6:	2300      	movs	r3, #0
 80052c8:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
 80052cc:	2003      	movs	r0, #3
 80052ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080052d2 <UART_CheckIdleState>:
{
 80052d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80052d4:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052d6:	2600      	movs	r6, #0
 80052d8:	f8c0 6088 	str.w	r6, [r0, #136]	; 0x88
  tickstart = HAL_GetTick();
 80052dc:	f7fd ff8e 	bl	80031fc <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80052e0:	6823      	ldr	r3, [r4, #0]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 80052e6:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80052e8:	d417      	bmi.n	800531a <UART_CheckIdleState+0x48>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80052ea:	6823      	ldr	r3, [r4, #0]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	075b      	lsls	r3, r3, #29
 80052f0:	d50a      	bpl.n	8005308 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052f2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80052f6:	9300      	str	r3, [sp, #0]
 80052f8:	2200      	movs	r2, #0
 80052fa:	462b      	mov	r3, r5
 80052fc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005300:	4620      	mov	r0, r4
 8005302:	f7ff ffb5 	bl	8005270 <UART_WaitOnFlagUntilTimeout>
 8005306:	b9a0      	cbnz	r0, 8005332 <UART_CheckIdleState+0x60>
  huart->gState = HAL_UART_STATE_READY;
 8005308:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800530a:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800530c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UNLOCK(huart);
 8005310:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005314:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  return HAL_OK;
 8005318:	e00c      	b.n	8005334 <UART_CheckIdleState+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800531a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800531e:	9300      	str	r3, [sp, #0]
 8005320:	4632      	mov	r2, r6
 8005322:	4603      	mov	r3, r0
 8005324:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005328:	4620      	mov	r0, r4
 800532a:	f7ff ffa1 	bl	8005270 <UART_WaitOnFlagUntilTimeout>
 800532e:	2800      	cmp	r0, #0
 8005330:	d0db      	beq.n	80052ea <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 8005332:	2003      	movs	r0, #3
}
 8005334:	b002      	add	sp, #8
 8005336:	bd70      	pop	{r4, r5, r6, pc}

08005338 <HAL_UART_Init>:
{
 8005338:	b510      	push	{r4, lr}
  if (huart == NULL)
 800533a:	4604      	mov	r4, r0
 800533c:	b350      	cbz	r0, 8005394 <HAL_UART_Init+0x5c>
  if (huart->gState == HAL_UART_STATE_RESET)
 800533e:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8005342:	b91b      	cbnz	r3, 800534c <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 8005344:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    HAL_UART_MspInit(huart);
 8005348:	f7fb fe6a 	bl	8001020 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800534c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800534e:	2324      	movs	r3, #36	; 0x24
 8005350:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UART_DISABLE(huart);
 8005354:	6813      	ldr	r3, [r2, #0]
 8005356:	f023 0301 	bic.w	r3, r3, #1
 800535a:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800535c:	4620      	mov	r0, r4
 800535e:	f7ff faf3 	bl	8004948 <UART_SetConfig>
 8005362:	2801      	cmp	r0, #1
 8005364:	d016      	beq.n	8005394 <HAL_UART_Init+0x5c>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005366:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005368:	b113      	cbz	r3, 8005370 <HAL_UART_Init+0x38>
    UART_AdvFeatureConfig(huart);
 800536a:	4620      	mov	r0, r4
 800536c:	f7ff ff2c 	bl	80051c8 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005370:	6823      	ldr	r3, [r4, #0]
 8005372:	685a      	ldr	r2, [r3, #4]
 8005374:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005378:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800537a:	689a      	ldr	r2, [r3, #8]
 800537c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005380:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8005388:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 800538a:	601a      	str	r2, [r3, #0]
}
 800538c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8005390:	f7ff bf9f 	b.w	80052d2 <UART_CheckIdleState>
}
 8005394:	2001      	movs	r0, #1
 8005396:	bd10      	pop	{r4, pc}

08005398 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005398:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800539a:	2203      	movs	r2, #3
 800539c:	f88d 2003 	strb.w	r2, [sp, #3]
 80053a0:	2207      	movs	r2, #7
 80053a2:	f88d 2004 	strb.w	r2, [sp, #4]
 80053a6:	2200      	movs	r2, #0
 80053a8:	f88d 2006 	strb.w	r2, [sp, #6]
 80053ac:	f88d 2007 	strb.w	r2, [sp, #7]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80053b0:	2208      	movs	r2, #8
 80053b2:	f88d 2008 	strb.w	r2, [sp, #8]
 80053b6:	f88d 200c 	strb.w	r2, [sp, #12]

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80053ba:	6e42      	ldr	r2, [r0, #100]	; 0x64
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80053bc:	2301      	movs	r3, #1
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80053be:	2104      	movs	r1, #4
 80053c0:	2402      	movs	r4, #2
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80053c2:	f88d 3000 	strb.w	r3, [sp]
 80053c6:	f88d 3001 	strb.w	r3, [sp, #1]
 80053ca:	f88d 3002 	strb.w	r3, [sp, #2]
 80053ce:	f88d 3005 	strb.w	r3, [sp, #5]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80053d2:	f88d 1009 	strb.w	r1, [sp, #9]
 80053d6:	f88d 400a 	strb.w	r4, [sp, #10]
 80053da:	f88d 100b 	strb.w	r1, [sp, #11]
 80053de:	f88d 300d 	strb.w	r3, [sp, #13]
 80053e2:	f88d 300e 	strb.w	r3, [sp, #14]
 80053e6:	f88d 300f 	strb.w	r3, [sp, #15]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80053ea:	b92a      	cbnz	r2, 80053f8 <UARTEx_SetNbDataToProcess+0x60>
  {
    huart->NbTxDataToProcess = 1U;
 80053ec:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80053f0:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 80053f4:	b004      	add	sp, #16
 80053f6:	bd10      	pop	{r4, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80053f8:	6802      	ldr	r2, [r0, #0]
 80053fa:	6893      	ldr	r3, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80053fc:	6891      	ldr	r1, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80053fe:	aa04      	add	r2, sp, #16
 8005400:	eb02 7151 	add.w	r1, r2, r1, lsr #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8005404:	f3c3 6342 	ubfx	r3, r3, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8005408:	f811 2c10 	ldrb.w	r2, [r1, #-16]
 800540c:	f811 1c08 	ldrb.w	r1, [r1, #-8]
 8005410:	00d2      	lsls	r2, r2, #3
 8005412:	fb92 f2f1 	sdiv	r2, r2, r1
 8005416:	f8a0 206a 	strh.w	r2, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800541a:	aa04      	add	r2, sp, #16
 800541c:	4413      	add	r3, r2
 800541e:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8005422:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8005426:	00d2      	lsls	r2, r2, #3
 8005428:	fb92 f3f3 	sdiv	r3, r2, r3
 800542c:	e7e0      	b.n	80053f0 <UARTEx_SetNbDataToProcess+0x58>

0800542e <HAL_UARTEx_WakeupCallback>:
 800542e:	4770      	bx	lr

08005430 <HAL_UARTEx_RxFifoFullCallback>:
 8005430:	4770      	bx	lr

08005432 <HAL_UARTEx_TxFifoEmptyCallback>:
{
 8005432:	4770      	bx	lr

08005434 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 8005434:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8005438:	2b01      	cmp	r3, #1
 800543a:	d014      	beq.n	8005466 <HAL_UARTEx_DisableFifoMode+0x32>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800543c:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800543e:	2324      	movs	r3, #36	; 0x24
 8005440:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005444:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8005446:	6813      	ldr	r3, [r2, #0]
 8005448:	f023 0301 	bic.w	r3, r3, #1
 800544c:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800544e:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005452:	2300      	movs	r3, #0
 8005454:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005456:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8005458:	2220      	movs	r2, #32
 800545a:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  __HAL_UNLOCK(huart);
 800545e:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  return HAL_OK;
 8005462:	4618      	mov	r0, r3
 8005464:	4770      	bx	lr
  __HAL_LOCK(huart);
 8005466:	2002      	movs	r0, #2
}
 8005468:	4770      	bx	lr

0800546a <HAL_UARTEx_SetTxFifoThreshold>:
{
 800546a:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800546c:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8005470:	2b01      	cmp	r3, #1
{
 8005472:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8005474:	d01b      	beq.n	80054ae <HAL_UARTEx_SetTxFifoThreshold+0x44>
 8005476:	2301      	movs	r3, #1
 8005478:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_BUSY;
 800547c:	2324      	movs	r3, #36	; 0x24
 800547e:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005482:	6803      	ldr	r3, [r0, #0]
 8005484:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	f022 0201 	bic.w	r2, r2, #1
 800548c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800548e:	689a      	ldr	r2, [r3, #8]
 8005490:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8005494:	4311      	orrs	r1, r2
 8005496:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 8005498:	f7ff ff7e 	bl	8005398 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800549c:	6803      	ldr	r3, [r0, #0]
 800549e:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80054a0:	2320      	movs	r3, #32
 80054a2:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  __HAL_UNLOCK(huart);
 80054a6:	2000      	movs	r0, #0
 80054a8:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  return HAL_OK;
 80054ac:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 80054ae:	2002      	movs	r0, #2
}
 80054b0:	bd38      	pop	{r3, r4, r5, pc}

080054b2 <HAL_UARTEx_SetRxFifoThreshold>:
{
 80054b2:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 80054b4:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 80054b8:	2b01      	cmp	r3, #1
{
 80054ba:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 80054bc:	d01b      	beq.n	80054f6 <HAL_UARTEx_SetRxFifoThreshold+0x44>
 80054be:	2301      	movs	r3, #1
 80054c0:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_BUSY;
 80054c4:	2324      	movs	r3, #36	; 0x24
 80054c6:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80054ca:	6803      	ldr	r3, [r0, #0]
 80054cc:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	f022 0201 	bic.w	r2, r2, #1
 80054d4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80054d6:	689a      	ldr	r2, [r3, #8]
 80054d8:	f022 6260 	bic.w	r2, r2, #234881024	; 0xe000000
 80054dc:	4311      	orrs	r1, r2
 80054de:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 80054e0:	f7ff ff5a 	bl	8005398 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80054e4:	6803      	ldr	r3, [r0, #0]
 80054e6:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80054e8:	2320      	movs	r3, #32
 80054ea:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  __HAL_UNLOCK(huart);
 80054ee:	2000      	movs	r0, #0
 80054f0:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  return HAL_OK;
 80054f4:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 80054f6:	2002      	movs	r0, #2
}
 80054f8:	bd38      	pop	{r3, r4, r5, pc}
	...

080054fc <__libc_init_array>:
 80054fc:	b570      	push	{r4, r5, r6, lr}
 80054fe:	4e0d      	ldr	r6, [pc, #52]	; (8005534 <__libc_init_array+0x38>)
 8005500:	4c0d      	ldr	r4, [pc, #52]	; (8005538 <__libc_init_array+0x3c>)
 8005502:	1ba4      	subs	r4, r4, r6
 8005504:	10a4      	asrs	r4, r4, #2
 8005506:	2500      	movs	r5, #0
 8005508:	42a5      	cmp	r5, r4
 800550a:	d109      	bne.n	8005520 <__libc_init_array+0x24>
 800550c:	4e0b      	ldr	r6, [pc, #44]	; (800553c <__libc_init_array+0x40>)
 800550e:	4c0c      	ldr	r4, [pc, #48]	; (8005540 <__libc_init_array+0x44>)
 8005510:	f000 ffbe 	bl	8006490 <_init>
 8005514:	1ba4      	subs	r4, r4, r6
 8005516:	10a4      	asrs	r4, r4, #2
 8005518:	2500      	movs	r5, #0
 800551a:	42a5      	cmp	r5, r4
 800551c:	d105      	bne.n	800552a <__libc_init_array+0x2e>
 800551e:	bd70      	pop	{r4, r5, r6, pc}
 8005520:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005524:	4798      	blx	r3
 8005526:	3501      	adds	r5, #1
 8005528:	e7ee      	b.n	8005508 <__libc_init_array+0xc>
 800552a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800552e:	4798      	blx	r3
 8005530:	3501      	adds	r5, #1
 8005532:	e7f2      	b.n	800551a <__libc_init_array+0x1e>
 8005534:	08006a48 	.word	0x08006a48
 8005538:	08006a48 	.word	0x08006a48
 800553c:	08006a48 	.word	0x08006a48
 8005540:	08006a4c 	.word	0x08006a4c

08005544 <memcpy>:
 8005544:	b510      	push	{r4, lr}
 8005546:	1e43      	subs	r3, r0, #1
 8005548:	440a      	add	r2, r1
 800554a:	4291      	cmp	r1, r2
 800554c:	d100      	bne.n	8005550 <memcpy+0xc>
 800554e:	bd10      	pop	{r4, pc}
 8005550:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005554:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005558:	e7f7      	b.n	800554a <memcpy+0x6>

0800555a <memset>:
 800555a:	4402      	add	r2, r0
 800555c:	4603      	mov	r3, r0
 800555e:	4293      	cmp	r3, r2
 8005560:	d100      	bne.n	8005564 <memset+0xa>
 8005562:	4770      	bx	lr
 8005564:	f803 1b01 	strb.w	r1, [r3], #1
 8005568:	e7f9      	b.n	800555e <memset+0x4>
	...

0800556c <iprintf>:
 800556c:	b40f      	push	{r0, r1, r2, r3}
 800556e:	4b0a      	ldr	r3, [pc, #40]	; (8005598 <iprintf+0x2c>)
 8005570:	b513      	push	{r0, r1, r4, lr}
 8005572:	681c      	ldr	r4, [r3, #0]
 8005574:	b124      	cbz	r4, 8005580 <iprintf+0x14>
 8005576:	69a3      	ldr	r3, [r4, #24]
 8005578:	b913      	cbnz	r3, 8005580 <iprintf+0x14>
 800557a:	4620      	mov	r0, r4
 800557c:	f000 fa24 	bl	80059c8 <__sinit>
 8005580:	ab05      	add	r3, sp, #20
 8005582:	9a04      	ldr	r2, [sp, #16]
 8005584:	68a1      	ldr	r1, [r4, #8]
 8005586:	9301      	str	r3, [sp, #4]
 8005588:	4620      	mov	r0, r4
 800558a:	f000 fbe1 	bl	8005d50 <_vfiprintf_r>
 800558e:	b002      	add	sp, #8
 8005590:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005594:	b004      	add	sp, #16
 8005596:	4770      	bx	lr
 8005598:	2000004c 	.word	0x2000004c

0800559c <_puts_r>:
 800559c:	b570      	push	{r4, r5, r6, lr}
 800559e:	460e      	mov	r6, r1
 80055a0:	4605      	mov	r5, r0
 80055a2:	b118      	cbz	r0, 80055ac <_puts_r+0x10>
 80055a4:	6983      	ldr	r3, [r0, #24]
 80055a6:	b90b      	cbnz	r3, 80055ac <_puts_r+0x10>
 80055a8:	f000 fa0e 	bl	80059c8 <__sinit>
 80055ac:	69ab      	ldr	r3, [r5, #24]
 80055ae:	68ac      	ldr	r4, [r5, #8]
 80055b0:	b913      	cbnz	r3, 80055b8 <_puts_r+0x1c>
 80055b2:	4628      	mov	r0, r5
 80055b4:	f000 fa08 	bl	80059c8 <__sinit>
 80055b8:	4b23      	ldr	r3, [pc, #140]	; (8005648 <_puts_r+0xac>)
 80055ba:	429c      	cmp	r4, r3
 80055bc:	d117      	bne.n	80055ee <_puts_r+0x52>
 80055be:	686c      	ldr	r4, [r5, #4]
 80055c0:	89a3      	ldrh	r3, [r4, #12]
 80055c2:	071b      	lsls	r3, r3, #28
 80055c4:	d51d      	bpl.n	8005602 <_puts_r+0x66>
 80055c6:	6923      	ldr	r3, [r4, #16]
 80055c8:	b1db      	cbz	r3, 8005602 <_puts_r+0x66>
 80055ca:	3e01      	subs	r6, #1
 80055cc:	68a3      	ldr	r3, [r4, #8]
 80055ce:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80055d2:	3b01      	subs	r3, #1
 80055d4:	60a3      	str	r3, [r4, #8]
 80055d6:	b9e9      	cbnz	r1, 8005614 <_puts_r+0x78>
 80055d8:	2b00      	cmp	r3, #0
 80055da:	da2e      	bge.n	800563a <_puts_r+0x9e>
 80055dc:	4622      	mov	r2, r4
 80055de:	210a      	movs	r1, #10
 80055e0:	4628      	mov	r0, r5
 80055e2:	f000 f83f 	bl	8005664 <__swbuf_r>
 80055e6:	3001      	adds	r0, #1
 80055e8:	d011      	beq.n	800560e <_puts_r+0x72>
 80055ea:	200a      	movs	r0, #10
 80055ec:	bd70      	pop	{r4, r5, r6, pc}
 80055ee:	4b17      	ldr	r3, [pc, #92]	; (800564c <_puts_r+0xb0>)
 80055f0:	429c      	cmp	r4, r3
 80055f2:	d101      	bne.n	80055f8 <_puts_r+0x5c>
 80055f4:	68ac      	ldr	r4, [r5, #8]
 80055f6:	e7e3      	b.n	80055c0 <_puts_r+0x24>
 80055f8:	4b15      	ldr	r3, [pc, #84]	; (8005650 <_puts_r+0xb4>)
 80055fa:	429c      	cmp	r4, r3
 80055fc:	bf08      	it	eq
 80055fe:	68ec      	ldreq	r4, [r5, #12]
 8005600:	e7de      	b.n	80055c0 <_puts_r+0x24>
 8005602:	4621      	mov	r1, r4
 8005604:	4628      	mov	r0, r5
 8005606:	f000 f87f 	bl	8005708 <__swsetup_r>
 800560a:	2800      	cmp	r0, #0
 800560c:	d0dd      	beq.n	80055ca <_puts_r+0x2e>
 800560e:	f04f 30ff 	mov.w	r0, #4294967295
 8005612:	bd70      	pop	{r4, r5, r6, pc}
 8005614:	2b00      	cmp	r3, #0
 8005616:	da04      	bge.n	8005622 <_puts_r+0x86>
 8005618:	69a2      	ldr	r2, [r4, #24]
 800561a:	4293      	cmp	r3, r2
 800561c:	db06      	blt.n	800562c <_puts_r+0x90>
 800561e:	290a      	cmp	r1, #10
 8005620:	d004      	beq.n	800562c <_puts_r+0x90>
 8005622:	6823      	ldr	r3, [r4, #0]
 8005624:	1c5a      	adds	r2, r3, #1
 8005626:	6022      	str	r2, [r4, #0]
 8005628:	7019      	strb	r1, [r3, #0]
 800562a:	e7cf      	b.n	80055cc <_puts_r+0x30>
 800562c:	4622      	mov	r2, r4
 800562e:	4628      	mov	r0, r5
 8005630:	f000 f818 	bl	8005664 <__swbuf_r>
 8005634:	3001      	adds	r0, #1
 8005636:	d1c9      	bne.n	80055cc <_puts_r+0x30>
 8005638:	e7e9      	b.n	800560e <_puts_r+0x72>
 800563a:	6823      	ldr	r3, [r4, #0]
 800563c:	200a      	movs	r0, #10
 800563e:	1c5a      	adds	r2, r3, #1
 8005640:	6022      	str	r2, [r4, #0]
 8005642:	7018      	strb	r0, [r3, #0]
 8005644:	bd70      	pop	{r4, r5, r6, pc}
 8005646:	bf00      	nop
 8005648:	080069c8 	.word	0x080069c8
 800564c:	080069e8 	.word	0x080069e8
 8005650:	080069a8 	.word	0x080069a8

08005654 <puts>:
 8005654:	4b02      	ldr	r3, [pc, #8]	; (8005660 <puts+0xc>)
 8005656:	4601      	mov	r1, r0
 8005658:	6818      	ldr	r0, [r3, #0]
 800565a:	f7ff bf9f 	b.w	800559c <_puts_r>
 800565e:	bf00      	nop
 8005660:	2000004c 	.word	0x2000004c

08005664 <__swbuf_r>:
 8005664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005666:	460e      	mov	r6, r1
 8005668:	4614      	mov	r4, r2
 800566a:	4605      	mov	r5, r0
 800566c:	b118      	cbz	r0, 8005676 <__swbuf_r+0x12>
 800566e:	6983      	ldr	r3, [r0, #24]
 8005670:	b90b      	cbnz	r3, 8005676 <__swbuf_r+0x12>
 8005672:	f000 f9a9 	bl	80059c8 <__sinit>
 8005676:	4b21      	ldr	r3, [pc, #132]	; (80056fc <__swbuf_r+0x98>)
 8005678:	429c      	cmp	r4, r3
 800567a:	d12a      	bne.n	80056d2 <__swbuf_r+0x6e>
 800567c:	686c      	ldr	r4, [r5, #4]
 800567e:	69a3      	ldr	r3, [r4, #24]
 8005680:	60a3      	str	r3, [r4, #8]
 8005682:	89a3      	ldrh	r3, [r4, #12]
 8005684:	071a      	lsls	r2, r3, #28
 8005686:	d52e      	bpl.n	80056e6 <__swbuf_r+0x82>
 8005688:	6923      	ldr	r3, [r4, #16]
 800568a:	b363      	cbz	r3, 80056e6 <__swbuf_r+0x82>
 800568c:	6923      	ldr	r3, [r4, #16]
 800568e:	6820      	ldr	r0, [r4, #0]
 8005690:	1ac0      	subs	r0, r0, r3
 8005692:	6963      	ldr	r3, [r4, #20]
 8005694:	b2f6      	uxtb	r6, r6
 8005696:	4298      	cmp	r0, r3
 8005698:	4637      	mov	r7, r6
 800569a:	db04      	blt.n	80056a6 <__swbuf_r+0x42>
 800569c:	4621      	mov	r1, r4
 800569e:	4628      	mov	r0, r5
 80056a0:	f000 f928 	bl	80058f4 <_fflush_r>
 80056a4:	bb28      	cbnz	r0, 80056f2 <__swbuf_r+0x8e>
 80056a6:	68a3      	ldr	r3, [r4, #8]
 80056a8:	3b01      	subs	r3, #1
 80056aa:	60a3      	str	r3, [r4, #8]
 80056ac:	6823      	ldr	r3, [r4, #0]
 80056ae:	1c5a      	adds	r2, r3, #1
 80056b0:	6022      	str	r2, [r4, #0]
 80056b2:	701e      	strb	r6, [r3, #0]
 80056b4:	6963      	ldr	r3, [r4, #20]
 80056b6:	3001      	adds	r0, #1
 80056b8:	4298      	cmp	r0, r3
 80056ba:	d004      	beq.n	80056c6 <__swbuf_r+0x62>
 80056bc:	89a3      	ldrh	r3, [r4, #12]
 80056be:	07db      	lsls	r3, r3, #31
 80056c0:	d519      	bpl.n	80056f6 <__swbuf_r+0x92>
 80056c2:	2e0a      	cmp	r6, #10
 80056c4:	d117      	bne.n	80056f6 <__swbuf_r+0x92>
 80056c6:	4621      	mov	r1, r4
 80056c8:	4628      	mov	r0, r5
 80056ca:	f000 f913 	bl	80058f4 <_fflush_r>
 80056ce:	b190      	cbz	r0, 80056f6 <__swbuf_r+0x92>
 80056d0:	e00f      	b.n	80056f2 <__swbuf_r+0x8e>
 80056d2:	4b0b      	ldr	r3, [pc, #44]	; (8005700 <__swbuf_r+0x9c>)
 80056d4:	429c      	cmp	r4, r3
 80056d6:	d101      	bne.n	80056dc <__swbuf_r+0x78>
 80056d8:	68ac      	ldr	r4, [r5, #8]
 80056da:	e7d0      	b.n	800567e <__swbuf_r+0x1a>
 80056dc:	4b09      	ldr	r3, [pc, #36]	; (8005704 <__swbuf_r+0xa0>)
 80056de:	429c      	cmp	r4, r3
 80056e0:	bf08      	it	eq
 80056e2:	68ec      	ldreq	r4, [r5, #12]
 80056e4:	e7cb      	b.n	800567e <__swbuf_r+0x1a>
 80056e6:	4621      	mov	r1, r4
 80056e8:	4628      	mov	r0, r5
 80056ea:	f000 f80d 	bl	8005708 <__swsetup_r>
 80056ee:	2800      	cmp	r0, #0
 80056f0:	d0cc      	beq.n	800568c <__swbuf_r+0x28>
 80056f2:	f04f 37ff 	mov.w	r7, #4294967295
 80056f6:	4638      	mov	r0, r7
 80056f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056fa:	bf00      	nop
 80056fc:	080069c8 	.word	0x080069c8
 8005700:	080069e8 	.word	0x080069e8
 8005704:	080069a8 	.word	0x080069a8

08005708 <__swsetup_r>:
 8005708:	4b32      	ldr	r3, [pc, #200]	; (80057d4 <__swsetup_r+0xcc>)
 800570a:	b570      	push	{r4, r5, r6, lr}
 800570c:	681d      	ldr	r5, [r3, #0]
 800570e:	4606      	mov	r6, r0
 8005710:	460c      	mov	r4, r1
 8005712:	b125      	cbz	r5, 800571e <__swsetup_r+0x16>
 8005714:	69ab      	ldr	r3, [r5, #24]
 8005716:	b913      	cbnz	r3, 800571e <__swsetup_r+0x16>
 8005718:	4628      	mov	r0, r5
 800571a:	f000 f955 	bl	80059c8 <__sinit>
 800571e:	4b2e      	ldr	r3, [pc, #184]	; (80057d8 <__swsetup_r+0xd0>)
 8005720:	429c      	cmp	r4, r3
 8005722:	d10f      	bne.n	8005744 <__swsetup_r+0x3c>
 8005724:	686c      	ldr	r4, [r5, #4]
 8005726:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800572a:	b29a      	uxth	r2, r3
 800572c:	0715      	lsls	r5, r2, #28
 800572e:	d42c      	bmi.n	800578a <__swsetup_r+0x82>
 8005730:	06d0      	lsls	r0, r2, #27
 8005732:	d411      	bmi.n	8005758 <__swsetup_r+0x50>
 8005734:	2209      	movs	r2, #9
 8005736:	6032      	str	r2, [r6, #0]
 8005738:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800573c:	81a3      	strh	r3, [r4, #12]
 800573e:	f04f 30ff 	mov.w	r0, #4294967295
 8005742:	bd70      	pop	{r4, r5, r6, pc}
 8005744:	4b25      	ldr	r3, [pc, #148]	; (80057dc <__swsetup_r+0xd4>)
 8005746:	429c      	cmp	r4, r3
 8005748:	d101      	bne.n	800574e <__swsetup_r+0x46>
 800574a:	68ac      	ldr	r4, [r5, #8]
 800574c:	e7eb      	b.n	8005726 <__swsetup_r+0x1e>
 800574e:	4b24      	ldr	r3, [pc, #144]	; (80057e0 <__swsetup_r+0xd8>)
 8005750:	429c      	cmp	r4, r3
 8005752:	bf08      	it	eq
 8005754:	68ec      	ldreq	r4, [r5, #12]
 8005756:	e7e6      	b.n	8005726 <__swsetup_r+0x1e>
 8005758:	0751      	lsls	r1, r2, #29
 800575a:	d512      	bpl.n	8005782 <__swsetup_r+0x7a>
 800575c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800575e:	b141      	cbz	r1, 8005772 <__swsetup_r+0x6a>
 8005760:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005764:	4299      	cmp	r1, r3
 8005766:	d002      	beq.n	800576e <__swsetup_r+0x66>
 8005768:	4630      	mov	r0, r6
 800576a:	f000 fa1b 	bl	8005ba4 <_free_r>
 800576e:	2300      	movs	r3, #0
 8005770:	6363      	str	r3, [r4, #52]	; 0x34
 8005772:	89a3      	ldrh	r3, [r4, #12]
 8005774:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005778:	81a3      	strh	r3, [r4, #12]
 800577a:	2300      	movs	r3, #0
 800577c:	6063      	str	r3, [r4, #4]
 800577e:	6923      	ldr	r3, [r4, #16]
 8005780:	6023      	str	r3, [r4, #0]
 8005782:	89a3      	ldrh	r3, [r4, #12]
 8005784:	f043 0308 	orr.w	r3, r3, #8
 8005788:	81a3      	strh	r3, [r4, #12]
 800578a:	6923      	ldr	r3, [r4, #16]
 800578c:	b94b      	cbnz	r3, 80057a2 <__swsetup_r+0x9a>
 800578e:	89a3      	ldrh	r3, [r4, #12]
 8005790:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005794:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005798:	d003      	beq.n	80057a2 <__swsetup_r+0x9a>
 800579a:	4621      	mov	r1, r4
 800579c:	4630      	mov	r0, r6
 800579e:	f000 f9c1 	bl	8005b24 <__smakebuf_r>
 80057a2:	89a2      	ldrh	r2, [r4, #12]
 80057a4:	f012 0301 	ands.w	r3, r2, #1
 80057a8:	d00c      	beq.n	80057c4 <__swsetup_r+0xbc>
 80057aa:	2300      	movs	r3, #0
 80057ac:	60a3      	str	r3, [r4, #8]
 80057ae:	6963      	ldr	r3, [r4, #20]
 80057b0:	425b      	negs	r3, r3
 80057b2:	61a3      	str	r3, [r4, #24]
 80057b4:	6923      	ldr	r3, [r4, #16]
 80057b6:	b953      	cbnz	r3, 80057ce <__swsetup_r+0xc6>
 80057b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057bc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80057c0:	d1ba      	bne.n	8005738 <__swsetup_r+0x30>
 80057c2:	bd70      	pop	{r4, r5, r6, pc}
 80057c4:	0792      	lsls	r2, r2, #30
 80057c6:	bf58      	it	pl
 80057c8:	6963      	ldrpl	r3, [r4, #20]
 80057ca:	60a3      	str	r3, [r4, #8]
 80057cc:	e7f2      	b.n	80057b4 <__swsetup_r+0xac>
 80057ce:	2000      	movs	r0, #0
 80057d0:	e7f7      	b.n	80057c2 <__swsetup_r+0xba>
 80057d2:	bf00      	nop
 80057d4:	2000004c 	.word	0x2000004c
 80057d8:	080069c8 	.word	0x080069c8
 80057dc:	080069e8 	.word	0x080069e8
 80057e0:	080069a8 	.word	0x080069a8

080057e4 <__sflush_r>:
 80057e4:	898a      	ldrh	r2, [r1, #12]
 80057e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057ea:	4605      	mov	r5, r0
 80057ec:	0710      	lsls	r0, r2, #28
 80057ee:	460c      	mov	r4, r1
 80057f0:	d45a      	bmi.n	80058a8 <__sflush_r+0xc4>
 80057f2:	684b      	ldr	r3, [r1, #4]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	dc05      	bgt.n	8005804 <__sflush_r+0x20>
 80057f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	dc02      	bgt.n	8005804 <__sflush_r+0x20>
 80057fe:	2000      	movs	r0, #0
 8005800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005804:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005806:	2e00      	cmp	r6, #0
 8005808:	d0f9      	beq.n	80057fe <__sflush_r+0x1a>
 800580a:	2300      	movs	r3, #0
 800580c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005810:	682f      	ldr	r7, [r5, #0]
 8005812:	602b      	str	r3, [r5, #0]
 8005814:	d033      	beq.n	800587e <__sflush_r+0x9a>
 8005816:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005818:	89a3      	ldrh	r3, [r4, #12]
 800581a:	075a      	lsls	r2, r3, #29
 800581c:	d505      	bpl.n	800582a <__sflush_r+0x46>
 800581e:	6863      	ldr	r3, [r4, #4]
 8005820:	1ac0      	subs	r0, r0, r3
 8005822:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005824:	b10b      	cbz	r3, 800582a <__sflush_r+0x46>
 8005826:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005828:	1ac0      	subs	r0, r0, r3
 800582a:	2300      	movs	r3, #0
 800582c:	4602      	mov	r2, r0
 800582e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005830:	6a21      	ldr	r1, [r4, #32]
 8005832:	4628      	mov	r0, r5
 8005834:	47b0      	blx	r6
 8005836:	1c43      	adds	r3, r0, #1
 8005838:	89a3      	ldrh	r3, [r4, #12]
 800583a:	d106      	bne.n	800584a <__sflush_r+0x66>
 800583c:	6829      	ldr	r1, [r5, #0]
 800583e:	291d      	cmp	r1, #29
 8005840:	d84b      	bhi.n	80058da <__sflush_r+0xf6>
 8005842:	4a2b      	ldr	r2, [pc, #172]	; (80058f0 <__sflush_r+0x10c>)
 8005844:	40ca      	lsrs	r2, r1
 8005846:	07d6      	lsls	r6, r2, #31
 8005848:	d547      	bpl.n	80058da <__sflush_r+0xf6>
 800584a:	2200      	movs	r2, #0
 800584c:	6062      	str	r2, [r4, #4]
 800584e:	04d9      	lsls	r1, r3, #19
 8005850:	6922      	ldr	r2, [r4, #16]
 8005852:	6022      	str	r2, [r4, #0]
 8005854:	d504      	bpl.n	8005860 <__sflush_r+0x7c>
 8005856:	1c42      	adds	r2, r0, #1
 8005858:	d101      	bne.n	800585e <__sflush_r+0x7a>
 800585a:	682b      	ldr	r3, [r5, #0]
 800585c:	b903      	cbnz	r3, 8005860 <__sflush_r+0x7c>
 800585e:	6560      	str	r0, [r4, #84]	; 0x54
 8005860:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005862:	602f      	str	r7, [r5, #0]
 8005864:	2900      	cmp	r1, #0
 8005866:	d0ca      	beq.n	80057fe <__sflush_r+0x1a>
 8005868:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800586c:	4299      	cmp	r1, r3
 800586e:	d002      	beq.n	8005876 <__sflush_r+0x92>
 8005870:	4628      	mov	r0, r5
 8005872:	f000 f997 	bl	8005ba4 <_free_r>
 8005876:	2000      	movs	r0, #0
 8005878:	6360      	str	r0, [r4, #52]	; 0x34
 800587a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800587e:	6a21      	ldr	r1, [r4, #32]
 8005880:	2301      	movs	r3, #1
 8005882:	4628      	mov	r0, r5
 8005884:	47b0      	blx	r6
 8005886:	1c41      	adds	r1, r0, #1
 8005888:	d1c6      	bne.n	8005818 <__sflush_r+0x34>
 800588a:	682b      	ldr	r3, [r5, #0]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d0c3      	beq.n	8005818 <__sflush_r+0x34>
 8005890:	2b1d      	cmp	r3, #29
 8005892:	d001      	beq.n	8005898 <__sflush_r+0xb4>
 8005894:	2b16      	cmp	r3, #22
 8005896:	d101      	bne.n	800589c <__sflush_r+0xb8>
 8005898:	602f      	str	r7, [r5, #0]
 800589a:	e7b0      	b.n	80057fe <__sflush_r+0x1a>
 800589c:	89a3      	ldrh	r3, [r4, #12]
 800589e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058a2:	81a3      	strh	r3, [r4, #12]
 80058a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058a8:	690f      	ldr	r7, [r1, #16]
 80058aa:	2f00      	cmp	r7, #0
 80058ac:	d0a7      	beq.n	80057fe <__sflush_r+0x1a>
 80058ae:	0793      	lsls	r3, r2, #30
 80058b0:	680e      	ldr	r6, [r1, #0]
 80058b2:	bf08      	it	eq
 80058b4:	694b      	ldreq	r3, [r1, #20]
 80058b6:	600f      	str	r7, [r1, #0]
 80058b8:	bf18      	it	ne
 80058ba:	2300      	movne	r3, #0
 80058bc:	eba6 0807 	sub.w	r8, r6, r7
 80058c0:	608b      	str	r3, [r1, #8]
 80058c2:	f1b8 0f00 	cmp.w	r8, #0
 80058c6:	dd9a      	ble.n	80057fe <__sflush_r+0x1a>
 80058c8:	4643      	mov	r3, r8
 80058ca:	463a      	mov	r2, r7
 80058cc:	6a21      	ldr	r1, [r4, #32]
 80058ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80058d0:	4628      	mov	r0, r5
 80058d2:	47b0      	blx	r6
 80058d4:	2800      	cmp	r0, #0
 80058d6:	dc07      	bgt.n	80058e8 <__sflush_r+0x104>
 80058d8:	89a3      	ldrh	r3, [r4, #12]
 80058da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058de:	81a3      	strh	r3, [r4, #12]
 80058e0:	f04f 30ff 	mov.w	r0, #4294967295
 80058e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058e8:	4407      	add	r7, r0
 80058ea:	eba8 0800 	sub.w	r8, r8, r0
 80058ee:	e7e8      	b.n	80058c2 <__sflush_r+0xde>
 80058f0:	20400001 	.word	0x20400001

080058f4 <_fflush_r>:
 80058f4:	b538      	push	{r3, r4, r5, lr}
 80058f6:	690b      	ldr	r3, [r1, #16]
 80058f8:	4605      	mov	r5, r0
 80058fa:	460c      	mov	r4, r1
 80058fc:	b1db      	cbz	r3, 8005936 <_fflush_r+0x42>
 80058fe:	b118      	cbz	r0, 8005908 <_fflush_r+0x14>
 8005900:	6983      	ldr	r3, [r0, #24]
 8005902:	b90b      	cbnz	r3, 8005908 <_fflush_r+0x14>
 8005904:	f000 f860 	bl	80059c8 <__sinit>
 8005908:	4b0c      	ldr	r3, [pc, #48]	; (800593c <_fflush_r+0x48>)
 800590a:	429c      	cmp	r4, r3
 800590c:	d109      	bne.n	8005922 <_fflush_r+0x2e>
 800590e:	686c      	ldr	r4, [r5, #4]
 8005910:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005914:	b17b      	cbz	r3, 8005936 <_fflush_r+0x42>
 8005916:	4621      	mov	r1, r4
 8005918:	4628      	mov	r0, r5
 800591a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800591e:	f7ff bf61 	b.w	80057e4 <__sflush_r>
 8005922:	4b07      	ldr	r3, [pc, #28]	; (8005940 <_fflush_r+0x4c>)
 8005924:	429c      	cmp	r4, r3
 8005926:	d101      	bne.n	800592c <_fflush_r+0x38>
 8005928:	68ac      	ldr	r4, [r5, #8]
 800592a:	e7f1      	b.n	8005910 <_fflush_r+0x1c>
 800592c:	4b05      	ldr	r3, [pc, #20]	; (8005944 <_fflush_r+0x50>)
 800592e:	429c      	cmp	r4, r3
 8005930:	bf08      	it	eq
 8005932:	68ec      	ldreq	r4, [r5, #12]
 8005934:	e7ec      	b.n	8005910 <_fflush_r+0x1c>
 8005936:	2000      	movs	r0, #0
 8005938:	bd38      	pop	{r3, r4, r5, pc}
 800593a:	bf00      	nop
 800593c:	080069c8 	.word	0x080069c8
 8005940:	080069e8 	.word	0x080069e8
 8005944:	080069a8 	.word	0x080069a8

08005948 <_cleanup_r>:
 8005948:	4901      	ldr	r1, [pc, #4]	; (8005950 <_cleanup_r+0x8>)
 800594a:	f000 b8a9 	b.w	8005aa0 <_fwalk_reent>
 800594e:	bf00      	nop
 8005950:	080058f5 	.word	0x080058f5

08005954 <std.isra.0>:
 8005954:	2300      	movs	r3, #0
 8005956:	b510      	push	{r4, lr}
 8005958:	4604      	mov	r4, r0
 800595a:	6003      	str	r3, [r0, #0]
 800595c:	6043      	str	r3, [r0, #4]
 800595e:	6083      	str	r3, [r0, #8]
 8005960:	8181      	strh	r1, [r0, #12]
 8005962:	6643      	str	r3, [r0, #100]	; 0x64
 8005964:	81c2      	strh	r2, [r0, #14]
 8005966:	6103      	str	r3, [r0, #16]
 8005968:	6143      	str	r3, [r0, #20]
 800596a:	6183      	str	r3, [r0, #24]
 800596c:	4619      	mov	r1, r3
 800596e:	2208      	movs	r2, #8
 8005970:	305c      	adds	r0, #92	; 0x5c
 8005972:	f7ff fdf2 	bl	800555a <memset>
 8005976:	4b05      	ldr	r3, [pc, #20]	; (800598c <std.isra.0+0x38>)
 8005978:	6263      	str	r3, [r4, #36]	; 0x24
 800597a:	4b05      	ldr	r3, [pc, #20]	; (8005990 <std.isra.0+0x3c>)
 800597c:	62a3      	str	r3, [r4, #40]	; 0x28
 800597e:	4b05      	ldr	r3, [pc, #20]	; (8005994 <std.isra.0+0x40>)
 8005980:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005982:	4b05      	ldr	r3, [pc, #20]	; (8005998 <std.isra.0+0x44>)
 8005984:	6224      	str	r4, [r4, #32]
 8005986:	6323      	str	r3, [r4, #48]	; 0x30
 8005988:	bd10      	pop	{r4, pc}
 800598a:	bf00      	nop
 800598c:	080062c9 	.word	0x080062c9
 8005990:	080062eb 	.word	0x080062eb
 8005994:	08006323 	.word	0x08006323
 8005998:	08006347 	.word	0x08006347

0800599c <__sfmoreglue>:
 800599c:	b570      	push	{r4, r5, r6, lr}
 800599e:	1e4a      	subs	r2, r1, #1
 80059a0:	2568      	movs	r5, #104	; 0x68
 80059a2:	4355      	muls	r5, r2
 80059a4:	460e      	mov	r6, r1
 80059a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80059aa:	f000 f949 	bl	8005c40 <_malloc_r>
 80059ae:	4604      	mov	r4, r0
 80059b0:	b140      	cbz	r0, 80059c4 <__sfmoreglue+0x28>
 80059b2:	2100      	movs	r1, #0
 80059b4:	e880 0042 	stmia.w	r0, {r1, r6}
 80059b8:	300c      	adds	r0, #12
 80059ba:	60a0      	str	r0, [r4, #8]
 80059bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80059c0:	f7ff fdcb 	bl	800555a <memset>
 80059c4:	4620      	mov	r0, r4
 80059c6:	bd70      	pop	{r4, r5, r6, pc}

080059c8 <__sinit>:
 80059c8:	6983      	ldr	r3, [r0, #24]
 80059ca:	b510      	push	{r4, lr}
 80059cc:	4604      	mov	r4, r0
 80059ce:	bb33      	cbnz	r3, 8005a1e <__sinit+0x56>
 80059d0:	6483      	str	r3, [r0, #72]	; 0x48
 80059d2:	64c3      	str	r3, [r0, #76]	; 0x4c
 80059d4:	6503      	str	r3, [r0, #80]	; 0x50
 80059d6:	4b12      	ldr	r3, [pc, #72]	; (8005a20 <__sinit+0x58>)
 80059d8:	4a12      	ldr	r2, [pc, #72]	; (8005a24 <__sinit+0x5c>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	6282      	str	r2, [r0, #40]	; 0x28
 80059de:	4298      	cmp	r0, r3
 80059e0:	bf04      	itt	eq
 80059e2:	2301      	moveq	r3, #1
 80059e4:	6183      	streq	r3, [r0, #24]
 80059e6:	f000 f81f 	bl	8005a28 <__sfp>
 80059ea:	6060      	str	r0, [r4, #4]
 80059ec:	4620      	mov	r0, r4
 80059ee:	f000 f81b 	bl	8005a28 <__sfp>
 80059f2:	60a0      	str	r0, [r4, #8]
 80059f4:	4620      	mov	r0, r4
 80059f6:	f000 f817 	bl	8005a28 <__sfp>
 80059fa:	2200      	movs	r2, #0
 80059fc:	60e0      	str	r0, [r4, #12]
 80059fe:	2104      	movs	r1, #4
 8005a00:	6860      	ldr	r0, [r4, #4]
 8005a02:	f7ff ffa7 	bl	8005954 <std.isra.0>
 8005a06:	2201      	movs	r2, #1
 8005a08:	2109      	movs	r1, #9
 8005a0a:	68a0      	ldr	r0, [r4, #8]
 8005a0c:	f7ff ffa2 	bl	8005954 <std.isra.0>
 8005a10:	2202      	movs	r2, #2
 8005a12:	2112      	movs	r1, #18
 8005a14:	68e0      	ldr	r0, [r4, #12]
 8005a16:	f7ff ff9d 	bl	8005954 <std.isra.0>
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	61a3      	str	r3, [r4, #24]
 8005a1e:	bd10      	pop	{r4, pc}
 8005a20:	08006a08 	.word	0x08006a08
 8005a24:	08005949 	.word	0x08005949

08005a28 <__sfp>:
 8005a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a2a:	4b1c      	ldr	r3, [pc, #112]	; (8005a9c <__sfp+0x74>)
 8005a2c:	681e      	ldr	r6, [r3, #0]
 8005a2e:	69b3      	ldr	r3, [r6, #24]
 8005a30:	4607      	mov	r7, r0
 8005a32:	b913      	cbnz	r3, 8005a3a <__sfp+0x12>
 8005a34:	4630      	mov	r0, r6
 8005a36:	f7ff ffc7 	bl	80059c8 <__sinit>
 8005a3a:	3648      	adds	r6, #72	; 0x48
 8005a3c:	68b4      	ldr	r4, [r6, #8]
 8005a3e:	6873      	ldr	r3, [r6, #4]
 8005a40:	3b01      	subs	r3, #1
 8005a42:	d503      	bpl.n	8005a4c <__sfp+0x24>
 8005a44:	6833      	ldr	r3, [r6, #0]
 8005a46:	b133      	cbz	r3, 8005a56 <__sfp+0x2e>
 8005a48:	6836      	ldr	r6, [r6, #0]
 8005a4a:	e7f7      	b.n	8005a3c <__sfp+0x14>
 8005a4c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005a50:	b16d      	cbz	r5, 8005a6e <__sfp+0x46>
 8005a52:	3468      	adds	r4, #104	; 0x68
 8005a54:	e7f4      	b.n	8005a40 <__sfp+0x18>
 8005a56:	2104      	movs	r1, #4
 8005a58:	4638      	mov	r0, r7
 8005a5a:	f7ff ff9f 	bl	800599c <__sfmoreglue>
 8005a5e:	6030      	str	r0, [r6, #0]
 8005a60:	2800      	cmp	r0, #0
 8005a62:	d1f1      	bne.n	8005a48 <__sfp+0x20>
 8005a64:	230c      	movs	r3, #12
 8005a66:	603b      	str	r3, [r7, #0]
 8005a68:	4604      	mov	r4, r0
 8005a6a:	4620      	mov	r0, r4
 8005a6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005a72:	81e3      	strh	r3, [r4, #14]
 8005a74:	2301      	movs	r3, #1
 8005a76:	81a3      	strh	r3, [r4, #12]
 8005a78:	6665      	str	r5, [r4, #100]	; 0x64
 8005a7a:	6025      	str	r5, [r4, #0]
 8005a7c:	60a5      	str	r5, [r4, #8]
 8005a7e:	6065      	str	r5, [r4, #4]
 8005a80:	6125      	str	r5, [r4, #16]
 8005a82:	6165      	str	r5, [r4, #20]
 8005a84:	61a5      	str	r5, [r4, #24]
 8005a86:	2208      	movs	r2, #8
 8005a88:	4629      	mov	r1, r5
 8005a8a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005a8e:	f7ff fd64 	bl	800555a <memset>
 8005a92:	6365      	str	r5, [r4, #52]	; 0x34
 8005a94:	63a5      	str	r5, [r4, #56]	; 0x38
 8005a96:	64a5      	str	r5, [r4, #72]	; 0x48
 8005a98:	64e5      	str	r5, [r4, #76]	; 0x4c
 8005a9a:	e7e6      	b.n	8005a6a <__sfp+0x42>
 8005a9c:	08006a08 	.word	0x08006a08

08005aa0 <_fwalk_reent>:
 8005aa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005aa4:	4680      	mov	r8, r0
 8005aa6:	4689      	mov	r9, r1
 8005aa8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005aac:	2600      	movs	r6, #0
 8005aae:	b914      	cbnz	r4, 8005ab6 <_fwalk_reent+0x16>
 8005ab0:	4630      	mov	r0, r6
 8005ab2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ab6:	68a5      	ldr	r5, [r4, #8]
 8005ab8:	6867      	ldr	r7, [r4, #4]
 8005aba:	3f01      	subs	r7, #1
 8005abc:	d501      	bpl.n	8005ac2 <_fwalk_reent+0x22>
 8005abe:	6824      	ldr	r4, [r4, #0]
 8005ac0:	e7f5      	b.n	8005aae <_fwalk_reent+0xe>
 8005ac2:	89ab      	ldrh	r3, [r5, #12]
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d907      	bls.n	8005ad8 <_fwalk_reent+0x38>
 8005ac8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005acc:	3301      	adds	r3, #1
 8005ace:	d003      	beq.n	8005ad8 <_fwalk_reent+0x38>
 8005ad0:	4629      	mov	r1, r5
 8005ad2:	4640      	mov	r0, r8
 8005ad4:	47c8      	blx	r9
 8005ad6:	4306      	orrs	r6, r0
 8005ad8:	3568      	adds	r5, #104	; 0x68
 8005ada:	e7ee      	b.n	8005aba <_fwalk_reent+0x1a>

08005adc <__swhatbuf_r>:
 8005adc:	b570      	push	{r4, r5, r6, lr}
 8005ade:	460e      	mov	r6, r1
 8005ae0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ae4:	2900      	cmp	r1, #0
 8005ae6:	b090      	sub	sp, #64	; 0x40
 8005ae8:	4614      	mov	r4, r2
 8005aea:	461d      	mov	r5, r3
 8005aec:	da07      	bge.n	8005afe <__swhatbuf_r+0x22>
 8005aee:	2300      	movs	r3, #0
 8005af0:	602b      	str	r3, [r5, #0]
 8005af2:	89b3      	ldrh	r3, [r6, #12]
 8005af4:	061a      	lsls	r2, r3, #24
 8005af6:	d410      	bmi.n	8005b1a <__swhatbuf_r+0x3e>
 8005af8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005afc:	e00e      	b.n	8005b1c <__swhatbuf_r+0x40>
 8005afe:	aa01      	add	r2, sp, #4
 8005b00:	f000 fc48 	bl	8006394 <_fstat_r>
 8005b04:	2800      	cmp	r0, #0
 8005b06:	dbf2      	blt.n	8005aee <__swhatbuf_r+0x12>
 8005b08:	9a02      	ldr	r2, [sp, #8]
 8005b0a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005b0e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005b12:	425a      	negs	r2, r3
 8005b14:	415a      	adcs	r2, r3
 8005b16:	602a      	str	r2, [r5, #0]
 8005b18:	e7ee      	b.n	8005af8 <__swhatbuf_r+0x1c>
 8005b1a:	2340      	movs	r3, #64	; 0x40
 8005b1c:	2000      	movs	r0, #0
 8005b1e:	6023      	str	r3, [r4, #0]
 8005b20:	b010      	add	sp, #64	; 0x40
 8005b22:	bd70      	pop	{r4, r5, r6, pc}

08005b24 <__smakebuf_r>:
 8005b24:	898b      	ldrh	r3, [r1, #12]
 8005b26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005b28:	079d      	lsls	r5, r3, #30
 8005b2a:	4606      	mov	r6, r0
 8005b2c:	460c      	mov	r4, r1
 8005b2e:	d507      	bpl.n	8005b40 <__smakebuf_r+0x1c>
 8005b30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005b34:	6023      	str	r3, [r4, #0]
 8005b36:	6123      	str	r3, [r4, #16]
 8005b38:	2301      	movs	r3, #1
 8005b3a:	6163      	str	r3, [r4, #20]
 8005b3c:	b002      	add	sp, #8
 8005b3e:	bd70      	pop	{r4, r5, r6, pc}
 8005b40:	ab01      	add	r3, sp, #4
 8005b42:	466a      	mov	r2, sp
 8005b44:	f7ff ffca 	bl	8005adc <__swhatbuf_r>
 8005b48:	9900      	ldr	r1, [sp, #0]
 8005b4a:	4605      	mov	r5, r0
 8005b4c:	4630      	mov	r0, r6
 8005b4e:	f000 f877 	bl	8005c40 <_malloc_r>
 8005b52:	b948      	cbnz	r0, 8005b68 <__smakebuf_r+0x44>
 8005b54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b58:	059a      	lsls	r2, r3, #22
 8005b5a:	d4ef      	bmi.n	8005b3c <__smakebuf_r+0x18>
 8005b5c:	f023 0303 	bic.w	r3, r3, #3
 8005b60:	f043 0302 	orr.w	r3, r3, #2
 8005b64:	81a3      	strh	r3, [r4, #12]
 8005b66:	e7e3      	b.n	8005b30 <__smakebuf_r+0xc>
 8005b68:	4b0d      	ldr	r3, [pc, #52]	; (8005ba0 <__smakebuf_r+0x7c>)
 8005b6a:	62b3      	str	r3, [r6, #40]	; 0x28
 8005b6c:	89a3      	ldrh	r3, [r4, #12]
 8005b6e:	6020      	str	r0, [r4, #0]
 8005b70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b74:	81a3      	strh	r3, [r4, #12]
 8005b76:	9b00      	ldr	r3, [sp, #0]
 8005b78:	6163      	str	r3, [r4, #20]
 8005b7a:	9b01      	ldr	r3, [sp, #4]
 8005b7c:	6120      	str	r0, [r4, #16]
 8005b7e:	b15b      	cbz	r3, 8005b98 <__smakebuf_r+0x74>
 8005b80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b84:	4630      	mov	r0, r6
 8005b86:	f000 fc17 	bl	80063b8 <_isatty_r>
 8005b8a:	b128      	cbz	r0, 8005b98 <__smakebuf_r+0x74>
 8005b8c:	89a3      	ldrh	r3, [r4, #12]
 8005b8e:	f023 0303 	bic.w	r3, r3, #3
 8005b92:	f043 0301 	orr.w	r3, r3, #1
 8005b96:	81a3      	strh	r3, [r4, #12]
 8005b98:	89a3      	ldrh	r3, [r4, #12]
 8005b9a:	431d      	orrs	r5, r3
 8005b9c:	81a5      	strh	r5, [r4, #12]
 8005b9e:	e7cd      	b.n	8005b3c <__smakebuf_r+0x18>
 8005ba0:	08005949 	.word	0x08005949

08005ba4 <_free_r>:
 8005ba4:	b538      	push	{r3, r4, r5, lr}
 8005ba6:	4605      	mov	r5, r0
 8005ba8:	2900      	cmp	r1, #0
 8005baa:	d045      	beq.n	8005c38 <_free_r+0x94>
 8005bac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005bb0:	1f0c      	subs	r4, r1, #4
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	bfb8      	it	lt
 8005bb6:	18e4      	addlt	r4, r4, r3
 8005bb8:	f000 fc20 	bl	80063fc <__malloc_lock>
 8005bbc:	4a1f      	ldr	r2, [pc, #124]	; (8005c3c <_free_r+0x98>)
 8005bbe:	6813      	ldr	r3, [r2, #0]
 8005bc0:	4610      	mov	r0, r2
 8005bc2:	b933      	cbnz	r3, 8005bd2 <_free_r+0x2e>
 8005bc4:	6063      	str	r3, [r4, #4]
 8005bc6:	6014      	str	r4, [r2, #0]
 8005bc8:	4628      	mov	r0, r5
 8005bca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005bce:	f000 bc16 	b.w	80063fe <__malloc_unlock>
 8005bd2:	42a3      	cmp	r3, r4
 8005bd4:	d90c      	bls.n	8005bf0 <_free_r+0x4c>
 8005bd6:	6821      	ldr	r1, [r4, #0]
 8005bd8:	1862      	adds	r2, r4, r1
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	bf04      	itt	eq
 8005bde:	681a      	ldreq	r2, [r3, #0]
 8005be0:	685b      	ldreq	r3, [r3, #4]
 8005be2:	6063      	str	r3, [r4, #4]
 8005be4:	bf04      	itt	eq
 8005be6:	1852      	addeq	r2, r2, r1
 8005be8:	6022      	streq	r2, [r4, #0]
 8005bea:	6004      	str	r4, [r0, #0]
 8005bec:	e7ec      	b.n	8005bc8 <_free_r+0x24>
 8005bee:	4613      	mov	r3, r2
 8005bf0:	685a      	ldr	r2, [r3, #4]
 8005bf2:	b10a      	cbz	r2, 8005bf8 <_free_r+0x54>
 8005bf4:	42a2      	cmp	r2, r4
 8005bf6:	d9fa      	bls.n	8005bee <_free_r+0x4a>
 8005bf8:	6819      	ldr	r1, [r3, #0]
 8005bfa:	1858      	adds	r0, r3, r1
 8005bfc:	42a0      	cmp	r0, r4
 8005bfe:	d10b      	bne.n	8005c18 <_free_r+0x74>
 8005c00:	6820      	ldr	r0, [r4, #0]
 8005c02:	4401      	add	r1, r0
 8005c04:	1858      	adds	r0, r3, r1
 8005c06:	4282      	cmp	r2, r0
 8005c08:	6019      	str	r1, [r3, #0]
 8005c0a:	d1dd      	bne.n	8005bc8 <_free_r+0x24>
 8005c0c:	6810      	ldr	r0, [r2, #0]
 8005c0e:	6852      	ldr	r2, [r2, #4]
 8005c10:	605a      	str	r2, [r3, #4]
 8005c12:	4401      	add	r1, r0
 8005c14:	6019      	str	r1, [r3, #0]
 8005c16:	e7d7      	b.n	8005bc8 <_free_r+0x24>
 8005c18:	d902      	bls.n	8005c20 <_free_r+0x7c>
 8005c1a:	230c      	movs	r3, #12
 8005c1c:	602b      	str	r3, [r5, #0]
 8005c1e:	e7d3      	b.n	8005bc8 <_free_r+0x24>
 8005c20:	6820      	ldr	r0, [r4, #0]
 8005c22:	1821      	adds	r1, r4, r0
 8005c24:	428a      	cmp	r2, r1
 8005c26:	bf04      	itt	eq
 8005c28:	6811      	ldreq	r1, [r2, #0]
 8005c2a:	6852      	ldreq	r2, [r2, #4]
 8005c2c:	6062      	str	r2, [r4, #4]
 8005c2e:	bf04      	itt	eq
 8005c30:	1809      	addeq	r1, r1, r0
 8005c32:	6021      	streq	r1, [r4, #0]
 8005c34:	605c      	str	r4, [r3, #4]
 8005c36:	e7c7      	b.n	8005bc8 <_free_r+0x24>
 8005c38:	bd38      	pop	{r3, r4, r5, pc}
 8005c3a:	bf00      	nop
 8005c3c:	20001308 	.word	0x20001308

08005c40 <_malloc_r>:
 8005c40:	b570      	push	{r4, r5, r6, lr}
 8005c42:	1ccd      	adds	r5, r1, #3
 8005c44:	f025 0503 	bic.w	r5, r5, #3
 8005c48:	3508      	adds	r5, #8
 8005c4a:	2d0c      	cmp	r5, #12
 8005c4c:	bf38      	it	cc
 8005c4e:	250c      	movcc	r5, #12
 8005c50:	2d00      	cmp	r5, #0
 8005c52:	4606      	mov	r6, r0
 8005c54:	db01      	blt.n	8005c5a <_malloc_r+0x1a>
 8005c56:	42a9      	cmp	r1, r5
 8005c58:	d903      	bls.n	8005c62 <_malloc_r+0x22>
 8005c5a:	230c      	movs	r3, #12
 8005c5c:	6033      	str	r3, [r6, #0]
 8005c5e:	2000      	movs	r0, #0
 8005c60:	bd70      	pop	{r4, r5, r6, pc}
 8005c62:	f000 fbcb 	bl	80063fc <__malloc_lock>
 8005c66:	4a23      	ldr	r2, [pc, #140]	; (8005cf4 <_malloc_r+0xb4>)
 8005c68:	6814      	ldr	r4, [r2, #0]
 8005c6a:	4621      	mov	r1, r4
 8005c6c:	b991      	cbnz	r1, 8005c94 <_malloc_r+0x54>
 8005c6e:	4c22      	ldr	r4, [pc, #136]	; (8005cf8 <_malloc_r+0xb8>)
 8005c70:	6823      	ldr	r3, [r4, #0]
 8005c72:	b91b      	cbnz	r3, 8005c7c <_malloc_r+0x3c>
 8005c74:	4630      	mov	r0, r6
 8005c76:	f000 fb17 	bl	80062a8 <_sbrk_r>
 8005c7a:	6020      	str	r0, [r4, #0]
 8005c7c:	4629      	mov	r1, r5
 8005c7e:	4630      	mov	r0, r6
 8005c80:	f000 fb12 	bl	80062a8 <_sbrk_r>
 8005c84:	1c43      	adds	r3, r0, #1
 8005c86:	d126      	bne.n	8005cd6 <_malloc_r+0x96>
 8005c88:	230c      	movs	r3, #12
 8005c8a:	6033      	str	r3, [r6, #0]
 8005c8c:	4630      	mov	r0, r6
 8005c8e:	f000 fbb6 	bl	80063fe <__malloc_unlock>
 8005c92:	e7e4      	b.n	8005c5e <_malloc_r+0x1e>
 8005c94:	680b      	ldr	r3, [r1, #0]
 8005c96:	1b5b      	subs	r3, r3, r5
 8005c98:	d41a      	bmi.n	8005cd0 <_malloc_r+0x90>
 8005c9a:	2b0b      	cmp	r3, #11
 8005c9c:	d90f      	bls.n	8005cbe <_malloc_r+0x7e>
 8005c9e:	600b      	str	r3, [r1, #0]
 8005ca0:	50cd      	str	r5, [r1, r3]
 8005ca2:	18cc      	adds	r4, r1, r3
 8005ca4:	4630      	mov	r0, r6
 8005ca6:	f000 fbaa 	bl	80063fe <__malloc_unlock>
 8005caa:	f104 000b 	add.w	r0, r4, #11
 8005cae:	1d23      	adds	r3, r4, #4
 8005cb0:	f020 0007 	bic.w	r0, r0, #7
 8005cb4:	1ac3      	subs	r3, r0, r3
 8005cb6:	d01b      	beq.n	8005cf0 <_malloc_r+0xb0>
 8005cb8:	425a      	negs	r2, r3
 8005cba:	50e2      	str	r2, [r4, r3]
 8005cbc:	bd70      	pop	{r4, r5, r6, pc}
 8005cbe:	428c      	cmp	r4, r1
 8005cc0:	bf0d      	iteet	eq
 8005cc2:	6863      	ldreq	r3, [r4, #4]
 8005cc4:	684b      	ldrne	r3, [r1, #4]
 8005cc6:	6063      	strne	r3, [r4, #4]
 8005cc8:	6013      	streq	r3, [r2, #0]
 8005cca:	bf18      	it	ne
 8005ccc:	460c      	movne	r4, r1
 8005cce:	e7e9      	b.n	8005ca4 <_malloc_r+0x64>
 8005cd0:	460c      	mov	r4, r1
 8005cd2:	6849      	ldr	r1, [r1, #4]
 8005cd4:	e7ca      	b.n	8005c6c <_malloc_r+0x2c>
 8005cd6:	1cc4      	adds	r4, r0, #3
 8005cd8:	f024 0403 	bic.w	r4, r4, #3
 8005cdc:	42a0      	cmp	r0, r4
 8005cde:	d005      	beq.n	8005cec <_malloc_r+0xac>
 8005ce0:	1a21      	subs	r1, r4, r0
 8005ce2:	4630      	mov	r0, r6
 8005ce4:	f000 fae0 	bl	80062a8 <_sbrk_r>
 8005ce8:	3001      	adds	r0, #1
 8005cea:	d0cd      	beq.n	8005c88 <_malloc_r+0x48>
 8005cec:	6025      	str	r5, [r4, #0]
 8005cee:	e7d9      	b.n	8005ca4 <_malloc_r+0x64>
 8005cf0:	bd70      	pop	{r4, r5, r6, pc}
 8005cf2:	bf00      	nop
 8005cf4:	20001308 	.word	0x20001308
 8005cf8:	2000130c 	.word	0x2000130c

08005cfc <__sfputc_r>:
 8005cfc:	6893      	ldr	r3, [r2, #8]
 8005cfe:	3b01      	subs	r3, #1
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	b410      	push	{r4}
 8005d04:	6093      	str	r3, [r2, #8]
 8005d06:	da09      	bge.n	8005d1c <__sfputc_r+0x20>
 8005d08:	6994      	ldr	r4, [r2, #24]
 8005d0a:	42a3      	cmp	r3, r4
 8005d0c:	db02      	blt.n	8005d14 <__sfputc_r+0x18>
 8005d0e:	b2cb      	uxtb	r3, r1
 8005d10:	2b0a      	cmp	r3, #10
 8005d12:	d103      	bne.n	8005d1c <__sfputc_r+0x20>
 8005d14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d18:	f7ff bca4 	b.w	8005664 <__swbuf_r>
 8005d1c:	6813      	ldr	r3, [r2, #0]
 8005d1e:	1c58      	adds	r0, r3, #1
 8005d20:	6010      	str	r0, [r2, #0]
 8005d22:	7019      	strb	r1, [r3, #0]
 8005d24:	b2c8      	uxtb	r0, r1
 8005d26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d2a:	4770      	bx	lr

08005d2c <__sfputs_r>:
 8005d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d2e:	4606      	mov	r6, r0
 8005d30:	460f      	mov	r7, r1
 8005d32:	4614      	mov	r4, r2
 8005d34:	18d5      	adds	r5, r2, r3
 8005d36:	42ac      	cmp	r4, r5
 8005d38:	d101      	bne.n	8005d3e <__sfputs_r+0x12>
 8005d3a:	2000      	movs	r0, #0
 8005d3c:	e007      	b.n	8005d4e <__sfputs_r+0x22>
 8005d3e:	463a      	mov	r2, r7
 8005d40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d44:	4630      	mov	r0, r6
 8005d46:	f7ff ffd9 	bl	8005cfc <__sfputc_r>
 8005d4a:	1c43      	adds	r3, r0, #1
 8005d4c:	d1f3      	bne.n	8005d36 <__sfputs_r+0xa>
 8005d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005d50 <_vfiprintf_r>:
 8005d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d54:	b09d      	sub	sp, #116	; 0x74
 8005d56:	460c      	mov	r4, r1
 8005d58:	4617      	mov	r7, r2
 8005d5a:	9303      	str	r3, [sp, #12]
 8005d5c:	4606      	mov	r6, r0
 8005d5e:	b118      	cbz	r0, 8005d68 <_vfiprintf_r+0x18>
 8005d60:	6983      	ldr	r3, [r0, #24]
 8005d62:	b90b      	cbnz	r3, 8005d68 <_vfiprintf_r+0x18>
 8005d64:	f7ff fe30 	bl	80059c8 <__sinit>
 8005d68:	4b7c      	ldr	r3, [pc, #496]	; (8005f5c <_vfiprintf_r+0x20c>)
 8005d6a:	429c      	cmp	r4, r3
 8005d6c:	d157      	bne.n	8005e1e <_vfiprintf_r+0xce>
 8005d6e:	6874      	ldr	r4, [r6, #4]
 8005d70:	89a3      	ldrh	r3, [r4, #12]
 8005d72:	0718      	lsls	r0, r3, #28
 8005d74:	d55d      	bpl.n	8005e32 <_vfiprintf_r+0xe2>
 8005d76:	6923      	ldr	r3, [r4, #16]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d05a      	beq.n	8005e32 <_vfiprintf_r+0xe2>
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	9309      	str	r3, [sp, #36]	; 0x24
 8005d80:	2320      	movs	r3, #32
 8005d82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005d86:	2330      	movs	r3, #48	; 0x30
 8005d88:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005d8c:	f04f 0b01 	mov.w	fp, #1
 8005d90:	46b8      	mov	r8, r7
 8005d92:	4645      	mov	r5, r8
 8005d94:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d155      	bne.n	8005e48 <_vfiprintf_r+0xf8>
 8005d9c:	ebb8 0a07 	subs.w	sl, r8, r7
 8005da0:	d00b      	beq.n	8005dba <_vfiprintf_r+0x6a>
 8005da2:	4653      	mov	r3, sl
 8005da4:	463a      	mov	r2, r7
 8005da6:	4621      	mov	r1, r4
 8005da8:	4630      	mov	r0, r6
 8005daa:	f7ff ffbf 	bl	8005d2c <__sfputs_r>
 8005dae:	3001      	adds	r0, #1
 8005db0:	f000 80c4 	beq.w	8005f3c <_vfiprintf_r+0x1ec>
 8005db4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005db6:	4453      	add	r3, sl
 8005db8:	9309      	str	r3, [sp, #36]	; 0x24
 8005dba:	f898 3000 	ldrb.w	r3, [r8]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	f000 80bc 	beq.w	8005f3c <_vfiprintf_r+0x1ec>
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	f04f 32ff 	mov.w	r2, #4294967295
 8005dca:	9304      	str	r3, [sp, #16]
 8005dcc:	9307      	str	r3, [sp, #28]
 8005dce:	9205      	str	r2, [sp, #20]
 8005dd0:	9306      	str	r3, [sp, #24]
 8005dd2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005dd6:	931a      	str	r3, [sp, #104]	; 0x68
 8005dd8:	2205      	movs	r2, #5
 8005dda:	7829      	ldrb	r1, [r5, #0]
 8005ddc:	4860      	ldr	r0, [pc, #384]	; (8005f60 <_vfiprintf_r+0x210>)
 8005dde:	f7fa f9cf 	bl	8000180 <memchr>
 8005de2:	f105 0801 	add.w	r8, r5, #1
 8005de6:	9b04      	ldr	r3, [sp, #16]
 8005de8:	2800      	cmp	r0, #0
 8005dea:	d131      	bne.n	8005e50 <_vfiprintf_r+0x100>
 8005dec:	06d9      	lsls	r1, r3, #27
 8005dee:	bf44      	itt	mi
 8005df0:	2220      	movmi	r2, #32
 8005df2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005df6:	071a      	lsls	r2, r3, #28
 8005df8:	bf44      	itt	mi
 8005dfa:	222b      	movmi	r2, #43	; 0x2b
 8005dfc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005e00:	782a      	ldrb	r2, [r5, #0]
 8005e02:	2a2a      	cmp	r2, #42	; 0x2a
 8005e04:	d02c      	beq.n	8005e60 <_vfiprintf_r+0x110>
 8005e06:	9a07      	ldr	r2, [sp, #28]
 8005e08:	2100      	movs	r1, #0
 8005e0a:	200a      	movs	r0, #10
 8005e0c:	46a8      	mov	r8, r5
 8005e0e:	3501      	adds	r5, #1
 8005e10:	f898 3000 	ldrb.w	r3, [r8]
 8005e14:	3b30      	subs	r3, #48	; 0x30
 8005e16:	2b09      	cmp	r3, #9
 8005e18:	d96d      	bls.n	8005ef6 <_vfiprintf_r+0x1a6>
 8005e1a:	b371      	cbz	r1, 8005e7a <_vfiprintf_r+0x12a>
 8005e1c:	e026      	b.n	8005e6c <_vfiprintf_r+0x11c>
 8005e1e:	4b51      	ldr	r3, [pc, #324]	; (8005f64 <_vfiprintf_r+0x214>)
 8005e20:	429c      	cmp	r4, r3
 8005e22:	d101      	bne.n	8005e28 <_vfiprintf_r+0xd8>
 8005e24:	68b4      	ldr	r4, [r6, #8]
 8005e26:	e7a3      	b.n	8005d70 <_vfiprintf_r+0x20>
 8005e28:	4b4f      	ldr	r3, [pc, #316]	; (8005f68 <_vfiprintf_r+0x218>)
 8005e2a:	429c      	cmp	r4, r3
 8005e2c:	bf08      	it	eq
 8005e2e:	68f4      	ldreq	r4, [r6, #12]
 8005e30:	e79e      	b.n	8005d70 <_vfiprintf_r+0x20>
 8005e32:	4621      	mov	r1, r4
 8005e34:	4630      	mov	r0, r6
 8005e36:	f7ff fc67 	bl	8005708 <__swsetup_r>
 8005e3a:	2800      	cmp	r0, #0
 8005e3c:	d09e      	beq.n	8005d7c <_vfiprintf_r+0x2c>
 8005e3e:	f04f 30ff 	mov.w	r0, #4294967295
 8005e42:	b01d      	add	sp, #116	; 0x74
 8005e44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e48:	2b25      	cmp	r3, #37	; 0x25
 8005e4a:	d0a7      	beq.n	8005d9c <_vfiprintf_r+0x4c>
 8005e4c:	46a8      	mov	r8, r5
 8005e4e:	e7a0      	b.n	8005d92 <_vfiprintf_r+0x42>
 8005e50:	4a43      	ldr	r2, [pc, #268]	; (8005f60 <_vfiprintf_r+0x210>)
 8005e52:	1a80      	subs	r0, r0, r2
 8005e54:	fa0b f000 	lsl.w	r0, fp, r0
 8005e58:	4318      	orrs	r0, r3
 8005e5a:	9004      	str	r0, [sp, #16]
 8005e5c:	4645      	mov	r5, r8
 8005e5e:	e7bb      	b.n	8005dd8 <_vfiprintf_r+0x88>
 8005e60:	9a03      	ldr	r2, [sp, #12]
 8005e62:	1d11      	adds	r1, r2, #4
 8005e64:	6812      	ldr	r2, [r2, #0]
 8005e66:	9103      	str	r1, [sp, #12]
 8005e68:	2a00      	cmp	r2, #0
 8005e6a:	db01      	blt.n	8005e70 <_vfiprintf_r+0x120>
 8005e6c:	9207      	str	r2, [sp, #28]
 8005e6e:	e004      	b.n	8005e7a <_vfiprintf_r+0x12a>
 8005e70:	4252      	negs	r2, r2
 8005e72:	f043 0302 	orr.w	r3, r3, #2
 8005e76:	9207      	str	r2, [sp, #28]
 8005e78:	9304      	str	r3, [sp, #16]
 8005e7a:	f898 3000 	ldrb.w	r3, [r8]
 8005e7e:	2b2e      	cmp	r3, #46	; 0x2e
 8005e80:	d110      	bne.n	8005ea4 <_vfiprintf_r+0x154>
 8005e82:	f898 3001 	ldrb.w	r3, [r8, #1]
 8005e86:	2b2a      	cmp	r3, #42	; 0x2a
 8005e88:	f108 0101 	add.w	r1, r8, #1
 8005e8c:	d137      	bne.n	8005efe <_vfiprintf_r+0x1ae>
 8005e8e:	9b03      	ldr	r3, [sp, #12]
 8005e90:	1d1a      	adds	r2, r3, #4
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	9203      	str	r2, [sp, #12]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	bfb8      	it	lt
 8005e9a:	f04f 33ff 	movlt.w	r3, #4294967295
 8005e9e:	f108 0802 	add.w	r8, r8, #2
 8005ea2:	9305      	str	r3, [sp, #20]
 8005ea4:	4d31      	ldr	r5, [pc, #196]	; (8005f6c <_vfiprintf_r+0x21c>)
 8005ea6:	f898 1000 	ldrb.w	r1, [r8]
 8005eaa:	2203      	movs	r2, #3
 8005eac:	4628      	mov	r0, r5
 8005eae:	f7fa f967 	bl	8000180 <memchr>
 8005eb2:	b140      	cbz	r0, 8005ec6 <_vfiprintf_r+0x176>
 8005eb4:	2340      	movs	r3, #64	; 0x40
 8005eb6:	1b40      	subs	r0, r0, r5
 8005eb8:	fa03 f000 	lsl.w	r0, r3, r0
 8005ebc:	9b04      	ldr	r3, [sp, #16]
 8005ebe:	4303      	orrs	r3, r0
 8005ec0:	9304      	str	r3, [sp, #16]
 8005ec2:	f108 0801 	add.w	r8, r8, #1
 8005ec6:	f898 1000 	ldrb.w	r1, [r8]
 8005eca:	4829      	ldr	r0, [pc, #164]	; (8005f70 <_vfiprintf_r+0x220>)
 8005ecc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005ed0:	2206      	movs	r2, #6
 8005ed2:	f108 0701 	add.w	r7, r8, #1
 8005ed6:	f7fa f953 	bl	8000180 <memchr>
 8005eda:	2800      	cmp	r0, #0
 8005edc:	d034      	beq.n	8005f48 <_vfiprintf_r+0x1f8>
 8005ede:	4b25      	ldr	r3, [pc, #148]	; (8005f74 <_vfiprintf_r+0x224>)
 8005ee0:	bb03      	cbnz	r3, 8005f24 <_vfiprintf_r+0x1d4>
 8005ee2:	9b03      	ldr	r3, [sp, #12]
 8005ee4:	3307      	adds	r3, #7
 8005ee6:	f023 0307 	bic.w	r3, r3, #7
 8005eea:	3308      	adds	r3, #8
 8005eec:	9303      	str	r3, [sp, #12]
 8005eee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ef0:	444b      	add	r3, r9
 8005ef2:	9309      	str	r3, [sp, #36]	; 0x24
 8005ef4:	e74c      	b.n	8005d90 <_vfiprintf_r+0x40>
 8005ef6:	fb00 3202 	mla	r2, r0, r2, r3
 8005efa:	2101      	movs	r1, #1
 8005efc:	e786      	b.n	8005e0c <_vfiprintf_r+0xbc>
 8005efe:	2300      	movs	r3, #0
 8005f00:	9305      	str	r3, [sp, #20]
 8005f02:	4618      	mov	r0, r3
 8005f04:	250a      	movs	r5, #10
 8005f06:	4688      	mov	r8, r1
 8005f08:	3101      	adds	r1, #1
 8005f0a:	f898 2000 	ldrb.w	r2, [r8]
 8005f0e:	3a30      	subs	r2, #48	; 0x30
 8005f10:	2a09      	cmp	r2, #9
 8005f12:	d903      	bls.n	8005f1c <_vfiprintf_r+0x1cc>
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d0c5      	beq.n	8005ea4 <_vfiprintf_r+0x154>
 8005f18:	9005      	str	r0, [sp, #20]
 8005f1a:	e7c3      	b.n	8005ea4 <_vfiprintf_r+0x154>
 8005f1c:	fb05 2000 	mla	r0, r5, r0, r2
 8005f20:	2301      	movs	r3, #1
 8005f22:	e7f0      	b.n	8005f06 <_vfiprintf_r+0x1b6>
 8005f24:	ab03      	add	r3, sp, #12
 8005f26:	9300      	str	r3, [sp, #0]
 8005f28:	4622      	mov	r2, r4
 8005f2a:	4b13      	ldr	r3, [pc, #76]	; (8005f78 <_vfiprintf_r+0x228>)
 8005f2c:	a904      	add	r1, sp, #16
 8005f2e:	4630      	mov	r0, r6
 8005f30:	f3af 8000 	nop.w
 8005f34:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005f38:	4681      	mov	r9, r0
 8005f3a:	d1d8      	bne.n	8005eee <_vfiprintf_r+0x19e>
 8005f3c:	89a3      	ldrh	r3, [r4, #12]
 8005f3e:	065b      	lsls	r3, r3, #25
 8005f40:	f53f af7d 	bmi.w	8005e3e <_vfiprintf_r+0xee>
 8005f44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005f46:	e77c      	b.n	8005e42 <_vfiprintf_r+0xf2>
 8005f48:	ab03      	add	r3, sp, #12
 8005f4a:	9300      	str	r3, [sp, #0]
 8005f4c:	4622      	mov	r2, r4
 8005f4e:	4b0a      	ldr	r3, [pc, #40]	; (8005f78 <_vfiprintf_r+0x228>)
 8005f50:	a904      	add	r1, sp, #16
 8005f52:	4630      	mov	r0, r6
 8005f54:	f000 f888 	bl	8006068 <_printf_i>
 8005f58:	e7ec      	b.n	8005f34 <_vfiprintf_r+0x1e4>
 8005f5a:	bf00      	nop
 8005f5c:	080069c8 	.word	0x080069c8
 8005f60:	08006a0c 	.word	0x08006a0c
 8005f64:	080069e8 	.word	0x080069e8
 8005f68:	080069a8 	.word	0x080069a8
 8005f6c:	08006a12 	.word	0x08006a12
 8005f70:	08006a16 	.word	0x08006a16
 8005f74:	00000000 	.word	0x00000000
 8005f78:	08005d2d 	.word	0x08005d2d

08005f7c <_printf_common>:
 8005f7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f80:	4691      	mov	r9, r2
 8005f82:	461f      	mov	r7, r3
 8005f84:	688a      	ldr	r2, [r1, #8]
 8005f86:	690b      	ldr	r3, [r1, #16]
 8005f88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	bfb8      	it	lt
 8005f90:	4613      	movlt	r3, r2
 8005f92:	f8c9 3000 	str.w	r3, [r9]
 8005f96:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005f9a:	4606      	mov	r6, r0
 8005f9c:	460c      	mov	r4, r1
 8005f9e:	b112      	cbz	r2, 8005fa6 <_printf_common+0x2a>
 8005fa0:	3301      	adds	r3, #1
 8005fa2:	f8c9 3000 	str.w	r3, [r9]
 8005fa6:	6823      	ldr	r3, [r4, #0]
 8005fa8:	0699      	lsls	r1, r3, #26
 8005faa:	bf42      	ittt	mi
 8005fac:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005fb0:	3302      	addmi	r3, #2
 8005fb2:	f8c9 3000 	strmi.w	r3, [r9]
 8005fb6:	6825      	ldr	r5, [r4, #0]
 8005fb8:	f015 0506 	ands.w	r5, r5, #6
 8005fbc:	d107      	bne.n	8005fce <_printf_common+0x52>
 8005fbe:	f104 0a19 	add.w	sl, r4, #25
 8005fc2:	68e3      	ldr	r3, [r4, #12]
 8005fc4:	f8d9 2000 	ldr.w	r2, [r9]
 8005fc8:	1a9b      	subs	r3, r3, r2
 8005fca:	429d      	cmp	r5, r3
 8005fcc:	db29      	blt.n	8006022 <_printf_common+0xa6>
 8005fce:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005fd2:	6822      	ldr	r2, [r4, #0]
 8005fd4:	3300      	adds	r3, #0
 8005fd6:	bf18      	it	ne
 8005fd8:	2301      	movne	r3, #1
 8005fda:	0692      	lsls	r2, r2, #26
 8005fdc:	d42e      	bmi.n	800603c <_printf_common+0xc0>
 8005fde:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005fe2:	4639      	mov	r1, r7
 8005fe4:	4630      	mov	r0, r6
 8005fe6:	47c0      	blx	r8
 8005fe8:	3001      	adds	r0, #1
 8005fea:	d021      	beq.n	8006030 <_printf_common+0xb4>
 8005fec:	6823      	ldr	r3, [r4, #0]
 8005fee:	68e5      	ldr	r5, [r4, #12]
 8005ff0:	f8d9 2000 	ldr.w	r2, [r9]
 8005ff4:	f003 0306 	and.w	r3, r3, #6
 8005ff8:	2b04      	cmp	r3, #4
 8005ffa:	bf08      	it	eq
 8005ffc:	1aad      	subeq	r5, r5, r2
 8005ffe:	68a3      	ldr	r3, [r4, #8]
 8006000:	6922      	ldr	r2, [r4, #16]
 8006002:	bf0c      	ite	eq
 8006004:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006008:	2500      	movne	r5, #0
 800600a:	4293      	cmp	r3, r2
 800600c:	bfc4      	itt	gt
 800600e:	1a9b      	subgt	r3, r3, r2
 8006010:	18ed      	addgt	r5, r5, r3
 8006012:	f04f 0900 	mov.w	r9, #0
 8006016:	341a      	adds	r4, #26
 8006018:	454d      	cmp	r5, r9
 800601a:	d11b      	bne.n	8006054 <_printf_common+0xd8>
 800601c:	2000      	movs	r0, #0
 800601e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006022:	2301      	movs	r3, #1
 8006024:	4652      	mov	r2, sl
 8006026:	4639      	mov	r1, r7
 8006028:	4630      	mov	r0, r6
 800602a:	47c0      	blx	r8
 800602c:	3001      	adds	r0, #1
 800602e:	d103      	bne.n	8006038 <_printf_common+0xbc>
 8006030:	f04f 30ff 	mov.w	r0, #4294967295
 8006034:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006038:	3501      	adds	r5, #1
 800603a:	e7c2      	b.n	8005fc2 <_printf_common+0x46>
 800603c:	18e1      	adds	r1, r4, r3
 800603e:	1c5a      	adds	r2, r3, #1
 8006040:	2030      	movs	r0, #48	; 0x30
 8006042:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006046:	4422      	add	r2, r4
 8006048:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800604c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006050:	3302      	adds	r3, #2
 8006052:	e7c4      	b.n	8005fde <_printf_common+0x62>
 8006054:	2301      	movs	r3, #1
 8006056:	4622      	mov	r2, r4
 8006058:	4639      	mov	r1, r7
 800605a:	4630      	mov	r0, r6
 800605c:	47c0      	blx	r8
 800605e:	3001      	adds	r0, #1
 8006060:	d0e6      	beq.n	8006030 <_printf_common+0xb4>
 8006062:	f109 0901 	add.w	r9, r9, #1
 8006066:	e7d7      	b.n	8006018 <_printf_common+0x9c>

08006068 <_printf_i>:
 8006068:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800606c:	4617      	mov	r7, r2
 800606e:	7e0a      	ldrb	r2, [r1, #24]
 8006070:	b085      	sub	sp, #20
 8006072:	2a6e      	cmp	r2, #110	; 0x6e
 8006074:	4698      	mov	r8, r3
 8006076:	4606      	mov	r6, r0
 8006078:	460c      	mov	r4, r1
 800607a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800607c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8006080:	f000 80bc 	beq.w	80061fc <_printf_i+0x194>
 8006084:	d81a      	bhi.n	80060bc <_printf_i+0x54>
 8006086:	2a63      	cmp	r2, #99	; 0x63
 8006088:	d02e      	beq.n	80060e8 <_printf_i+0x80>
 800608a:	d80a      	bhi.n	80060a2 <_printf_i+0x3a>
 800608c:	2a00      	cmp	r2, #0
 800608e:	f000 80c8 	beq.w	8006222 <_printf_i+0x1ba>
 8006092:	2a58      	cmp	r2, #88	; 0x58
 8006094:	f000 808a 	beq.w	80061ac <_printf_i+0x144>
 8006098:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800609c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80060a0:	e02a      	b.n	80060f8 <_printf_i+0x90>
 80060a2:	2a64      	cmp	r2, #100	; 0x64
 80060a4:	d001      	beq.n	80060aa <_printf_i+0x42>
 80060a6:	2a69      	cmp	r2, #105	; 0x69
 80060a8:	d1f6      	bne.n	8006098 <_printf_i+0x30>
 80060aa:	6821      	ldr	r1, [r4, #0]
 80060ac:	681a      	ldr	r2, [r3, #0]
 80060ae:	f011 0f80 	tst.w	r1, #128	; 0x80
 80060b2:	d023      	beq.n	80060fc <_printf_i+0x94>
 80060b4:	1d11      	adds	r1, r2, #4
 80060b6:	6019      	str	r1, [r3, #0]
 80060b8:	6813      	ldr	r3, [r2, #0]
 80060ba:	e027      	b.n	800610c <_printf_i+0xa4>
 80060bc:	2a73      	cmp	r2, #115	; 0x73
 80060be:	f000 80b4 	beq.w	800622a <_printf_i+0x1c2>
 80060c2:	d808      	bhi.n	80060d6 <_printf_i+0x6e>
 80060c4:	2a6f      	cmp	r2, #111	; 0x6f
 80060c6:	d02a      	beq.n	800611e <_printf_i+0xb6>
 80060c8:	2a70      	cmp	r2, #112	; 0x70
 80060ca:	d1e5      	bne.n	8006098 <_printf_i+0x30>
 80060cc:	680a      	ldr	r2, [r1, #0]
 80060ce:	f042 0220 	orr.w	r2, r2, #32
 80060d2:	600a      	str	r2, [r1, #0]
 80060d4:	e003      	b.n	80060de <_printf_i+0x76>
 80060d6:	2a75      	cmp	r2, #117	; 0x75
 80060d8:	d021      	beq.n	800611e <_printf_i+0xb6>
 80060da:	2a78      	cmp	r2, #120	; 0x78
 80060dc:	d1dc      	bne.n	8006098 <_printf_i+0x30>
 80060de:	2278      	movs	r2, #120	; 0x78
 80060e0:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80060e4:	496e      	ldr	r1, [pc, #440]	; (80062a0 <_printf_i+0x238>)
 80060e6:	e064      	b.n	80061b2 <_printf_i+0x14a>
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80060ee:	1d11      	adds	r1, r2, #4
 80060f0:	6019      	str	r1, [r3, #0]
 80060f2:	6813      	ldr	r3, [r2, #0]
 80060f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80060f8:	2301      	movs	r3, #1
 80060fa:	e0a3      	b.n	8006244 <_printf_i+0x1dc>
 80060fc:	f011 0f40 	tst.w	r1, #64	; 0x40
 8006100:	f102 0104 	add.w	r1, r2, #4
 8006104:	6019      	str	r1, [r3, #0]
 8006106:	d0d7      	beq.n	80060b8 <_printf_i+0x50>
 8006108:	f9b2 3000 	ldrsh.w	r3, [r2]
 800610c:	2b00      	cmp	r3, #0
 800610e:	da03      	bge.n	8006118 <_printf_i+0xb0>
 8006110:	222d      	movs	r2, #45	; 0x2d
 8006112:	425b      	negs	r3, r3
 8006114:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006118:	4962      	ldr	r1, [pc, #392]	; (80062a4 <_printf_i+0x23c>)
 800611a:	220a      	movs	r2, #10
 800611c:	e017      	b.n	800614e <_printf_i+0xe6>
 800611e:	6820      	ldr	r0, [r4, #0]
 8006120:	6819      	ldr	r1, [r3, #0]
 8006122:	f010 0f80 	tst.w	r0, #128	; 0x80
 8006126:	d003      	beq.n	8006130 <_printf_i+0xc8>
 8006128:	1d08      	adds	r0, r1, #4
 800612a:	6018      	str	r0, [r3, #0]
 800612c:	680b      	ldr	r3, [r1, #0]
 800612e:	e006      	b.n	800613e <_printf_i+0xd6>
 8006130:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006134:	f101 0004 	add.w	r0, r1, #4
 8006138:	6018      	str	r0, [r3, #0]
 800613a:	d0f7      	beq.n	800612c <_printf_i+0xc4>
 800613c:	880b      	ldrh	r3, [r1, #0]
 800613e:	4959      	ldr	r1, [pc, #356]	; (80062a4 <_printf_i+0x23c>)
 8006140:	2a6f      	cmp	r2, #111	; 0x6f
 8006142:	bf14      	ite	ne
 8006144:	220a      	movne	r2, #10
 8006146:	2208      	moveq	r2, #8
 8006148:	2000      	movs	r0, #0
 800614a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800614e:	6865      	ldr	r5, [r4, #4]
 8006150:	60a5      	str	r5, [r4, #8]
 8006152:	2d00      	cmp	r5, #0
 8006154:	f2c0 809c 	blt.w	8006290 <_printf_i+0x228>
 8006158:	6820      	ldr	r0, [r4, #0]
 800615a:	f020 0004 	bic.w	r0, r0, #4
 800615e:	6020      	str	r0, [r4, #0]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d13f      	bne.n	80061e4 <_printf_i+0x17c>
 8006164:	2d00      	cmp	r5, #0
 8006166:	f040 8095 	bne.w	8006294 <_printf_i+0x22c>
 800616a:	4675      	mov	r5, lr
 800616c:	2a08      	cmp	r2, #8
 800616e:	d10b      	bne.n	8006188 <_printf_i+0x120>
 8006170:	6823      	ldr	r3, [r4, #0]
 8006172:	07da      	lsls	r2, r3, #31
 8006174:	d508      	bpl.n	8006188 <_printf_i+0x120>
 8006176:	6923      	ldr	r3, [r4, #16]
 8006178:	6862      	ldr	r2, [r4, #4]
 800617a:	429a      	cmp	r2, r3
 800617c:	bfde      	ittt	le
 800617e:	2330      	movle	r3, #48	; 0x30
 8006180:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006184:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006188:	ebae 0305 	sub.w	r3, lr, r5
 800618c:	6123      	str	r3, [r4, #16]
 800618e:	f8cd 8000 	str.w	r8, [sp]
 8006192:	463b      	mov	r3, r7
 8006194:	aa03      	add	r2, sp, #12
 8006196:	4621      	mov	r1, r4
 8006198:	4630      	mov	r0, r6
 800619a:	f7ff feef 	bl	8005f7c <_printf_common>
 800619e:	3001      	adds	r0, #1
 80061a0:	d155      	bne.n	800624e <_printf_i+0x1e6>
 80061a2:	f04f 30ff 	mov.w	r0, #4294967295
 80061a6:	b005      	add	sp, #20
 80061a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80061ac:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80061b0:	493c      	ldr	r1, [pc, #240]	; (80062a4 <_printf_i+0x23c>)
 80061b2:	6822      	ldr	r2, [r4, #0]
 80061b4:	6818      	ldr	r0, [r3, #0]
 80061b6:	f012 0f80 	tst.w	r2, #128	; 0x80
 80061ba:	f100 0504 	add.w	r5, r0, #4
 80061be:	601d      	str	r5, [r3, #0]
 80061c0:	d001      	beq.n	80061c6 <_printf_i+0x15e>
 80061c2:	6803      	ldr	r3, [r0, #0]
 80061c4:	e002      	b.n	80061cc <_printf_i+0x164>
 80061c6:	0655      	lsls	r5, r2, #25
 80061c8:	d5fb      	bpl.n	80061c2 <_printf_i+0x15a>
 80061ca:	8803      	ldrh	r3, [r0, #0]
 80061cc:	07d0      	lsls	r0, r2, #31
 80061ce:	bf44      	itt	mi
 80061d0:	f042 0220 	orrmi.w	r2, r2, #32
 80061d4:	6022      	strmi	r2, [r4, #0]
 80061d6:	b91b      	cbnz	r3, 80061e0 <_printf_i+0x178>
 80061d8:	6822      	ldr	r2, [r4, #0]
 80061da:	f022 0220 	bic.w	r2, r2, #32
 80061de:	6022      	str	r2, [r4, #0]
 80061e0:	2210      	movs	r2, #16
 80061e2:	e7b1      	b.n	8006148 <_printf_i+0xe0>
 80061e4:	4675      	mov	r5, lr
 80061e6:	fbb3 f0f2 	udiv	r0, r3, r2
 80061ea:	fb02 3310 	mls	r3, r2, r0, r3
 80061ee:	5ccb      	ldrb	r3, [r1, r3]
 80061f0:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80061f4:	4603      	mov	r3, r0
 80061f6:	2800      	cmp	r0, #0
 80061f8:	d1f5      	bne.n	80061e6 <_printf_i+0x17e>
 80061fa:	e7b7      	b.n	800616c <_printf_i+0x104>
 80061fc:	6808      	ldr	r0, [r1, #0]
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	6949      	ldr	r1, [r1, #20]
 8006202:	f010 0f80 	tst.w	r0, #128	; 0x80
 8006206:	d004      	beq.n	8006212 <_printf_i+0x1aa>
 8006208:	1d10      	adds	r0, r2, #4
 800620a:	6018      	str	r0, [r3, #0]
 800620c:	6813      	ldr	r3, [r2, #0]
 800620e:	6019      	str	r1, [r3, #0]
 8006210:	e007      	b.n	8006222 <_printf_i+0x1ba>
 8006212:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006216:	f102 0004 	add.w	r0, r2, #4
 800621a:	6018      	str	r0, [r3, #0]
 800621c:	6813      	ldr	r3, [r2, #0]
 800621e:	d0f6      	beq.n	800620e <_printf_i+0x1a6>
 8006220:	8019      	strh	r1, [r3, #0]
 8006222:	2300      	movs	r3, #0
 8006224:	6123      	str	r3, [r4, #16]
 8006226:	4675      	mov	r5, lr
 8006228:	e7b1      	b.n	800618e <_printf_i+0x126>
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	1d11      	adds	r1, r2, #4
 800622e:	6019      	str	r1, [r3, #0]
 8006230:	6815      	ldr	r5, [r2, #0]
 8006232:	6862      	ldr	r2, [r4, #4]
 8006234:	2100      	movs	r1, #0
 8006236:	4628      	mov	r0, r5
 8006238:	f7f9 ffa2 	bl	8000180 <memchr>
 800623c:	b108      	cbz	r0, 8006242 <_printf_i+0x1da>
 800623e:	1b40      	subs	r0, r0, r5
 8006240:	6060      	str	r0, [r4, #4]
 8006242:	6863      	ldr	r3, [r4, #4]
 8006244:	6123      	str	r3, [r4, #16]
 8006246:	2300      	movs	r3, #0
 8006248:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800624c:	e79f      	b.n	800618e <_printf_i+0x126>
 800624e:	6923      	ldr	r3, [r4, #16]
 8006250:	462a      	mov	r2, r5
 8006252:	4639      	mov	r1, r7
 8006254:	4630      	mov	r0, r6
 8006256:	47c0      	blx	r8
 8006258:	3001      	adds	r0, #1
 800625a:	d0a2      	beq.n	80061a2 <_printf_i+0x13a>
 800625c:	6823      	ldr	r3, [r4, #0]
 800625e:	079b      	lsls	r3, r3, #30
 8006260:	d507      	bpl.n	8006272 <_printf_i+0x20a>
 8006262:	2500      	movs	r5, #0
 8006264:	f104 0919 	add.w	r9, r4, #25
 8006268:	68e3      	ldr	r3, [r4, #12]
 800626a:	9a03      	ldr	r2, [sp, #12]
 800626c:	1a9b      	subs	r3, r3, r2
 800626e:	429d      	cmp	r5, r3
 8006270:	db05      	blt.n	800627e <_printf_i+0x216>
 8006272:	68e0      	ldr	r0, [r4, #12]
 8006274:	9b03      	ldr	r3, [sp, #12]
 8006276:	4298      	cmp	r0, r3
 8006278:	bfb8      	it	lt
 800627a:	4618      	movlt	r0, r3
 800627c:	e793      	b.n	80061a6 <_printf_i+0x13e>
 800627e:	2301      	movs	r3, #1
 8006280:	464a      	mov	r2, r9
 8006282:	4639      	mov	r1, r7
 8006284:	4630      	mov	r0, r6
 8006286:	47c0      	blx	r8
 8006288:	3001      	adds	r0, #1
 800628a:	d08a      	beq.n	80061a2 <_printf_i+0x13a>
 800628c:	3501      	adds	r5, #1
 800628e:	e7eb      	b.n	8006268 <_printf_i+0x200>
 8006290:	2b00      	cmp	r3, #0
 8006292:	d1a7      	bne.n	80061e4 <_printf_i+0x17c>
 8006294:	780b      	ldrb	r3, [r1, #0]
 8006296:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800629a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800629e:	e765      	b.n	800616c <_printf_i+0x104>
 80062a0:	08006a2e 	.word	0x08006a2e
 80062a4:	08006a1d 	.word	0x08006a1d

080062a8 <_sbrk_r>:
 80062a8:	b538      	push	{r3, r4, r5, lr}
 80062aa:	4c06      	ldr	r4, [pc, #24]	; (80062c4 <_sbrk_r+0x1c>)
 80062ac:	2300      	movs	r3, #0
 80062ae:	4605      	mov	r5, r0
 80062b0:	4608      	mov	r0, r1
 80062b2:	6023      	str	r3, [r4, #0]
 80062b4:	f000 f8de 	bl	8006474 <_sbrk>
 80062b8:	1c43      	adds	r3, r0, #1
 80062ba:	d102      	bne.n	80062c2 <_sbrk_r+0x1a>
 80062bc:	6823      	ldr	r3, [r4, #0]
 80062be:	b103      	cbz	r3, 80062c2 <_sbrk_r+0x1a>
 80062c0:	602b      	str	r3, [r5, #0]
 80062c2:	bd38      	pop	{r3, r4, r5, pc}
 80062c4:	2000152c 	.word	0x2000152c

080062c8 <__sread>:
 80062c8:	b510      	push	{r4, lr}
 80062ca:	460c      	mov	r4, r1
 80062cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062d0:	f000 f896 	bl	8006400 <_read_r>
 80062d4:	2800      	cmp	r0, #0
 80062d6:	bfab      	itete	ge
 80062d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80062da:	89a3      	ldrhlt	r3, [r4, #12]
 80062dc:	181b      	addge	r3, r3, r0
 80062de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80062e2:	bfac      	ite	ge
 80062e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80062e6:	81a3      	strhlt	r3, [r4, #12]
 80062e8:	bd10      	pop	{r4, pc}

080062ea <__swrite>:
 80062ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062ee:	461f      	mov	r7, r3
 80062f0:	898b      	ldrh	r3, [r1, #12]
 80062f2:	05db      	lsls	r3, r3, #23
 80062f4:	4605      	mov	r5, r0
 80062f6:	460c      	mov	r4, r1
 80062f8:	4616      	mov	r6, r2
 80062fa:	d505      	bpl.n	8006308 <__swrite+0x1e>
 80062fc:	2302      	movs	r3, #2
 80062fe:	2200      	movs	r2, #0
 8006300:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006304:	f000 f868 	bl	80063d8 <_lseek_r>
 8006308:	89a3      	ldrh	r3, [r4, #12]
 800630a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800630e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006312:	81a3      	strh	r3, [r4, #12]
 8006314:	4632      	mov	r2, r6
 8006316:	463b      	mov	r3, r7
 8006318:	4628      	mov	r0, r5
 800631a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800631e:	f000 b817 	b.w	8006350 <_write_r>

08006322 <__sseek>:
 8006322:	b510      	push	{r4, lr}
 8006324:	460c      	mov	r4, r1
 8006326:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800632a:	f000 f855 	bl	80063d8 <_lseek_r>
 800632e:	1c43      	adds	r3, r0, #1
 8006330:	89a3      	ldrh	r3, [r4, #12]
 8006332:	bf15      	itete	ne
 8006334:	6560      	strne	r0, [r4, #84]	; 0x54
 8006336:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800633a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800633e:	81a3      	strheq	r3, [r4, #12]
 8006340:	bf18      	it	ne
 8006342:	81a3      	strhne	r3, [r4, #12]
 8006344:	bd10      	pop	{r4, pc}

08006346 <__sclose>:
 8006346:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800634a:	f000 b813 	b.w	8006374 <_close_r>
	...

08006350 <_write_r>:
 8006350:	b538      	push	{r3, r4, r5, lr}
 8006352:	4c07      	ldr	r4, [pc, #28]	; (8006370 <_write_r+0x20>)
 8006354:	4605      	mov	r5, r0
 8006356:	4608      	mov	r0, r1
 8006358:	4611      	mov	r1, r2
 800635a:	2200      	movs	r2, #0
 800635c:	6022      	str	r2, [r4, #0]
 800635e:	461a      	mov	r2, r3
 8006360:	f7fc f83c 	bl	80023dc <_write>
 8006364:	1c43      	adds	r3, r0, #1
 8006366:	d102      	bne.n	800636e <_write_r+0x1e>
 8006368:	6823      	ldr	r3, [r4, #0]
 800636a:	b103      	cbz	r3, 800636e <_write_r+0x1e>
 800636c:	602b      	str	r3, [r5, #0]
 800636e:	bd38      	pop	{r3, r4, r5, pc}
 8006370:	2000152c 	.word	0x2000152c

08006374 <_close_r>:
 8006374:	b538      	push	{r3, r4, r5, lr}
 8006376:	4c06      	ldr	r4, [pc, #24]	; (8006390 <_close_r+0x1c>)
 8006378:	2300      	movs	r3, #0
 800637a:	4605      	mov	r5, r0
 800637c:	4608      	mov	r0, r1
 800637e:	6023      	str	r3, [r4, #0]
 8006380:	f000 f850 	bl	8006424 <_close>
 8006384:	1c43      	adds	r3, r0, #1
 8006386:	d102      	bne.n	800638e <_close_r+0x1a>
 8006388:	6823      	ldr	r3, [r4, #0]
 800638a:	b103      	cbz	r3, 800638e <_close_r+0x1a>
 800638c:	602b      	str	r3, [r5, #0]
 800638e:	bd38      	pop	{r3, r4, r5, pc}
 8006390:	2000152c 	.word	0x2000152c

08006394 <_fstat_r>:
 8006394:	b538      	push	{r3, r4, r5, lr}
 8006396:	4c07      	ldr	r4, [pc, #28]	; (80063b4 <_fstat_r+0x20>)
 8006398:	2300      	movs	r3, #0
 800639a:	4605      	mov	r5, r0
 800639c:	4608      	mov	r0, r1
 800639e:	4611      	mov	r1, r2
 80063a0:	6023      	str	r3, [r4, #0]
 80063a2:	f000 f847 	bl	8006434 <_fstat>
 80063a6:	1c43      	adds	r3, r0, #1
 80063a8:	d102      	bne.n	80063b0 <_fstat_r+0x1c>
 80063aa:	6823      	ldr	r3, [r4, #0]
 80063ac:	b103      	cbz	r3, 80063b0 <_fstat_r+0x1c>
 80063ae:	602b      	str	r3, [r5, #0]
 80063b0:	bd38      	pop	{r3, r4, r5, pc}
 80063b2:	bf00      	nop
 80063b4:	2000152c 	.word	0x2000152c

080063b8 <_isatty_r>:
 80063b8:	b538      	push	{r3, r4, r5, lr}
 80063ba:	4c06      	ldr	r4, [pc, #24]	; (80063d4 <_isatty_r+0x1c>)
 80063bc:	2300      	movs	r3, #0
 80063be:	4605      	mov	r5, r0
 80063c0:	4608      	mov	r0, r1
 80063c2:	6023      	str	r3, [r4, #0]
 80063c4:	f000 f83e 	bl	8006444 <_isatty>
 80063c8:	1c43      	adds	r3, r0, #1
 80063ca:	d102      	bne.n	80063d2 <_isatty_r+0x1a>
 80063cc:	6823      	ldr	r3, [r4, #0]
 80063ce:	b103      	cbz	r3, 80063d2 <_isatty_r+0x1a>
 80063d0:	602b      	str	r3, [r5, #0]
 80063d2:	bd38      	pop	{r3, r4, r5, pc}
 80063d4:	2000152c 	.word	0x2000152c

080063d8 <_lseek_r>:
 80063d8:	b538      	push	{r3, r4, r5, lr}
 80063da:	4c07      	ldr	r4, [pc, #28]	; (80063f8 <_lseek_r+0x20>)
 80063dc:	4605      	mov	r5, r0
 80063de:	4608      	mov	r0, r1
 80063e0:	4611      	mov	r1, r2
 80063e2:	2200      	movs	r2, #0
 80063e4:	6022      	str	r2, [r4, #0]
 80063e6:	461a      	mov	r2, r3
 80063e8:	f000 f834 	bl	8006454 <_lseek>
 80063ec:	1c43      	adds	r3, r0, #1
 80063ee:	d102      	bne.n	80063f6 <_lseek_r+0x1e>
 80063f0:	6823      	ldr	r3, [r4, #0]
 80063f2:	b103      	cbz	r3, 80063f6 <_lseek_r+0x1e>
 80063f4:	602b      	str	r3, [r5, #0]
 80063f6:	bd38      	pop	{r3, r4, r5, pc}
 80063f8:	2000152c 	.word	0x2000152c

080063fc <__malloc_lock>:
 80063fc:	4770      	bx	lr

080063fe <__malloc_unlock>:
 80063fe:	4770      	bx	lr

08006400 <_read_r>:
 8006400:	b538      	push	{r3, r4, r5, lr}
 8006402:	4c07      	ldr	r4, [pc, #28]	; (8006420 <_read_r+0x20>)
 8006404:	4605      	mov	r5, r0
 8006406:	4608      	mov	r0, r1
 8006408:	4611      	mov	r1, r2
 800640a:	2200      	movs	r2, #0
 800640c:	6022      	str	r2, [r4, #0]
 800640e:	461a      	mov	r2, r3
 8006410:	f000 f828 	bl	8006464 <_read>
 8006414:	1c43      	adds	r3, r0, #1
 8006416:	d102      	bne.n	800641e <_read_r+0x1e>
 8006418:	6823      	ldr	r3, [r4, #0]
 800641a:	b103      	cbz	r3, 800641e <_read_r+0x1e>
 800641c:	602b      	str	r3, [r5, #0]
 800641e:	bd38      	pop	{r3, r4, r5, pc}
 8006420:	2000152c 	.word	0x2000152c

08006424 <_close>:
 8006424:	4b02      	ldr	r3, [pc, #8]	; (8006430 <_close+0xc>)
 8006426:	2258      	movs	r2, #88	; 0x58
 8006428:	601a      	str	r2, [r3, #0]
 800642a:	f04f 30ff 	mov.w	r0, #4294967295
 800642e:	4770      	bx	lr
 8006430:	2000152c 	.word	0x2000152c

08006434 <_fstat>:
 8006434:	4b02      	ldr	r3, [pc, #8]	; (8006440 <_fstat+0xc>)
 8006436:	2258      	movs	r2, #88	; 0x58
 8006438:	601a      	str	r2, [r3, #0]
 800643a:	f04f 30ff 	mov.w	r0, #4294967295
 800643e:	4770      	bx	lr
 8006440:	2000152c 	.word	0x2000152c

08006444 <_isatty>:
 8006444:	4b02      	ldr	r3, [pc, #8]	; (8006450 <_isatty+0xc>)
 8006446:	2258      	movs	r2, #88	; 0x58
 8006448:	601a      	str	r2, [r3, #0]
 800644a:	2000      	movs	r0, #0
 800644c:	4770      	bx	lr
 800644e:	bf00      	nop
 8006450:	2000152c 	.word	0x2000152c

08006454 <_lseek>:
 8006454:	4b02      	ldr	r3, [pc, #8]	; (8006460 <_lseek+0xc>)
 8006456:	2258      	movs	r2, #88	; 0x58
 8006458:	601a      	str	r2, [r3, #0]
 800645a:	f04f 30ff 	mov.w	r0, #4294967295
 800645e:	4770      	bx	lr
 8006460:	2000152c 	.word	0x2000152c

08006464 <_read>:
 8006464:	4b02      	ldr	r3, [pc, #8]	; (8006470 <_read+0xc>)
 8006466:	2258      	movs	r2, #88	; 0x58
 8006468:	601a      	str	r2, [r3, #0]
 800646a:	f04f 30ff 	mov.w	r0, #4294967295
 800646e:	4770      	bx	lr
 8006470:	2000152c 	.word	0x2000152c

08006474 <_sbrk>:
 8006474:	4b04      	ldr	r3, [pc, #16]	; (8006488 <_sbrk+0x14>)
 8006476:	6819      	ldr	r1, [r3, #0]
 8006478:	4602      	mov	r2, r0
 800647a:	b909      	cbnz	r1, 8006480 <_sbrk+0xc>
 800647c:	4903      	ldr	r1, [pc, #12]	; (800648c <_sbrk+0x18>)
 800647e:	6019      	str	r1, [r3, #0]
 8006480:	6818      	ldr	r0, [r3, #0]
 8006482:	4402      	add	r2, r0
 8006484:	601a      	str	r2, [r3, #0]
 8006486:	4770      	bx	lr
 8006488:	20001310 	.word	0x20001310
 800648c:	20001530 	.word	0x20001530

08006490 <_init>:
 8006490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006492:	bf00      	nop
 8006494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006496:	bc08      	pop	{r3}
 8006498:	469e      	mov	lr, r3
 800649a:	4770      	bx	lr

0800649c <_fini>:
 800649c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800649e:	bf00      	nop
 80064a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064a2:	bc08      	pop	{r3}
 80064a4:	469e      	mov	lr, r3
 80064a6:	4770      	bx	lr
