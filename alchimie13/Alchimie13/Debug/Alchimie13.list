
Alchimie13.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006398  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  080064d8  080064d8  000164d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080065b8  080065b8  000165b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080065c0  080065c0  000165c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080065c4  080065c4  000165c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000234  20000004  080065c8  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000005e0  20000238  080067fc  00020238  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000818  080067fc  00020818  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY
 10 .debug_info   00017a78  00000000  00000000  00020268  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002f89  00000000  00000000  00037ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001a40  00000000  00000000  0003ac70  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000018d8  00000000  00000000  0003c6b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00022c70  00000000  00000000  0003df88  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000104d8  00000000  00000000  00060bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000db327  00000000  00000000  000710d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0014c3f7  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006f3c  00000000  00000000  0014c474  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000238 	.word	0x20000238
 800015c:	00000000 	.word	0x00000000
 8000160:	080064c0 	.word	0x080064c0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000023c 	.word	0x2000023c
 800017c:	080064c0 	.word	0x080064c0

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_uldivmod>:
 8000190:	b953      	cbnz	r3, 80001a8 <__aeabi_uldivmod+0x18>
 8000192:	b94a      	cbnz	r2, 80001a8 <__aeabi_uldivmod+0x18>
 8000194:	2900      	cmp	r1, #0
 8000196:	bf08      	it	eq
 8000198:	2800      	cmpeq	r0, #0
 800019a:	bf1c      	itt	ne
 800019c:	f04f 31ff 	movne.w	r1, #4294967295
 80001a0:	f04f 30ff 	movne.w	r0, #4294967295
 80001a4:	f000 b97a 	b.w	800049c <__aeabi_idiv0>
 80001a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001b0:	f000 f806 	bl	80001c0 <__udivmoddi4>
 80001b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001bc:	b004      	add	sp, #16
 80001be:	4770      	bx	lr

080001c0 <__udivmoddi4>:
 80001c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c4:	468c      	mov	ip, r1
 80001c6:	460d      	mov	r5, r1
 80001c8:	4604      	mov	r4, r0
 80001ca:	9e08      	ldr	r6, [sp, #32]
 80001cc:	2b00      	cmp	r3, #0
 80001ce:	d151      	bne.n	8000274 <__udivmoddi4+0xb4>
 80001d0:	428a      	cmp	r2, r1
 80001d2:	4617      	mov	r7, r2
 80001d4:	d96d      	bls.n	80002b2 <__udivmoddi4+0xf2>
 80001d6:	fab2 fe82 	clz	lr, r2
 80001da:	f1be 0f00 	cmp.w	lr, #0
 80001de:	d00b      	beq.n	80001f8 <__udivmoddi4+0x38>
 80001e0:	f1ce 0c20 	rsb	ip, lr, #32
 80001e4:	fa01 f50e 	lsl.w	r5, r1, lr
 80001e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80001ec:	fa02 f70e 	lsl.w	r7, r2, lr
 80001f0:	ea4c 0c05 	orr.w	ip, ip, r5
 80001f4:	fa00 f40e 	lsl.w	r4, r0, lr
 80001f8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80001fc:	0c25      	lsrs	r5, r4, #16
 80001fe:	fbbc f8fa 	udiv	r8, ip, sl
 8000202:	fa1f f987 	uxth.w	r9, r7
 8000206:	fb0a cc18 	mls	ip, sl, r8, ip
 800020a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800020e:	fb08 f309 	mul.w	r3, r8, r9
 8000212:	42ab      	cmp	r3, r5
 8000214:	d90a      	bls.n	800022c <__udivmoddi4+0x6c>
 8000216:	19ed      	adds	r5, r5, r7
 8000218:	f108 32ff 	add.w	r2, r8, #4294967295
 800021c:	f080 8123 	bcs.w	8000466 <__udivmoddi4+0x2a6>
 8000220:	42ab      	cmp	r3, r5
 8000222:	f240 8120 	bls.w	8000466 <__udivmoddi4+0x2a6>
 8000226:	f1a8 0802 	sub.w	r8, r8, #2
 800022a:	443d      	add	r5, r7
 800022c:	1aed      	subs	r5, r5, r3
 800022e:	b2a4      	uxth	r4, r4
 8000230:	fbb5 f0fa 	udiv	r0, r5, sl
 8000234:	fb0a 5510 	mls	r5, sl, r0, r5
 8000238:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800023c:	fb00 f909 	mul.w	r9, r0, r9
 8000240:	45a1      	cmp	r9, r4
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x98>
 8000244:	19e4      	adds	r4, r4, r7
 8000246:	f100 33ff 	add.w	r3, r0, #4294967295
 800024a:	f080 810a 	bcs.w	8000462 <__udivmoddi4+0x2a2>
 800024e:	45a1      	cmp	r9, r4
 8000250:	f240 8107 	bls.w	8000462 <__udivmoddi4+0x2a2>
 8000254:	3802      	subs	r0, #2
 8000256:	443c      	add	r4, r7
 8000258:	eba4 0409 	sub.w	r4, r4, r9
 800025c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000260:	2100      	movs	r1, #0
 8000262:	2e00      	cmp	r6, #0
 8000264:	d061      	beq.n	800032a <__udivmoddi4+0x16a>
 8000266:	fa24 f40e 	lsr.w	r4, r4, lr
 800026a:	2300      	movs	r3, #0
 800026c:	6034      	str	r4, [r6, #0]
 800026e:	6073      	str	r3, [r6, #4]
 8000270:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000274:	428b      	cmp	r3, r1
 8000276:	d907      	bls.n	8000288 <__udivmoddi4+0xc8>
 8000278:	2e00      	cmp	r6, #0
 800027a:	d054      	beq.n	8000326 <__udivmoddi4+0x166>
 800027c:	2100      	movs	r1, #0
 800027e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000282:	4608      	mov	r0, r1
 8000284:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000288:	fab3 f183 	clz	r1, r3
 800028c:	2900      	cmp	r1, #0
 800028e:	f040 808e 	bne.w	80003ae <__udivmoddi4+0x1ee>
 8000292:	42ab      	cmp	r3, r5
 8000294:	d302      	bcc.n	800029c <__udivmoddi4+0xdc>
 8000296:	4282      	cmp	r2, r0
 8000298:	f200 80fa 	bhi.w	8000490 <__udivmoddi4+0x2d0>
 800029c:	1a84      	subs	r4, r0, r2
 800029e:	eb65 0503 	sbc.w	r5, r5, r3
 80002a2:	2001      	movs	r0, #1
 80002a4:	46ac      	mov	ip, r5
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	d03f      	beq.n	800032a <__udivmoddi4+0x16a>
 80002aa:	e886 1010 	stmia.w	r6, {r4, ip}
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	b912      	cbnz	r2, 80002ba <__udivmoddi4+0xfa>
 80002b4:	2701      	movs	r7, #1
 80002b6:	fbb7 f7f2 	udiv	r7, r7, r2
 80002ba:	fab7 fe87 	clz	lr, r7
 80002be:	f1be 0f00 	cmp.w	lr, #0
 80002c2:	d134      	bne.n	800032e <__udivmoddi4+0x16e>
 80002c4:	1beb      	subs	r3, r5, r7
 80002c6:	0c3a      	lsrs	r2, r7, #16
 80002c8:	fa1f fc87 	uxth.w	ip, r7
 80002cc:	2101      	movs	r1, #1
 80002ce:	fbb3 f8f2 	udiv	r8, r3, r2
 80002d2:	0c25      	lsrs	r5, r4, #16
 80002d4:	fb02 3318 	mls	r3, r2, r8, r3
 80002d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80002dc:	fb0c f308 	mul.w	r3, ip, r8
 80002e0:	42ab      	cmp	r3, r5
 80002e2:	d907      	bls.n	80002f4 <__udivmoddi4+0x134>
 80002e4:	19ed      	adds	r5, r5, r7
 80002e6:	f108 30ff 	add.w	r0, r8, #4294967295
 80002ea:	d202      	bcs.n	80002f2 <__udivmoddi4+0x132>
 80002ec:	42ab      	cmp	r3, r5
 80002ee:	f200 80d1 	bhi.w	8000494 <__udivmoddi4+0x2d4>
 80002f2:	4680      	mov	r8, r0
 80002f4:	1aed      	subs	r5, r5, r3
 80002f6:	b2a3      	uxth	r3, r4
 80002f8:	fbb5 f0f2 	udiv	r0, r5, r2
 80002fc:	fb02 5510 	mls	r5, r2, r0, r5
 8000300:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000304:	fb0c fc00 	mul.w	ip, ip, r0
 8000308:	45a4      	cmp	ip, r4
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x15c>
 800030c:	19e4      	adds	r4, r4, r7
 800030e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x15a>
 8000314:	45a4      	cmp	ip, r4
 8000316:	f200 80b8 	bhi.w	800048a <__udivmoddi4+0x2ca>
 800031a:	4618      	mov	r0, r3
 800031c:	eba4 040c 	sub.w	r4, r4, ip
 8000320:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000324:	e79d      	b.n	8000262 <__udivmoddi4+0xa2>
 8000326:	4631      	mov	r1, r6
 8000328:	4630      	mov	r0, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	f1ce 0420 	rsb	r4, lr, #32
 8000332:	fa05 f30e 	lsl.w	r3, r5, lr
 8000336:	fa07 f70e 	lsl.w	r7, r7, lr
 800033a:	fa20 f804 	lsr.w	r8, r0, r4
 800033e:	0c3a      	lsrs	r2, r7, #16
 8000340:	fa25 f404 	lsr.w	r4, r5, r4
 8000344:	ea48 0803 	orr.w	r8, r8, r3
 8000348:	fbb4 f1f2 	udiv	r1, r4, r2
 800034c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000350:	fb02 4411 	mls	r4, r2, r1, r4
 8000354:	fa1f fc87 	uxth.w	ip, r7
 8000358:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800035c:	fb01 f30c 	mul.w	r3, r1, ip
 8000360:	42ab      	cmp	r3, r5
 8000362:	fa00 f40e 	lsl.w	r4, r0, lr
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x1bc>
 8000368:	19ed      	adds	r5, r5, r7
 800036a:	f101 30ff 	add.w	r0, r1, #4294967295
 800036e:	f080 808a 	bcs.w	8000486 <__udivmoddi4+0x2c6>
 8000372:	42ab      	cmp	r3, r5
 8000374:	f240 8087 	bls.w	8000486 <__udivmoddi4+0x2c6>
 8000378:	3902      	subs	r1, #2
 800037a:	443d      	add	r5, r7
 800037c:	1aeb      	subs	r3, r5, r3
 800037e:	fa1f f588 	uxth.w	r5, r8
 8000382:	fbb3 f0f2 	udiv	r0, r3, r2
 8000386:	fb02 3310 	mls	r3, r2, r0, r3
 800038a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800038e:	fb00 f30c 	mul.w	r3, r0, ip
 8000392:	42ab      	cmp	r3, r5
 8000394:	d907      	bls.n	80003a6 <__udivmoddi4+0x1e6>
 8000396:	19ed      	adds	r5, r5, r7
 8000398:	f100 38ff 	add.w	r8, r0, #4294967295
 800039c:	d26f      	bcs.n	800047e <__udivmoddi4+0x2be>
 800039e:	42ab      	cmp	r3, r5
 80003a0:	d96d      	bls.n	800047e <__udivmoddi4+0x2be>
 80003a2:	3802      	subs	r0, #2
 80003a4:	443d      	add	r5, r7
 80003a6:	1aeb      	subs	r3, r5, r3
 80003a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003ac:	e78f      	b.n	80002ce <__udivmoddi4+0x10e>
 80003ae:	f1c1 0720 	rsb	r7, r1, #32
 80003b2:	fa22 f807 	lsr.w	r8, r2, r7
 80003b6:	408b      	lsls	r3, r1
 80003b8:	fa05 f401 	lsl.w	r4, r5, r1
 80003bc:	ea48 0303 	orr.w	r3, r8, r3
 80003c0:	fa20 fe07 	lsr.w	lr, r0, r7
 80003c4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80003c8:	40fd      	lsrs	r5, r7
 80003ca:	ea4e 0e04 	orr.w	lr, lr, r4
 80003ce:	fbb5 f9fc 	udiv	r9, r5, ip
 80003d2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80003d6:	fb0c 5519 	mls	r5, ip, r9, r5
 80003da:	fa1f f883 	uxth.w	r8, r3
 80003de:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80003e2:	fb09 f408 	mul.w	r4, r9, r8
 80003e6:	42ac      	cmp	r4, r5
 80003e8:	fa02 f201 	lsl.w	r2, r2, r1
 80003ec:	fa00 fa01 	lsl.w	sl, r0, r1
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x244>
 80003f2:	18ed      	adds	r5, r5, r3
 80003f4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003f8:	d243      	bcs.n	8000482 <__udivmoddi4+0x2c2>
 80003fa:	42ac      	cmp	r4, r5
 80003fc:	d941      	bls.n	8000482 <__udivmoddi4+0x2c2>
 80003fe:	f1a9 0902 	sub.w	r9, r9, #2
 8000402:	441d      	add	r5, r3
 8000404:	1b2d      	subs	r5, r5, r4
 8000406:	fa1f fe8e 	uxth.w	lr, lr
 800040a:	fbb5 f0fc 	udiv	r0, r5, ip
 800040e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000412:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000416:	fb00 f808 	mul.w	r8, r0, r8
 800041a:	45a0      	cmp	r8, r4
 800041c:	d907      	bls.n	800042e <__udivmoddi4+0x26e>
 800041e:	18e4      	adds	r4, r4, r3
 8000420:	f100 35ff 	add.w	r5, r0, #4294967295
 8000424:	d229      	bcs.n	800047a <__udivmoddi4+0x2ba>
 8000426:	45a0      	cmp	r8, r4
 8000428:	d927      	bls.n	800047a <__udivmoddi4+0x2ba>
 800042a:	3802      	subs	r0, #2
 800042c:	441c      	add	r4, r3
 800042e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000432:	eba4 0408 	sub.w	r4, r4, r8
 8000436:	fba0 8902 	umull	r8, r9, r0, r2
 800043a:	454c      	cmp	r4, r9
 800043c:	46c6      	mov	lr, r8
 800043e:	464d      	mov	r5, r9
 8000440:	d315      	bcc.n	800046e <__udivmoddi4+0x2ae>
 8000442:	d012      	beq.n	800046a <__udivmoddi4+0x2aa>
 8000444:	b156      	cbz	r6, 800045c <__udivmoddi4+0x29c>
 8000446:	ebba 030e 	subs.w	r3, sl, lr
 800044a:	eb64 0405 	sbc.w	r4, r4, r5
 800044e:	fa04 f707 	lsl.w	r7, r4, r7
 8000452:	40cb      	lsrs	r3, r1
 8000454:	431f      	orrs	r7, r3
 8000456:	40cc      	lsrs	r4, r1
 8000458:	6037      	str	r7, [r6, #0]
 800045a:	6074      	str	r4, [r6, #4]
 800045c:	2100      	movs	r1, #0
 800045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000462:	4618      	mov	r0, r3
 8000464:	e6f8      	b.n	8000258 <__udivmoddi4+0x98>
 8000466:	4690      	mov	r8, r2
 8000468:	e6e0      	b.n	800022c <__udivmoddi4+0x6c>
 800046a:	45c2      	cmp	sl, r8
 800046c:	d2ea      	bcs.n	8000444 <__udivmoddi4+0x284>
 800046e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000472:	eb69 0503 	sbc.w	r5, r9, r3
 8000476:	3801      	subs	r0, #1
 8000478:	e7e4      	b.n	8000444 <__udivmoddi4+0x284>
 800047a:	4628      	mov	r0, r5
 800047c:	e7d7      	b.n	800042e <__udivmoddi4+0x26e>
 800047e:	4640      	mov	r0, r8
 8000480:	e791      	b.n	80003a6 <__udivmoddi4+0x1e6>
 8000482:	4681      	mov	r9, r0
 8000484:	e7be      	b.n	8000404 <__udivmoddi4+0x244>
 8000486:	4601      	mov	r1, r0
 8000488:	e778      	b.n	800037c <__udivmoddi4+0x1bc>
 800048a:	3802      	subs	r0, #2
 800048c:	443c      	add	r4, r7
 800048e:	e745      	b.n	800031c <__udivmoddi4+0x15c>
 8000490:	4608      	mov	r0, r1
 8000492:	e708      	b.n	80002a6 <__udivmoddi4+0xe6>
 8000494:	f1a8 0802 	sub.w	r8, r8, #2
 8000498:	443d      	add	r5, r7
 800049a:	e72b      	b.n	80002f4 <__udivmoddi4+0x134>

0800049c <__aeabi_idiv0>:
 800049c:	4770      	bx	lr
 800049e:	bf00      	nop

080004a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b082      	sub	sp, #8
 80004a4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80004a6:	2300      	movs	r3, #0
 80004a8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004aa:	4a0c      	ldr	r2, [pc, #48]	; (80004dc <HAL_Init+0x3c>)
 80004ac:	4b0b      	ldr	r3, [pc, #44]	; (80004dc <HAL_Init+0x3c>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004b4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004b6:	2003      	movs	r0, #3
 80004b8:	f000 f966 	bl	8000788 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80004bc:	2000      	movs	r0, #0
 80004be:	f000 f80f 	bl	80004e0 <HAL_InitTick>
 80004c2:	4603      	mov	r3, r0
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d002      	beq.n	80004ce <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80004c8:	2301      	movs	r3, #1
 80004ca:	71fb      	strb	r3, [r7, #7]
 80004cc:	e001      	b.n	80004d2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80004ce:	f005 fd7a 	bl	8005fc6 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80004d2:	79fb      	ldrb	r3, [r7, #7]
}
 80004d4:	4618      	mov	r0, r3
 80004d6:	3708      	adds	r7, #8
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	58004000 	.word	0x58004000

080004e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b084      	sub	sp, #16
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80004e8:	2300      	movs	r3, #0
 80004ea:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80004ec:	4b17      	ldr	r3, [pc, #92]	; (800054c <HAL_InitTick+0x6c>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d023      	beq.n	800053c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U /uwTickFreq)) == 0U)
 80004f4:	f002 fbc8 	bl	8002c88 <HAL_RCC_GetHCLKFreq>
 80004f8:	4601      	mov	r1, r0
 80004fa:	4b14      	ldr	r3, [pc, #80]	; (800054c <HAL_InitTick+0x6c>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000502:	fbb2 f3f3 	udiv	r3, r2, r3
 8000506:	fbb1 f3f3 	udiv	r3, r1, r3
 800050a:	4618      	mov	r0, r3
 800050c:	f000 f96f 	bl	80007ee <HAL_SYSTICK_Config>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d10f      	bne.n	8000536 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	2b0f      	cmp	r3, #15
 800051a:	d809      	bhi.n	8000530 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800051c:	2200      	movs	r2, #0
 800051e:	6879      	ldr	r1, [r7, #4]
 8000520:	f04f 30ff 	mov.w	r0, #4294967295
 8000524:	f000 f93b 	bl	800079e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000528:	4a09      	ldr	r2, [pc, #36]	; (8000550 <HAL_InitTick+0x70>)
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	6013      	str	r3, [r2, #0]
 800052e:	e007      	b.n	8000540 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000530:	2301      	movs	r3, #1
 8000532:	73fb      	strb	r3, [r7, #15]
 8000534:	e004      	b.n	8000540 <HAL_InitTick+0x60>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8000536:	2301      	movs	r3, #1
 8000538:	73fb      	strb	r3, [r7, #15]
 800053a:	e001      	b.n	8000540 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800053c:	2301      	movs	r3, #1
 800053e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000540:	7bfb      	ldrb	r3, [r7, #15]
}
 8000542:	4618      	mov	r0, r3
 8000544:	3710      	adds	r7, #16
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	20000008 	.word	0x20000008
 8000550:	20000004 	.word	0x20000004

08000554 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000558:	4b05      	ldr	r3, [pc, #20]	; (8000570 <HAL_IncTick+0x1c>)
 800055a:	681a      	ldr	r2, [r3, #0]
 800055c:	4b05      	ldr	r3, [pc, #20]	; (8000574 <HAL_IncTick+0x20>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4413      	add	r3, r2
 8000562:	4a03      	ldr	r2, [pc, #12]	; (8000570 <HAL_IncTick+0x1c>)
 8000564:	6013      	str	r3, [r2, #0]
}
 8000566:	bf00      	nop
 8000568:	46bd      	mov	sp, r7
 800056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056e:	4770      	bx	lr
 8000570:	20000384 	.word	0x20000384
 8000574:	20000008 	.word	0x20000008

08000578 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
  return uwTick;
 800057c:	4b03      	ldr	r3, [pc, #12]	; (800058c <HAL_GetTick+0x14>)
 800057e:	681b      	ldr	r3, [r3, #0]
}
 8000580:	4618      	mov	r0, r3
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	20000384 	.word	0x20000384

08000590 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000594:	4b03      	ldr	r3, [pc, #12]	; (80005a4 <HAL_GetTickPrio+0x14>)
 8000596:	681b      	ldr	r3, [r3, #0]
}
 8000598:	4618      	mov	r0, r3
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	20000004 	.word	0x20000004

080005a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b084      	sub	sp, #16
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 80005b0:	f7ff ffe2 	bl	8000578 <HAL_GetTick>
 80005b4:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005c0:	d004      	beq.n	80005cc <HAL_Delay+0x24>
    {
      wait += (uint32_t)(uwTickFreq);
 80005c2:	4b09      	ldr	r3, [pc, #36]	; (80005e8 <HAL_Delay+0x40>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	68fa      	ldr	r2, [r7, #12]
 80005c8:	4413      	add	r3, r2
 80005ca:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 80005cc:	bf00      	nop
 80005ce:	f7ff ffd3 	bl	8000578 <HAL_GetTick>
 80005d2:	4602      	mov	r2, r0
 80005d4:	68bb      	ldr	r3, [r7, #8]
 80005d6:	1ad2      	subs	r2, r2, r3
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	429a      	cmp	r2, r3
 80005dc:	d3f7      	bcc.n	80005ce <HAL_Delay+0x26>
    {
    }
  }
 80005de:	bf00      	nop
 80005e0:	3710      	adds	r7, #16
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	20000008 	.word	0x20000008

080005ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b085      	sub	sp, #20
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	f003 0307 	and.w	r3, r3, #7
 80005fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005fc:	4b0c      	ldr	r3, [pc, #48]	; (8000630 <__NVIC_SetPriorityGrouping+0x44>)
 80005fe:	68db      	ldr	r3, [r3, #12]
 8000600:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000602:	68ba      	ldr	r2, [r7, #8]
 8000604:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000608:	4013      	ands	r3, r2
 800060a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000610:	68bb      	ldr	r3, [r7, #8]
 8000612:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000614:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000618:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800061c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800061e:	4a04      	ldr	r2, [pc, #16]	; (8000630 <__NVIC_SetPriorityGrouping+0x44>)
 8000620:	68bb      	ldr	r3, [r7, #8]
 8000622:	60d3      	str	r3, [r2, #12]
}
 8000624:	bf00      	nop
 8000626:	3714      	adds	r7, #20
 8000628:	46bd      	mov	sp, r7
 800062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062e:	4770      	bx	lr
 8000630:	e000ed00 	.word	0xe000ed00

08000634 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000638:	4b04      	ldr	r3, [pc, #16]	; (800064c <__NVIC_GetPriorityGrouping+0x18>)
 800063a:	68db      	ldr	r3, [r3, #12]
 800063c:	0a1b      	lsrs	r3, r3, #8
 800063e:	f003 0307 	and.w	r3, r3, #7
}
 8000642:	4618      	mov	r0, r3
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr
 800064c:	e000ed00 	.word	0xe000ed00

08000650 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000650:	b480      	push	{r7}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0
 8000656:	4603      	mov	r3, r0
 8000658:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800065a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800065e:	2b00      	cmp	r3, #0
 8000660:	db0b      	blt.n	800067a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000662:	4909      	ldr	r1, [pc, #36]	; (8000688 <__NVIC_EnableIRQ+0x38>)
 8000664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000668:	095b      	lsrs	r3, r3, #5
 800066a:	79fa      	ldrb	r2, [r7, #7]
 800066c:	f002 021f 	and.w	r2, r2, #31
 8000670:	2001      	movs	r0, #1
 8000672:	fa00 f202 	lsl.w	r2, r0, r2
 8000676:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800067a:	bf00      	nop
 800067c:	370c      	adds	r7, #12
 800067e:	46bd      	mov	sp, r7
 8000680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop
 8000688:	e000e100 	.word	0xe000e100

0800068c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0
 8000692:	4603      	mov	r3, r0
 8000694:	6039      	str	r1, [r7, #0]
 8000696:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000698:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800069c:	2b00      	cmp	r3, #0
 800069e:	db0a      	blt.n	80006b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a0:	490d      	ldr	r1, [pc, #52]	; (80006d8 <__NVIC_SetPriority+0x4c>)
 80006a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a6:	683a      	ldr	r2, [r7, #0]
 80006a8:	b2d2      	uxtb	r2, r2
 80006aa:	0112      	lsls	r2, r2, #4
 80006ac:	b2d2      	uxtb	r2, r2
 80006ae:	440b      	add	r3, r1
 80006b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006b4:	e00a      	b.n	80006cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b6:	4909      	ldr	r1, [pc, #36]	; (80006dc <__NVIC_SetPriority+0x50>)
 80006b8:	79fb      	ldrb	r3, [r7, #7]
 80006ba:	f003 030f 	and.w	r3, r3, #15
 80006be:	3b04      	subs	r3, #4
 80006c0:	683a      	ldr	r2, [r7, #0]
 80006c2:	b2d2      	uxtb	r2, r2
 80006c4:	0112      	lsls	r2, r2, #4
 80006c6:	b2d2      	uxtb	r2, r2
 80006c8:	440b      	add	r3, r1
 80006ca:	761a      	strb	r2, [r3, #24]
}
 80006cc:	bf00      	nop
 80006ce:	370c      	adds	r7, #12
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	e000e100 	.word	0xe000e100
 80006dc:	e000ed00 	.word	0xe000ed00

080006e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b089      	sub	sp, #36	; 0x24
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	60f8      	str	r0, [r7, #12]
 80006e8:	60b9      	str	r1, [r7, #8]
 80006ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	f003 0307 	and.w	r3, r3, #7
 80006f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006f4:	69fb      	ldr	r3, [r7, #28]
 80006f6:	f1c3 0307 	rsb	r3, r3, #7
 80006fa:	2b04      	cmp	r3, #4
 80006fc:	bf28      	it	cs
 80006fe:	2304      	movcs	r3, #4
 8000700:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000702:	69fb      	ldr	r3, [r7, #28]
 8000704:	3304      	adds	r3, #4
 8000706:	2b06      	cmp	r3, #6
 8000708:	d902      	bls.n	8000710 <NVIC_EncodePriority+0x30>
 800070a:	69fb      	ldr	r3, [r7, #28]
 800070c:	3b03      	subs	r3, #3
 800070e:	e000      	b.n	8000712 <NVIC_EncodePriority+0x32>
 8000710:	2300      	movs	r3, #0
 8000712:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000714:	2201      	movs	r2, #1
 8000716:	69bb      	ldr	r3, [r7, #24]
 8000718:	fa02 f303 	lsl.w	r3, r2, r3
 800071c:	1e5a      	subs	r2, r3, #1
 800071e:	68bb      	ldr	r3, [r7, #8]
 8000720:	401a      	ands	r2, r3
 8000722:	697b      	ldr	r3, [r7, #20]
 8000724:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000726:	2101      	movs	r1, #1
 8000728:	697b      	ldr	r3, [r7, #20]
 800072a:	fa01 f303 	lsl.w	r3, r1, r3
 800072e:	1e59      	subs	r1, r3, #1
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000734:	4313      	orrs	r3, r2
         );
}
 8000736:	4618      	mov	r0, r3
 8000738:	3724      	adds	r7, #36	; 0x24
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
	...

08000744 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	3b01      	subs	r3, #1
 8000750:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000754:	d301      	bcc.n	800075a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000756:	2301      	movs	r3, #1
 8000758:	e00f      	b.n	800077a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800075a:	4a0a      	ldr	r2, [pc, #40]	; (8000784 <SysTick_Config+0x40>)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	3b01      	subs	r3, #1
 8000760:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000762:	210f      	movs	r1, #15
 8000764:	f04f 30ff 	mov.w	r0, #4294967295
 8000768:	f7ff ff90 	bl	800068c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800076c:	4b05      	ldr	r3, [pc, #20]	; (8000784 <SysTick_Config+0x40>)
 800076e:	2200      	movs	r2, #0
 8000770:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000772:	4b04      	ldr	r3, [pc, #16]	; (8000784 <SysTick_Config+0x40>)
 8000774:	2207      	movs	r2, #7
 8000776:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000778:	2300      	movs	r3, #0
}
 800077a:	4618      	mov	r0, r3
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	e000e010 	.word	0xe000e010

08000788 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000790:	6878      	ldr	r0, [r7, #4]
 8000792:	f7ff ff2b 	bl	80005ec <__NVIC_SetPriorityGrouping>
}
 8000796:	bf00      	nop
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}

0800079e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800079e:	b580      	push	{r7, lr}
 80007a0:	b086      	sub	sp, #24
 80007a2:	af00      	add	r7, sp, #0
 80007a4:	4603      	mov	r3, r0
 80007a6:	60b9      	str	r1, [r7, #8]
 80007a8:	607a      	str	r2, [r7, #4]
 80007aa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80007ac:	f7ff ff42 	bl	8000634 <__NVIC_GetPriorityGrouping>
 80007b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007b2:	687a      	ldr	r2, [r7, #4]
 80007b4:	68b9      	ldr	r1, [r7, #8]
 80007b6:	6978      	ldr	r0, [r7, #20]
 80007b8:	f7ff ff92 	bl	80006e0 <NVIC_EncodePriority>
 80007bc:	4602      	mov	r2, r0
 80007be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007c2:	4611      	mov	r1, r2
 80007c4:	4618      	mov	r0, r3
 80007c6:	f7ff ff61 	bl	800068c <__NVIC_SetPriority>
}
 80007ca:	bf00      	nop
 80007cc:	3718      	adds	r7, #24
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}

080007d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007d2:	b580      	push	{r7, lr}
 80007d4:	b082      	sub	sp, #8
 80007d6:	af00      	add	r7, sp, #0
 80007d8:	4603      	mov	r3, r0
 80007da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e0:	4618      	mov	r0, r3
 80007e2:	f7ff ff35 	bl	8000650 <__NVIC_EnableIRQ>
}
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}

080007ee <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007ee:	b580      	push	{r7, lr}
 80007f0:	b082      	sub	sp, #8
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007f6:	6878      	ldr	r0, [r7, #4]
 80007f8:	f7ff ffa4 	bl	8000744 <SysTick_Config>
 80007fc:	4603      	mov	r3, r0
}
 80007fe:	4618      	mov	r0, r3
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
	...

08000808 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d101      	bne.n	800081a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000816:	2301      	movs	r3, #1
 8000818:	e08d      	b.n	8000936 <HAL_DMA_Init+0x12e>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	461a      	mov	r2, r3
 8000820:	4b47      	ldr	r3, [pc, #284]	; (8000940 <HAL_DMA_Init+0x138>)
 8000822:	429a      	cmp	r2, r3
 8000824:	d80f      	bhi.n	8000846 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	461a      	mov	r2, r3
 800082c:	4b45      	ldr	r3, [pc, #276]	; (8000944 <HAL_DMA_Init+0x13c>)
 800082e:	4413      	add	r3, r2
 8000830:	4a45      	ldr	r2, [pc, #276]	; (8000948 <HAL_DMA_Init+0x140>)
 8000832:	fba2 2303 	umull	r2, r3, r2, r3
 8000836:	091b      	lsrs	r3, r3, #4
 8000838:	009a      	lsls	r2, r3, #2
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	4a42      	ldr	r2, [pc, #264]	; (800094c <HAL_DMA_Init+0x144>)
 8000842:	641a      	str	r2, [r3, #64]	; 0x40
 8000844:	e00e      	b.n	8000864 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	461a      	mov	r2, r3
 800084c:	4b40      	ldr	r3, [pc, #256]	; (8000950 <HAL_DMA_Init+0x148>)
 800084e:	4413      	add	r3, r2
 8000850:	4a3d      	ldr	r2, [pc, #244]	; (8000948 <HAL_DMA_Init+0x140>)
 8000852:	fba2 2303 	umull	r2, r3, r2, r3
 8000856:	091b      	lsrs	r3, r3, #4
 8000858:	009a      	lsls	r2, r3, #2
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	4a3c      	ldr	r2, [pc, #240]	; (8000954 <HAL_DMA_Init+0x14c>)
 8000862:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	2202      	movs	r2, #2
 8000868:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800087a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800087e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000888:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	691b      	ldr	r3, [r3, #16]
 800088e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000894:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	699b      	ldr	r3, [r3, #24]
 800089a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	6a1b      	ldr	r3, [r3, #32]
 80008a6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80008a8:	68fa      	ldr	r2, [r7, #12]
 80008aa:	4313      	orrs	r3, r2
 80008ac:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	68fa      	ldr	r2, [r7, #12]
 80008b4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80008b6:	6878      	ldr	r0, [r7, #4]
 80008b8:	f000 f9b6 	bl	8000c28 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	689b      	ldr	r3, [r3, #8]
 80008c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80008c4:	d102      	bne.n	80008cc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	2200      	movs	r2, #0
 80008ca:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008d0:	687a      	ldr	r2, [r7, #4]
 80008d2:	6852      	ldr	r2, [r2, #4]
 80008d4:	b2d2      	uxtb	r2, r2
 80008d6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008dc:	687a      	ldr	r2, [r7, #4]
 80008de:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80008e0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	685b      	ldr	r3, [r3, #4]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d010      	beq.n	800090c <HAL_DMA_Init+0x104>
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	685b      	ldr	r3, [r3, #4]
 80008ee:	2b04      	cmp	r3, #4
 80008f0:	d80c      	bhi.n	800090c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80008f2:	6878      	ldr	r0, [r7, #4]
 80008f4:	f000 f9d6 	bl	8000ca4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000904:	687a      	ldr	r2, [r7, #4]
 8000906:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	e008      	b.n	800091e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	2200      	movs	r2, #0
 8000910:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	2200      	movs	r2, #0
 8000916:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	2200      	movs	r2, #0
 800091c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	2200      	movs	r2, #0
 8000922:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	2201      	movs	r2, #1
 8000928:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	2200      	movs	r2, #0
 8000930:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8000934:	2300      	movs	r3, #0
}
 8000936:	4618      	mov	r0, r3
 8000938:	3710      	adds	r7, #16
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40020407 	.word	0x40020407
 8000944:	bffdfff8 	.word	0xbffdfff8
 8000948:	cccccccd 	.word	0xcccccccd
 800094c:	40020000 	.word	0x40020000
 8000950:	bffdfbf8 	.word	0xbffdfbf8
 8000954:	40020400 	.word	0x40020400

08000958 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b086      	sub	sp, #24
 800095c:	af00      	add	r7, sp, #0
 800095e:	60f8      	str	r0, [r7, #12]
 8000960:	60b9      	str	r1, [r7, #8]
 8000962:	607a      	str	r2, [r7, #4]
 8000964:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000966:	2300      	movs	r3, #0
 8000968:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000970:	2b01      	cmp	r3, #1
 8000972:	d101      	bne.n	8000978 <HAL_DMA_Start_IT+0x20>
 8000974:	2302      	movs	r3, #2
 8000976:	e066      	b.n	8000a46 <HAL_DMA_Start_IT+0xee>
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	2201      	movs	r2, #1
 800097c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000986:	b2db      	uxtb	r3, r3
 8000988:	2b01      	cmp	r3, #1
 800098a:	d155      	bne.n	8000a38 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	2202      	movs	r2, #2
 8000990:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	2200      	movs	r2, #0
 8000998:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	68fa      	ldr	r2, [r7, #12]
 80009a0:	6812      	ldr	r2, [r2, #0]
 80009a2:	6812      	ldr	r2, [r2, #0]
 80009a4:	f022 0201 	bic.w	r2, r2, #1
 80009a8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	687a      	ldr	r2, [r7, #4]
 80009ae:	68b9      	ldr	r1, [r7, #8]
 80009b0:	68f8      	ldr	r0, [r7, #12]
 80009b2:	f000 f8fb 	bl	8000bac <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d008      	beq.n	80009d0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	68fa      	ldr	r2, [r7, #12]
 80009c4:	6812      	ldr	r2, [r2, #0]
 80009c6:	6812      	ldr	r2, [r2, #0]
 80009c8:	f042 020e 	orr.w	r2, r2, #14
 80009cc:	601a      	str	r2, [r3, #0]
 80009ce:	e00f      	b.n	80009f0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	68fa      	ldr	r2, [r7, #12]
 80009d6:	6812      	ldr	r2, [r2, #0]
 80009d8:	6812      	ldr	r2, [r2, #0]
 80009da:	f022 0204 	bic.w	r2, r2, #4
 80009de:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	68fa      	ldr	r2, [r7, #12]
 80009e6:	6812      	ldr	r2, [r2, #0]
 80009e8:	6812      	ldr	r2, [r2, #0]
 80009ea:	f042 020a 	orr.w	r2, r2, #10
 80009ee:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d007      	beq.n	8000a0e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a02:	68fa      	ldr	r2, [r7, #12]
 8000a04:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8000a06:	6812      	ldr	r2, [r2, #0]
 8000a08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000a0c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d007      	beq.n	8000a26 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a1a:	68fa      	ldr	r2, [r7, #12]
 8000a1c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8000a1e:	6812      	ldr	r2, [r2, #0]
 8000a20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000a24:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	68fa      	ldr	r2, [r7, #12]
 8000a2c:	6812      	ldr	r2, [r2, #0]
 8000a2e:	6812      	ldr	r2, [r2, #0]
 8000a30:	f042 0201 	orr.w	r2, r2, #1
 8000a34:	601a      	str	r2, [r3, #0]
 8000a36:	e005      	b.n	8000a44 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8000a40:	2302      	movs	r3, #2
 8000a42:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8000a44:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	3718      	adds	r7, #24
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}

08000a4e <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000a4e:	b580      	push	{r7, lr}
 8000a50:	b084      	sub	sp, #16
 8000a52:	af00      	add	r7, sp, #0
 8000a54:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a6a:	f003 031c 	and.w	r3, r3, #28
 8000a6e:	2204      	movs	r2, #4
 8000a70:	409a      	lsls	r2, r3
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	4013      	ands	r3, r2
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d026      	beq.n	8000ac8 <HAL_DMA_IRQHandler+0x7a>
 8000a7a:	68bb      	ldr	r3, [r7, #8]
 8000a7c:	f003 0304 	and.w	r3, r3, #4
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d021      	beq.n	8000ac8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	f003 0320 	and.w	r3, r3, #32
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d107      	bne.n	8000aa2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	687a      	ldr	r2, [r7, #4]
 8000a98:	6812      	ldr	r2, [r2, #0]
 8000a9a:	6812      	ldr	r2, [r2, #0]
 8000a9c:	f022 0204 	bic.w	r2, r2, #4
 8000aa0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa6:	687a      	ldr	r2, [r7, #4]
 8000aa8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000aaa:	f002 021c 	and.w	r2, r2, #28
 8000aae:	2104      	movs	r1, #4
 8000ab0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ab4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d071      	beq.n	8000ba2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	6878      	ldr	r0, [r7, #4]
 8000ac4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8000ac6:	e06c      	b.n	8000ba2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000acc:	f003 031c 	and.w	r3, r3, #28
 8000ad0:	2202      	movs	r2, #2
 8000ad2:	409a      	lsls	r2, r3
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	4013      	ands	r3, r2
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d02e      	beq.n	8000b3a <HAL_DMA_IRQHandler+0xec>
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	f003 0302 	and.w	r3, r3, #2
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d029      	beq.n	8000b3a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f003 0320 	and.w	r3, r3, #32
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d10b      	bne.n	8000b0c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	687a      	ldr	r2, [r7, #4]
 8000afa:	6812      	ldr	r2, [r2, #0]
 8000afc:	6812      	ldr	r2, [r2, #0]
 8000afe:	f022 020a 	bic.w	r2, r2, #10
 8000b02:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	2201      	movs	r2, #1
 8000b08:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b10:	687a      	ldr	r2, [r7, #4]
 8000b12:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000b14:	f002 021c 	and.w	r2, r2, #28
 8000b18:	2102      	movs	r1, #2
 8000b1a:	fa01 f202 	lsl.w	r2, r1, r2
 8000b1e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	2200      	movs	r2, #0
 8000b24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d038      	beq.n	8000ba2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b34:	6878      	ldr	r0, [r7, #4]
 8000b36:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8000b38:	e033      	b.n	8000ba2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b3e:	f003 031c 	and.w	r3, r3, #28
 8000b42:	2208      	movs	r2, #8
 8000b44:	409a      	lsls	r2, r3
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	4013      	ands	r3, r2
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d02a      	beq.n	8000ba4 <HAL_DMA_IRQHandler+0x156>
 8000b4e:	68bb      	ldr	r3, [r7, #8]
 8000b50:	f003 0308 	and.w	r3, r3, #8
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d025      	beq.n	8000ba4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	687a      	ldr	r2, [r7, #4]
 8000b5e:	6812      	ldr	r2, [r2, #0]
 8000b60:	6812      	ldr	r2, [r2, #0]
 8000b62:	f022 020e 	bic.w	r2, r2, #14
 8000b66:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6c:	687a      	ldr	r2, [r7, #4]
 8000b6e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000b70:	f002 021c 	and.w	r2, r2, #28
 8000b74:	2101      	movs	r1, #1
 8000b76:	fa01 f202 	lsl.w	r2, r1, r2
 8000b7a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	2201      	movs	r2, #1
 8000b80:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	2201      	movs	r2, #1
 8000b86:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d004      	beq.n	8000ba4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b9e:	6878      	ldr	r0, [r7, #4]
 8000ba0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8000ba2:	bf00      	nop
 8000ba4:	bf00      	nop
}
 8000ba6:	3710      	adds	r7, #16
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}

08000bac <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b085      	sub	sp, #20
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	60f8      	str	r0, [r7, #12]
 8000bb4:	60b9      	str	r1, [r7, #8]
 8000bb6:	607a      	str	r2, [r7, #4]
 8000bb8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bbe:	68fa      	ldr	r2, [r7, #12]
 8000bc0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000bc2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d004      	beq.n	8000bd6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bd0:	68fa      	ldr	r2, [r7, #12]
 8000bd2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000bd4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bda:	68fa      	ldr	r2, [r7, #12]
 8000bdc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000bde:	f002 021c 	and.w	r2, r2, #28
 8000be2:	2101      	movs	r1, #1
 8000be4:	fa01 f202 	lsl.w	r2, r1, r2
 8000be8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	683a      	ldr	r2, [r7, #0]
 8000bf0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	689b      	ldr	r3, [r3, #8]
 8000bf6:	2b10      	cmp	r3, #16
 8000bf8:	d108      	bne.n	8000c0c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	687a      	ldr	r2, [r7, #4]
 8000c00:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	68ba      	ldr	r2, [r7, #8]
 8000c08:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000c0a:	e007      	b.n	8000c1c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	68ba      	ldr	r2, [r7, #8]
 8000c12:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	687a      	ldr	r2, [r7, #4]
 8000c1a:	60da      	str	r2, [r3, #12]
}
 8000c1c:	bf00      	nop
 8000c1e:	3714      	adds	r7, #20
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr

08000c28 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b085      	sub	sp, #20
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	461a      	mov	r2, r3
 8000c36:	4b17      	ldr	r3, [pc, #92]	; (8000c94 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	d80a      	bhi.n	8000c52 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c40:	089b      	lsrs	r3, r3, #2
 8000c42:	009b      	lsls	r3, r3, #2
 8000c44:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000c48:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8000c4c:	687a      	ldr	r2, [r7, #4]
 8000c4e:	6493      	str	r3, [r2, #72]	; 0x48
 8000c50:	e007      	b.n	8000c62 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c56:	089b      	lsrs	r3, r3, #2
 8000c58:	009a      	lsls	r2, r3, #2
 8000c5a:	4b0f      	ldr	r3, [pc, #60]	; (8000c98 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8000c5c:	4413      	add	r3, r2
 8000c5e:	687a      	ldr	r2, [r7, #4]
 8000c60:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	b2db      	uxtb	r3, r3
 8000c68:	3b08      	subs	r3, #8
 8000c6a:	4a0c      	ldr	r2, [pc, #48]	; (8000c9c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8000c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8000c70:	091b      	lsrs	r3, r3, #4
 8000c72:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	4a0a      	ldr	r2, [pc, #40]	; (8000ca0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8000c78:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	f003 031c 	and.w	r3, r3, #28
 8000c80:	2201      	movs	r2, #1
 8000c82:	409a      	lsls	r2, r3
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	651a      	str	r2, [r3, #80]	; 0x50
}
 8000c88:	bf00      	nop
 8000c8a:	3714      	adds	r7, #20
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr
 8000c94:	40020407 	.word	0x40020407
 8000c98:	4002081c 	.word	0x4002081c
 8000c9c:	cccccccd 	.word	0xcccccccd
 8000ca0:	40020880 	.word	0x40020880

08000ca4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8000cb4:	68fa      	ldr	r2, [r7, #12]
 8000cb6:	4b0b      	ldr	r3, [pc, #44]	; (8000ce4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8000cb8:	4413      	add	r3, r2
 8000cba:	009b      	lsls	r3, r3, #2
 8000cbc:	461a      	mov	r2, r3
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4a08      	ldr	r2, [pc, #32]	; (8000ce8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8000cc6:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	3b01      	subs	r3, #1
 8000ccc:	f003 0303 	and.w	r3, r3, #3
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	409a      	lsls	r2, r3
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000cd8:	bf00      	nop
 8000cda:	3714      	adds	r7, #20
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr
 8000ce4:	1000823f 	.word	0x1000823f
 8000ce8:	40020940 	.word	0x40020940

08000cec <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b087      	sub	sp, #28
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
 8000cf4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cfa:	e14c      	b.n	8000f96 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	2101      	movs	r1, #1
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	fa01 f303 	lsl.w	r3, r1, r3
 8000d08:	4013      	ands	r3, r2
 8000d0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	f000 813e 	beq.w	8000f90 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	2b02      	cmp	r3, #2
 8000d1a:	d003      	beq.n	8000d24 <HAL_GPIO_Init+0x38>
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	2b12      	cmp	r3, #18
 8000d22:	d123      	bne.n	8000d6c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	08da      	lsrs	r2, r3, #3
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	3208      	adds	r2, #8
 8000d2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d30:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	f003 0307 	and.w	r3, r3, #7
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	220f      	movs	r2, #15
 8000d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d40:	43db      	mvns	r3, r3
 8000d42:	693a      	ldr	r2, [r7, #16]
 8000d44:	4013      	ands	r3, r2
 8000d46:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	691a      	ldr	r2, [r3, #16]
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	f003 0307 	and.w	r3, r3, #7
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	fa02 f303 	lsl.w	r3, r2, r3
 8000d58:	693a      	ldr	r2, [r7, #16]
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	08da      	lsrs	r2, r3, #3
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	3208      	adds	r2, #8
 8000d66:	6939      	ldr	r1, [r7, #16]
 8000d68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	2203      	movs	r2, #3
 8000d78:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7c:	43db      	mvns	r3, r3
 8000d7e:	693a      	ldr	r2, [r7, #16]
 8000d80:	4013      	ands	r3, r2
 8000d82:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	f003 0203 	and.w	r2, r3, #3
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	fa02 f303 	lsl.w	r3, r2, r3
 8000d94:	693a      	ldr	r2, [r7, #16]
 8000d96:	4313      	orrs	r3, r2
 8000d98:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	693a      	ldr	r2, [r7, #16]
 8000d9e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	2b01      	cmp	r3, #1
 8000da6:	d00b      	beq.n	8000dc0 <HAL_GPIO_Init+0xd4>
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	2b02      	cmp	r3, #2
 8000dae:	d007      	beq.n	8000dc0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000db4:	2b11      	cmp	r3, #17
 8000db6:	d003      	beq.n	8000dc0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	2b12      	cmp	r3, #18
 8000dbe:	d130      	bne.n	8000e22 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	689b      	ldr	r3, [r3, #8]
 8000dc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	2203      	movs	r2, #3
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	43db      	mvns	r3, r3
 8000dd2:	693a      	ldr	r2, [r7, #16]
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	68da      	ldr	r2, [r3, #12]
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	005b      	lsls	r3, r3, #1
 8000de0:	fa02 f303 	lsl.w	r3, r2, r3
 8000de4:	693a      	ldr	r2, [r7, #16]
 8000de6:	4313      	orrs	r3, r2
 8000de8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	693a      	ldr	r2, [r7, #16]
 8000dee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000df6:	2201      	movs	r2, #1
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfe:	43db      	mvns	r3, r3
 8000e00:	693a      	ldr	r2, [r7, #16]
 8000e02:	4013      	ands	r3, r2
 8000e04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	091b      	lsrs	r3, r3, #4
 8000e0c:	f003 0201 	and.w	r2, r3, #1
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	68db      	ldr	r3, [r3, #12]
 8000e26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	005b      	lsls	r3, r3, #1
 8000e2c:	2203      	movs	r2, #3
 8000e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e32:	43db      	mvns	r3, r3
 8000e34:	693a      	ldr	r2, [r7, #16]
 8000e36:	4013      	ands	r3, r2
 8000e38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	689a      	ldr	r2, [r3, #8]
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	fa02 f303 	lsl.w	r3, r2, r3
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	f000 8098 	beq.w	8000f90 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000e60:	4a54      	ldr	r2, [pc, #336]	; (8000fb4 <HAL_GPIO_Init+0x2c8>)
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	089b      	lsrs	r3, r3, #2
 8000e66:	3302      	adds	r3, #2
 8000e68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	f003 0303 	and.w	r3, r3, #3
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	220f      	movs	r2, #15
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	43db      	mvns	r3, r3
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	4013      	ands	r3, r2
 8000e82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e8a:	d019      	beq.n	8000ec0 <HAL_GPIO_Init+0x1d4>
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4a4a      	ldr	r2, [pc, #296]	; (8000fb8 <HAL_GPIO_Init+0x2cc>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d013      	beq.n	8000ebc <HAL_GPIO_Init+0x1d0>
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	4a49      	ldr	r2, [pc, #292]	; (8000fbc <HAL_GPIO_Init+0x2d0>)
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d00d      	beq.n	8000eb8 <HAL_GPIO_Init+0x1cc>
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	4a48      	ldr	r2, [pc, #288]	; (8000fc0 <HAL_GPIO_Init+0x2d4>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d007      	beq.n	8000eb4 <HAL_GPIO_Init+0x1c8>
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	4a47      	ldr	r2, [pc, #284]	; (8000fc4 <HAL_GPIO_Init+0x2d8>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d101      	bne.n	8000eb0 <HAL_GPIO_Init+0x1c4>
 8000eac:	2304      	movs	r3, #4
 8000eae:	e008      	b.n	8000ec2 <HAL_GPIO_Init+0x1d6>
 8000eb0:	2307      	movs	r3, #7
 8000eb2:	e006      	b.n	8000ec2 <HAL_GPIO_Init+0x1d6>
 8000eb4:	2303      	movs	r3, #3
 8000eb6:	e004      	b.n	8000ec2 <HAL_GPIO_Init+0x1d6>
 8000eb8:	2302      	movs	r3, #2
 8000eba:	e002      	b.n	8000ec2 <HAL_GPIO_Init+0x1d6>
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	e000      	b.n	8000ec2 <HAL_GPIO_Init+0x1d6>
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	697a      	ldr	r2, [r7, #20]
 8000ec4:	f002 0203 	and.w	r2, r2, #3
 8000ec8:	0092      	lsls	r2, r2, #2
 8000eca:	4093      	lsls	r3, r2
 8000ecc:	693a      	ldr	r2, [r7, #16]
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ed2:	4938      	ldr	r1, [pc, #224]	; (8000fb4 <HAL_GPIO_Init+0x2c8>)
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	089b      	lsrs	r3, r3, #2
 8000ed8:	3302      	adds	r3, #2
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000ee0:	4b39      	ldr	r3, [pc, #228]	; (8000fc8 <HAL_GPIO_Init+0x2dc>)
 8000ee2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000ee6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	43db      	mvns	r3, r3
 8000eec:	693a      	ldr	r2, [r7, #16]
 8000eee:	4013      	ands	r3, r2
 8000ef0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d003      	beq.n	8000f06 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	4313      	orrs	r3, r2
 8000f04:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f06:	4a30      	ldr	r2, [pc, #192]	; (8000fc8 <HAL_GPIO_Init+0x2dc>)
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8000f0e:	4b2e      	ldr	r3, [pc, #184]	; (8000fc8 <HAL_GPIO_Init+0x2dc>)
 8000f10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000f14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d003      	beq.n	8000f34 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000f2c:	693a      	ldr	r2, [r7, #16]
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f34:	4a24      	ldr	r2, [pc, #144]	; (8000fc8 <HAL_GPIO_Init+0x2dc>)
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f3c:	4b22      	ldr	r3, [pc, #136]	; (8000fc8 <HAL_GPIO_Init+0x2dc>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	43db      	mvns	r3, r3
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d003      	beq.n	8000f60 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8000f58:	693a      	ldr	r2, [r7, #16]
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f60:	4a19      	ldr	r2, [pc, #100]	; (8000fc8 <HAL_GPIO_Init+0x2dc>)
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000f66:	4b18      	ldr	r3, [pc, #96]	; (8000fc8 <HAL_GPIO_Init+0x2dc>)
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	43db      	mvns	r3, r3
 8000f70:	693a      	ldr	r2, [r7, #16]
 8000f72:	4013      	ands	r3, r2
 8000f74:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d003      	beq.n	8000f8a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f8a:	4a0f      	ldr	r2, [pc, #60]	; (8000fc8 <HAL_GPIO_Init+0x2dc>)
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	3301      	adds	r3, #1
 8000f94:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	fa22 f303 	lsr.w	r3, r2, r3
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	f47f aeab 	bne.w	8000cfc <HAL_GPIO_Init+0x10>
  }
}
 8000fa6:	bf00      	nop
 8000fa8:	371c      	adds	r7, #28
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	40010000 	.word	0x40010000
 8000fb8:	48000400 	.word	0x48000400
 8000fbc:	48000800 	.word	0x48000800
 8000fc0:	48000c00 	.word	0x48000c00
 8000fc4:	48001000 	.word	0x48001000
 8000fc8:	58000800 	.word	0x58000800

08000fcc <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	691a      	ldr	r2, [r3, #16]
 8000fdc:	887b      	ldrh	r3, [r7, #2]
 8000fde:	4013      	ands	r3, r2
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d002      	beq.n	8000fea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	73fb      	strb	r3, [r7, #15]
 8000fe8:	e001      	b.n	8000fee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000fea:	2300      	movs	r3, #0
 8000fec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000fee:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3714      	adds	r7, #20
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr

08000ffc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	460b      	mov	r3, r1
 8001006:	807b      	strh	r3, [r7, #2]
 8001008:	4613      	mov	r3, r2
 800100a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800100c:	787b      	ldrb	r3, [r7, #1]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d003      	beq.n	800101a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001012:	887a      	ldrh	r2, [r7, #2]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001018:	e002      	b.n	8001020 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800101a:	887a      	ldrh	r2, [r7, #2]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001020:	bf00      	nop
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d101      	bne.n	800103e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	e080      	b.n	8001140 <HAL_I2C_Init+0x114>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001044:	b2db      	uxtb	r3, r3
 8001046:	2b00      	cmp	r3, #0
 8001048:	d106      	bne.n	8001058 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2200      	movs	r2, #0
 800104e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f004 ffbe 	bl	8005fd4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2224      	movs	r2, #36	; 0x24
 800105c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	687a      	ldr	r2, [r7, #4]
 8001066:	6812      	ldr	r2, [r2, #0]
 8001068:	6812      	ldr	r2, [r2, #0]
 800106a:	f022 0201 	bic.w	r2, r2, #1
 800106e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	687a      	ldr	r2, [r7, #4]
 8001076:	6852      	ldr	r2, [r2, #4]
 8001078:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800107c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	6812      	ldr	r2, [r2, #0]
 8001086:	6892      	ldr	r2, [r2, #8]
 8001088:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800108c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	68db      	ldr	r3, [r3, #12]
 8001092:	2b01      	cmp	r3, #1
 8001094:	d107      	bne.n	80010a6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	687a      	ldr	r2, [r7, #4]
 800109c:	6892      	ldr	r2, [r2, #8]
 800109e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	e006      	b.n	80010b4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	6892      	ldr	r2, [r2, #8]
 80010ae:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80010b2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	2b02      	cmp	r3, #2
 80010ba:	d104      	bne.n	80010c6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010c4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010d8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	687a      	ldr	r2, [r7, #4]
 80010e0:	6812      	ldr	r2, [r2, #0]
 80010e2:	68d2      	ldr	r2, [r2, #12]
 80010e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80010e8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	687a      	ldr	r2, [r7, #4]
 80010f0:	6911      	ldr	r1, [r2, #16]
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	6952      	ldr	r2, [r2, #20]
 80010f6:	4311      	orrs	r1, r2
 80010f8:	687a      	ldr	r2, [r7, #4]
 80010fa:	6992      	ldr	r2, [r2, #24]
 80010fc:	0212      	lsls	r2, r2, #8
 80010fe:	430a      	orrs	r2, r1
 8001100:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	687a      	ldr	r2, [r7, #4]
 8001108:	69d1      	ldr	r1, [r2, #28]
 800110a:	687a      	ldr	r2, [r7, #4]
 800110c:	6a12      	ldr	r2, [r2, #32]
 800110e:	430a      	orrs	r2, r1
 8001110:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	6812      	ldr	r2, [r2, #0]
 800111a:	6812      	ldr	r2, [r2, #0]
 800111c:	f042 0201 	orr.w	r2, r2, #1
 8001120:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2200      	movs	r2, #0
 8001126:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2220      	movs	r2, #32
 800112c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2200      	movs	r2, #0
 8001134:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2200      	movs	r2, #0
 800113a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800113e:	2300      	movs	r3, #0
}
 8001140:	4618      	mov	r0, r3
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b088      	sub	sp, #32
 800114c:	af02      	add	r7, sp, #8
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	607a      	str	r2, [r7, #4]
 8001152:	461a      	mov	r2, r3
 8001154:	460b      	mov	r3, r1
 8001156:	817b      	strh	r3, [r7, #10]
 8001158:	4613      	mov	r3, r2
 800115a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001162:	b2db      	uxtb	r3, r3
 8001164:	2b20      	cmp	r3, #32
 8001166:	f040 80da 	bne.w	800131e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001170:	2b01      	cmp	r3, #1
 8001172:	d101      	bne.n	8001178 <HAL_I2C_Master_Transmit+0x30>
 8001174:	2302      	movs	r3, #2
 8001176:	e0d3      	b.n	8001320 <HAL_I2C_Master_Transmit+0x1d8>
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	2201      	movs	r2, #1
 800117c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001180:	f7ff f9fa 	bl	8000578 <HAL_GetTick>
 8001184:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	9300      	str	r3, [sp, #0]
 800118a:	2319      	movs	r3, #25
 800118c:	2201      	movs	r2, #1
 800118e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001192:	68f8      	ldr	r0, [r7, #12]
 8001194:	f000 f9f7 	bl	8001586 <I2C_WaitOnFlagUntilTimeout>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	e0be      	b.n	8001320 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	2221      	movs	r2, #33	; 0x21
 80011a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	2210      	movs	r2, #16
 80011ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	2200      	movs	r2, #0
 80011b6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	893a      	ldrh	r2, [r7, #8]
 80011c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	2200      	movs	r2, #0
 80011c8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011ce:	b29b      	uxth	r3, r3
 80011d0:	2bff      	cmp	r3, #255	; 0xff
 80011d2:	d90e      	bls.n	80011f2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	22ff      	movs	r2, #255	; 0xff
 80011d8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011de:	b2da      	uxtb	r2, r3
 80011e0:	8979      	ldrh	r1, [r7, #10]
 80011e2:	4b51      	ldr	r3, [pc, #324]	; (8001328 <HAL_I2C_Master_Transmit+0x1e0>)
 80011e4:	9300      	str	r3, [sp, #0]
 80011e6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80011ea:	68f8      	ldr	r0, [r7, #12]
 80011ec:	f000 faee 	bl	80017cc <I2C_TransferConfig>
 80011f0:	e06c      	b.n	80012cc <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011f6:	b29a      	uxth	r2, r3
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001200:	b2da      	uxtb	r2, r3
 8001202:	8979      	ldrh	r1, [r7, #10]
 8001204:	4b48      	ldr	r3, [pc, #288]	; (8001328 <HAL_I2C_Master_Transmit+0x1e0>)
 8001206:	9300      	str	r3, [sp, #0]
 8001208:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800120c:	68f8      	ldr	r0, [r7, #12]
 800120e:	f000 fadd 	bl	80017cc <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001212:	e05b      	b.n	80012cc <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001214:	697a      	ldr	r2, [r7, #20]
 8001216:	6a39      	ldr	r1, [r7, #32]
 8001218:	68f8      	ldr	r0, [r7, #12]
 800121a:	f000 f9f4 	bl	8001606 <I2C_WaitOnTXISFlagUntilTimeout>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001224:	2301      	movs	r3, #1
 8001226:	e07b      	b.n	8001320 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	68fa      	ldr	r2, [r7, #12]
 800122e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001230:	7812      	ldrb	r2, [r2, #0]
 8001232:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001238:	1c5a      	adds	r2, r3, #1
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001242:	b29b      	uxth	r3, r3
 8001244:	3b01      	subs	r3, #1
 8001246:	b29a      	uxth	r2, r3
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001250:	3b01      	subs	r3, #1
 8001252:	b29a      	uxth	r2, r3
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800125c:	b29b      	uxth	r3, r3
 800125e:	2b00      	cmp	r3, #0
 8001260:	d034      	beq.n	80012cc <HAL_I2C_Master_Transmit+0x184>
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001266:	2b00      	cmp	r3, #0
 8001268:	d130      	bne.n	80012cc <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	9300      	str	r3, [sp, #0]
 800126e:	6a3b      	ldr	r3, [r7, #32]
 8001270:	2200      	movs	r2, #0
 8001272:	2180      	movs	r1, #128	; 0x80
 8001274:	68f8      	ldr	r0, [r7, #12]
 8001276:	f000 f986 	bl	8001586 <I2C_WaitOnFlagUntilTimeout>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001280:	2301      	movs	r3, #1
 8001282:	e04d      	b.n	8001320 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001288:	b29b      	uxth	r3, r3
 800128a:	2bff      	cmp	r3, #255	; 0xff
 800128c:	d90e      	bls.n	80012ac <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	22ff      	movs	r2, #255	; 0xff
 8001292:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001298:	b2da      	uxtb	r2, r3
 800129a:	8979      	ldrh	r1, [r7, #10]
 800129c:	2300      	movs	r3, #0
 800129e:	9300      	str	r3, [sp, #0]
 80012a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80012a4:	68f8      	ldr	r0, [r7, #12]
 80012a6:	f000 fa91 	bl	80017cc <I2C_TransferConfig>
 80012aa:	e00f      	b.n	80012cc <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012b0:	b29a      	uxth	r2, r3
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012ba:	b2da      	uxtb	r2, r3
 80012bc:	8979      	ldrh	r1, [r7, #10]
 80012be:	2300      	movs	r3, #0
 80012c0:	9300      	str	r3, [sp, #0]
 80012c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80012c6:	68f8      	ldr	r0, [r7, #12]
 80012c8:	f000 fa80 	bl	80017cc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012d0:	b29b      	uxth	r3, r3
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d19e      	bne.n	8001214 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80012d6:	697a      	ldr	r2, [r7, #20]
 80012d8:	6a39      	ldr	r1, [r7, #32]
 80012da:	68f8      	ldr	r0, [r7, #12]
 80012dc:	f000 f9d3 	bl	8001686 <I2C_WaitOnSTOPFlagUntilTimeout>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e01a      	b.n	8001320 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	2220      	movs	r2, #32
 80012f0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	6859      	ldr	r1, [r3, #4]
 80012fc:	4b0b      	ldr	r3, [pc, #44]	; (800132c <HAL_I2C_Master_Transmit+0x1e4>)
 80012fe:	400b      	ands	r3, r1
 8001300:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	2220      	movs	r2, #32
 8001306:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	2200      	movs	r2, #0
 800130e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	2200      	movs	r2, #0
 8001316:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800131a:	2300      	movs	r3, #0
 800131c:	e000      	b.n	8001320 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800131e:	2302      	movs	r3, #2
  }
}
 8001320:	4618      	mov	r0, r3
 8001322:	3718      	adds	r7, #24
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	80002000 	.word	0x80002000
 800132c:	fe00e800 	.word	0xfe00e800

08001330 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b08a      	sub	sp, #40	; 0x28
 8001334:	af02      	add	r7, sp, #8
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	607a      	str	r2, [r7, #4]
 800133a:	603b      	str	r3, [r7, #0]
 800133c:	460b      	mov	r3, r1
 800133e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001340:	2300      	movs	r3, #0
 8001342:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800134a:	b2db      	uxtb	r3, r3
 800134c:	2b20      	cmp	r3, #32
 800134e:	f040 80f1 	bne.w	8001534 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	699b      	ldr	r3, [r3, #24]
 8001358:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800135c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001360:	d101      	bne.n	8001366 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8001362:	2302      	movs	r3, #2
 8001364:	e0e7      	b.n	8001536 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800136c:	2b01      	cmp	r3, #1
 800136e:	d101      	bne.n	8001374 <HAL_I2C_IsDeviceReady+0x44>
 8001370:	2302      	movs	r3, #2
 8001372:	e0e0      	b.n	8001536 <HAL_I2C_IsDeviceReady+0x206>
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	2201      	movs	r2, #1
 8001378:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	2224      	movs	r2, #36	; 0x24
 8001380:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	2200      	movs	r2, #0
 8001388:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	68db      	ldr	r3, [r3, #12]
 8001392:	2b01      	cmp	r3, #1
 8001394:	d107      	bne.n	80013a6 <HAL_I2C_IsDeviceReady+0x76>
 8001396:	897b      	ldrh	r3, [r7, #10]
 8001398:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800139c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013a0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80013a4:	e004      	b.n	80013b0 <HAL_I2C_IsDeviceReady+0x80>
 80013a6:	897b      	ldrh	r3, [r7, #10]
 80013a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80013ac:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80013b0:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80013b2:	f7ff f8e1 	bl	8000578 <HAL_GetTick>
 80013b6:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	699b      	ldr	r3, [r3, #24]
 80013be:	f003 0320 	and.w	r3, r3, #32
 80013c2:	2b20      	cmp	r3, #32
 80013c4:	bf0c      	ite	eq
 80013c6:	2301      	moveq	r3, #1
 80013c8:	2300      	movne	r3, #0
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	f003 0310 	and.w	r3, r3, #16
 80013d8:	2b10      	cmp	r3, #16
 80013da:	bf0c      	ite	eq
 80013dc:	2301      	moveq	r3, #1
 80013de:	2300      	movne	r3, #0
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80013e4:	e034      	b.n	8001450 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013ec:	d01a      	beq.n	8001424 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80013ee:	f7ff f8c3 	bl	8000578 <HAL_GetTick>
 80013f2:	4602      	mov	r2, r0
 80013f4:	69bb      	ldr	r3, [r7, #24]
 80013f6:	1ad2      	subs	r2, r2, r3
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d802      	bhi.n	8001404 <HAL_I2C_IsDeviceReady+0xd4>
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d10f      	bne.n	8001424 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	2220      	movs	r2, #32
 8001408:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001410:	f043 0220 	orr.w	r2, r3, #32
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	2200      	movs	r2, #0
 800141c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8001420:	2301      	movs	r3, #1
 8001422:	e088      	b.n	8001536 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	699b      	ldr	r3, [r3, #24]
 800142a:	f003 0320 	and.w	r3, r3, #32
 800142e:	2b20      	cmp	r3, #32
 8001430:	bf0c      	ite	eq
 8001432:	2301      	moveq	r3, #1
 8001434:	2300      	movne	r3, #0
 8001436:	b2db      	uxtb	r3, r3
 8001438:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	699b      	ldr	r3, [r3, #24]
 8001440:	f003 0310 	and.w	r3, r3, #16
 8001444:	2b10      	cmp	r3, #16
 8001446:	bf0c      	ite	eq
 8001448:	2301      	moveq	r3, #1
 800144a:	2300      	movne	r3, #0
 800144c:	b2db      	uxtb	r3, r3
 800144e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001450:	7ffb      	ldrb	r3, [r7, #31]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d102      	bne.n	800145c <HAL_I2C_IsDeviceReady+0x12c>
 8001456:	7fbb      	ldrb	r3, [r7, #30]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d0c4      	beq.n	80013e6 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	699b      	ldr	r3, [r3, #24]
 8001462:	f003 0310 	and.w	r3, r3, #16
 8001466:	2b10      	cmp	r3, #16
 8001468:	d01a      	beq.n	80014a0 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	9300      	str	r3, [sp, #0]
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	2200      	movs	r2, #0
 8001472:	2120      	movs	r1, #32
 8001474:	68f8      	ldr	r0, [r7, #12]
 8001476:	f000 f886 	bl	8001586 <I2C_WaitOnFlagUntilTimeout>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	e058      	b.n	8001536 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2220      	movs	r2, #32
 800148a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	2220      	movs	r2, #32
 8001490:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	2200      	movs	r2, #0
 8001498:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 800149c:	2300      	movs	r3, #0
 800149e:	e04a      	b.n	8001536 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	9300      	str	r3, [sp, #0]
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	2200      	movs	r2, #0
 80014a8:	2120      	movs	r1, #32
 80014aa:	68f8      	ldr	r0, [r7, #12]
 80014ac:	f000 f86b 	bl	8001586 <I2C_WaitOnFlagUntilTimeout>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e03d      	b.n	8001536 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2210      	movs	r2, #16
 80014c0:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	2220      	movs	r2, #32
 80014c8:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80014ca:	697a      	ldr	r2, [r7, #20]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	429a      	cmp	r2, r3
 80014d0:	d118      	bne.n	8001504 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	68fa      	ldr	r2, [r7, #12]
 80014d8:	6812      	ldr	r2, [r2, #0]
 80014da:	6852      	ldr	r2, [r2, #4]
 80014dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80014e0:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	9300      	str	r3, [sp, #0]
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	2200      	movs	r2, #0
 80014ea:	2120      	movs	r1, #32
 80014ec:	68f8      	ldr	r0, [r7, #12]
 80014ee:	f000 f84a 	bl	8001586 <I2C_WaitOnFlagUntilTimeout>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e01c      	b.n	8001536 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2220      	movs	r2, #32
 8001502:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	3301      	adds	r3, #1
 8001508:	617b      	str	r3, [r7, #20]
    }
    while (I2C_Trials < Trials);
 800150a:	697a      	ldr	r2, [r7, #20]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	429a      	cmp	r2, r3
 8001510:	f4ff af3b 	bcc.w	800138a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	2220      	movs	r2, #32
 8001518:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001520:	f043 0220 	orr.w	r2, r3, #32
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	2200      	movs	r2, #0
 800152c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	e000      	b.n	8001536 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8001534:	2302      	movs	r3, #2
  }
}
 8001536:	4618      	mov	r0, r3
 8001538:	3720      	adds	r7, #32
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800153e:	b480      	push	{r7}
 8001540:	b083      	sub	sp, #12
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	699b      	ldr	r3, [r3, #24]
 800154c:	f003 0302 	and.w	r3, r3, #2
 8001550:	2b02      	cmp	r3, #2
 8001552:	d103      	bne.n	800155c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2200      	movs	r2, #0
 800155a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	699b      	ldr	r3, [r3, #24]
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	2b01      	cmp	r3, #1
 8001568:	d007      	beq.n	800157a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	687a      	ldr	r2, [r7, #4]
 8001570:	6812      	ldr	r2, [r2, #0]
 8001572:	6992      	ldr	r2, [r2, #24]
 8001574:	f042 0201 	orr.w	r2, r2, #1
 8001578:	619a      	str	r2, [r3, #24]
  }
}
 800157a:	bf00      	nop
 800157c:	370c      	adds	r7, #12
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr

08001586 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	b084      	sub	sp, #16
 800158a:	af00      	add	r7, sp, #0
 800158c:	60f8      	str	r0, [r7, #12]
 800158e:	60b9      	str	r1, [r7, #8]
 8001590:	603b      	str	r3, [r7, #0]
 8001592:	4613      	mov	r3, r2
 8001594:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001596:	e022      	b.n	80015de <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800159e:	d01e      	beq.n	80015de <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015a0:	f7fe ffea 	bl	8000578 <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	69bb      	ldr	r3, [r7, #24]
 80015a8:	1ad2      	subs	r2, r2, r3
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d802      	bhi.n	80015b6 <I2C_WaitOnFlagUntilTimeout+0x30>
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d113      	bne.n	80015de <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ba:	f043 0220 	orr.w	r2, r3, #32
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	2220      	movs	r2, #32
 80015c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	2200      	movs	r2, #0
 80015ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	2200      	movs	r2, #0
 80015d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e00f      	b.n	80015fe <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	699a      	ldr	r2, [r3, #24]
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	401a      	ands	r2, r3
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	429a      	cmp	r2, r3
 80015ec:	bf0c      	ite	eq
 80015ee:	2301      	moveq	r3, #1
 80015f0:	2300      	movne	r3, #0
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	461a      	mov	r2, r3
 80015f6:	79fb      	ldrb	r3, [r7, #7]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d0cd      	beq.n	8001598 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3710      	adds	r7, #16
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	b084      	sub	sp, #16
 800160a:	af00      	add	r7, sp, #0
 800160c:	60f8      	str	r0, [r7, #12]
 800160e:	60b9      	str	r1, [r7, #8]
 8001610:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001612:	e02c      	b.n	800166e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001614:	687a      	ldr	r2, [r7, #4]
 8001616:	68b9      	ldr	r1, [r7, #8]
 8001618:	68f8      	ldr	r0, [r7, #12]
 800161a:	f000 f871 	bl	8001700 <I2C_IsAcknowledgeFailed>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e02a      	b.n	800167e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800162e:	d01e      	beq.n	800166e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001630:	f7fe ffa2 	bl	8000578 <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	1ad2      	subs	r2, r2, r3
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	429a      	cmp	r2, r3
 800163e:	d802      	bhi.n	8001646 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d113      	bne.n	800166e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164a:	f043 0220 	orr.w	r2, r3, #32
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	2220      	movs	r2, #32
 8001656:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	2200      	movs	r2, #0
 800165e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	2200      	movs	r2, #0
 8001666:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e007      	b.n	800167e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	699b      	ldr	r3, [r3, #24]
 8001674:	f003 0302 	and.w	r3, r3, #2
 8001678:	2b02      	cmp	r3, #2
 800167a:	d1cb      	bne.n	8001614 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	3710      	adds	r7, #16
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001686:	b580      	push	{r7, lr}
 8001688:	b084      	sub	sp, #16
 800168a:	af00      	add	r7, sp, #0
 800168c:	60f8      	str	r0, [r7, #12]
 800168e:	60b9      	str	r1, [r7, #8]
 8001690:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001692:	e028      	b.n	80016e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001694:	687a      	ldr	r2, [r7, #4]
 8001696:	68b9      	ldr	r1, [r7, #8]
 8001698:	68f8      	ldr	r0, [r7, #12]
 800169a:	f000 f831 	bl	8001700 <I2C_IsAcknowledgeFailed>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e026      	b.n	80016f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016a8:	f7fe ff66 	bl	8000578 <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	1ad2      	subs	r2, r2, r3
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d802      	bhi.n	80016be <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d113      	bne.n	80016e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c2:	f043 0220 	orr.w	r2, r3, #32
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	2220      	movs	r2, #32
 80016ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	2200      	movs	r2, #0
 80016d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	2200      	movs	r2, #0
 80016de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e007      	b.n	80016f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	699b      	ldr	r3, [r3, #24]
 80016ec:	f003 0320 	and.w	r3, r3, #32
 80016f0:	2b20      	cmp	r3, #32
 80016f2:	d1cf      	bne.n	8001694 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80016f4:	2300      	movs	r3, #0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3710      	adds	r7, #16
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
	...

08001700 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	60f8      	str	r0, [r7, #12]
 8001708:	60b9      	str	r1, [r7, #8]
 800170a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	699b      	ldr	r3, [r3, #24]
 8001712:	f003 0310 	and.w	r3, r3, #16
 8001716:	2b10      	cmp	r3, #16
 8001718:	d151      	bne.n	80017be <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800171a:	e022      	b.n	8001762 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001722:	d01e      	beq.n	8001762 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001724:	f7fe ff28 	bl	8000578 <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	1ad2      	subs	r2, r2, r3
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	429a      	cmp	r2, r3
 8001732:	d802      	bhi.n	800173a <I2C_IsAcknowledgeFailed+0x3a>
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d113      	bne.n	8001762 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800173e:	f043 0220 	orr.w	r2, r3, #32
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	2220      	movs	r2, #32
 800174a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	2200      	movs	r2, #0
 8001752:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	2200      	movs	r2, #0
 800175a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e02e      	b.n	80017c0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	699b      	ldr	r3, [r3, #24]
 8001768:	f003 0320 	and.w	r3, r3, #32
 800176c:	2b20      	cmp	r3, #32
 800176e:	d1d5      	bne.n	800171c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2210      	movs	r2, #16
 8001776:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2220      	movs	r2, #32
 800177e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001780:	68f8      	ldr	r0, [r7, #12]
 8001782:	f7ff fedc 	bl	800153e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	6859      	ldr	r1, [r3, #4]
 8001790:	4b0d      	ldr	r3, [pc, #52]	; (80017c8 <I2C_IsAcknowledgeFailed+0xc8>)
 8001792:	400b      	ands	r3, r1
 8001794:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179a:	f043 0204 	orr.w	r2, r3, #4
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	2220      	movs	r2, #32
 80017a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	2200      	movs	r2, #0
 80017ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	2200      	movs	r2, #0
 80017b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e000      	b.n	80017c0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80017be:	2300      	movs	r3, #0
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3710      	adds	r7, #16
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	fe00e800 	.word	0xfe00e800

080017cc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b085      	sub	sp, #20
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	607b      	str	r3, [r7, #4]
 80017d6:	460b      	mov	r3, r1
 80017d8:	817b      	strh	r3, [r7, #10]
 80017da:	4613      	mov	r3, r2
 80017dc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	6859      	ldr	r1, [r3, #4]
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	0d5b      	lsrs	r3, r3, #21
 80017ec:	f403 6080 	and.w	r0, r3, #1024	; 0x400
 80017f0:	4b0b      	ldr	r3, [pc, #44]	; (8001820 <I2C_TransferConfig+0x54>)
 80017f2:	4303      	orrs	r3, r0
 80017f4:	43db      	mvns	r3, r3
 80017f6:	4019      	ands	r1, r3
 80017f8:	897b      	ldrh	r3, [r7, #10]
 80017fa:	f3c3 0009 	ubfx	r0, r3, #0, #10
 80017fe:	7a7b      	ldrb	r3, [r7, #9]
 8001800:	041b      	lsls	r3, r3, #16
 8001802:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001806:	4318      	orrs	r0, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	4318      	orrs	r0, r3
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	4303      	orrs	r3, r0
 8001810:	430b      	orrs	r3, r1
 8001812:	6053      	str	r3, [r2, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001814:	bf00      	nop
 8001816:	3714      	adds	r7, #20
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr
 8001820:	03ff63ff 	.word	0x03ff63ff

08001824 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001834:	b2db      	uxtb	r3, r3
 8001836:	2b20      	cmp	r3, #32
 8001838:	d138      	bne.n	80018ac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001840:	2b01      	cmp	r3, #1
 8001842:	d101      	bne.n	8001848 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001844:	2302      	movs	r3, #2
 8001846:	e032      	b.n	80018ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2201      	movs	r2, #1
 800184c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2224      	movs	r2, #36	; 0x24
 8001854:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	687a      	ldr	r2, [r7, #4]
 800185e:	6812      	ldr	r2, [r2, #0]
 8001860:	6812      	ldr	r2, [r2, #0]
 8001862:	f022 0201 	bic.w	r2, r2, #1
 8001866:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	687a      	ldr	r2, [r7, #4]
 800186e:	6812      	ldr	r2, [r2, #0]
 8001870:	6812      	ldr	r2, [r2, #0]
 8001872:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001876:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	6812      	ldr	r2, [r2, #0]
 8001880:	6811      	ldr	r1, [r2, #0]
 8001882:	683a      	ldr	r2, [r7, #0]
 8001884:	430a      	orrs	r2, r1
 8001886:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	6812      	ldr	r2, [r2, #0]
 8001890:	6812      	ldr	r2, [r2, #0]
 8001892:	f042 0201 	orr.w	r2, r2, #1
 8001896:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2220      	movs	r2, #32
 800189c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2200      	movs	r2, #0
 80018a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80018a8:	2300      	movs	r3, #0
 80018aa:	e000      	b.n	80018ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80018ac:	2302      	movs	r3, #2
  }
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr

080018ba <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80018ba:	b480      	push	{r7}
 80018bc:	b085      	sub	sp, #20
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
 80018c2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	2b20      	cmp	r3, #32
 80018ce:	d139      	bne.n	8001944 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d101      	bne.n	80018de <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80018da:	2302      	movs	r3, #2
 80018dc:	e033      	b.n	8001946 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2201      	movs	r2, #1
 80018e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2224      	movs	r2, #36	; 0x24
 80018ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	6812      	ldr	r2, [r2, #0]
 80018f6:	6812      	ldr	r2, [r2, #0]
 80018f8:	f022 0201 	bic.w	r2, r2, #1
 80018fc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800190c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	021b      	lsls	r3, r3, #8
 8001912:	68fa      	ldr	r2, [r7, #12]
 8001914:	4313      	orrs	r3, r2
 8001916:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	68fa      	ldr	r2, [r7, #12]
 800191e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	6812      	ldr	r2, [r2, #0]
 8001928:	6812      	ldr	r2, [r2, #0]
 800192a:	f042 0201 	orr.w	r2, r2, #1
 800192e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2220      	movs	r2, #32
 8001934:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2200      	movs	r2, #0
 800193c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001940:	2300      	movs	r3, #0
 8001942:	e000      	b.n	8001946 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001944:	2302      	movs	r3, #2
  }
}
 8001946:	4618      	mov	r0, r3
 8001948:	3714      	adds	r7, #20
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr

08001952 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001952:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001954:	b08b      	sub	sp, #44	; 0x2c
 8001956:	af06      	add	r7, sp, #24
 8001958:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d101      	bne.n	8001964 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e0ad      	b.n	8001ac0 <HAL_PCD_Init+0x16e>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 800196a:	b2db      	uxtb	r3, r3
 800196c:	2b00      	cmp	r3, #0
 800196e:	d106      	bne.n	800197e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f004 fbeb 	bl	8006154 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2203      	movs	r2, #3
 8001982:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4618      	mov	r0, r3
 800198c:	f003 fd3c 	bl	8005408 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001990:	2300      	movs	r3, #0
 8001992:	73fb      	strb	r3, [r7, #15]
 8001994:	e035      	b.n	8001a02 <HAL_PCD_Init+0xb0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001996:	7bfb      	ldrb	r3, [r7, #15]
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	015b      	lsls	r3, r3, #5
 800199c:	4413      	add	r3, r2
 800199e:	3329      	adds	r3, #41	; 0x29
 80019a0:	2201      	movs	r2, #1
 80019a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80019a4:	7bfb      	ldrb	r3, [r7, #15]
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	015b      	lsls	r3, r3, #5
 80019aa:	4413      	add	r3, r2
 80019ac:	3328      	adds	r3, #40	; 0x28
 80019ae:	7bfa      	ldrb	r2, [r7, #15]
 80019b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80019b2:	7bfb      	ldrb	r3, [r7, #15]
 80019b4:	7bfa      	ldrb	r2, [r7, #15]
 80019b6:	b291      	uxth	r1, r2
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	015b      	lsls	r3, r3, #5
 80019bc:	4413      	add	r3, r2
 80019be:	3336      	adds	r3, #54	; 0x36
 80019c0:	460a      	mov	r2, r1
 80019c2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80019c4:	7bfb      	ldrb	r3, [r7, #15]
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	015b      	lsls	r3, r3, #5
 80019ca:	4413      	add	r3, r2
 80019cc:	332b      	adds	r3, #43	; 0x2b
 80019ce:	2200      	movs	r2, #0
 80019d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80019d2:	7bfb      	ldrb	r3, [r7, #15]
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	015b      	lsls	r3, r3, #5
 80019d8:	4413      	add	r3, r2
 80019da:	3338      	adds	r3, #56	; 0x38
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80019e0:	7bfb      	ldrb	r3, [r7, #15]
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	015b      	lsls	r3, r3, #5
 80019e6:	4413      	add	r3, r2
 80019e8:	333c      	adds	r3, #60	; 0x3c
 80019ea:	2200      	movs	r2, #0
 80019ec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80019ee:	7bfb      	ldrb	r3, [r7, #15]
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	3302      	adds	r3, #2
 80019f4:	015b      	lsls	r3, r3, #5
 80019f6:	4413      	add	r3, r2
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019fc:	7bfb      	ldrb	r3, [r7, #15]
 80019fe:	3301      	adds	r3, #1
 8001a00:	73fb      	strb	r3, [r7, #15]
 8001a02:	7bfa      	ldrb	r2, [r7, #15]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d3c4      	bcc.n	8001996 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	73fb      	strb	r3, [r7, #15]
 8001a10:	e031      	b.n	8001a76 <HAL_PCD_Init+0x124>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001a12:	7bfb      	ldrb	r3, [r7, #15]
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	015b      	lsls	r3, r3, #5
 8001a18:	4413      	add	r3, r2
 8001a1a:	f203 1329 	addw	r3, r3, #297	; 0x129
 8001a1e:	2200      	movs	r2, #0
 8001a20:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001a22:	7bfb      	ldrb	r3, [r7, #15]
 8001a24:	687a      	ldr	r2, [r7, #4]
 8001a26:	015b      	lsls	r3, r3, #5
 8001a28:	4413      	add	r3, r2
 8001a2a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001a2e:	7bfa      	ldrb	r2, [r7, #15]
 8001a30:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001a32:	7bfb      	ldrb	r3, [r7, #15]
 8001a34:	687a      	ldr	r2, [r7, #4]
 8001a36:	015b      	lsls	r3, r3, #5
 8001a38:	4413      	add	r3, r2
 8001a3a:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8001a3e:	2200      	movs	r2, #0
 8001a40:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001a42:	7bfb      	ldrb	r3, [r7, #15]
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	015b      	lsls	r3, r3, #5
 8001a48:	4413      	add	r3, r2
 8001a4a:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001a4e:	2200      	movs	r2, #0
 8001a50:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001a52:	7bfb      	ldrb	r3, [r7, #15]
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	015b      	lsls	r3, r3, #5
 8001a58:	4413      	add	r3, r2
 8001a5a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001a5e:	2200      	movs	r2, #0
 8001a60:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001a62:	7bfb      	ldrb	r3, [r7, #15]
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	330a      	adds	r3, #10
 8001a68:	015b      	lsls	r3, r3, #5
 8001a6a:	4413      	add	r3, r2
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a70:	7bfb      	ldrb	r3, [r7, #15]
 8001a72:	3301      	adds	r3, #1
 8001a74:	73fb      	strb	r3, [r7, #15]
 8001a76:	7bfa      	ldrb	r2, [r7, #15]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d3c8      	bcc.n	8001a12 <HAL_PCD_Init+0xc0>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	603b      	str	r3, [r7, #0]
 8001a86:	687e      	ldr	r6, [r7, #4]
 8001a88:	466d      	mov	r5, sp
 8001a8a:	f106 0410 	add.w	r4, r6, #16
 8001a8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a92:	6823      	ldr	r3, [r4, #0]
 8001a94:	602b      	str	r3, [r5, #0]
 8001a96:	1d33      	adds	r3, r6, #4
 8001a98:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a9a:	6838      	ldr	r0, [r7, #0]
 8001a9c:	f003 fcd1 	bl	8005442 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2201      	movs	r2, #1
 8001aac:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	69db      	ldr	r3, [r3, #28]
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d102      	bne.n	8001abe <HAL_PCD_Init+0x16c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f000 f805 	bl	8001ac8 <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 8001abe:	2300      	movs	r3, #0
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3714      	adds	r7, #20
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ac8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b085      	sub	sp, #20
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2201      	movs	r2, #1
 8001ada:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001aec:	b29b      	uxth	r3, r3
 8001aee:	f043 0301 	orr.w	r3, r3, #1
 8001af2:	b29a      	uxth	r2, r3
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	f043 0302 	orr.w	r3, r3, #2
 8001b06:	b29a      	uxth	r2, r3
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8001b0e:	2300      	movs	r3, #0
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3714      	adds	r7, #20
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b20:	4a05      	ldr	r2, [pc, #20]	; (8001b38 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001b22:	4b05      	ldr	r3, [pc, #20]	; (8001b38 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b2a:	6013      	str	r3, [r2, #0]
}
 8001b2c:	bf00      	nop
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	58000400 	.word	0x58000400

08001b3c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001b40:	4b04      	ldr	r3, [pc, #16]	; (8001b54 <HAL_PWREx_GetVoltageRange+0x18>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	58000400 	.word	0x58000400

08001b58 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001b5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b6a:	d101      	bne.n	8001b70 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e000      	b.n	8001b72 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <LL_RCC_HSE_EnableBypass>:
  * @brief  Enable HSE external oscillator (HSE Bypass)
  * @rmtoll CR           HSEBYP        LL_RCC_HSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableBypass(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001b80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b8e:	6013      	str	r3, [r2, #0]
}
 8001b90:	bf00      	nop
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr

08001b9a <LL_RCC_HSE_DisableBypass>:
  * @brief  Disable HSE external oscillator (HSE Bypass)
  * @rmtoll CR           HSEBYP        LL_RCC_HSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableBypass(void)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001b9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ba2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bac:	6013      	str	r3, [r2, #0]
}
 8001bae:	bf00      	nop
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001bbc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bca:	6013      	str	r3, [r2, #0]
}
 8001bcc:	bf00      	nop
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr

08001bd6 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001bda:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001be8:	6013      	str	r3, [r2, #0]
}
 8001bea:	bf00      	nop
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001bf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c02:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001c06:	d101      	bne.n	8001c0c <LL_RCC_HSE_IsReady+0x18>
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e000      	b.n	8001c0e <LL_RCC_HSE_IsReady+0x1a>
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001c1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c2a:	6013      	str	r3, [r2, #0]
}
 8001c2c:	bf00      	nop
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr

08001c36 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8001c36:	b480      	push	{r7}
 8001c38:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001c3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c48:	6013      	str	r3, [r2, #0]
}
 8001c4a:	bf00      	nop
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001c58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c66:	d101      	bne.n	8001c6c <LL_RCC_HSI_IsReady+0x18>
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e000      	b.n	8001c6e <LL_RCC_HSI_IsReady+0x1a>
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001c80:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	061b      	lsls	r3, r3, #24
 8001c92:	4313      	orrs	r3, r2
 8001c94:	604b      	str	r3, [r1, #4]
}
 8001c96:	bf00      	nop
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr

08001ca2 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001ca6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001caa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cb2:	f043 0301 	orr.w	r3, r3, #1
 8001cb6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001cba:	bf00      	nop
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001cc8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ccc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cd4:	f023 0301 	bic.w	r3, r3, #1
 8001cd8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001cdc:	bf00      	nop
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr

08001ce6 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8001cea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d101      	bne.n	8001cfe <LL_RCC_HSI48_IsReady+0x18>
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e000      	b.n	8001d00 <LL_RCC_HSI48_IsReady+0x1a>
 8001cfe:	2300      	movs	r3, #0
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr

08001d0a <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001d0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d1a:	f043 0301 	orr.w	r3, r3, #1
 8001d1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001d22:	bf00      	nop
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001d30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d3c:	f023 0301 	bic.w	r3, r3, #1
 8001d40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001d44:	bf00      	nop
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr

08001d4e <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001d52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d5e:	f043 0304 	orr.w	r3, r3, #4
 8001d62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001d66:	bf00      	nop
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001d74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d80:	f023 0304 	bic.w	r3, r3, #4
 8001d84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001d88:	bf00      	nop
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr

08001d92 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001d92:	b480      	push	{r7}
 8001d94:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001d96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d9e:	f003 0302 	and.w	r3, r3, #2
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d101      	bne.n	8001daa <LL_RCC_LSE_IsReady+0x18>
 8001da6:	2301      	movs	r3, #1
 8001da8:	e000      	b.n	8001dac <LL_RCC_LSE_IsReady+0x1a>
 8001daa:	2300      	movs	r3, #0
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr

08001db6 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8001db6:	b480      	push	{r7}
 8001db8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001dba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001dbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dc6:	f043 0301 	orr.w	r3, r3, #1
 8001dca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001dce:	bf00      	nop
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001ddc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001de0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001de4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001de8:	f023 0301 	bic.w	r3, r3, #1
 8001dec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001df0:	bf00      	nop
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr

08001dfa <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8001dfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d101      	bne.n	8001e12 <LL_RCC_LSI1_IsReady+0x18>
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e000      	b.n	8001e14 <LL_RCC_LSI1_IsReady+0x1a>
 8001e12:	2300      	movs	r3, #0
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr

08001e1e <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001e22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e2e:	f043 0304 	orr.w	r3, r3, #4
 8001e32:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001e36:	bf00      	nop
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001e44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e50:	f023 0304 	bic.w	r3, r3, #4
 8001e54:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001e58:	bf00      	nop
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr

08001e62 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8001e62:	b480      	push	{r7}
 8001e64:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001e66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e6e:	f003 0308 	and.w	r3, r3, #8
 8001e72:	2b08      	cmp	r3, #8
 8001e74:	d101      	bne.n	8001e7a <LL_RCC_LSI2_IsReady+0x18>
 8001e76:	2301      	movs	r3, #1
 8001e78:	e000      	b.n	8001e7c <LL_RCC_LSI2_IsReady+0x1a>
 8001e7a:	2300      	movs	r3, #0
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr

08001e86 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8001e86:	b480      	push	{r7}
 8001e88:	b083      	sub	sp, #12
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8001e8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e9a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	021b      	lsls	r3, r3, #8
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8001ea8:	bf00      	nop
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001eb8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ebc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f043 0301 	orr.w	r3, r3, #1
 8001ec6:	6013      	str	r3, [r2, #0]
}
 8001ec8:	bf00      	nop
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr

08001ed2 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001ed6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001eda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f023 0301 	bic.w	r3, r3, #1
 8001ee4:	6013      	str	r3, [r2, #0]
}
 8001ee6:	bf00      	nop
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001ef4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0302 	and.w	r3, r3, #2
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d101      	bne.n	8001f06 <LL_RCC_MSI_IsReady+0x16>
 8001f02:	2301      	movs	r3, #1
 8001f04:	e000      	b.n	8001f08 <LL_RCC_MSI_IsReady+0x18>
 8001f06:	2300      	movs	r3, #0
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr

08001f12 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8001f12:	b480      	push	{r7}
 8001f14:	b083      	sub	sp, #12
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001f1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	600b      	str	r3, [r1, #0]
}
 8001f2e:	bf00      	nop
 8001f30:	370c      	adds	r7, #12
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr

08001f3a <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	b083      	sub	sp, #12
 8001f3e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001f40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f4a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2bb0      	cmp	r3, #176	; 0xb0
 8001f50:	d901      	bls.n	8001f56 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8001f52:	23b0      	movs	r3, #176	; 0xb0
 8001f54:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8001f56:	687b      	ldr	r3, [r7, #4]
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001f6c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	021b      	lsls	r3, r3, #8
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	604b      	str	r3, [r1, #4]
}
 8001f82:	bf00      	nop
 8001f84:	370c      	adds	r7, #12
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr

08001f8e <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	b083      	sub	sp, #12
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001f96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	f023 0203 	bic.w	r2, r3, #3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	608b      	str	r3, [r1, #8]
}
 8001faa:	bf00      	nop
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr

08001fb6 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001fba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	f003 030c 	and.w	r3, r3, #12
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr

08001fce <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001fce:	b480      	push	{r7}
 8001fd0:	b083      	sub	sp, #12
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001fd6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	608b      	str	r3, [r1, #8]
}
 8001fea:	bf00      	nop
 8001fec:	370c      	adds	r7, #12
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr

08001ff6 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001ff6:	b480      	push	{r7}
 8001ff8:	b083      	sub	sp, #12
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001ffe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002002:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002006:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800200a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4313      	orrs	r3, r2
 8002012:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002016:	bf00      	nop
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr

08002022 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8002022:	b480      	push	{r7}
 8002024:	b083      	sub	sp, #12
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800202a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800202e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002032:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002036:	f023 020f 	bic.w	r2, r3, #15
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	091b      	lsrs	r3, r3, #4
 800203e:	4313      	orrs	r3, r2
 8002040:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002044:	bf00      	nop
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002058:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800205c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4313      	orrs	r3, r2
 800206a:	608b      	str	r3, [r1, #8]
}
 800206c:	bf00      	nop
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002080:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002084:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4313      	orrs	r3, r2
 8002092:	608b      	str	r3, [r1, #8]
}
 8002094:	bf00      	nop
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80020a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80020bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020c0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80020c4:	011b      	lsls	r3, r3, #4
 80020c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80020d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80020f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002108:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800210c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002116:	6013      	str	r3, [r2, #0]
}
 8002118:	bf00      	nop
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr

08002122 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002122:	b480      	push	{r7}
 8002124:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002126:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800212a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002134:	6013      	str	r3, [r2, #0]
}
 8002136:	bf00      	nop
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002144:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800214e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002152:	d101      	bne.n	8002158 <LL_RCC_PLL_IsReady+0x18>
 8002154:	2301      	movs	r3, #1
 8002156:	e000      	b.n	800215a <LL_RCC_PLL_IsReady+0x1a>
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002168:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	0a1b      	lsrs	r3, r3, #8
 8002170:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002174:	4618      	mov	r0, r3
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr

0800217e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800217e:	b480      	push	{r7}
 8002180:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002182:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800218c:	4618      	mov	r0, r3
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr

08002196 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002196:	b480      	push	{r7}
 8002198:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800219a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr

080021ae <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80021ae:	b480      	push	{r7}
 80021b0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80021b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	f003 0303 	and.w	r3, r3, #3
}
 80021bc:	4618      	mov	r0, r3
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr

080021c6 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80021c6:	b480      	push	{r7}
 80021c8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80021ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021d8:	d101      	bne.n	80021de <LL_RCC_IsActiveFlag_HPRE+0x18>
 80021da:	2301      	movs	r3, #1
 80021dc:	e000      	b.n	80021e0 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80021de:	2300      	movs	r3, #0
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr

080021ea <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80021ea:	b480      	push	{r7}
 80021ec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80021ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021f2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80021f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80021fe:	d101      	bne.n	8002204 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002200:	2301      	movs	r3, #1
 8002202:	e000      	b.n	8002206 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002204:	2300      	movs	r3, #0
}
 8002206:	4618      	mov	r0, r3
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002214:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002218:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800221c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002220:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002224:	d101      	bne.n	800222a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002226:	2301      	movs	r3, #1
 8002228:	e000      	b.n	800222c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800222a:	2300      	movs	r3, #0
}
 800222c:	4618      	mov	r0, r3
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr

08002236 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002236:	b480      	push	{r7}
 8002238:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800223a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002244:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002248:	d101      	bne.n	800224e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800224a:	2301      	movs	r3, #1
 800224c:	e000      	b.n	8002250 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800224e:	2300      	movs	r3, #0
}
 8002250:	4618      	mov	r0, r3
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr

0800225a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800225a:	b480      	push	{r7}
 800225c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800225e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002268:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800226c:	d101      	bne.n	8002272 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800226e:	2301      	movs	r3, #1
 8002270:	e000      	b.n	8002274 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002272:	2300      	movs	r3, #0
}
 8002274:	4618      	mov	r0, r3
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
	...

08002280 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002280:	b590      	push	{r4, r7, lr}
 8002282:	b08b      	sub	sp, #44	; 0x2c
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d101      	bne.n	8002292 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e34b      	b.n	800292a <HAL_RCC_OscConfig+0x6aa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0320 	and.w	r3, r3, #32
 800229a:	2b00      	cmp	r3, #0
 800229c:	f000 808f 	beq.w	80023be <HAL_RCC_OscConfig+0x13e>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022a0:	f7ff fe89 	bl	8001fb6 <LL_RCC_GetSysClkSource>
 80022a4:	6278      	str	r0, [r7, #36]	; 0x24
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022a6:	f7ff ff82 	bl	80021ae <LL_RCC_PLL_GetMainSource>
 80022aa:	6238      	str	r0, [r7, #32]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80022ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d005      	beq.n	80022be <HAL_RCC_OscConfig+0x3e>
 80022b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b4:	2b0c      	cmp	r3, #12
 80022b6:	d149      	bne.n	800234c <HAL_RCC_OscConfig+0xcc>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80022b8:	6a3b      	ldr	r3, [r7, #32]
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d146      	bne.n	800234c <HAL_RCC_OscConfig+0xcc>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80022be:	f7ff fe17 	bl	8001ef0 <LL_RCC_MSI_IsReady>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d005      	beq.n	80022d4 <HAL_RCC_OscConfig+0x54>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	69db      	ldr	r3, [r3, #28]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d101      	bne.n	80022d4 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e32a      	b.n	800292a <HAL_RCC_OscConfig+0x6aa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80022d8:	f7ff fe2f 	bl	8001f3a <LL_RCC_MSI_GetRange>
 80022dc:	4603      	mov	r3, r0
 80022de:	429c      	cmp	r4, r3
 80022e0:	d914      	bls.n	800230c <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e6:	4618      	mov	r0, r3
 80022e8:	f000 fd0e 	bl	8002d08 <RCC_SetFlashLatencyFromMSIRange>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e319      	b.n	800292a <HAL_RCC_OscConfig+0x6aa>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7ff fe09 	bl	8001f12 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6a1b      	ldr	r3, [r3, #32]
 8002304:	4618      	mov	r0, r3
 8002306:	f7ff fe2d 	bl	8001f64 <LL_RCC_MSI_SetCalibTrimming>
 800230a:	e013      	b.n	8002334 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002310:	4618      	mov	r0, r3
 8002312:	f7ff fdfe 	bl	8001f12 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6a1b      	ldr	r3, [r3, #32]
 800231a:	4618      	mov	r0, r3
 800231c:	f7ff fe22 	bl	8001f64 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002324:	4618      	mov	r0, r3
 8002326:	f000 fcef 	bl	8002d08 <RCC_SetFlashLatencyFromMSIRange>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d001      	beq.n	8002334 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e2fa      	b.n	800292a <HAL_RCC_OscConfig+0x6aa>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClockUpdate();
 8002334:	f003 ffcc 	bl	80062d0 <SystemCoreClockUpdate>
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002338:	4bb4      	ldr	r3, [pc, #720]	; (800260c <HAL_RCC_OscConfig+0x38c>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4618      	mov	r0, r3
 800233e:	f7fe f8cf 	bl	80004e0 <HAL_InitTick>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d039      	beq.n	80023bc <HAL_RCC_OscConfig+0x13c>
        {
          return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e2ee      	b.n	800292a <HAL_RCC_OscConfig+0x6aa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	69db      	ldr	r3, [r3, #28]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d01e      	beq.n	8002392 <HAL_RCC_OscConfig+0x112>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002354:	f7ff fdae 	bl	8001eb4 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002358:	f7fe f90e 	bl	8000578 <HAL_GetTick>
 800235c:	61f8      	str	r0, [r7, #28]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800235e:	e008      	b.n	8002372 <HAL_RCC_OscConfig+0xf2>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002360:	f7fe f90a 	bl	8000578 <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	2b02      	cmp	r3, #2
 800236c:	d901      	bls.n	8002372 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e2db      	b.n	800292a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002372:	f7ff fdbd 	bl	8001ef0 <LL_RCC_MSI_IsReady>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d0f1      	beq.n	8002360 <HAL_RCC_OscConfig+0xe0>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002380:	4618      	mov	r0, r3
 8002382:	f7ff fdc6 	bl	8001f12 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6a1b      	ldr	r3, [r3, #32]
 800238a:	4618      	mov	r0, r3
 800238c:	f7ff fdea 	bl	8001f64 <LL_RCC_MSI_SetCalibTrimming>
 8002390:	e015      	b.n	80023be <HAL_RCC_OscConfig+0x13e>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002392:	f7ff fd9e 	bl	8001ed2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002396:	f7fe f8ef 	bl	8000578 <HAL_GetTick>
 800239a:	61f8      	str	r0, [r7, #28]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800239c:	e008      	b.n	80023b0 <HAL_RCC_OscConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800239e:	f7fe f8eb 	bl	8000578 <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d901      	bls.n	80023b0 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e2bc      	b.n	800292a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_MSI_IsReady() != 0U)
 80023b0:	f7ff fd9e 	bl	8001ef0 <LL_RCC_MSI_IsReady>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d1f1      	bne.n	800239e <HAL_RCC_OscConfig+0x11e>
 80023ba:	e000      	b.n	80023be <HAL_RCC_OscConfig+0x13e>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80023bc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0301 	and.w	r3, r3, #1
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d05a      	beq.n	8002480 <HAL_RCC_OscConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023ca:	f7ff fdf4 	bl	8001fb6 <LL_RCC_GetSysClkSource>
 80023ce:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023d0:	f7ff feed 	bl	80021ae <LL_RCC_PLL_GetMainSource>
 80023d4:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	2b08      	cmp	r3, #8
 80023da:	d005      	beq.n	80023e8 <HAL_RCC_OscConfig+0x168>
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	2b0c      	cmp	r3, #12
 80023e0:	d10d      	bne.n	80023fe <HAL_RCC_OscConfig+0x17e>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	2b03      	cmp	r3, #3
 80023e6:	d10a      	bne.n	80023fe <HAL_RCC_OscConfig+0x17e>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023e8:	f7ff fc04 	bl	8001bf4 <LL_RCC_HSE_IsReady>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d045      	beq.n	800247e <HAL_RCC_OscConfig+0x1fe>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d141      	bne.n	800247e <HAL_RCC_OscConfig+0x1fe>
      {
        return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e295      	b.n	800292a <HAL_RCC_OscConfig+0x6aa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002406:	d102      	bne.n	800240e <HAL_RCC_OscConfig+0x18e>
 8002408:	f7ff fbd6 	bl	8001bb8 <LL_RCC_HSE_Enable>
 800240c:	e00d      	b.n	800242a <HAL_RCC_OscConfig+0x1aa>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002416:	d104      	bne.n	8002422 <HAL_RCC_OscConfig+0x1a2>
 8002418:	f7ff fbb0 	bl	8001b7c <LL_RCC_HSE_EnableBypass>
 800241c:	f7ff fbcc 	bl	8001bb8 <LL_RCC_HSE_Enable>
 8002420:	e003      	b.n	800242a <HAL_RCC_OscConfig+0x1aa>
 8002422:	f7ff fbd8 	bl	8001bd6 <LL_RCC_HSE_Disable>
 8002426:	f7ff fbb8 	bl	8001b9a <LL_RCC_HSE_DisableBypass>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d012      	beq.n	8002458 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002432:	f7fe f8a1 	bl	8000578 <HAL_GetTick>
 8002436:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002438:	e008      	b.n	800244c <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800243a:	f7fe f89d 	bl	8000578 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	2b64      	cmp	r3, #100	; 0x64
 8002446:	d901      	bls.n	800244c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e26e      	b.n	800292a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSE_IsReady() == 0U)
 800244c:	f7ff fbd2 	bl	8001bf4 <LL_RCC_HSE_IsReady>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d0f1      	beq.n	800243a <HAL_RCC_OscConfig+0x1ba>
 8002456:	e013      	b.n	8002480 <HAL_RCC_OscConfig+0x200>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002458:	f7fe f88e 	bl	8000578 <HAL_GetTick>
 800245c:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800245e:	e008      	b.n	8002472 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002460:	f7fe f88a 	bl	8000578 <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	2b64      	cmp	r3, #100	; 0x64
 800246c:	d901      	bls.n	8002472 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e25b      	b.n	800292a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002472:	f7ff fbbf 	bl	8001bf4 <LL_RCC_HSE_IsReady>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d1f1      	bne.n	8002460 <HAL_RCC_OscConfig+0x1e0>
 800247c:	e000      	b.n	8002480 <HAL_RCC_OscConfig+0x200>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800247e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0302 	and.w	r3, r3, #2
 8002488:	2b00      	cmp	r3, #0
 800248a:	d051      	beq.n	8002530 <HAL_RCC_OscConfig+0x2b0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800248c:	f7ff fd93 	bl	8001fb6 <LL_RCC_GetSysClkSource>
 8002490:	6138      	str	r0, [r7, #16]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002492:	f7ff fe8c 	bl	80021ae <LL_RCC_PLL_GetMainSource>
 8002496:	60f8      	str	r0, [r7, #12]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	2b04      	cmp	r3, #4
 800249c:	d005      	beq.n	80024aa <HAL_RCC_OscConfig+0x22a>
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	2b0c      	cmp	r3, #12
 80024a2:	d113      	bne.n	80024cc <HAL_RCC_OscConfig+0x24c>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d110      	bne.n	80024cc <HAL_RCC_OscConfig+0x24c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024aa:	f7ff fbd3 	bl	8001c54 <LL_RCC_HSI_IsReady>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d005      	beq.n	80024c0 <HAL_RCC_OscConfig+0x240>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d101      	bne.n	80024c0 <HAL_RCC_OscConfig+0x240>
      {
        return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e234      	b.n	800292a <HAL_RCC_OscConfig+0x6aa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	691b      	ldr	r3, [r3, #16]
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7ff fbd7 	bl	8001c78 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024ca:	e031      	b.n	8002530 <HAL_RCC_OscConfig+0x2b0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d019      	beq.n	8002508 <HAL_RCC_OscConfig+0x288>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024d4:	f7ff fba0 	bl	8001c18 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d8:	f7fe f84e 	bl	8000578 <HAL_GetTick>
 80024dc:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80024de:	e008      	b.n	80024f2 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024e0:	f7fe f84a 	bl	8000578 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e21b      	b.n	800292a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSI_IsReady() == 0U)
 80024f2:	f7ff fbaf 	bl	8001c54 <LL_RCC_HSI_IsReady>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d0f1      	beq.n	80024e0 <HAL_RCC_OscConfig+0x260>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	691b      	ldr	r3, [r3, #16]
 8002500:	4618      	mov	r0, r3
 8002502:	f7ff fbb9 	bl	8001c78 <LL_RCC_HSI_SetCalibTrimming>
 8002506:	e013      	b.n	8002530 <HAL_RCC_OscConfig+0x2b0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002508:	f7ff fb95 	bl	8001c36 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800250c:	f7fe f834 	bl	8000578 <HAL_GetTick>
 8002510:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002512:	e008      	b.n	8002526 <HAL_RCC_OscConfig+0x2a6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002514:	f7fe f830 	bl	8000578 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	2b02      	cmp	r3, #2
 8002520:	d901      	bls.n	8002526 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e201      	b.n	800292a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002526:	f7ff fb95 	bl	8001c54 <LL_RCC_HSI_IsReady>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d1f1      	bne.n	8002514 <HAL_RCC_OscConfig+0x294>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0308 	and.w	r3, r3, #8
 8002538:	2b00      	cmp	r3, #0
 800253a:	d106      	bne.n	800254a <HAL_RCC_OscConfig+0x2ca>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002544:	2b00      	cmp	r3, #0
 8002546:	f000 80a2 	beq.w	800268e <HAL_RCC_OscConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	695b      	ldr	r3, [r3, #20]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d075      	beq.n	800263e <HAL_RCC_OscConfig+0x3be>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0310 	and.w	r3, r3, #16
 800255a:	2b00      	cmp	r3, #0
 800255c:	d046      	beq.n	80025ec <HAL_RCC_OscConfig+0x36c>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800255e:	f7ff fc4c 	bl	8001dfa <LL_RCC_LSI1_IsReady>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d113      	bne.n	8002590 <HAL_RCC_OscConfig+0x310>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8002568:	f7ff fc25 	bl	8001db6 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800256c:	f7fe f804 	bl	8000578 <HAL_GetTick>
 8002570:	61f8      	str	r0, [r7, #28]

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002572:	e008      	b.n	8002586 <HAL_RCC_OscConfig+0x306>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002574:	f7fe f800 	bl	8000578 <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	2b02      	cmp	r3, #2
 8002580:	d901      	bls.n	8002586 <HAL_RCC_OscConfig+0x306>
            {
              return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e1d1      	b.n	800292a <HAL_RCC_OscConfig+0x6aa>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002586:	f7ff fc38 	bl	8001dfa <LL_RCC_LSI1_IsReady>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d0f1      	beq.n	8002574 <HAL_RCC_OscConfig+0x2f4>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8002590:	f7ff fc45 	bl	8001e1e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002594:	f7fd fff0 	bl	8000578 <HAL_GetTick>
 8002598:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800259a:	e008      	b.n	80025ae <HAL_RCC_OscConfig+0x32e>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800259c:	f7fd ffec 	bl	8000578 <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b03      	cmp	r3, #3
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0x32e>
          {
            return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e1bd      	b.n	800292a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80025ae:	f7ff fc58 	bl	8001e62 <LL_RCC_LSI2_IsReady>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d0f1      	beq.n	800259c <HAL_RCC_OscConfig+0x31c>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	699b      	ldr	r3, [r3, #24]
 80025bc:	4618      	mov	r0, r3
 80025be:	f7ff fc62 	bl	8001e86 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80025c2:	f7ff fc09 	bl	8001dd8 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c6:	f7fd ffd7 	bl	8000578 <HAL_GetTick>
 80025ca:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80025cc:	e008      	b.n	80025e0 <HAL_RCC_OscConfig+0x360>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80025ce:	f7fd ffd3 	bl	8000578 <HAL_GetTick>
 80025d2:	4602      	mov	r2, r0
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d901      	bls.n	80025e0 <HAL_RCC_OscConfig+0x360>
          {
            return HAL_TIMEOUT;
 80025dc:	2303      	movs	r3, #3
 80025de:	e1a4      	b.n	800292a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80025e0:	f7ff fc0b 	bl	8001dfa <LL_RCC_LSI1_IsReady>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d1f1      	bne.n	80025ce <HAL_RCC_OscConfig+0x34e>
 80025ea:	e050      	b.n	800268e <HAL_RCC_OscConfig+0x40e>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80025ec:	f7ff fbe3 	bl	8001db6 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f0:	f7fd ffc2 	bl	8000578 <HAL_GetTick>
 80025f4:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80025f6:	e00b      	b.n	8002610 <HAL_RCC_OscConfig+0x390>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80025f8:	f7fd ffbe 	bl	8000578 <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b02      	cmp	r3, #2
 8002604:	d904      	bls.n	8002610 <HAL_RCC_OscConfig+0x390>
          {
            return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e18f      	b.n	800292a <HAL_RCC_OscConfig+0x6aa>
 800260a:	bf00      	nop
 800260c:	20000004 	.word	0x20000004
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002610:	f7ff fbf3 	bl	8001dfa <LL_RCC_LSI1_IsReady>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d0ee      	beq.n	80025f8 <HAL_RCC_OscConfig+0x378>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800261a:	f7ff fc11 	bl	8001e40 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800261e:	e008      	b.n	8002632 <HAL_RCC_OscConfig+0x3b2>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002620:	f7fd ffaa 	bl	8000578 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b03      	cmp	r3, #3
 800262c:	d901      	bls.n	8002632 <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e17b      	b.n	800292a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002632:	f7ff fc16 	bl	8001e62 <LL_RCC_LSI2_IsReady>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d1f1      	bne.n	8002620 <HAL_RCC_OscConfig+0x3a0>
 800263c:	e027      	b.n	800268e <HAL_RCC_OscConfig+0x40e>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800263e:	f7ff fbff 	bl	8001e40 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002642:	f7fd ff99 	bl	8000578 <HAL_GetTick>
 8002646:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002648:	e008      	b.n	800265c <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800264a:	f7fd ff95 	bl	8000578 <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	2b03      	cmp	r3, #3
 8002656:	d901      	bls.n	800265c <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e166      	b.n	800292a <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800265c:	f7ff fc01 	bl	8001e62 <LL_RCC_LSI2_IsReady>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d1f1      	bne.n	800264a <HAL_RCC_OscConfig+0x3ca>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8002666:	f7ff fbb7 	bl	8001dd8 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800266a:	f7fd ff85 	bl	8000578 <HAL_GetTick>
 800266e:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002670:	e008      	b.n	8002684 <HAL_RCC_OscConfig+0x404>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002672:	f7fd ff81 	bl	8000578 <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	2b02      	cmp	r3, #2
 800267e:	d901      	bls.n	8002684 <HAL_RCC_OscConfig+0x404>
        {
          return HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	e152      	b.n	800292a <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002684:	f7ff fbb9 	bl	8001dfa <LL_RCC_LSI1_IsReady>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1f1      	bne.n	8002672 <HAL_RCC_OscConfig+0x3f2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0304 	and.w	r3, r3, #4
 8002696:	2b00      	cmp	r3, #0
 8002698:	d05b      	beq.n	8002752 <HAL_RCC_OscConfig+0x4d2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800269a:	4ba6      	ldr	r3, [pc, #664]	; (8002934 <HAL_RCC_OscConfig+0x6b4>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d114      	bne.n	80026d0 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80026a6:	f7ff fa39 	bl	8001b1c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026aa:	f7fd ff65 	bl	8000578 <HAL_GetTick>
 80026ae:	61f8      	str	r0, [r7, #28]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026b0:	e008      	b.n	80026c4 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026b2:	f7fd ff61 	bl	8000578 <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d901      	bls.n	80026c4 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80026c0:	2303      	movs	r3, #3
 80026c2:	e132      	b.n	800292a <HAL_RCC_OscConfig+0x6aa>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026c4:	4b9b      	ldr	r3, [pc, #620]	; (8002934 <HAL_RCC_OscConfig+0x6b4>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d0f0      	beq.n	80026b2 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d102      	bne.n	80026de <HAL_RCC_OscConfig+0x45e>
 80026d8:	f7ff fb17 	bl	8001d0a <LL_RCC_LSE_Enable>
 80026dc:	e00c      	b.n	80026f8 <HAL_RCC_OscConfig+0x478>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	2b05      	cmp	r3, #5
 80026e4:	d104      	bne.n	80026f0 <HAL_RCC_OscConfig+0x470>
 80026e6:	f7ff fb32 	bl	8001d4e <LL_RCC_LSE_EnableBypass>
 80026ea:	f7ff fb0e 	bl	8001d0a <LL_RCC_LSE_Enable>
 80026ee:	e003      	b.n	80026f8 <HAL_RCC_OscConfig+0x478>
 80026f0:	f7ff fb1c 	bl	8001d2c <LL_RCC_LSE_Disable>
 80026f4:	f7ff fb3c 	bl	8001d70 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d014      	beq.n	800272a <HAL_RCC_OscConfig+0x4aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002700:	f7fd ff3a 	bl	8000578 <HAL_GetTick>
 8002704:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002706:	e00a      	b.n	800271e <HAL_RCC_OscConfig+0x49e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002708:	f7fd ff36 	bl	8000578 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	f241 3288 	movw	r2, #5000	; 0x1388
 8002716:	4293      	cmp	r3, r2
 8002718:	d901      	bls.n	800271e <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e105      	b.n	800292a <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSE_IsReady() == 0U)
 800271e:	f7ff fb38 	bl	8001d92 <LL_RCC_LSE_IsReady>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d0ef      	beq.n	8002708 <HAL_RCC_OscConfig+0x488>
 8002728:	e013      	b.n	8002752 <HAL_RCC_OscConfig+0x4d2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800272a:	f7fd ff25 	bl	8000578 <HAL_GetTick>
 800272e:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002730:	e00a      	b.n	8002748 <HAL_RCC_OscConfig+0x4c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002732:	f7fd ff21 	bl	8000578 <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002740:	4293      	cmp	r3, r2
 8002742:	d901      	bls.n	8002748 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	e0f0      	b.n	800292a <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002748:	f7ff fb23 	bl	8001d92 <LL_RCC_LSE_IsReady>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d1ef      	bne.n	8002732 <HAL_RCC_OscConfig+0x4b2>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800275a:	2b00      	cmp	r3, #0
 800275c:	d02c      	beq.n	80027b8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002762:	2b00      	cmp	r3, #0
 8002764:	d014      	beq.n	8002790 <HAL_RCC_OscConfig+0x510>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002766:	f7ff fa9c 	bl	8001ca2 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800276a:	f7fd ff05 	bl	8000578 <HAL_GetTick>
 800276e:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002770:	e008      	b.n	8002784 <HAL_RCC_OscConfig+0x504>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002772:	f7fd ff01 	bl	8000578 <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	2b02      	cmp	r3, #2
 800277e:	d901      	bls.n	8002784 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e0d2      	b.n	800292a <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002784:	f7ff faaf 	bl	8001ce6 <LL_RCC_HSI48_IsReady>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d0f1      	beq.n	8002772 <HAL_RCC_OscConfig+0x4f2>
 800278e:	e013      	b.n	80027b8 <HAL_RCC_OscConfig+0x538>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002790:	f7ff fa98 	bl	8001cc4 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002794:	f7fd fef0 	bl	8000578 <HAL_GetTick>
 8002798:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800279a:	e008      	b.n	80027ae <HAL_RCC_OscConfig+0x52e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800279c:	f7fd feec 	bl	8000578 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_OscConfig+0x52e>
        {
          return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e0bd      	b.n	800292a <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80027ae:	f7ff fa9a 	bl	8001ce6 <LL_RCC_HSI48_IsReady>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d1f1      	bne.n	800279c <HAL_RCC_OscConfig+0x51c>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027bc:	2b00      	cmp	r3, #0
 80027be:	f000 80b3 	beq.w	8002928 <HAL_RCC_OscConfig+0x6a8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027c2:	f7ff fbf8 	bl	8001fb6 <LL_RCC_GetSysClkSource>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b0c      	cmp	r3, #12
 80027ca:	d076      	beq.n	80028ba <HAL_RCC_OscConfig+0x63a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d14b      	bne.n	800286c <HAL_RCC_OscConfig+0x5ec>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027d4:	f7ff fca5 	bl	8002122 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d8:	f7fd fece 	bl	8000578 <HAL_GetTick>
 80027dc:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 80027de:	e008      	b.n	80027f2 <HAL_RCC_OscConfig+0x572>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027e0:	f7fd feca 	bl	8000578 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_OscConfig+0x572>
          {
            return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e09b      	b.n	800292a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() != 0U)
 80027f2:	f7ff fca5 	bl	8002140 <LL_RCC_PLL_IsReady>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d1f1      	bne.n	80027e0 <HAL_RCC_OscConfig+0x560>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027fc:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8002800:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002804:	68da      	ldr	r2, [r3, #12]
 8002806:	4b4c      	ldr	r3, [pc, #304]	; (8002938 <HAL_RCC_OscConfig+0x6b8>)
 8002808:	4013      	ands	r3, r2
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002812:	4311      	orrs	r1, r2
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002818:	0212      	lsls	r2, r2, #8
 800281a:	4311      	orrs	r1, r2
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002820:	4311      	orrs	r1, r2
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002826:	4311      	orrs	r1, r2
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800282c:	430a      	orrs	r2, r1
 800282e:	4313      	orrs	r3, r2
 8002830:	60c3      	str	r3, [r0, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002832:	f7ff fc67 	bl	8002104 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002836:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800283a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002844:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002846:	f7fd fe97 	bl	8000578 <HAL_GetTick>
 800284a:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 800284c:	e008      	b.n	8002860 <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800284e:	f7fd fe93 	bl	8000578 <HAL_GetTick>
 8002852:	4602      	mov	r2, r0
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	2b02      	cmp	r3, #2
 800285a:	d901      	bls.n	8002860 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 800285c:	2303      	movs	r3, #3
 800285e:	e064      	b.n	800292a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() == 0U)
 8002860:	f7ff fc6e 	bl	8002140 <LL_RCC_PLL_IsReady>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d0f1      	beq.n	800284e <HAL_RCC_OscConfig+0x5ce>
 800286a:	e05d      	b.n	8002928 <HAL_RCC_OscConfig+0x6a8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800286c:	f7ff fc59 	bl	8002122 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8002870:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002874:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	f023 0303 	bic.w	r3, r3, #3
 800287e:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8002880:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002884:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 800288e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002892:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002894:	f7fd fe70 	bl	8000578 <HAL_GetTick>
 8002898:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 800289a:	e008      	b.n	80028ae <HAL_RCC_OscConfig+0x62e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800289c:	f7fd fe6c 	bl	8000578 <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d901      	bls.n	80028ae <HAL_RCC_OscConfig+0x62e>
          {
            return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e03d      	b.n	800292a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() != 0U)
 80028ae:	f7ff fc47 	bl	8002140 <LL_RCC_PLL_IsReady>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d1f1      	bne.n	800289c <HAL_RCC_OscConfig+0x61c>
 80028b8:	e036      	b.n	8002928 <HAL_RCC_OscConfig+0x6a8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d101      	bne.n	80028c6 <HAL_RCC_OscConfig+0x646>
      {
        return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e031      	b.n	800292a <HAL_RCC_OscConfig+0x6aa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 80028c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	60bb      	str	r3, [r7, #8]

        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	f003 0203 	and.w	r2, r3, #3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d8:	429a      	cmp	r2, r3
 80028da:	d123      	bne.n	8002924 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d11c      	bne.n	8002924 <HAL_RCC_OscConfig+0x6a4>
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	0a1b      	lsrs	r3, r3, #8
 80028ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d114      	bne.n	8002924 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002904:	429a      	cmp	r2, r3
 8002906:	d10d      	bne.n	8002924 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002912:	429a      	cmp	r2, r3
 8002914:	d106      	bne.n	8002924 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002920:	429a      	cmp	r2, r3
 8002922:	d001      	beq.n	8002928 <HAL_RCC_OscConfig+0x6a8>
        {
          return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e000      	b.n	800292a <HAL_RCC_OscConfig+0x6aa>
        }
      }
    }
  }
  return HAL_OK;
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	372c      	adds	r7, #44	; 0x2c
 800292e:	46bd      	mov	sp, r7
 8002930:	bd90      	pop	{r4, r7, pc}
 8002932:	bf00      	nop
 8002934:	58000400 	.word	0x58000400
 8002938:	11c1808c 	.word	0x11c1808c

0800293c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d101      	bne.n	8002950 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e12a      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x26a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002950:	4b97      	ldr	r3, [pc, #604]	; (8002bb0 <HAL_RCC_ClockConfig+0x274>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0207 	and.w	r2, r3, #7
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	429a      	cmp	r2, r3
 800295c:	d21b      	bcs.n	8002996 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800295e:	4994      	ldr	r1, [pc, #592]	; (8002bb0 <HAL_RCC_ClockConfig+0x274>)
 8002960:	4b93      	ldr	r3, [pc, #588]	; (8002bb0 <HAL_RCC_ClockConfig+0x274>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f023 0207 	bic.w	r2, r3, #7
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	4313      	orrs	r3, r2
 800296c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800296e:	f7fd fe03 	bl	8000578 <HAL_GetTick>
 8002972:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002974:	e008      	b.n	8002988 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002976:	f7fd fdff 	bl	8000578 <HAL_GetTick>
 800297a:	4602      	mov	r2, r0
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	2b02      	cmp	r3, #2
 8002982:	d901      	bls.n	8002988 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	e10e      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002988:	4b89      	ldr	r3, [pc, #548]	; (8002bb0 <HAL_RCC_ClockConfig+0x274>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0207 	and.w	r2, r3, #7
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	429a      	cmp	r2, r3
 8002994:	d1ef      	bne.n	8002976 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d016      	beq.n	80029d0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7ff fb11 	bl	8001fce <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80029ac:	f7fd fde4 	bl	8000578 <HAL_GetTick>
 80029b0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80029b2:	e008      	b.n	80029c6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80029b4:	f7fd fde0 	bl	8000578 <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d901      	bls.n	80029c6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e0ef      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80029c6:	f7ff fbfe 	bl	80021c6 <LL_RCC_IsActiveFlag_HPRE>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d0f1      	beq.n	80029b4 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0320 	and.w	r3, r3, #32
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d016      	beq.n	8002a0a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	695b      	ldr	r3, [r3, #20]
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7ff fb08 	bl	8001ff6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80029e6:	f7fd fdc7 	bl	8000578 <HAL_GetTick>
 80029ea:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80029ec:	e008      	b.n	8002a00 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80029ee:	f7fd fdc3 	bl	8000578 <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d901      	bls.n	8002a00 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	e0d2      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002a00:	f7ff fbf3 	bl	80021ea <LL_RCC_IsActiveFlag_C2HPRE>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d0f1      	beq.n	80029ee <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d016      	beq.n	8002a44 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	699b      	ldr	r3, [r3, #24]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7ff fb01 	bl	8002022 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002a20:	f7fd fdaa 	bl	8000578 <HAL_GetTick>
 8002a24:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002a26:	e008      	b.n	8002a3a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002a28:	f7fd fda6 	bl	8000578 <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e0b5      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002a3a:	f7ff fbe9 	bl	8002210 <LL_RCC_IsActiveFlag_SHDHPRE>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d0f1      	beq.n	8002a28 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0304 	and.w	r3, r3, #4
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d016      	beq.n	8002a7e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7ff fafb 	bl	8002050 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002a5a:	f7fd fd8d 	bl	8000578 <HAL_GetTick>
 8002a5e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002a60:	e008      	b.n	8002a74 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002a62:	f7fd fd89 	bl	8000578 <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d901      	bls.n	8002a74 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e098      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002a74:	f7ff fbdf 	bl	8002236 <LL_RCC_IsActiveFlag_PPRE1>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d0f1      	beq.n	8002a62 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0308 	and.w	r3, r3, #8
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d017      	beq.n	8002aba <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	00db      	lsls	r3, r3, #3
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7ff faf1 	bl	8002078 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002a96:	f7fd fd6f 	bl	8000578 <HAL_GetTick>
 8002a9a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002a9c:	e008      	b.n	8002ab0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002a9e:	f7fd fd6b 	bl	8000578 <HAL_GetTick>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d901      	bls.n	8002ab0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002aac:	2303      	movs	r3, #3
 8002aae:	e07a      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002ab0:	f7ff fbd3 	bl	800225a <LL_RCC_IsActiveFlag_PPRE2>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d0f1      	beq.n	8002a9e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0301 	and.w	r3, r3, #1
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d043      	beq.n	8002b4e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d106      	bne.n	8002adc <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002ace:	f7ff f891 	bl	8001bf4 <LL_RCC_HSE_IsReady>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d11e      	bne.n	8002b16 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e064      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	2b03      	cmp	r3, #3
 8002ae2:	d106      	bne.n	8002af2 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002ae4:	f7ff fb2c 	bl	8002140 <LL_RCC_PLL_IsReady>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d113      	bne.n	8002b16 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e059      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d106      	bne.n	8002b08 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002afa:	f7ff f9f9 	bl	8001ef0 <LL_RCC_MSI_IsReady>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d108      	bne.n	8002b16 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e04e      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x26a>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002b08:	f7ff f8a4 	bl	8001c54 <LL_RCC_HSI_IsReady>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d101      	bne.n	8002b16 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e047      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x26a>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f7ff fa37 	bl	8001f8e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b20:	f7fd fd2a 	bl	8000578 <HAL_GetTick>
 8002b24:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b26:	e00a      	b.n	8002b3e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b28:	f7fd fd26 	bl	8000578 <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e033      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b3e:	f7ff fa3a 	bl	8001fb6 <LL_RCC_GetSysClkSource>
 8002b42:	4602      	mov	r2, r0
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d1ec      	bne.n	8002b28 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b4e:	4b18      	ldr	r3, [pc, #96]	; (8002bb0 <HAL_RCC_ClockConfig+0x274>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0207 	and.w	r2, r3, #7
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d91b      	bls.n	8002b94 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b5c:	4914      	ldr	r1, [pc, #80]	; (8002bb0 <HAL_RCC_ClockConfig+0x274>)
 8002b5e:	4b14      	ldr	r3, [pc, #80]	; (8002bb0 <HAL_RCC_ClockConfig+0x274>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f023 0207 	bic.w	r2, r3, #7
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b6c:	f7fd fd04 	bl	8000578 <HAL_GetTick>
 8002b70:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b72:	e008      	b.n	8002b86 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002b74:	f7fd fd00 	bl	8000578 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e00f      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b86:	4b0a      	ldr	r3, [pc, #40]	; (8002bb0 <HAL_RCC_ClockConfig+0x274>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0207 	and.w	r2, r3, #7
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d1ef      	bne.n	8002b74 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClockUpdate();
 8002b94:	f003 fb9c 	bl	80062d0 <SystemCoreClockUpdate>
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8002b98:	f7fd fcfa 	bl	8000590 <HAL_GetTickPrio>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7fd fc9e 	bl	80004e0 <HAL_InitTick>
 8002ba4:	4603      	mov	r3, r0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3710      	adds	r7, #16
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	58004000 	.word	0x58004000

08002bb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bb4:	b590      	push	{r4, r7, lr}
 8002bb6:	b085      	sub	sp, #20
 8002bb8:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bba:	f7ff f9fc 	bl	8001fb6 <LL_RCC_GetSysClkSource>
 8002bbe:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d10a      	bne.n	8002bdc <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002bc6:	f7ff f9b8 	bl	8001f3a <LL_RCC_MSI_GetRange>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	091b      	lsrs	r3, r3, #4
 8002bce:	f003 030f 	and.w	r3, r3, #15
 8002bd2:	4a2a      	ldr	r2, [pc, #168]	; (8002c7c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bd8:	60fb      	str	r3, [r7, #12]
 8002bda:	e04a      	b.n	8002c72 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2b04      	cmp	r3, #4
 8002be0:	d102      	bne.n	8002be8 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002be2:	4b27      	ldr	r3, [pc, #156]	; (8002c80 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002be4:	60fb      	str	r3, [r7, #12]
 8002be6:	e044      	b.n	8002c72 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2b08      	cmp	r3, #8
 8002bec:	d10a      	bne.n	8002c04 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002bee:	f7fe ffb3 	bl	8001b58 <LL_RCC_HSE_IsEnabledDiv2>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d102      	bne.n	8002bfe <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002bf8:	4b21      	ldr	r3, [pc, #132]	; (8002c80 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002bfa:	60fb      	str	r3, [r7, #12]
 8002bfc:	e039      	b.n	8002c72 <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002bfe:	4b21      	ldr	r3, [pc, #132]	; (8002c84 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002c00:	60fb      	str	r3, [r7, #12]
 8002c02:	e036      	b.n	8002c72 <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002c04:	f7ff fad3 	bl	80021ae <LL_RCC_PLL_GetMainSource>
 8002c08:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d002      	beq.n	8002c16 <HAL_RCC_GetSysClockFreq+0x62>
 8002c10:	2b03      	cmp	r3, #3
 8002c12:	d003      	beq.n	8002c1c <HAL_RCC_GetSysClockFreq+0x68>
 8002c14:	e00d      	b.n	8002c32 <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002c16:	4b1a      	ldr	r3, [pc, #104]	; (8002c80 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002c18:	60bb      	str	r3, [r7, #8]
        break;
 8002c1a:	e015      	b.n	8002c48 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002c1c:	f7fe ff9c 	bl	8001b58 <LL_RCC_HSE_IsEnabledDiv2>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d102      	bne.n	8002c2c <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002c26:	4b16      	ldr	r3, [pc, #88]	; (8002c80 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002c28:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002c2a:	e00d      	b.n	8002c48 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 8002c2c:	4b15      	ldr	r3, [pc, #84]	; (8002c84 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002c2e:	60bb      	str	r3, [r7, #8]
        break;
 8002c30:	e00a      	b.n	8002c48 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002c32:	f7ff f982 	bl	8001f3a <LL_RCC_MSI_GetRange>
 8002c36:	4603      	mov	r3, r0
 8002c38:	091b      	lsrs	r3, r3, #4
 8002c3a:	f003 030f 	and.w	r3, r3, #15
 8002c3e:	4a0f      	ldr	r2, [pc, #60]	; (8002c7c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002c40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c44:	60bb      	str	r3, [r7, #8]
        break;
 8002c46:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8002c48:	f7ff fa8c 	bl	8002164 <LL_RCC_PLL_GetN>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	fb03 f402 	mul.w	r4, r3, r2
 8002c54:	f7ff fa9f 	bl	8002196 <LL_RCC_PLL_GetDivider>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	091b      	lsrs	r3, r3, #4
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	fbb4 f4f3 	udiv	r4, r4, r3
 8002c62:	f7ff fa8c 	bl	800217e <LL_RCC_PLL_GetR>
 8002c66:	4603      	mov	r3, r0
 8002c68:	0f5b      	lsrs	r3, r3, #29
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	fbb4 f3f3 	udiv	r3, r4, r3
 8002c70:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8002c72:	68fb      	ldr	r3, [r7, #12]
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3714      	adds	r7, #20
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd90      	pop	{r4, r7, pc}
 8002c7c:	08006578 	.word	0x08006578
 8002c80:	00f42400 	.word	0x00f42400
 8002c84:	01e84800 	.word	0x01e84800

08002c88 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c88:	b598      	push	{r3, r4, r7, lr}
 8002c8a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002c8c:	f7ff ff92 	bl	8002bb4 <HAL_RCC_GetSysClockFreq>
 8002c90:	4604      	mov	r4, r0
 8002c92:	f7ff fa05 	bl	80020a0 <LL_RCC_GetAHBPrescaler>
 8002c96:	4603      	mov	r3, r0
 8002c98:	091b      	lsrs	r3, r3, #4
 8002c9a:	f003 030f 	and.w	r3, r3, #15
 8002c9e:	4a03      	ldr	r2, [pc, #12]	; (8002cac <HAL_RCC_GetHCLKFreq+0x24>)
 8002ca0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ca4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	bd98      	pop	{r3, r4, r7, pc}
 8002cac:	08006518 	.word	0x08006518

08002cb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cb0:	b598      	push	{r3, r4, r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002cb4:	f7ff ffe8 	bl	8002c88 <HAL_RCC_GetHCLKFreq>
 8002cb8:	4604      	mov	r4, r0
 8002cba:	f7ff fa0b 	bl	80020d4 <LL_RCC_GetAPB1Prescaler>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	0a1b      	lsrs	r3, r3, #8
 8002cc2:	f003 0307 	and.w	r3, r3, #7
 8002cc6:	4a04      	ldr	r2, [pc, #16]	; (8002cd8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002cc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ccc:	f003 031f 	and.w	r3, r3, #31
 8002cd0:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	bd98      	pop	{r3, r4, r7, pc}
 8002cd8:	08006558 	.word	0x08006558

08002cdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cdc:	b598      	push	{r3, r4, r7, lr}
 8002cde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002ce0:	f7ff ffd2 	bl	8002c88 <HAL_RCC_GetHCLKFreq>
 8002ce4:	4604      	mov	r4, r0
 8002ce6:	f7ff fa01 	bl	80020ec <LL_RCC_GetAPB2Prescaler>
 8002cea:	4603      	mov	r3, r0
 8002cec:	0adb      	lsrs	r3, r3, #11
 8002cee:	f003 0307 	and.w	r3, r3, #7
 8002cf2:	4a04      	ldr	r2, [pc, #16]	; (8002d04 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002cf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cf8:	f003 031f 	and.w	r3, r3, #31
 8002cfc:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	bd98      	pop	{r3, r4, r7, pc}
 8002d04:	08006558 	.word	0x08006558

08002d08 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002d08:	b590      	push	{r4, r7, lr}
 8002d0a:	b085      	sub	sp, #20
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2bb0      	cmp	r3, #176	; 0xb0
 8002d14:	d903      	bls.n	8002d1e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8002d16:	4b15      	ldr	r3, [pc, #84]	; (8002d6c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d1a:	60fb      	str	r3, [r7, #12]
 8002d1c:	e007      	b.n	8002d2e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	091b      	lsrs	r3, r3, #4
 8002d22:	f003 030f 	and.w	r3, r3, #15
 8002d26:	4a11      	ldr	r2, [pc, #68]	; (8002d6c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002d28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d2c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002d2e:	f7ff f9c3 	bl	80020b8 <LL_RCC_GetAHB4Prescaler>
 8002d32:	4603      	mov	r3, r0
 8002d34:	091b      	lsrs	r3, r3, #4
 8002d36:	f003 030f 	and.w	r3, r3, #15
 8002d3a:	4a0d      	ldr	r2, [pc, #52]	; (8002d70 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002d3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d40:	68fa      	ldr	r2, [r7, #12]
 8002d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d46:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	4a0a      	ldr	r2, [pc, #40]	; (8002d74 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8002d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d50:	0c9c      	lsrs	r4, r3, #18
 8002d52:	f7fe fef3 	bl	8001b3c <HAL_PWREx_GetVoltageRange>
 8002d56:	4603      	mov	r3, r0
 8002d58:	4619      	mov	r1, r3
 8002d5a:	4620      	mov	r0, r4
 8002d5c:	f000 f80c 	bl	8002d78 <RCC_SetFlashLatency>
 8002d60:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3714      	adds	r7, #20
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd90      	pop	{r4, r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	08006578 	.word	0x08006578
 8002d70:	08006518 	.word	0x08006518
 8002d74:	431bde83 	.word	0x431bde83

08002d78 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002d78:	b590      	push	{r4, r7, lr}
 8002d7a:	b093      	sub	sp, #76	; 0x4c
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8002d82:	4b39      	ldr	r3, [pc, #228]	; (8002e68 <RCC_SetFlashLatency+0xf0>)
 8002d84:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002d88:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d8a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8002d8e:	4a37      	ldr	r2, [pc, #220]	; (8002e6c <RCC_SetFlashLatency+0xf4>)
 8002d90:	f107 031c 	add.w	r3, r7, #28
 8002d94:	ca07      	ldmia	r2, {r0, r1, r2}
 8002d96:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002d9a:	4b35      	ldr	r3, [pc, #212]	; (8002e70 <RCC_SetFlashLatency+0xf8>)
 8002d9c:	f107 040c 	add.w	r4, r7, #12
 8002da0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002da2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002da6:	2300      	movs	r3, #0
 8002da8:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002db0:	d11c      	bne.n	8002dec <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002db2:	2300      	movs	r3, #0
 8002db4:	643b      	str	r3, [r7, #64]	; 0x40
 8002db6:	e015      	b.n	8002de4 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002db8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002dc0:	4413      	add	r3, r2
 8002dc2:	f853 2c20 	ldr.w	r2, [r3, #-32]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d308      	bcc.n	8002dde <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002dcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002dd4:	4413      	add	r3, r2
 8002dd6:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002dda:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002ddc:	e022      	b.n	8002e24 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002dde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002de0:	3301      	adds	r3, #1
 8002de2:	643b      	str	r3, [r7, #64]	; 0x40
 8002de4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002de6:	2b03      	cmp	r3, #3
 8002de8:	d9e6      	bls.n	8002db8 <RCC_SetFlashLatency+0x40>
 8002dea:	e01b      	b.n	8002e24 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002dec:	2300      	movs	r3, #0
 8002dee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002df0:	e015      	b.n	8002e1e <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002df2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002dfa:	4413      	add	r3, r2
 8002dfc:	f853 2c2c 	ldr.w	r2, [r3, #-44]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d308      	bcc.n	8002e18 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002e06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002e0e:	4413      	add	r3, r2
 8002e10:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002e14:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002e16:	e005      	b.n	8002e24 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002e18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d9e6      	bls.n	8002df2 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8002e24:	4913      	ldr	r1, [pc, #76]	; (8002e74 <RCC_SetFlashLatency+0xfc>)
 8002e26:	4b13      	ldr	r3, [pc, #76]	; (8002e74 <RCC_SetFlashLatency+0xfc>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f023 0207 	bic.w	r2, r3, #7
 8002e2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e30:	4313      	orrs	r3, r2
 8002e32:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002e34:	f7fd fba0 	bl	8000578 <HAL_GetTick>
 8002e38:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002e3a:	e008      	b.n	8002e4e <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002e3c:	f7fd fb9c 	bl	8000578 <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d901      	bls.n	8002e4e <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e007      	b.n	8002e5e <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002e4e:	4b09      	ldr	r3, [pc, #36]	; (8002e74 <RCC_SetFlashLatency+0xfc>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0207 	and.w	r2, r3, #7
 8002e56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d1ef      	bne.n	8002e3c <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8002e5c:	2300      	movs	r3, #0
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	374c      	adds	r7, #76	; 0x4c
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd90      	pop	{r4, r7, pc}
 8002e66:	bf00      	nop
 8002e68:	080064d8 	.word	0x080064d8
 8002e6c:	080064e8 	.word	0x080064e8
 8002e70:	080064f4 	.word	0x080064f4
 8002e74:	58004000 	.word	0x58004000

08002e78 <LL_RCC_LSE_IsEnabled>:
{
 8002e78:	b480      	push	{r7}
 8002e7a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002e7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e84:	f003 0301 	and.w	r3, r3, #1
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d101      	bne.n	8002e90 <LL_RCC_LSE_IsEnabled+0x18>
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e000      	b.n	8002e92 <LL_RCC_LSE_IsEnabled+0x1a>
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr

08002e9c <LL_RCC_LSE_IsReady>:
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002ea0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ea8:	f003 0302 	and.w	r3, r3, #2
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d101      	bne.n	8002eb4 <LL_RCC_LSE_IsReady+0x18>
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e000      	b.n	8002eb6 <LL_RCC_LSE_IsReady+0x1a>
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <LL_RCC_MSI_EnablePLLMode>:
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8002ec4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ec8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f043 0304 	orr.w	r3, r3, #4
 8002ed2:	6013      	str	r3, [r2, #0]
}
 8002ed4:	bf00      	nop
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr

08002ede <LL_RCC_SetRFWKPClockSource>:
{
 8002ede:	b480      	push	{r7}
 8002ee0:	b083      	sub	sp, #12
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8002ee6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002eea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ef2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002efe:	bf00      	nop
 8002f00:	370c      	adds	r7, #12
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr

08002f0a <LL_RCC_SetSMPSClockSource>:
{
 8002f0a:	b480      	push	{r7}
 8002f0c:	b083      	sub	sp, #12
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002f12:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1c:	f023 0203 	bic.w	r2, r3, #3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002f26:	bf00      	nop
 8002f28:	370c      	adds	r7, #12
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr

08002f32 <LL_RCC_SetSMPSPrescaler>:
{
 8002f32:	b480      	push	{r7}
 8002f34:	b083      	sub	sp, #12
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8002f3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f44:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002f4e:	bf00      	nop
 8002f50:	370c      	adds	r7, #12
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr

08002f5a <LL_RCC_SetUSARTClockSource>:
{
 8002f5a:	b480      	push	{r7}
 8002f5c:	b083      	sub	sp, #12
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8002f62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f6e:	f023 0203 	bic.w	r2, r3, #3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002f7a:	bf00      	nop
 8002f7c:	370c      	adds	r7, #12
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr

08002f86 <LL_RCC_SetLPUARTClockSource>:
{
 8002f86:	b480      	push	{r7}
 8002f88:	b083      	sub	sp, #12
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002f8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f9a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002fa6:	bf00      	nop
 8002fa8:	370c      	adds	r7, #12
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr

08002fb2 <LL_RCC_SetI2CClockSource>:
{
 8002fb2:	b480      	push	{r7}
 8002fb4:	b083      	sub	sp, #12
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002fba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fc2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	091b      	lsrs	r3, r3, #4
 8002fca:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002fce:	43db      	mvns	r3, r3
 8002fd0:	401a      	ands	r2, r3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	011b      	lsls	r3, r3, #4
 8002fd6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002fe0:	bf00      	nop
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <LL_RCC_SetLPTIMClockSource>:
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002ff4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ff8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ffc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	0c1b      	lsrs	r3, r3, #16
 8003004:	041b      	lsls	r3, r3, #16
 8003006:	43db      	mvns	r3, r3
 8003008:	401a      	ands	r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	041b      	lsls	r3, r3, #16
 800300e:	4313      	orrs	r3, r2
 8003010:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003014:	bf00      	nop
 8003016:	370c      	adds	r7, #12
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr

08003020 <LL_RCC_SetSAIClockSource>:
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8003028:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800302c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003030:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003034:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4313      	orrs	r3, r2
 800303c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003040:	bf00      	nop
 8003042:	370c      	adds	r7, #12
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr

0800304c <LL_RCC_SetRNGClockSource>:
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003054:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003058:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800305c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003060:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	4313      	orrs	r3, r2
 8003068:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800306c:	bf00      	nop
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr

08003078 <LL_RCC_SetCLK48ClockSource>:
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003080:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003084:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003088:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800308c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	4313      	orrs	r3, r2
 8003094:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003098:	bf00      	nop
 800309a:	370c      	adds	r7, #12
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <LL_RCC_SetUSBClockSource>:
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f7ff ffe3 	bl	8003078 <LL_RCC_SetCLK48ClockSource>
}
 80030b2:	bf00      	nop
 80030b4:	3708      	adds	r7, #8
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}

080030ba <LL_RCC_SetADCClockSource>:
{
 80030ba:	b480      	push	{r7}
 80030bc:	b083      	sub	sp, #12
 80030be:	af00      	add	r7, sp, #0
 80030c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80030c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ce:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80030da:	bf00      	nop
 80030dc:	370c      	adds	r7, #12
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr

080030e6 <LL_RCC_SetRTCClockSource>:
{
 80030e6:	b480      	push	{r7}
 80030e8:	b083      	sub	sp, #12
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80030ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4313      	orrs	r3, r2
 8003102:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003106:	bf00      	nop
 8003108:	370c      	adds	r7, #12
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr

08003112 <LL_RCC_GetRTCClockSource>:
{
 8003112:	b480      	push	{r7}
 8003114:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003116:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800311a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800311e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003122:	4618      	mov	r0, r3
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <LL_RCC_ForceBackupDomainReset>:
{
 800312c:	b480      	push	{r7}
 800312e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003130:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003134:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003138:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800313c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003140:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003144:	bf00      	nop
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr

0800314e <LL_RCC_ReleaseBackupDomainReset>:
{
 800314e:	b480      	push	{r7}
 8003150:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003152:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003156:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800315a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800315e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003162:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003166:	bf00      	nop
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr

08003170 <LL_RCC_PLLSAI1_Enable>:
{
 8003170:	b480      	push	{r7}
 8003172:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003174:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003178:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003182:	6013      	str	r3, [r2, #0]
}
 8003184:	bf00      	nop
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr

0800318e <LL_RCC_PLLSAI1_Disable>:
{
 800318e:	b480      	push	{r7}
 8003190:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003192:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003196:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80031a0:	6013      	str	r3, [r2, #0]
}
 80031a2:	bf00      	nop
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr

080031ac <LL_RCC_PLLSAI1_IsReady>:
{
 80031ac:	b480      	push	{r7}
 80031ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80031b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031be:	d101      	bne.n	80031c4 <LL_RCC_PLLSAI1_IsReady+0x18>
 80031c0:	2301      	movs	r3, #1
 80031c2:	e000      	b.n	80031c6 <LL_RCC_PLLSAI1_IsReady+0x1a>
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b088      	sub	sp, #32
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80031d8:	2300      	movs	r3, #0
 80031da:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80031dc:	2300      	movs	r3, #0
 80031de:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d033      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031f4:	d00c      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80031f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031fa:	d802      	bhi.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d010      	beq.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003200:	e017      	b.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003202:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003206:	d017      	beq.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8003208:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800320c:	d016      	beq.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x6c>
 800320e:	e010      	b.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8003210:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003214:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800321e:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8003220:	e00d      	b.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x6e>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	3304      	adds	r3, #4
 8003226:	4618      	mov	r0, r3
 8003228:	f000 f94d 	bl	80034c6 <RCCEx_PLLSAI1_ConfigNP>
 800322c:	4603      	mov	r3, r0
 800322e:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003230:	e005      	b.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	77fb      	strb	r3, [r7, #31]
        break;
 8003236:	e002      	b.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8003238:	bf00      	nop
 800323a:	e000      	b.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 800323c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800323e:	7ffb      	ldrb	r3, [r7, #31]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d105      	bne.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003248:	4618      	mov	r0, r3
 800324a:	f7ff fee9 	bl	8003020 <LL_RCC_SetSAIClockSource>
 800324e:	e001      	b.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003250:	7ffb      	ldrb	r3, [r7, #31]
 8003252:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800325c:	2b00      	cmp	r3, #0
 800325e:	d046      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8003260:	f7ff ff57 	bl	8003112 <LL_RCC_GetRTCClockSource>
 8003264:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	429a      	cmp	r2, r3
 800326e:	d03c      	beq.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003270:	f7fe fc54 	bl	8001b1c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d105      	bne.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327e:	4618      	mov	r0, r3
 8003280:	f7ff ff31 	bl	80030e6 <LL_RCC_SetRTCClockSource>
 8003284:	e02e      	b.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8003286:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800328a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800328e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8003290:	f7ff ff4c 	bl	800312c <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8003294:	f7ff ff5b 	bl	800314e <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a2:	4313      	orrs	r3, r2
 80032a4:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80032a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80032b0:	f7ff fde2 	bl	8002e78 <LL_RCC_LSE_IsEnabled>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d114      	bne.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80032ba:	f7fd f95d 	bl	8000578 <HAL_GetTick>
 80032be:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80032c0:	e00b      	b.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032c2:	f7fd f959 	bl	8000578 <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d902      	bls.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	77fb      	strb	r3, [r7, #31]
              break;
 80032d8:	e004      	b.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 80032da:	f7ff fddf 	bl	8002e9c <LL_RCC_LSE_IsReady>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d1ee      	bne.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80032e4:	7ffb      	ldrb	r3, [r7, #31]
 80032e6:	77bb      	strb	r3, [r7, #30]
 80032e8:	e001      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032ea:	7ffb      	ldrb	r3, [r7, #31]
 80032ec:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0301 	and.w	r3, r3, #1
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d004      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	699b      	ldr	r3, [r3, #24]
 80032fe:	4618      	mov	r0, r3
 8003300:	f7ff fe2b 	bl	8002f5a <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0302 	and.w	r3, r3, #2
 800330c:	2b00      	cmp	r3, #0
 800330e:	d004      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	69db      	ldr	r3, [r3, #28]
 8003314:	4618      	mov	r0, r3
 8003316:	f7ff fe36 	bl	8002f86 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0310 	and.w	r3, r3, #16
 8003322:	2b00      	cmp	r3, #0
 8003324:	d004      	beq.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800332a:	4618      	mov	r0, r3
 800332c:	f7ff fe5e 	bl	8002fec <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0320 	and.w	r3, r3, #32
 8003338:	2b00      	cmp	r3, #0
 800333a:	d004      	beq.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003340:	4618      	mov	r0, r3
 8003342:	f7ff fe53 	bl	8002fec <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0304 	and.w	r3, r3, #4
 800334e:	2b00      	cmp	r3, #0
 8003350:	d004      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a1b      	ldr	r3, [r3, #32]
 8003356:	4618      	mov	r0, r3
 8003358:	f7ff fe2b 	bl	8002fb2 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0308 	and.w	r3, r3, #8
 8003364:	2b00      	cmp	r3, #0
 8003366:	d004      	beq.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336c:	4618      	mov	r0, r3
 800336e:	f7ff fe20 	bl	8002fb2 <LL_RCC_SetI2CClockSource>
  }
#endif

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800337a:	2b00      	cmp	r3, #0
 800337c:	d022      	beq.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003382:	4618      	mov	r0, r3
 8003384:	f7ff fe8e 	bl	80030a4 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800338c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003390:	d107      	bne.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8003392:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003396:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033a0:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033aa:	d10b      	bne.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	3304      	adds	r3, #4
 80033b0:	4618      	mov	r0, r3
 80033b2:	f000 f8e3 	bl	800357c <RCCEx_PLLSAI1_ConfigNQ>
 80033b6:	4603      	mov	r3, r0
 80033b8:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80033ba:	7ffb      	ldrb	r3, [r7, #31]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d001      	beq.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
      {
        /* set overall return value */
        status = ret;
 80033c0:	7ffb      	ldrb	r3, [r7, #31]
 80033c2:	77bb      	strb	r3, [r7, #30]
    }
#endif
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d02b      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033d8:	d008      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x21c>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80033e2:	d003      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x21c>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d105      	bne.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x228>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033f0:	4618      	mov	r0, r3
 80033f2:	f7ff fe2b 	bl	800304c <LL_RCC_SetRNGClockSource>
 80033f6:	e00a      	b.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x23e>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003400:	60fb      	str	r3, [r7, #12]
 8003402:	2000      	movs	r0, #0
 8003404:	f7ff fe22 	bl	800304c <LL_RCC_SetRNGClockSource>
 8003408:	68f8      	ldr	r0, [r7, #12]
 800340a:	f7ff fe35 	bl	8003078 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003412:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003416:	d107      	bne.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003418:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800341c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003426:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003430:	2b00      	cmp	r3, #0
 8003432:	d022      	beq.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003438:	4618      	mov	r0, r3
 800343a:	f7ff fe3e 	bl	80030ba <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003442:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003446:	d107      	bne.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003448:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800344c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003456:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800345c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003460:	d10b      	bne.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	3304      	adds	r3, #4
 8003466:	4618      	mov	r0, r3
 8003468:	f000 f8e3 	bl	8003632 <RCCEx_PLLSAI1_ConfigNR>
 800346c:	4603      	mov	r3, r0
 800346e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003470:	7ffb      	ldrb	r3, [r7, #31]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d001      	beq.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
      {
        /* set overall return value */
        status = ret;
 8003476:	7ffb      	ldrb	r3, [r7, #31]
 8003478:	77bb      	strb	r3, [r7, #30]
    }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d004      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800348a:	4618      	mov	r0, r3
 800348c:	f7ff fd27 	bl	8002ede <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003498:	2b00      	cmp	r3, #0
 800349a:	d009      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034a0:	4618      	mov	r0, r3
 80034a2:	f7ff fd46 	bl	8002f32 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034aa:	4618      	mov	r0, r3
 80034ac:	f7ff fd2d 	bl	8002f0a <LL_RCC_SetSMPSClockSource>
  }
#endif

  return status;
 80034b0:	7fbb      	ldrb	r3, [r7, #30]
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3720      	adds	r7, #32
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}

080034ba <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80034ba:	b580      	push	{r7, lr}
 80034bc:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 80034be:	f7ff fcff 	bl	8002ec0 <LL_RCC_MSI_EnablePLLMode>
}
 80034c2:	bf00      	nop
 80034c4:	bd80      	pop	{r7, pc}

080034c6 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80034c6:	b580      	push	{r7, lr}
 80034c8:	b084      	sub	sp, #16
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80034ce:	2300      	movs	r3, #0
 80034d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80034d2:	f7ff fe5c 	bl	800318e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80034d6:	f7fd f84f 	bl	8000578 <HAL_GetTick>
 80034da:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80034dc:	e009      	b.n	80034f2 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80034de:	f7fd f84b 	bl	8000578 <HAL_GetTick>
 80034e2:	4602      	mov	r2, r0
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d902      	bls.n	80034f2 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80034ec:	2303      	movs	r3, #3
 80034ee:	73fb      	strb	r3, [r7, #15]
      break;
 80034f0:	e004      	b.n	80034fc <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80034f2:	f7ff fe5b 	bl	80031ac <LL_RCC_PLLSAI1_IsReady>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d1f0      	bne.n	80034de <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80034fc:	7bfb      	ldrb	r3, [r7, #15]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d137      	bne.n	8003572 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003502:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003506:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800350a:	691b      	ldr	r3, [r3, #16]
 800350c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	021b      	lsls	r3, r3, #8
 8003516:	4313      	orrs	r3, r2
 8003518:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800351a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800351e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003522:	691b      	ldr	r3, [r3, #16]
 8003524:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	4313      	orrs	r3, r2
 800352e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003530:	f7ff fe1e 	bl	8003170 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003534:	f7fd f820 	bl	8000578 <HAL_GetTick>
 8003538:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800353a:	e009      	b.n	8003550 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800353c:	f7fd f81c 	bl	8000578 <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	2b02      	cmp	r3, #2
 8003548:	d902      	bls.n	8003550 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	73fb      	strb	r3, [r7, #15]
        break;
 800354e:	e004      	b.n	800355a <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003550:	f7ff fe2c 	bl	80031ac <LL_RCC_PLLSAI1_IsReady>
 8003554:	4603      	mov	r3, r0
 8003556:	2b01      	cmp	r3, #1
 8003558:	d1f0      	bne.n	800353c <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800355a:	7bfb      	ldrb	r3, [r7, #15]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d108      	bne.n	8003572 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003560:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003564:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003568:	691a      	ldr	r2, [r3, #16]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	4313      	orrs	r3, r2
 8003570:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003572:	7bfb      	ldrb	r3, [r7, #15]
}
 8003574:	4618      	mov	r0, r3
 8003576:	3710      	adds	r7, #16
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003584:	2300      	movs	r3, #0
 8003586:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003588:	f7ff fe01 	bl	800318e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800358c:	f7fc fff4 	bl	8000578 <HAL_GetTick>
 8003590:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003592:	e009      	b.n	80035a8 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003594:	f7fc fff0 	bl	8000578 <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d902      	bls.n	80035a8 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	73fb      	strb	r3, [r7, #15]
      break;
 80035a6:	e004      	b.n	80035b2 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80035a8:	f7ff fe00 	bl	80031ac <LL_RCC_PLLSAI1_IsReady>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d1f0      	bne.n	8003594 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80035b2:	7bfb      	ldrb	r3, [r7, #15]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d137      	bne.n	8003628 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80035b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80035bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035c0:	691b      	ldr	r3, [r3, #16]
 80035c2:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	021b      	lsls	r3, r3, #8
 80035cc:	4313      	orrs	r3, r2
 80035ce:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80035d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80035d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80035e6:	f7ff fdc3 	bl	8003170 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035ea:	f7fc ffc5 	bl	8000578 <HAL_GetTick>
 80035ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80035f0:	e009      	b.n	8003606 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80035f2:	f7fc ffc1 	bl	8000578 <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d902      	bls.n	8003606 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	73fb      	strb	r3, [r7, #15]
        break;
 8003604:	e004      	b.n	8003610 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003606:	f7ff fdd1 	bl	80031ac <LL_RCC_PLLSAI1_IsReady>
 800360a:	4603      	mov	r3, r0
 800360c:	2b01      	cmp	r3, #1
 800360e:	d1f0      	bne.n	80035f2 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8003610:	7bfb      	ldrb	r3, [r7, #15]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d108      	bne.n	8003628 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003616:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800361a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800361e:	691a      	ldr	r2, [r3, #16]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	691b      	ldr	r3, [r3, #16]
 8003624:	4313      	orrs	r3, r2
 8003626:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003628:	7bfb      	ldrb	r3, [r7, #15]
}
 800362a:	4618      	mov	r0, r3
 800362c:	3710      	adds	r7, #16
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}

08003632 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003632:	b580      	push	{r7, lr}
 8003634:	b084      	sub	sp, #16
 8003636:	af00      	add	r7, sp, #0
 8003638:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800363a:	2300      	movs	r3, #0
 800363c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800363e:	f7ff fda6 	bl	800318e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003642:	f7fc ff99 	bl	8000578 <HAL_GetTick>
 8003646:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003648:	e009      	b.n	800365e <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800364a:	f7fc ff95 	bl	8000578 <HAL_GetTick>
 800364e:	4602      	mov	r2, r0
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	2b02      	cmp	r3, #2
 8003656:	d902      	bls.n	800365e <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8003658:	2303      	movs	r3, #3
 800365a:	73fb      	strb	r3, [r7, #15]
      break;
 800365c:	e004      	b.n	8003668 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800365e:	f7ff fda5 	bl	80031ac <LL_RCC_PLLSAI1_IsReady>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d1f0      	bne.n	800364a <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8003668:	7bfb      	ldrb	r3, [r7, #15]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d137      	bne.n	80036de <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800366e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003672:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003676:	691b      	ldr	r3, [r3, #16]
 8003678:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	021b      	lsls	r3, r3, #8
 8003682:	4313      	orrs	r3, r2
 8003684:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8003686:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800368a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800368e:	691b      	ldr	r3, [r3, #16]
 8003690:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	4313      	orrs	r3, r2
 800369a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800369c:	f7ff fd68 	bl	8003170 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036a0:	f7fc ff6a 	bl	8000578 <HAL_GetTick>
 80036a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80036a6:	e009      	b.n	80036bc <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80036a8:	f7fc ff66 	bl	8000578 <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d902      	bls.n	80036bc <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	73fb      	strb	r3, [r7, #15]
        break;
 80036ba:	e004      	b.n	80036c6 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80036bc:	f7ff fd76 	bl	80031ac <LL_RCC_PLLSAI1_IsReady>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d1f0      	bne.n	80036a8 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80036c6:	7bfb      	ldrb	r3, [r7, #15]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d108      	bne.n	80036de <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80036cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80036d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036d4:	691a      	ldr	r2, [r3, #16]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	691b      	ldr	r3, [r3, #16]
 80036da:	4313      	orrs	r3, r2
 80036dc:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80036de:	7bfb      	ldrb	r3, [r7, #15]
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3710      	adds	r7, #16
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d101      	bne.n	80036fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e07a      	b.n	80037f0 <HAL_SPI_Init+0x108>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003706:	b2db      	uxtb	r3, r3
 8003708:	2b00      	cmp	r3, #0
 800370a:	d106      	bne.n	800371a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f002 fc8f 	bl	8006038 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2202      	movs	r2, #2
 800371e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	6812      	ldr	r2, [r2, #0]
 800372a:	6812      	ldr	r2, [r2, #0]
 800372c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003730:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800373a:	d902      	bls.n	8003742 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800373c:	2300      	movs	r3, #0
 800373e:	60fb      	str	r3, [r7, #12]
 8003740:	e002      	b.n	8003748 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003742:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003746:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003750:	d007      	beq.n	8003762 <HAL_SPI_Init+0x7a>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800375a:	d002      	beq.n	8003762 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003766:	2b00      	cmp	r3, #0
 8003768:	d10b      	bne.n	8003782 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003772:	d903      	bls.n	800377c <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2202      	movs	r2, #2
 8003778:	631a      	str	r2, [r3, #48]	; 0x30
 800377a:	e002      	b.n	8003782 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	6851      	ldr	r1, [r2, #4]
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	6892      	ldr	r2, [r2, #8]
 800378e:	4311      	orrs	r1, r2
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	6912      	ldr	r2, [r2, #16]
 8003794:	4311      	orrs	r1, r2
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	6952      	ldr	r2, [r2, #20]
 800379a:	4311      	orrs	r1, r2
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	6992      	ldr	r2, [r2, #24]
 80037a0:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80037a4:	4311      	orrs	r1, r2
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	69d2      	ldr	r2, [r2, #28]
 80037aa:	4311      	orrs	r1, r2
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	6a12      	ldr	r2, [r2, #32]
 80037b0:	4311      	orrs	r1, r2
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80037b6:	430a      	orrs	r2, r1
 80037b8:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	6992      	ldr	r2, [r2, #24]
 80037c2:	0c12      	lsrs	r2, r2, #16
 80037c4:	f002 0104 	and.w	r1, r2, #4
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037cc:	4311      	orrs	r1, r2
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80037d2:	4311      	orrs	r1, r2
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	68d2      	ldr	r2, [r2, #12]
 80037d8:	4311      	orrs	r1, r2
 80037da:	68fa      	ldr	r2, [r7, #12]
 80037dc:	430a      	orrs	r2, r1
 80037de:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2201      	movs	r2, #1
 80037ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80037ee:	2300      	movs	r3, #0
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3710      	adds	r7, #16
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b086      	sub	sp, #24
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	60f8      	str	r0, [r7, #12]
 8003800:	60b9      	str	r1, [r7, #8]
 8003802:	4613      	mov	r3, r2
 8003804:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003806:	2300      	movs	r3, #0
 8003808:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003810:	2b01      	cmp	r3, #1
 8003812:	d101      	bne.n	8003818 <HAL_SPI_Transmit_DMA+0x20>
 8003814:	2302      	movs	r3, #2
 8003816:	e0d0      	b.n	80039ba <HAL_SPI_Transmit_DMA+0x1c2>
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003826:	b2db      	uxtb	r3, r3
 8003828:	2b01      	cmp	r3, #1
 800382a:	d002      	beq.n	8003832 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800382c:	2302      	movs	r3, #2
 800382e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003830:	e0be      	b.n	80039b0 <HAL_SPI_Transmit_DMA+0x1b8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d002      	beq.n	800383e <HAL_SPI_Transmit_DMA+0x46>
 8003838:	88fb      	ldrh	r3, [r7, #6]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d102      	bne.n	8003844 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003842:	e0b5      	b.n	80039b0 <HAL_SPI_Transmit_DMA+0x1b8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2203      	movs	r2, #3
 8003848:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2200      	movs	r2, #0
 8003850:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	68ba      	ldr	r2, [r7, #8]
 8003856:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	88fa      	ldrh	r2, [r7, #6]
 800385c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	88fa      	ldrh	r2, [r7, #6]
 8003862:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2200      	movs	r2, #0
 8003874:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2200      	movs	r2, #0
 800387a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2200      	movs	r2, #0
 8003882:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800388e:	d107      	bne.n	80038a0 <HAL_SPI_Transmit_DMA+0xa8>
  {
    SPI_1LINE_TX(hspi);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	68fa      	ldr	r2, [r7, #12]
 8003896:	6812      	ldr	r2, [r2, #0]
 8003898:	6812      	ldr	r2, [r2, #0]
 800389a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800389e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038a4:	4a47      	ldr	r2, [pc, #284]	; (80039c4 <HAL_SPI_Transmit_DMA+0x1cc>)
 80038a6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ac:	4a46      	ldr	r2, [pc, #280]	; (80039c8 <HAL_SPI_Transmit_DMA+0x1d0>)
 80038ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038b4:	4a45      	ldr	r2, [pc, #276]	; (80039cc <HAL_SPI_Transmit_DMA+0x1d4>)
 80038b6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038bc:	2200      	movs	r2, #0
 80038be:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	68fa      	ldr	r2, [r7, #12]
 80038c6:	6812      	ldr	r2, [r2, #0]
 80038c8:	6852      	ldr	r2, [r2, #4]
 80038ca:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80038ce:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80038d8:	d82d      	bhi.n	8003936 <HAL_SPI_Transmit_DMA+0x13e>
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038de:	699b      	ldr	r3, [r3, #24]
 80038e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038e4:	d127      	bne.n	8003936 <HAL_SPI_Transmit_DMA+0x13e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	f003 0301 	and.w	r3, r3, #1
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d10f      	bne.n	8003914 <HAL_SPI_Transmit_DMA+0x11c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	68fa      	ldr	r2, [r7, #12]
 80038fa:	6812      	ldr	r2, [r2, #0]
 80038fc:	6852      	ldr	r2, [r2, #4]
 80038fe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003902:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003908:	b29b      	uxth	r3, r3
 800390a:	085b      	lsrs	r3, r3, #1
 800390c:	b29a      	uxth	r2, r3
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003912:	e010      	b.n	8003936 <HAL_SPI_Transmit_DMA+0x13e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	68fa      	ldr	r2, [r7, #12]
 800391a:	6812      	ldr	r2, [r2, #0]
 800391c:	6852      	ldr	r2, [r2, #4]
 800391e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003922:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003928:	b29b      	uxth	r3, r3
 800392a:	085b      	lsrs	r3, r3, #1
 800392c:	b29b      	uxth	r3, r3
 800392e:	3301      	adds	r3, #1
 8003930:	b29a      	uxth	r2, r3
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800393e:	4619      	mov	r1, r3
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	330c      	adds	r3, #12
 8003946:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800394c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800394e:	f7fd f803 	bl	8000958 <HAL_DMA_Start_IT>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d00c      	beq.n	8003972 <HAL_SPI_Transmit_DMA+0x17a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800395c:	f043 0210 	orr.w	r2, r3, #16
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2201      	movs	r2, #1
 800396c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8003970:	e01e      	b.n	80039b0 <HAL_SPI_Transmit_DMA+0x1b8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800397c:	2b40      	cmp	r3, #64	; 0x40
 800397e:	d007      	beq.n	8003990 <HAL_SPI_Transmit_DMA+0x198>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	68fa      	ldr	r2, [r7, #12]
 8003986:	6812      	ldr	r2, [r2, #0]
 8003988:	6812      	ldr	r2, [r2, #0]
 800398a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800398e:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68fa      	ldr	r2, [r7, #12]
 8003996:	6812      	ldr	r2, [r2, #0]
 8003998:	6852      	ldr	r2, [r2, #4]
 800399a:	f042 0220 	orr.w	r2, r2, #32
 800399e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68fa      	ldr	r2, [r7, #12]
 80039a6:	6812      	ldr	r2, [r2, #0]
 80039a8:	6852      	ldr	r2, [r2, #4]
 80039aa:	f042 0202 	orr.w	r2, r2, #2
 80039ae:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2200      	movs	r2, #0
 80039b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80039b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3718      	adds	r7, #24
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	08003ab3 	.word	0x08003ab3
 80039c8:	08003a0d 	.word	0x08003a0d
 80039cc:	08003acf 	.word	0x08003acf

080039d0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80039d8:	bf00      	nop
 80039da:	370c      	adds	r7, #12
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr

080039e4 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80039ec:	bf00      	nop
 80039ee:	370c      	adds	r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr

080039f8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003a00:	bf00      	nop
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b086      	sub	sp, #24
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a18:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a1a:	f7fc fdad 	bl	8000578 <HAL_GetTick>
 8003a1e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0320 	and.w	r3, r3, #32
 8003a2a:	2b20      	cmp	r3, #32
 8003a2c:	d03b      	beq.n	8003aa6 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	697a      	ldr	r2, [r7, #20]
 8003a34:	6812      	ldr	r2, [r2, #0]
 8003a36:	6852      	ldr	r2, [r2, #4]
 8003a38:	f022 0220 	bic.w	r2, r2, #32
 8003a3c:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	697a      	ldr	r2, [r7, #20]
 8003a44:	6812      	ldr	r2, [r2, #0]
 8003a46:	6852      	ldr	r2, [r2, #4]
 8003a48:	f022 0202 	bic.w	r2, r2, #2
 8003a4c:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003a4e:	693a      	ldr	r2, [r7, #16]
 8003a50:	2164      	movs	r1, #100	; 0x64
 8003a52:	6978      	ldr	r0, [r7, #20]
 8003a54:	f000 f932 	bl	8003cbc <SPI_EndRxTxTransaction>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d005      	beq.n	8003a6a <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a62:	f043 0220 	orr.w	r2, r3, #32
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d10a      	bne.n	8003a88 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a72:	2300      	movs	r3, #0
 8003a74:	60fb      	str	r3, [r7, #12]
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	60fb      	str	r3, [r7, #12]
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	60fb      	str	r3, [r7, #12]
 8003a86:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	2201      	movs	r2, #1
 8003a92:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d003      	beq.n	8003aa6 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003a9e:	6978      	ldr	r0, [r7, #20]
 8003aa0:	f7ff ffaa 	bl	80039f8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003aa4:	e002      	b.n	8003aac <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8003aa6:	6978      	ldr	r0, [r7, #20]
 8003aa8:	f7ff ff92 	bl	80039d0 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003aac:	3718      	adds	r7, #24
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}

08003ab2 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003ab2:	b580      	push	{r7, lr}
 8003ab4:	b084      	sub	sp, #16
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003abe:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8003ac0:	68f8      	ldr	r0, [r7, #12]
 8003ac2:	f7ff ff8f 	bl	80039e4 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003ac6:	bf00      	nop
 8003ac8:	3710      	adds	r7, #16
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}

08003ace <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003ace:	b580      	push	{r7, lr}
 8003ad0:	b084      	sub	sp, #16
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ada:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	68fa      	ldr	r2, [r7, #12]
 8003ae2:	6812      	ldr	r2, [r2, #0]
 8003ae4:	6852      	ldr	r2, [r2, #4]
 8003ae6:	f022 0203 	bic.w	r2, r2, #3
 8003aea:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003af0:	f043 0210 	orr.w	r2, r3, #16
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003b00:	68f8      	ldr	r0, [r7, #12]
 8003b02:	f7ff ff79 	bl	80039f8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003b06:	bf00      	nop
 8003b08:	3710      	adds	r7, #16
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}

08003b0e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003b0e:	b580      	push	{r7, lr}
 8003b10:	b084      	sub	sp, #16
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	60f8      	str	r0, [r7, #12]
 8003b16:	60b9      	str	r1, [r7, #8]
 8003b18:	603b      	str	r3, [r7, #0]
 8003b1a:	4613      	mov	r3, r2
 8003b1c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b1e:	e04c      	b.n	8003bba <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b26:	d048      	beq.n	8003bba <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003b28:	f7fc fd26 	bl	8000578 <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	1ad2      	subs	r2, r2, r3
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d202      	bcs.n	8003b3e <SPI_WaitFlagStateUntilTimeout+0x30>
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d13d      	bne.n	8003bba <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	6812      	ldr	r2, [r2, #0]
 8003b46:	6852      	ldr	r2, [r2, #4]
 8003b48:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003b4c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b56:	d111      	bne.n	8003b7c <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b60:	d004      	beq.n	8003b6c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b6a:	d107      	bne.n	8003b7c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68fa      	ldr	r2, [r7, #12]
 8003b72:	6812      	ldr	r2, [r2, #0]
 8003b74:	6812      	ldr	r2, [r2, #0]
 8003b76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b7a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b84:	d10f      	bne.n	8003ba6 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	68fa      	ldr	r2, [r7, #12]
 8003b8c:	6812      	ldr	r2, [r2, #0]
 8003b8e:	6812      	ldr	r2, [r2, #0]
 8003b90:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b94:	601a      	str	r2, [r3, #0]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	68fa      	ldr	r2, [r7, #12]
 8003b9c:	6812      	ldr	r2, [r2, #0]
 8003b9e:	6812      	ldr	r2, [r2, #0]
 8003ba0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ba4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2201      	movs	r2, #1
 8003baa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e00f      	b.n	8003bda <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	689a      	ldr	r2, [r3, #8]
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	401a      	ands	r2, r3
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	bf0c      	ite	eq
 8003bca:	2301      	moveq	r3, #1
 8003bcc:	2300      	movne	r3, #0
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	79fb      	ldrb	r3, [r7, #7]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d1a3      	bne.n	8003b20 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3710      	adds	r7, #16
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}

08003be2 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003be2:	b580      	push	{r7, lr}
 8003be4:	b084      	sub	sp, #16
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	60f8      	str	r0, [r7, #12]
 8003bea:	60b9      	str	r1, [r7, #8]
 8003bec:	607a      	str	r2, [r7, #4]
 8003bee:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8003bf0:	e057      	b.n	8003ca2 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003bf8:	d106      	bne.n	8003c08 <SPI_WaitFifoStateUntilTimeout+0x26>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d103      	bne.n	8003c08 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	330c      	adds	r3, #12
 8003c06:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c0e:	d048      	beq.n	8003ca2 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003c10:	f7fc fcb2 	bl	8000578 <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	69bb      	ldr	r3, [r7, #24]
 8003c18:	1ad2      	subs	r2, r2, r3
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d202      	bcs.n	8003c26 <SPI_WaitFifoStateUntilTimeout+0x44>
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d13d      	bne.n	8003ca2 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	68fa      	ldr	r2, [r7, #12]
 8003c2c:	6812      	ldr	r2, [r2, #0]
 8003c2e:	6852      	ldr	r2, [r2, #4]
 8003c30:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003c34:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c3e:	d111      	bne.n	8003c64 <SPI_WaitFifoStateUntilTimeout+0x82>
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c48:	d004      	beq.n	8003c54 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c52:	d107      	bne.n	8003c64 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	68fa      	ldr	r2, [r7, #12]
 8003c5a:	6812      	ldr	r2, [r2, #0]
 8003c5c:	6812      	ldr	r2, [r2, #0]
 8003c5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c62:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c6c:	d10f      	bne.n	8003c8e <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	68fa      	ldr	r2, [r7, #12]
 8003c74:	6812      	ldr	r2, [r2, #0]
 8003c76:	6812      	ldr	r2, [r2, #0]
 8003c78:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c7c:	601a      	str	r2, [r3, #0]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	68fa      	ldr	r2, [r7, #12]
 8003c84:	6812      	ldr	r2, [r2, #0]
 8003c86:	6812      	ldr	r2, [r2, #0]
 8003c88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c8c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2201      	movs	r2, #1
 8003c92:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e008      	b.n	8003cb4 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	689a      	ldr	r2, [r3, #8]
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	401a      	ands	r2, r3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d19f      	bne.n	8003bf2 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8003cb2:	2300      	movs	r3, #0
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3710      	adds	r7, #16
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b086      	sub	sp, #24
 8003cc0:	af02      	add	r7, sp, #8
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	60b9      	str	r1, [r7, #8]
 8003cc6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	9300      	str	r3, [sp, #0]
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003cd4:	68f8      	ldr	r0, [r7, #12]
 8003cd6:	f7ff ff84 	bl	8003be2 <SPI_WaitFifoStateUntilTimeout>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d007      	beq.n	8003cf0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ce4:	f043 0220 	orr.w	r2, r3, #32
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003cec:	2303      	movs	r3, #3
 8003cee:	e027      	b.n	8003d40 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	9300      	str	r3, [sp, #0]
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	2180      	movs	r1, #128	; 0x80
 8003cfa:	68f8      	ldr	r0, [r7, #12]
 8003cfc:	f7ff ff07 	bl	8003b0e <SPI_WaitFlagStateUntilTimeout>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d007      	beq.n	8003d16 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d0a:	f043 0220 	orr.w	r2, r3, #32
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e014      	b.n	8003d40 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	9300      	str	r3, [sp, #0]
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003d22:	68f8      	ldr	r0, [r7, #12]
 8003d24:	f7ff ff5d 	bl	8003be2 <SPI_WaitFifoStateUntilTimeout>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d007      	beq.n	8003d3e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d32:	f043 0220 	orr.w	r2, r3, #32
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e000      	b.n	8003d40 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003d3e:	2300      	movs	r3, #0
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3710      	adds	r7, #16
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <LL_RCC_GetUSARTClockSource>:
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8003d50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d54:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4013      	ands	r3, r2
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	370c      	adds	r7, #12
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr

08003d68 <LL_RCC_GetLPUARTClockSource>:
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8003d70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d74:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4013      	ands	r3, r2
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	370c      	adds	r7, #12
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr

08003d88 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d101      	bne.n	8003d9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e042      	b.n	8003e20 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d106      	bne.n	8003db2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f002 f9a1 	bl	80060f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2224      	movs	r2, #36	; 0x24
 8003db6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	6812      	ldr	r2, [r2, #0]
 8003dc2:	6812      	ldr	r2, [r2, #0]
 8003dc4:	f022 0201 	bic.w	r2, r2, #1
 8003dc8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 f82c 	bl	8003e28 <UART_SetConfig>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d101      	bne.n	8003dda <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e022      	b.n	8003e20 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d002      	beq.n	8003de8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f001 f870 	bl	8004ec8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	687a      	ldr	r2, [r7, #4]
 8003dee:	6812      	ldr	r2, [r2, #0]
 8003df0:	6852      	ldr	r2, [r2, #4]
 8003df2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003df6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	6812      	ldr	r2, [r2, #0]
 8003e00:	6892      	ldr	r2, [r2, #8]
 8003e02:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e06:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	6812      	ldr	r2, [r2, #0]
 8003e10:	6812      	ldr	r2, [r2, #0]
 8003e12:	f042 0201 	orr.w	r2, r2, #1
 8003e16:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f001 f8f7 	bl	800500c <UART_CheckIdleState>
 8003e1e:	4603      	mov	r3, r0
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3708      	adds	r7, #8
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}

08003e28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003e2c:	b08b      	sub	sp, #44	; 0x2c
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003e32:	2300      	movs	r3, #0
 8003e34:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e36:	2300      	movs	r3, #0
 8003e38:	76fb      	strb	r3, [r7, #27]
#if defined(LPUART1)
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	689a      	ldr	r2, [r3, #8]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	431a      	orrs	r2, r3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	695b      	ldr	r3, [r3, #20]
 8003e4c:	431a      	orrs	r2, r3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	69db      	ldr	r3, [r3, #28]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	627b      	str	r3, [r7, #36]	; 0x24
  tmpreg |= (uint32_t)huart->FifoMode;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	6819      	ldr	r1, [r3, #0]
 8003e6a:	4ba4      	ldr	r3, [pc, #656]	; (80040fc <UART_SetConfig+0x2d4>)
 8003e6c:	400b      	ands	r3, r1
 8003e6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e70:	430b      	orrs	r3, r1
 8003e72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	6812      	ldr	r2, [r2, #0]
 8003e7c:	6852      	ldr	r2, [r2, #4]
 8003e7e:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	68d2      	ldr	r2, [r2, #12]
 8003e86:	430a      	orrs	r2, r1
 8003e88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	699b      	ldr	r3, [r3, #24]
 8003e8e:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a9a      	ldr	r2, [pc, #616]	; (8004100 <UART_SetConfig+0x2d8>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d004      	beq.n	8003ea4 <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a1b      	ldr	r3, [r3, #32]
 8003e9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	627b      	str	r3, [r7, #36]	; 0x24
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003eb2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003eb6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003eb8:	430b      	orrs	r3, r1
 8003eba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	6812      	ldr	r2, [r2, #0]
 8003ec4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003ec6:	f022 010f 	bic.w	r1, r2, #15
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ece:	430a      	orrs	r2, r1
 8003ed0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a8b      	ldr	r2, [pc, #556]	; (8004104 <UART_SetConfig+0x2dc>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d126      	bne.n	8003f2a <UART_SetConfig+0x102>
 8003edc:	2003      	movs	r0, #3
 8003ede:	f7ff ff33 	bl	8003d48 <LL_RCC_GetUSARTClockSource>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b03      	cmp	r3, #3
 8003ee6:	d81b      	bhi.n	8003f20 <UART_SetConfig+0xf8>
 8003ee8:	a201      	add	r2, pc, #4	; (adr r2, 8003ef0 <UART_SetConfig+0xc8>)
 8003eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eee:	bf00      	nop
 8003ef0:	08003f01 	.word	0x08003f01
 8003ef4:	08003f11 	.word	0x08003f11
 8003ef8:	08003f09 	.word	0x08003f09
 8003efc:	08003f19 	.word	0x08003f19
 8003f00:	2301      	movs	r3, #1
 8003f02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f06:	e042      	b.n	8003f8e <UART_SetConfig+0x166>
 8003f08:	2302      	movs	r3, #2
 8003f0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f0e:	e03e      	b.n	8003f8e <UART_SetConfig+0x166>
 8003f10:	2304      	movs	r3, #4
 8003f12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f16:	e03a      	b.n	8003f8e <UART_SetConfig+0x166>
 8003f18:	2308      	movs	r3, #8
 8003f1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f1e:	e036      	b.n	8003f8e <UART_SetConfig+0x166>
 8003f20:	2310      	movs	r3, #16
 8003f22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f26:	bf00      	nop
 8003f28:	e031      	b.n	8003f8e <UART_SetConfig+0x166>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a74      	ldr	r2, [pc, #464]	; (8004100 <UART_SetConfig+0x2d8>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d129      	bne.n	8003f88 <UART_SetConfig+0x160>
 8003f34:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8003f38:	f7ff ff16 	bl	8003d68 <LL_RCC_GetLPUARTClockSource>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f42:	d014      	beq.n	8003f6e <UART_SetConfig+0x146>
 8003f44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f48:	d802      	bhi.n	8003f50 <UART_SetConfig+0x128>
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d007      	beq.n	8003f5e <UART_SetConfig+0x136>
 8003f4e:	e016      	b.n	8003f7e <UART_SetConfig+0x156>
 8003f50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f54:	d007      	beq.n	8003f66 <UART_SetConfig+0x13e>
 8003f56:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f5a:	d00c      	beq.n	8003f76 <UART_SetConfig+0x14e>
 8003f5c:	e00f      	b.n	8003f7e <UART_SetConfig+0x156>
 8003f5e:	2300      	movs	r3, #0
 8003f60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f64:	e013      	b.n	8003f8e <UART_SetConfig+0x166>
 8003f66:	2302      	movs	r3, #2
 8003f68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f6c:	e00f      	b.n	8003f8e <UART_SetConfig+0x166>
 8003f6e:	2304      	movs	r3, #4
 8003f70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f74:	e00b      	b.n	8003f8e <UART_SetConfig+0x166>
 8003f76:	2308      	movs	r3, #8
 8003f78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f7c:	e007      	b.n	8003f8e <UART_SetConfig+0x166>
 8003f7e:	2310      	movs	r3, #16
 8003f80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f84:	bf00      	nop
 8003f86:	e002      	b.n	8003f8e <UART_SetConfig+0x166>
 8003f88:	2310      	movs	r3, #16
 8003f8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a5b      	ldr	r2, [pc, #364]	; (8004100 <UART_SetConfig+0x2d8>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	f040 8413 	bne.w	80047c0 <UART_SetConfig+0x998>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003f9a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f9e:	2b08      	cmp	r3, #8
 8003fa0:	f200 8173 	bhi.w	800428a <UART_SetConfig+0x462>
 8003fa4:	a201      	add	r2, pc, #4	; (adr r2, 8003fac <UART_SetConfig+0x184>)
 8003fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003faa:	bf00      	nop
 8003fac:	08003fd1 	.word	0x08003fd1
 8003fb0:	0800428b 	.word	0x0800428b
 8003fb4:	08004073 	.word	0x08004073
 8003fb8:	0800428b 	.word	0x0800428b
 8003fbc:	0800413b 	.word	0x0800413b
 8003fc0:	0800428b 	.word	0x0800428b
 8003fc4:	0800428b 	.word	0x0800428b
 8003fc8:	0800428b 	.word	0x0800428b
 8003fcc:	080041dd 	.word	0x080041dd
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003fd0:	f7fe fe6e 	bl	8002cb0 <HAL_RCC_GetPCLK1Freq>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d044      	beq.n	8004068 <UART_SetConfig+0x240>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d03e      	beq.n	8004064 <UART_SetConfig+0x23c>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fea:	2b02      	cmp	r3, #2
 8003fec:	d038      	beq.n	8004060 <UART_SetConfig+0x238>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff2:	2b03      	cmp	r3, #3
 8003ff4:	d032      	beq.n	800405c <UART_SetConfig+0x234>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffa:	2b04      	cmp	r3, #4
 8003ffc:	d02c      	beq.n	8004058 <UART_SetConfig+0x230>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004002:	2b05      	cmp	r3, #5
 8004004:	d026      	beq.n	8004054 <UART_SetConfig+0x22c>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400a:	2b06      	cmp	r3, #6
 800400c:	d020      	beq.n	8004050 <UART_SetConfig+0x228>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004012:	2b07      	cmp	r3, #7
 8004014:	d01a      	beq.n	800404c <UART_SetConfig+0x224>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401a:	2b08      	cmp	r3, #8
 800401c:	d014      	beq.n	8004048 <UART_SetConfig+0x220>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004022:	2b09      	cmp	r3, #9
 8004024:	d00e      	beq.n	8004044 <UART_SetConfig+0x21c>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402a:	2b0a      	cmp	r3, #10
 800402c:	d008      	beq.n	8004040 <UART_SetConfig+0x218>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004032:	2b0b      	cmp	r3, #11
 8004034:	d102      	bne.n	800403c <UART_SetConfig+0x214>
 8004036:	f44f 7380 	mov.w	r3, #256	; 0x100
 800403a:	e016      	b.n	800406a <UART_SetConfig+0x242>
 800403c:	2301      	movs	r3, #1
 800403e:	e014      	b.n	800406a <UART_SetConfig+0x242>
 8004040:	2380      	movs	r3, #128	; 0x80
 8004042:	e012      	b.n	800406a <UART_SetConfig+0x242>
 8004044:	2340      	movs	r3, #64	; 0x40
 8004046:	e010      	b.n	800406a <UART_SetConfig+0x242>
 8004048:	2320      	movs	r3, #32
 800404a:	e00e      	b.n	800406a <UART_SetConfig+0x242>
 800404c:	2310      	movs	r3, #16
 800404e:	e00c      	b.n	800406a <UART_SetConfig+0x242>
 8004050:	230c      	movs	r3, #12
 8004052:	e00a      	b.n	800406a <UART_SetConfig+0x242>
 8004054:	230a      	movs	r3, #10
 8004056:	e008      	b.n	800406a <UART_SetConfig+0x242>
 8004058:	2308      	movs	r3, #8
 800405a:	e006      	b.n	800406a <UART_SetConfig+0x242>
 800405c:	2306      	movs	r3, #6
 800405e:	e004      	b.n	800406a <UART_SetConfig+0x242>
 8004060:	2304      	movs	r3, #4
 8004062:	e002      	b.n	800406a <UART_SetConfig+0x242>
 8004064:	2302      	movs	r3, #2
 8004066:	e000      	b.n	800406a <UART_SetConfig+0x242>
 8004068:	2301      	movs	r3, #1
 800406a:	fbb2 f3f3 	udiv	r3, r2, r3
 800406e:	617b      	str	r3, [r7, #20]
        break;
 8004070:	e10e      	b.n	8004290 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004076:	2b00      	cmp	r3, #0
 8004078:	d05c      	beq.n	8004134 <UART_SetConfig+0x30c>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407e:	2b01      	cmp	r3, #1
 8004080:	d056      	beq.n	8004130 <UART_SetConfig+0x308>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004086:	2b02      	cmp	r3, #2
 8004088:	d050      	beq.n	800412c <UART_SetConfig+0x304>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408e:	2b03      	cmp	r3, #3
 8004090:	d032      	beq.n	80040f8 <UART_SetConfig+0x2d0>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004096:	2b04      	cmp	r3, #4
 8004098:	d02c      	beq.n	80040f4 <UART_SetConfig+0x2cc>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409e:	2b05      	cmp	r3, #5
 80040a0:	d026      	beq.n	80040f0 <UART_SetConfig+0x2c8>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a6:	2b06      	cmp	r3, #6
 80040a8:	d020      	beq.n	80040ec <UART_SetConfig+0x2c4>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ae:	2b07      	cmp	r3, #7
 80040b0:	d01a      	beq.n	80040e8 <UART_SetConfig+0x2c0>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b6:	2b08      	cmp	r3, #8
 80040b8:	d014      	beq.n	80040e4 <UART_SetConfig+0x2bc>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040be:	2b09      	cmp	r3, #9
 80040c0:	d00e      	beq.n	80040e0 <UART_SetConfig+0x2b8>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c6:	2b0a      	cmp	r3, #10
 80040c8:	d008      	beq.n	80040dc <UART_SetConfig+0x2b4>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ce:	2b0b      	cmp	r3, #11
 80040d0:	d102      	bne.n	80040d8 <UART_SetConfig+0x2b0>
 80040d2:	f24f 4324 	movw	r3, #62500	; 0xf424
 80040d6:	e02e      	b.n	8004136 <UART_SetConfig+0x30e>
 80040d8:	4b0b      	ldr	r3, [pc, #44]	; (8004108 <UART_SetConfig+0x2e0>)
 80040da:	e02c      	b.n	8004136 <UART_SetConfig+0x30e>
 80040dc:	4b0b      	ldr	r3, [pc, #44]	; (800410c <UART_SetConfig+0x2e4>)
 80040de:	e02a      	b.n	8004136 <UART_SetConfig+0x30e>
 80040e0:	4b0b      	ldr	r3, [pc, #44]	; (8004110 <UART_SetConfig+0x2e8>)
 80040e2:	e028      	b.n	8004136 <UART_SetConfig+0x30e>
 80040e4:	4b0b      	ldr	r3, [pc, #44]	; (8004114 <UART_SetConfig+0x2ec>)
 80040e6:	e026      	b.n	8004136 <UART_SetConfig+0x30e>
 80040e8:	4b0b      	ldr	r3, [pc, #44]	; (8004118 <UART_SetConfig+0x2f0>)
 80040ea:	e024      	b.n	8004136 <UART_SetConfig+0x30e>
 80040ec:	4b0b      	ldr	r3, [pc, #44]	; (800411c <UART_SetConfig+0x2f4>)
 80040ee:	e022      	b.n	8004136 <UART_SetConfig+0x30e>
 80040f0:	4b0b      	ldr	r3, [pc, #44]	; (8004120 <UART_SetConfig+0x2f8>)
 80040f2:	e020      	b.n	8004136 <UART_SetConfig+0x30e>
 80040f4:	4b0b      	ldr	r3, [pc, #44]	; (8004124 <UART_SetConfig+0x2fc>)
 80040f6:	e01e      	b.n	8004136 <UART_SetConfig+0x30e>
 80040f8:	4b0b      	ldr	r3, [pc, #44]	; (8004128 <UART_SetConfig+0x300>)
 80040fa:	e01c      	b.n	8004136 <UART_SetConfig+0x30e>
 80040fc:	cfff69f3 	.word	0xcfff69f3
 8004100:	40008000 	.word	0x40008000
 8004104:	40013800 	.word	0x40013800
 8004108:	00f42400 	.word	0x00f42400
 800410c:	0001e848 	.word	0x0001e848
 8004110:	0003d090 	.word	0x0003d090
 8004114:	0007a120 	.word	0x0007a120
 8004118:	000f4240 	.word	0x000f4240
 800411c:	00145855 	.word	0x00145855
 8004120:	00186a00 	.word	0x00186a00
 8004124:	001e8480 	.word	0x001e8480
 8004128:	0028b0aa 	.word	0x0028b0aa
 800412c:	4ba7      	ldr	r3, [pc, #668]	; (80043cc <UART_SetConfig+0x5a4>)
 800412e:	e002      	b.n	8004136 <UART_SetConfig+0x30e>
 8004130:	4ba7      	ldr	r3, [pc, #668]	; (80043d0 <UART_SetConfig+0x5a8>)
 8004132:	e000      	b.n	8004136 <UART_SetConfig+0x30e>
 8004134:	4ba7      	ldr	r3, [pc, #668]	; (80043d4 <UART_SetConfig+0x5ac>)
 8004136:	617b      	str	r3, [r7, #20]
        break;
 8004138:	e0aa      	b.n	8004290 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800413a:	f7fe fd3b 	bl	8002bb4 <HAL_RCC_GetSysClockFreq>
 800413e:	4602      	mov	r2, r0
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004144:	2b00      	cmp	r3, #0
 8004146:	d044      	beq.n	80041d2 <UART_SetConfig+0x3aa>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414c:	2b01      	cmp	r3, #1
 800414e:	d03e      	beq.n	80041ce <UART_SetConfig+0x3a6>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004154:	2b02      	cmp	r3, #2
 8004156:	d038      	beq.n	80041ca <UART_SetConfig+0x3a2>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415c:	2b03      	cmp	r3, #3
 800415e:	d032      	beq.n	80041c6 <UART_SetConfig+0x39e>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004164:	2b04      	cmp	r3, #4
 8004166:	d02c      	beq.n	80041c2 <UART_SetConfig+0x39a>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416c:	2b05      	cmp	r3, #5
 800416e:	d026      	beq.n	80041be <UART_SetConfig+0x396>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004174:	2b06      	cmp	r3, #6
 8004176:	d020      	beq.n	80041ba <UART_SetConfig+0x392>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417c:	2b07      	cmp	r3, #7
 800417e:	d01a      	beq.n	80041b6 <UART_SetConfig+0x38e>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004184:	2b08      	cmp	r3, #8
 8004186:	d014      	beq.n	80041b2 <UART_SetConfig+0x38a>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418c:	2b09      	cmp	r3, #9
 800418e:	d00e      	beq.n	80041ae <UART_SetConfig+0x386>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004194:	2b0a      	cmp	r3, #10
 8004196:	d008      	beq.n	80041aa <UART_SetConfig+0x382>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419c:	2b0b      	cmp	r3, #11
 800419e:	d102      	bne.n	80041a6 <UART_SetConfig+0x37e>
 80041a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80041a4:	e016      	b.n	80041d4 <UART_SetConfig+0x3ac>
 80041a6:	2301      	movs	r3, #1
 80041a8:	e014      	b.n	80041d4 <UART_SetConfig+0x3ac>
 80041aa:	2380      	movs	r3, #128	; 0x80
 80041ac:	e012      	b.n	80041d4 <UART_SetConfig+0x3ac>
 80041ae:	2340      	movs	r3, #64	; 0x40
 80041b0:	e010      	b.n	80041d4 <UART_SetConfig+0x3ac>
 80041b2:	2320      	movs	r3, #32
 80041b4:	e00e      	b.n	80041d4 <UART_SetConfig+0x3ac>
 80041b6:	2310      	movs	r3, #16
 80041b8:	e00c      	b.n	80041d4 <UART_SetConfig+0x3ac>
 80041ba:	230c      	movs	r3, #12
 80041bc:	e00a      	b.n	80041d4 <UART_SetConfig+0x3ac>
 80041be:	230a      	movs	r3, #10
 80041c0:	e008      	b.n	80041d4 <UART_SetConfig+0x3ac>
 80041c2:	2308      	movs	r3, #8
 80041c4:	e006      	b.n	80041d4 <UART_SetConfig+0x3ac>
 80041c6:	2306      	movs	r3, #6
 80041c8:	e004      	b.n	80041d4 <UART_SetConfig+0x3ac>
 80041ca:	2304      	movs	r3, #4
 80041cc:	e002      	b.n	80041d4 <UART_SetConfig+0x3ac>
 80041ce:	2302      	movs	r3, #2
 80041d0:	e000      	b.n	80041d4 <UART_SetConfig+0x3ac>
 80041d2:	2301      	movs	r3, #1
 80041d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041d8:	617b      	str	r3, [r7, #20]
        break;
 80041da:	e059      	b.n	8004290 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d04e      	beq.n	8004282 <UART_SetConfig+0x45a>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d047      	beq.n	800427c <UART_SetConfig+0x454>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f0:	2b02      	cmp	r3, #2
 80041f2:	d040      	beq.n	8004276 <UART_SetConfig+0x44e>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f8:	2b03      	cmp	r3, #3
 80041fa:	d039      	beq.n	8004270 <UART_SetConfig+0x448>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004200:	2b04      	cmp	r3, #4
 8004202:	d032      	beq.n	800426a <UART_SetConfig+0x442>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004208:	2b05      	cmp	r3, #5
 800420a:	d02b      	beq.n	8004264 <UART_SetConfig+0x43c>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004210:	2b06      	cmp	r3, #6
 8004212:	d024      	beq.n	800425e <UART_SetConfig+0x436>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004218:	2b07      	cmp	r3, #7
 800421a:	d01d      	beq.n	8004258 <UART_SetConfig+0x430>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004220:	2b08      	cmp	r3, #8
 8004222:	d016      	beq.n	8004252 <UART_SetConfig+0x42a>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004228:	2b09      	cmp	r3, #9
 800422a:	d00f      	beq.n	800424c <UART_SetConfig+0x424>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004230:	2b0a      	cmp	r3, #10
 8004232:	d008      	beq.n	8004246 <UART_SetConfig+0x41e>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004238:	2b0b      	cmp	r3, #11
 800423a:	d101      	bne.n	8004240 <UART_SetConfig+0x418>
 800423c:	2380      	movs	r3, #128	; 0x80
 800423e:	e022      	b.n	8004286 <UART_SetConfig+0x45e>
 8004240:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004244:	e01f      	b.n	8004286 <UART_SetConfig+0x45e>
 8004246:	f44f 7380 	mov.w	r3, #256	; 0x100
 800424a:	e01c      	b.n	8004286 <UART_SetConfig+0x45e>
 800424c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004250:	e019      	b.n	8004286 <UART_SetConfig+0x45e>
 8004252:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004256:	e016      	b.n	8004286 <UART_SetConfig+0x45e>
 8004258:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800425c:	e013      	b.n	8004286 <UART_SetConfig+0x45e>
 800425e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8004262:	e010      	b.n	8004286 <UART_SetConfig+0x45e>
 8004264:	f640 43cc 	movw	r3, #3276	; 0xccc
 8004268:	e00d      	b.n	8004286 <UART_SetConfig+0x45e>
 800426a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800426e:	e00a      	b.n	8004286 <UART_SetConfig+0x45e>
 8004270:	f241 5355 	movw	r3, #5461	; 0x1555
 8004274:	e007      	b.n	8004286 <UART_SetConfig+0x45e>
 8004276:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800427a:	e004      	b.n	8004286 <UART_SetConfig+0x45e>
 800427c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004280:	e001      	b.n	8004286 <UART_SetConfig+0x45e>
 8004282:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004286:	617b      	str	r3, [r7, #20]
        break;
 8004288:	e002      	b.n	8004290 <UART_SetConfig+0x468>
      default:
        ret = HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	76fb      	strb	r3, [r7, #27]
        break;
 800428e:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	2b00      	cmp	r3, #0
 8004294:	f000 85ee 	beq.w	8004e74 <UART_SetConfig+0x104c>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	685a      	ldr	r2, [r3, #4]
 800429c:	4613      	mov	r3, r2
 800429e:	005b      	lsls	r3, r3, #1
 80042a0:	441a      	add	r2, r3
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d805      	bhi.n	80042b4 <UART_SetConfig+0x48c>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d203      	bcs.n	80042bc <UART_SetConfig+0x494>
      {
        ret = HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	76fb      	strb	r3, [r7, #27]
 80042b8:	f000 bddc 	b.w	8004e74 <UART_SetConfig+0x104c>
      }
      else
      {
        switch (clocksource)
 80042bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80042c0:	2b08      	cmp	r3, #8
 80042c2:	f200 826a 	bhi.w	800479a <UART_SetConfig+0x972>
 80042c6:	a201      	add	r2, pc, #4	; (adr r2, 80042cc <UART_SetConfig+0x4a4>)
 80042c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042cc:	080042f1 	.word	0x080042f1
 80042d0:	0800479b 	.word	0x0800479b
 80042d4:	0800442d 	.word	0x0800442d
 80042d8:	0800479b 	.word	0x0800479b
 80042dc:	0800451d 	.word	0x0800451d
 80042e0:	0800479b 	.word	0x0800479b
 80042e4:	0800479b 	.word	0x0800479b
 80042e8:	0800479b 	.word	0x0800479b
 80042ec:	08004647 	.word	0x08004647
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 80042f0:	f7fe fcde 	bl	8002cb0 <HAL_RCC_GetPCLK1Freq>
 80042f4:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	4618      	mov	r0, r3
 80042fa:	f04f 0100 	mov.w	r1, #0
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004302:	2b00      	cmp	r3, #0
 8004304:	d06d      	beq.n	80043e2 <UART_SetConfig+0x5ba>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430a:	2b01      	cmp	r3, #1
 800430c:	d064      	beq.n	80043d8 <UART_SetConfig+0x5b0>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004312:	2b02      	cmp	r3, #2
 8004314:	d055      	beq.n	80043c2 <UART_SetConfig+0x59a>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431a:	2b03      	cmp	r3, #3
 800431c:	d04c      	beq.n	80043b8 <UART_SetConfig+0x590>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004322:	2b04      	cmp	r3, #4
 8004324:	d043      	beq.n	80043ae <UART_SetConfig+0x586>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432a:	2b05      	cmp	r3, #5
 800432c:	d03a      	beq.n	80043a4 <UART_SetConfig+0x57c>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004332:	2b06      	cmp	r3, #6
 8004334:	d031      	beq.n	800439a <UART_SetConfig+0x572>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433a:	2b07      	cmp	r3, #7
 800433c:	d028      	beq.n	8004390 <UART_SetConfig+0x568>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004342:	2b08      	cmp	r3, #8
 8004344:	d01f      	beq.n	8004386 <UART_SetConfig+0x55e>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434a:	2b09      	cmp	r3, #9
 800434c:	d016      	beq.n	800437c <UART_SetConfig+0x554>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004352:	2b0a      	cmp	r3, #10
 8004354:	d00d      	beq.n	8004372 <UART_SetConfig+0x54a>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435a:	2b0b      	cmp	r3, #11
 800435c:	d104      	bne.n	8004368 <UART_SetConfig+0x540>
 800435e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004362:	f04f 0400 	mov.w	r4, #0
 8004366:	e040      	b.n	80043ea <UART_SetConfig+0x5c2>
 8004368:	f04f 0301 	mov.w	r3, #1
 800436c:	f04f 0400 	mov.w	r4, #0
 8004370:	e03b      	b.n	80043ea <UART_SetConfig+0x5c2>
 8004372:	f04f 0380 	mov.w	r3, #128	; 0x80
 8004376:	f04f 0400 	mov.w	r4, #0
 800437a:	e036      	b.n	80043ea <UART_SetConfig+0x5c2>
 800437c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8004380:	f04f 0400 	mov.w	r4, #0
 8004384:	e031      	b.n	80043ea <UART_SetConfig+0x5c2>
 8004386:	f04f 0320 	mov.w	r3, #32
 800438a:	f04f 0400 	mov.w	r4, #0
 800438e:	e02c      	b.n	80043ea <UART_SetConfig+0x5c2>
 8004390:	f04f 0310 	mov.w	r3, #16
 8004394:	f04f 0400 	mov.w	r4, #0
 8004398:	e027      	b.n	80043ea <UART_SetConfig+0x5c2>
 800439a:	f04f 030c 	mov.w	r3, #12
 800439e:	f04f 0400 	mov.w	r4, #0
 80043a2:	e022      	b.n	80043ea <UART_SetConfig+0x5c2>
 80043a4:	f04f 030a 	mov.w	r3, #10
 80043a8:	f04f 0400 	mov.w	r4, #0
 80043ac:	e01d      	b.n	80043ea <UART_SetConfig+0x5c2>
 80043ae:	f04f 0308 	mov.w	r3, #8
 80043b2:	f04f 0400 	mov.w	r4, #0
 80043b6:	e018      	b.n	80043ea <UART_SetConfig+0x5c2>
 80043b8:	f04f 0306 	mov.w	r3, #6
 80043bc:	f04f 0400 	mov.w	r4, #0
 80043c0:	e013      	b.n	80043ea <UART_SetConfig+0x5c2>
 80043c2:	f04f 0304 	mov.w	r3, #4
 80043c6:	f04f 0400 	mov.w	r4, #0
 80043ca:	e00e      	b.n	80043ea <UART_SetConfig+0x5c2>
 80043cc:	003d0900 	.word	0x003d0900
 80043d0:	007a1200 	.word	0x007a1200
 80043d4:	00f42400 	.word	0x00f42400
 80043d8:	f04f 0302 	mov.w	r3, #2
 80043dc:	f04f 0400 	mov.w	r4, #0
 80043e0:	e003      	b.n	80043ea <UART_SetConfig+0x5c2>
 80043e2:	f04f 0301 	mov.w	r3, #1
 80043e6:	f04f 0400 	mov.w	r4, #0
 80043ea:	461a      	mov	r2, r3
 80043ec:	4623      	mov	r3, r4
 80043ee:	f7fb fecf 	bl	8000190 <__aeabi_uldivmod>
 80043f2:	4603      	mov	r3, r0
 80043f4:	460c      	mov	r4, r1
 80043f6:	ea4f 2904 	mov.w	r9, r4, lsl #8
 80043fa:	ea49 6913 	orr.w	r9, r9, r3, lsr #24
 80043fe:	ea4f 2803 	mov.w	r8, r3, lsl #8
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	085b      	lsrs	r3, r3, #1
 8004408:	f04f 0400 	mov.w	r4, #0
 800440c:	eb18 0003 	adds.w	r0, r8, r3
 8004410:	eb49 0104 	adc.w	r1, r9, r4
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	f04f 0400 	mov.w	r4, #0
 800441c:	461a      	mov	r2, r3
 800441e:	4623      	mov	r3, r4
 8004420:	f7fb feb6 	bl	8000190 <__aeabi_uldivmod>
 8004424:	4603      	mov	r3, r0
 8004426:	460c      	mov	r4, r1
 8004428:	61fb      	str	r3, [r7, #28]
            break;
 800442a:	e1b9      	b.n	80047a0 <UART_SetConfig+0x978>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004430:	2b00      	cmp	r3, #0
 8004432:	d059      	beq.n	80044e8 <UART_SetConfig+0x6c0>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004438:	2b01      	cmp	r3, #1
 800443a:	d051      	beq.n	80044e0 <UART_SetConfig+0x6b8>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004440:	2b02      	cmp	r3, #2
 8004442:	d049      	beq.n	80044d8 <UART_SetConfig+0x6b0>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004448:	2b03      	cmp	r3, #3
 800444a:	d042      	beq.n	80044d2 <UART_SetConfig+0x6aa>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004450:	2b04      	cmp	r3, #4
 8004452:	d03a      	beq.n	80044ca <UART_SetConfig+0x6a2>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004458:	2b05      	cmp	r3, #5
 800445a:	d032      	beq.n	80044c2 <UART_SetConfig+0x69a>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004460:	2b06      	cmp	r3, #6
 8004462:	d02b      	beq.n	80044bc <UART_SetConfig+0x694>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004468:	2b07      	cmp	r3, #7
 800446a:	d023      	beq.n	80044b4 <UART_SetConfig+0x68c>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004470:	2b08      	cmp	r3, #8
 8004472:	d01b      	beq.n	80044ac <UART_SetConfig+0x684>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004478:	2b09      	cmp	r3, #9
 800447a:	d013      	beq.n	80044a4 <UART_SetConfig+0x67c>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004480:	2b0a      	cmp	r3, #10
 8004482:	d00b      	beq.n	800449c <UART_SetConfig+0x674>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004488:	2b0b      	cmp	r3, #11
 800448a:	d103      	bne.n	8004494 <UART_SetConfig+0x66c>
 800448c:	4ba8      	ldr	r3, [pc, #672]	; (8004730 <UART_SetConfig+0x908>)
 800448e:	f04f 0400 	mov.w	r4, #0
 8004492:	e02c      	b.n	80044ee <UART_SetConfig+0x6c6>
 8004494:	4ba7      	ldr	r3, [pc, #668]	; (8004734 <UART_SetConfig+0x90c>)
 8004496:	f04f 0400 	mov.w	r4, #0
 800449a:	e028      	b.n	80044ee <UART_SetConfig+0x6c6>
 800449c:	4ba6      	ldr	r3, [pc, #664]	; (8004738 <UART_SetConfig+0x910>)
 800449e:	f04f 0400 	mov.w	r4, #0
 80044a2:	e024      	b.n	80044ee <UART_SetConfig+0x6c6>
 80044a4:	4ba5      	ldr	r3, [pc, #660]	; (800473c <UART_SetConfig+0x914>)
 80044a6:	f04f 0400 	mov.w	r4, #0
 80044aa:	e020      	b.n	80044ee <UART_SetConfig+0x6c6>
 80044ac:	4ba4      	ldr	r3, [pc, #656]	; (8004740 <UART_SetConfig+0x918>)
 80044ae:	f04f 0400 	mov.w	r4, #0
 80044b2:	e01c      	b.n	80044ee <UART_SetConfig+0x6c6>
 80044b4:	4ba3      	ldr	r3, [pc, #652]	; (8004744 <UART_SetConfig+0x91c>)
 80044b6:	f04f 0400 	mov.w	r4, #0
 80044ba:	e018      	b.n	80044ee <UART_SetConfig+0x6c6>
 80044bc:	a498      	add	r4, pc, #608	; (adr r4, 8004720 <UART_SetConfig+0x8f8>)
 80044be:	cc18      	ldmia	r4, {r3, r4}
 80044c0:	e015      	b.n	80044ee <UART_SetConfig+0x6c6>
 80044c2:	4ba1      	ldr	r3, [pc, #644]	; (8004748 <UART_SetConfig+0x920>)
 80044c4:	f04f 0400 	mov.w	r4, #0
 80044c8:	e011      	b.n	80044ee <UART_SetConfig+0x6c6>
 80044ca:	4ba0      	ldr	r3, [pc, #640]	; (800474c <UART_SetConfig+0x924>)
 80044cc:	f04f 0400 	mov.w	r4, #0
 80044d0:	e00d      	b.n	80044ee <UART_SetConfig+0x6c6>
 80044d2:	a495      	add	r4, pc, #596	; (adr r4, 8004728 <UART_SetConfig+0x900>)
 80044d4:	cc18      	ldmia	r4, {r3, r4}
 80044d6:	e00a      	b.n	80044ee <UART_SetConfig+0x6c6>
 80044d8:	4b9d      	ldr	r3, [pc, #628]	; (8004750 <UART_SetConfig+0x928>)
 80044da:	f04f 0400 	mov.w	r4, #0
 80044de:	e006      	b.n	80044ee <UART_SetConfig+0x6c6>
 80044e0:	4b9c      	ldr	r3, [pc, #624]	; (8004754 <UART_SetConfig+0x92c>)
 80044e2:	f04f 0400 	mov.w	r4, #0
 80044e6:	e002      	b.n	80044ee <UART_SetConfig+0x6c6>
 80044e8:	4b92      	ldr	r3, [pc, #584]	; (8004734 <UART_SetConfig+0x90c>)
 80044ea:	f04f 0400 	mov.w	r4, #0
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	6852      	ldr	r2, [r2, #4]
 80044f2:	0852      	lsrs	r2, r2, #1
 80044f4:	4611      	mov	r1, r2
 80044f6:	f04f 0200 	mov.w	r2, #0
 80044fa:	185d      	adds	r5, r3, r1
 80044fc:	eb44 0602 	adc.w	r6, r4, r2
 8004500:	4628      	mov	r0, r5
 8004502:	4631      	mov	r1, r6
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	f04f 0400 	mov.w	r4, #0
 800450c:	461a      	mov	r2, r3
 800450e:	4623      	mov	r3, r4
 8004510:	f7fb fe3e 	bl	8000190 <__aeabi_uldivmod>
 8004514:	4603      	mov	r3, r0
 8004516:	460c      	mov	r4, r1
 8004518:	61fb      	str	r3, [r7, #28]
            break;
 800451a:	e141      	b.n	80047a0 <UART_SetConfig+0x978>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 800451c:	f7fe fb4a 	bl	8002bb4 <HAL_RCC_GetSysClockFreq>
 8004520:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	4618      	mov	r0, r3
 8004526:	f04f 0100 	mov.w	r1, #0
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452e:	2b00      	cmp	r3, #0
 8004530:	d067      	beq.n	8004602 <UART_SetConfig+0x7da>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004536:	2b01      	cmp	r3, #1
 8004538:	d05e      	beq.n	80045f8 <UART_SetConfig+0x7d0>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453e:	2b02      	cmp	r3, #2
 8004540:	d055      	beq.n	80045ee <UART_SetConfig+0x7c6>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004546:	2b03      	cmp	r3, #3
 8004548:	d04c      	beq.n	80045e4 <UART_SetConfig+0x7bc>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454e:	2b04      	cmp	r3, #4
 8004550:	d043      	beq.n	80045da <UART_SetConfig+0x7b2>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004556:	2b05      	cmp	r3, #5
 8004558:	d03a      	beq.n	80045d0 <UART_SetConfig+0x7a8>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455e:	2b06      	cmp	r3, #6
 8004560:	d031      	beq.n	80045c6 <UART_SetConfig+0x79e>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004566:	2b07      	cmp	r3, #7
 8004568:	d028      	beq.n	80045bc <UART_SetConfig+0x794>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456e:	2b08      	cmp	r3, #8
 8004570:	d01f      	beq.n	80045b2 <UART_SetConfig+0x78a>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004576:	2b09      	cmp	r3, #9
 8004578:	d016      	beq.n	80045a8 <UART_SetConfig+0x780>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457e:	2b0a      	cmp	r3, #10
 8004580:	d00d      	beq.n	800459e <UART_SetConfig+0x776>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004586:	2b0b      	cmp	r3, #11
 8004588:	d104      	bne.n	8004594 <UART_SetConfig+0x76c>
 800458a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800458e:	f04f 0400 	mov.w	r4, #0
 8004592:	e03a      	b.n	800460a <UART_SetConfig+0x7e2>
 8004594:	f04f 0301 	mov.w	r3, #1
 8004598:	f04f 0400 	mov.w	r4, #0
 800459c:	e035      	b.n	800460a <UART_SetConfig+0x7e2>
 800459e:	f04f 0380 	mov.w	r3, #128	; 0x80
 80045a2:	f04f 0400 	mov.w	r4, #0
 80045a6:	e030      	b.n	800460a <UART_SetConfig+0x7e2>
 80045a8:	f04f 0340 	mov.w	r3, #64	; 0x40
 80045ac:	f04f 0400 	mov.w	r4, #0
 80045b0:	e02b      	b.n	800460a <UART_SetConfig+0x7e2>
 80045b2:	f04f 0320 	mov.w	r3, #32
 80045b6:	f04f 0400 	mov.w	r4, #0
 80045ba:	e026      	b.n	800460a <UART_SetConfig+0x7e2>
 80045bc:	f04f 0310 	mov.w	r3, #16
 80045c0:	f04f 0400 	mov.w	r4, #0
 80045c4:	e021      	b.n	800460a <UART_SetConfig+0x7e2>
 80045c6:	f04f 030c 	mov.w	r3, #12
 80045ca:	f04f 0400 	mov.w	r4, #0
 80045ce:	e01c      	b.n	800460a <UART_SetConfig+0x7e2>
 80045d0:	f04f 030a 	mov.w	r3, #10
 80045d4:	f04f 0400 	mov.w	r4, #0
 80045d8:	e017      	b.n	800460a <UART_SetConfig+0x7e2>
 80045da:	f04f 0308 	mov.w	r3, #8
 80045de:	f04f 0400 	mov.w	r4, #0
 80045e2:	e012      	b.n	800460a <UART_SetConfig+0x7e2>
 80045e4:	f04f 0306 	mov.w	r3, #6
 80045e8:	f04f 0400 	mov.w	r4, #0
 80045ec:	e00d      	b.n	800460a <UART_SetConfig+0x7e2>
 80045ee:	f04f 0304 	mov.w	r3, #4
 80045f2:	f04f 0400 	mov.w	r4, #0
 80045f6:	e008      	b.n	800460a <UART_SetConfig+0x7e2>
 80045f8:	f04f 0302 	mov.w	r3, #2
 80045fc:	f04f 0400 	mov.w	r4, #0
 8004600:	e003      	b.n	800460a <UART_SetConfig+0x7e2>
 8004602:	f04f 0301 	mov.w	r3, #1
 8004606:	f04f 0400 	mov.w	r4, #0
 800460a:	461a      	mov	r2, r3
 800460c:	4623      	mov	r3, r4
 800460e:	f7fb fdbf 	bl	8000190 <__aeabi_uldivmod>
 8004612:	4603      	mov	r3, r0
 8004614:	460c      	mov	r4, r1
 8004616:	0226      	lsls	r6, r4, #8
 8004618:	ea46 6613 	orr.w	r6, r6, r3, lsr #24
 800461c:	021d      	lsls	r5, r3, #8
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	085b      	lsrs	r3, r3, #1
 8004624:	f04f 0400 	mov.w	r4, #0
 8004628:	18e8      	adds	r0, r5, r3
 800462a:	eb46 0104 	adc.w	r1, r6, r4
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	f04f 0400 	mov.w	r4, #0
 8004636:	461a      	mov	r2, r3
 8004638:	4623      	mov	r3, r4
 800463a:	f7fb fda9 	bl	8000190 <__aeabi_uldivmod>
 800463e:	4603      	mov	r3, r0
 8004640:	460c      	mov	r4, r1
 8004642:	61fb      	str	r3, [r7, #28]
            break;
 8004644:	e0ac      	b.n	80047a0 <UART_SetConfig+0x978>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464a:	2b00      	cmp	r3, #0
 800464c:	f000 808a 	beq.w	8004764 <UART_SetConfig+0x93c>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004654:	2b01      	cmp	r3, #1
 8004656:	d05b      	beq.n	8004710 <UART_SetConfig+0x8e8>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465c:	2b02      	cmp	r3, #2
 800465e:	d052      	beq.n	8004706 <UART_SetConfig+0x8de>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004664:	2b03      	cmp	r3, #3
 8004666:	d04a      	beq.n	80046fe <UART_SetConfig+0x8d6>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466c:	2b04      	cmp	r3, #4
 800466e:	d041      	beq.n	80046f4 <UART_SetConfig+0x8cc>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004674:	2b05      	cmp	r3, #5
 8004676:	d039      	beq.n	80046ec <UART_SetConfig+0x8c4>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467c:	2b06      	cmp	r3, #6
 800467e:	d031      	beq.n	80046e4 <UART_SetConfig+0x8bc>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004684:	2b07      	cmp	r3, #7
 8004686:	d028      	beq.n	80046da <UART_SetConfig+0x8b2>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468c:	2b08      	cmp	r3, #8
 800468e:	d01f      	beq.n	80046d0 <UART_SetConfig+0x8a8>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004694:	2b09      	cmp	r3, #9
 8004696:	d016      	beq.n	80046c6 <UART_SetConfig+0x89e>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469c:	2b0a      	cmp	r3, #10
 800469e:	d00d      	beq.n	80046bc <UART_SetConfig+0x894>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a4:	2b0b      	cmp	r3, #11
 80046a6:	d104      	bne.n	80046b2 <UART_SetConfig+0x88a>
 80046a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046ac:	f04f 0400 	mov.w	r4, #0
 80046b0:	e05c      	b.n	800476c <UART_SetConfig+0x944>
 80046b2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80046b6:	f04f 0400 	mov.w	r4, #0
 80046ba:	e057      	b.n	800476c <UART_SetConfig+0x944>
 80046bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80046c0:	f04f 0400 	mov.w	r4, #0
 80046c4:	e052      	b.n	800476c <UART_SetConfig+0x944>
 80046c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80046ca:	f04f 0400 	mov.w	r4, #0
 80046ce:	e04d      	b.n	800476c <UART_SetConfig+0x944>
 80046d0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80046d4:	f04f 0400 	mov.w	r4, #0
 80046d8:	e048      	b.n	800476c <UART_SetConfig+0x944>
 80046da:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80046de:	f04f 0400 	mov.w	r4, #0
 80046e2:	e043      	b.n	800476c <UART_SetConfig+0x944>
 80046e4:	4b1c      	ldr	r3, [pc, #112]	; (8004758 <UART_SetConfig+0x930>)
 80046e6:	f04f 0400 	mov.w	r4, #0
 80046ea:	e03f      	b.n	800476c <UART_SetConfig+0x944>
 80046ec:	4b1b      	ldr	r3, [pc, #108]	; (800475c <UART_SetConfig+0x934>)
 80046ee:	f04f 0400 	mov.w	r4, #0
 80046f2:	e03b      	b.n	800476c <UART_SetConfig+0x944>
 80046f4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80046f8:	f04f 0400 	mov.w	r4, #0
 80046fc:	e036      	b.n	800476c <UART_SetConfig+0x944>
 80046fe:	4b18      	ldr	r3, [pc, #96]	; (8004760 <UART_SetConfig+0x938>)
 8004700:	f04f 0400 	mov.w	r4, #0
 8004704:	e032      	b.n	800476c <UART_SetConfig+0x944>
 8004706:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800470a:	f04f 0400 	mov.w	r4, #0
 800470e:	e02d      	b.n	800476c <UART_SetConfig+0x944>
 8004710:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004714:	f04f 0400 	mov.w	r4, #0
 8004718:	e028      	b.n	800476c <UART_SetConfig+0x944>
 800471a:	bf00      	nop
 800471c:	f3af 8000 	nop.w
 8004720:	14585500 	.word	0x14585500
 8004724:	00000000 	.word	0x00000000
 8004728:	28b0aa00 	.word	0x28b0aa00
 800472c:	00000000 	.word	0x00000000
 8004730:	00f42400 	.word	0x00f42400
 8004734:	f4240000 	.word	0xf4240000
 8004738:	01e84800 	.word	0x01e84800
 800473c:	03d09000 	.word	0x03d09000
 8004740:	07a12000 	.word	0x07a12000
 8004744:	0f424000 	.word	0x0f424000
 8004748:	186a0000 	.word	0x186a0000
 800474c:	1e848000 	.word	0x1e848000
 8004750:	3d090000 	.word	0x3d090000
 8004754:	7a120000 	.word	0x7a120000
 8004758:	000aaa00 	.word	0x000aaa00
 800475c:	000ccc00 	.word	0x000ccc00
 8004760:	00155500 	.word	0x00155500
 8004764:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004768:	f04f 0400 	mov.w	r4, #0
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	6852      	ldr	r2, [r2, #4]
 8004770:	0852      	lsrs	r2, r2, #1
 8004772:	4611      	mov	r1, r2
 8004774:	f04f 0200 	mov.w	r2, #0
 8004778:	185d      	adds	r5, r3, r1
 800477a:	eb44 0602 	adc.w	r6, r4, r2
 800477e:	4628      	mov	r0, r5
 8004780:	4631      	mov	r1, r6
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	f04f 0400 	mov.w	r4, #0
 800478a:	461a      	mov	r2, r3
 800478c:	4623      	mov	r3, r4
 800478e:	f7fb fcff 	bl	8000190 <__aeabi_uldivmod>
 8004792:	4603      	mov	r3, r0
 8004794:	460c      	mov	r4, r1
 8004796:	61fb      	str	r3, [r7, #28]
            break;
 8004798:	e002      	b.n	80047a0 <UART_SetConfig+0x978>
          default:
            ret = HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	76fb      	strb	r3, [r7, #27]
            break;
 800479e:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80047a0:	69fb      	ldr	r3, [r7, #28]
 80047a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047a6:	d308      	bcc.n	80047ba <UART_SetConfig+0x992>
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047ae:	d204      	bcs.n	80047ba <UART_SetConfig+0x992>
        {
          huart->Instance->BRR = usartdiv;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	69fa      	ldr	r2, [r7, #28]
 80047b6:	60da      	str	r2, [r3, #12]
 80047b8:	e35c      	b.n	8004e74 <UART_SetConfig+0x104c>
        }
        else
        {
          ret = HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	76fb      	strb	r3, [r7, #27]
 80047be:	e359      	b.n	8004e74 <UART_SetConfig+0x104c>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	69db      	ldr	r3, [r3, #28]
 80047c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047c8:	f040 81a7 	bne.w	8004b1a <UART_SetConfig+0xcf2>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 80047cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80047d0:	3b01      	subs	r3, #1
 80047d2:	2b07      	cmp	r3, #7
 80047d4:	f200 8181 	bhi.w	8004ada <UART_SetConfig+0xcb2>
 80047d8:	a201      	add	r2, pc, #4	; (adr r2, 80047e0 <UART_SetConfig+0x9b8>)
 80047da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047de:	bf00      	nop
 80047e0:	08004801 	.word	0x08004801
 80047e4:	080048b9 	.word	0x080048b9
 80047e8:	08004adb 	.word	0x08004adb
 80047ec:	08004961 	.word	0x08004961
 80047f0:	08004adb 	.word	0x08004adb
 80047f4:	08004adb 	.word	0x08004adb
 80047f8:	08004adb 	.word	0x08004adb
 80047fc:	08004a19 	.word	0x08004a19
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004800:	f7fe fa6c 	bl	8002cdc <HAL_RCC_GetPCLK2Freq>
 8004804:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480a:	2b00      	cmp	r3, #0
 800480c:	d044      	beq.n	8004898 <UART_SetConfig+0xa70>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004812:	2b01      	cmp	r3, #1
 8004814:	d03e      	beq.n	8004894 <UART_SetConfig+0xa6c>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481a:	2b02      	cmp	r3, #2
 800481c:	d038      	beq.n	8004890 <UART_SetConfig+0xa68>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004822:	2b03      	cmp	r3, #3
 8004824:	d032      	beq.n	800488c <UART_SetConfig+0xa64>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482a:	2b04      	cmp	r3, #4
 800482c:	d02c      	beq.n	8004888 <UART_SetConfig+0xa60>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004832:	2b05      	cmp	r3, #5
 8004834:	d026      	beq.n	8004884 <UART_SetConfig+0xa5c>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483a:	2b06      	cmp	r3, #6
 800483c:	d020      	beq.n	8004880 <UART_SetConfig+0xa58>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004842:	2b07      	cmp	r3, #7
 8004844:	d01a      	beq.n	800487c <UART_SetConfig+0xa54>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484a:	2b08      	cmp	r3, #8
 800484c:	d014      	beq.n	8004878 <UART_SetConfig+0xa50>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004852:	2b09      	cmp	r3, #9
 8004854:	d00e      	beq.n	8004874 <UART_SetConfig+0xa4c>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485a:	2b0a      	cmp	r3, #10
 800485c:	d008      	beq.n	8004870 <UART_SetConfig+0xa48>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004862:	2b0b      	cmp	r3, #11
 8004864:	d102      	bne.n	800486c <UART_SetConfig+0xa44>
 8004866:	f44f 7380 	mov.w	r3, #256	; 0x100
 800486a:	e016      	b.n	800489a <UART_SetConfig+0xa72>
 800486c:	2301      	movs	r3, #1
 800486e:	e014      	b.n	800489a <UART_SetConfig+0xa72>
 8004870:	2380      	movs	r3, #128	; 0x80
 8004872:	e012      	b.n	800489a <UART_SetConfig+0xa72>
 8004874:	2340      	movs	r3, #64	; 0x40
 8004876:	e010      	b.n	800489a <UART_SetConfig+0xa72>
 8004878:	2320      	movs	r3, #32
 800487a:	e00e      	b.n	800489a <UART_SetConfig+0xa72>
 800487c:	2310      	movs	r3, #16
 800487e:	e00c      	b.n	800489a <UART_SetConfig+0xa72>
 8004880:	230c      	movs	r3, #12
 8004882:	e00a      	b.n	800489a <UART_SetConfig+0xa72>
 8004884:	230a      	movs	r3, #10
 8004886:	e008      	b.n	800489a <UART_SetConfig+0xa72>
 8004888:	2308      	movs	r3, #8
 800488a:	e006      	b.n	800489a <UART_SetConfig+0xa72>
 800488c:	2306      	movs	r3, #6
 800488e:	e004      	b.n	800489a <UART_SetConfig+0xa72>
 8004890:	2304      	movs	r3, #4
 8004892:	e002      	b.n	800489a <UART_SetConfig+0xa72>
 8004894:	2302      	movs	r3, #2
 8004896:	e000      	b.n	800489a <UART_SetConfig+0xa72>
 8004898:	2301      	movs	r3, #1
 800489a:	693a      	ldr	r2, [r7, #16]
 800489c:	fbb2 f3f3 	udiv	r3, r2, r3
 80048a0:	005a      	lsls	r2, r3, #1
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	085b      	lsrs	r3, r3, #1
 80048a8:	441a      	add	r2, r3
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	61fb      	str	r3, [r7, #28]
        break;
 80048b6:	e113      	b.n	8004ae0 <UART_SetConfig+0xcb8>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d043      	beq.n	8004948 <UART_SetConfig+0xb20>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d03d      	beq.n	8004944 <UART_SetConfig+0xb1c>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048cc:	2b02      	cmp	r3, #2
 80048ce:	d037      	beq.n	8004940 <UART_SetConfig+0xb18>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d4:	2b03      	cmp	r3, #3
 80048d6:	d031      	beq.n	800493c <UART_SetConfig+0xb14>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048dc:	2b04      	cmp	r3, #4
 80048de:	d02b      	beq.n	8004938 <UART_SetConfig+0xb10>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e4:	2b05      	cmp	r3, #5
 80048e6:	d025      	beq.n	8004934 <UART_SetConfig+0xb0c>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ec:	2b06      	cmp	r3, #6
 80048ee:	d01f      	beq.n	8004930 <UART_SetConfig+0xb08>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f4:	2b07      	cmp	r3, #7
 80048f6:	d019      	beq.n	800492c <UART_SetConfig+0xb04>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fc:	2b08      	cmp	r3, #8
 80048fe:	d013      	beq.n	8004928 <UART_SetConfig+0xb00>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004904:	2b09      	cmp	r3, #9
 8004906:	d00d      	beq.n	8004924 <UART_SetConfig+0xafc>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490c:	2b0a      	cmp	r3, #10
 800490e:	d007      	beq.n	8004920 <UART_SetConfig+0xaf8>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004914:	2b0b      	cmp	r3, #11
 8004916:	d101      	bne.n	800491c <UART_SetConfig+0xaf4>
 8004918:	4b8c      	ldr	r3, [pc, #560]	; (8004b4c <UART_SetConfig+0xd24>)
 800491a:	e016      	b.n	800494a <UART_SetConfig+0xb22>
 800491c:	4b8c      	ldr	r3, [pc, #560]	; (8004b50 <UART_SetConfig+0xd28>)
 800491e:	e014      	b.n	800494a <UART_SetConfig+0xb22>
 8004920:	4b8c      	ldr	r3, [pc, #560]	; (8004b54 <UART_SetConfig+0xd2c>)
 8004922:	e012      	b.n	800494a <UART_SetConfig+0xb22>
 8004924:	4b8c      	ldr	r3, [pc, #560]	; (8004b58 <UART_SetConfig+0xd30>)
 8004926:	e010      	b.n	800494a <UART_SetConfig+0xb22>
 8004928:	4b8c      	ldr	r3, [pc, #560]	; (8004b5c <UART_SetConfig+0xd34>)
 800492a:	e00e      	b.n	800494a <UART_SetConfig+0xb22>
 800492c:	4b8c      	ldr	r3, [pc, #560]	; (8004b60 <UART_SetConfig+0xd38>)
 800492e:	e00c      	b.n	800494a <UART_SetConfig+0xb22>
 8004930:	4b8c      	ldr	r3, [pc, #560]	; (8004b64 <UART_SetConfig+0xd3c>)
 8004932:	e00a      	b.n	800494a <UART_SetConfig+0xb22>
 8004934:	4b8c      	ldr	r3, [pc, #560]	; (8004b68 <UART_SetConfig+0xd40>)
 8004936:	e008      	b.n	800494a <UART_SetConfig+0xb22>
 8004938:	4b8c      	ldr	r3, [pc, #560]	; (8004b6c <UART_SetConfig+0xd44>)
 800493a:	e006      	b.n	800494a <UART_SetConfig+0xb22>
 800493c:	4b8c      	ldr	r3, [pc, #560]	; (8004b70 <UART_SetConfig+0xd48>)
 800493e:	e004      	b.n	800494a <UART_SetConfig+0xb22>
 8004940:	4b8c      	ldr	r3, [pc, #560]	; (8004b74 <UART_SetConfig+0xd4c>)
 8004942:	e002      	b.n	800494a <UART_SetConfig+0xb22>
 8004944:	4b8c      	ldr	r3, [pc, #560]	; (8004b78 <UART_SetConfig+0xd50>)
 8004946:	e000      	b.n	800494a <UART_SetConfig+0xb22>
 8004948:	4b81      	ldr	r3, [pc, #516]	; (8004b50 <UART_SetConfig+0xd28>)
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	6852      	ldr	r2, [r2, #4]
 800494e:	0852      	lsrs	r2, r2, #1
 8004950:	441a      	add	r2, r3
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	fbb2 f3f3 	udiv	r3, r2, r3
 800495a:	b29b      	uxth	r3, r3
 800495c:	61fb      	str	r3, [r7, #28]
        break;
 800495e:	e0bf      	b.n	8004ae0 <UART_SetConfig+0xcb8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004960:	f7fe f928 	bl	8002bb4 <HAL_RCC_GetSysClockFreq>
 8004964:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496a:	2b00      	cmp	r3, #0
 800496c:	d044      	beq.n	80049f8 <UART_SetConfig+0xbd0>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004972:	2b01      	cmp	r3, #1
 8004974:	d03e      	beq.n	80049f4 <UART_SetConfig+0xbcc>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497a:	2b02      	cmp	r3, #2
 800497c:	d038      	beq.n	80049f0 <UART_SetConfig+0xbc8>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004982:	2b03      	cmp	r3, #3
 8004984:	d032      	beq.n	80049ec <UART_SetConfig+0xbc4>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498a:	2b04      	cmp	r3, #4
 800498c:	d02c      	beq.n	80049e8 <UART_SetConfig+0xbc0>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004992:	2b05      	cmp	r3, #5
 8004994:	d026      	beq.n	80049e4 <UART_SetConfig+0xbbc>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499a:	2b06      	cmp	r3, #6
 800499c:	d020      	beq.n	80049e0 <UART_SetConfig+0xbb8>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a2:	2b07      	cmp	r3, #7
 80049a4:	d01a      	beq.n	80049dc <UART_SetConfig+0xbb4>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049aa:	2b08      	cmp	r3, #8
 80049ac:	d014      	beq.n	80049d8 <UART_SetConfig+0xbb0>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b2:	2b09      	cmp	r3, #9
 80049b4:	d00e      	beq.n	80049d4 <UART_SetConfig+0xbac>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ba:	2b0a      	cmp	r3, #10
 80049bc:	d008      	beq.n	80049d0 <UART_SetConfig+0xba8>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c2:	2b0b      	cmp	r3, #11
 80049c4:	d102      	bne.n	80049cc <UART_SetConfig+0xba4>
 80049c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80049ca:	e016      	b.n	80049fa <UART_SetConfig+0xbd2>
 80049cc:	2301      	movs	r3, #1
 80049ce:	e014      	b.n	80049fa <UART_SetConfig+0xbd2>
 80049d0:	2380      	movs	r3, #128	; 0x80
 80049d2:	e012      	b.n	80049fa <UART_SetConfig+0xbd2>
 80049d4:	2340      	movs	r3, #64	; 0x40
 80049d6:	e010      	b.n	80049fa <UART_SetConfig+0xbd2>
 80049d8:	2320      	movs	r3, #32
 80049da:	e00e      	b.n	80049fa <UART_SetConfig+0xbd2>
 80049dc:	2310      	movs	r3, #16
 80049de:	e00c      	b.n	80049fa <UART_SetConfig+0xbd2>
 80049e0:	230c      	movs	r3, #12
 80049e2:	e00a      	b.n	80049fa <UART_SetConfig+0xbd2>
 80049e4:	230a      	movs	r3, #10
 80049e6:	e008      	b.n	80049fa <UART_SetConfig+0xbd2>
 80049e8:	2308      	movs	r3, #8
 80049ea:	e006      	b.n	80049fa <UART_SetConfig+0xbd2>
 80049ec:	2306      	movs	r3, #6
 80049ee:	e004      	b.n	80049fa <UART_SetConfig+0xbd2>
 80049f0:	2304      	movs	r3, #4
 80049f2:	e002      	b.n	80049fa <UART_SetConfig+0xbd2>
 80049f4:	2302      	movs	r3, #2
 80049f6:	e000      	b.n	80049fa <UART_SetConfig+0xbd2>
 80049f8:	2301      	movs	r3, #1
 80049fa:	693a      	ldr	r2, [r7, #16]
 80049fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a00:	005a      	lsls	r2, r3, #1
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	085b      	lsrs	r3, r3, #1
 8004a08:	441a      	add	r2, r3
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	61fb      	str	r3, [r7, #28]
        break;
 8004a16:	e063      	b.n	8004ae0 <UART_SetConfig+0xcb8>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d04f      	beq.n	8004ac0 <UART_SetConfig+0xc98>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d048      	beq.n	8004aba <UART_SetConfig+0xc92>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2c:	2b02      	cmp	r3, #2
 8004a2e:	d041      	beq.n	8004ab4 <UART_SetConfig+0xc8c>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a34:	2b03      	cmp	r3, #3
 8004a36:	d03a      	beq.n	8004aae <UART_SetConfig+0xc86>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3c:	2b04      	cmp	r3, #4
 8004a3e:	d033      	beq.n	8004aa8 <UART_SetConfig+0xc80>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a44:	2b05      	cmp	r3, #5
 8004a46:	d02c      	beq.n	8004aa2 <UART_SetConfig+0xc7a>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4c:	2b06      	cmp	r3, #6
 8004a4e:	d025      	beq.n	8004a9c <UART_SetConfig+0xc74>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a54:	2b07      	cmp	r3, #7
 8004a56:	d01e      	beq.n	8004a96 <UART_SetConfig+0xc6e>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5c:	2b08      	cmp	r3, #8
 8004a5e:	d017      	beq.n	8004a90 <UART_SetConfig+0xc68>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a64:	2b09      	cmp	r3, #9
 8004a66:	d010      	beq.n	8004a8a <UART_SetConfig+0xc62>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6c:	2b0a      	cmp	r3, #10
 8004a6e:	d009      	beq.n	8004a84 <UART_SetConfig+0xc5c>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a74:	2b0b      	cmp	r3, #11
 8004a76:	d102      	bne.n	8004a7e <UART_SetConfig+0xc56>
 8004a78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a7c:	e022      	b.n	8004ac4 <UART_SetConfig+0xc9c>
 8004a7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004a82:	e01f      	b.n	8004ac4 <UART_SetConfig+0xc9c>
 8004a84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a88:	e01c      	b.n	8004ac4 <UART_SetConfig+0xc9c>
 8004a8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a8e:	e019      	b.n	8004ac4 <UART_SetConfig+0xc9c>
 8004a90:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004a94:	e016      	b.n	8004ac4 <UART_SetConfig+0xc9c>
 8004a96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a9a:	e013      	b.n	8004ac4 <UART_SetConfig+0xc9c>
 8004a9c:	f241 5354 	movw	r3, #5460	; 0x1554
 8004aa0:	e010      	b.n	8004ac4 <UART_SetConfig+0xc9c>
 8004aa2:	f641 1398 	movw	r3, #6552	; 0x1998
 8004aa6:	e00d      	b.n	8004ac4 <UART_SetConfig+0xc9c>
 8004aa8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004aac:	e00a      	b.n	8004ac4 <UART_SetConfig+0xc9c>
 8004aae:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8004ab2:	e007      	b.n	8004ac4 <UART_SetConfig+0xc9c>
 8004ab4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004ab8:	e004      	b.n	8004ac4 <UART_SetConfig+0xc9c>
 8004aba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004abe:	e001      	b.n	8004ac4 <UART_SetConfig+0xc9c>
 8004ac0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	6852      	ldr	r2, [r2, #4]
 8004ac8:	0852      	lsrs	r2, r2, #1
 8004aca:	441a      	add	r2, r3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	61fb      	str	r3, [r7, #28]
        break;
 8004ad8:	e002      	b.n	8004ae0 <UART_SetConfig+0xcb8>
      default:
        ret = HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	76fb      	strb	r3, [r7, #27]
        break;
 8004ade:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ae0:	69fb      	ldr	r3, [r7, #28]
 8004ae2:	2b0f      	cmp	r3, #15
 8004ae4:	d916      	bls.n	8004b14 <UART_SetConfig+0xcec>
 8004ae6:	69fb      	ldr	r3, [r7, #28]
 8004ae8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004aec:	d212      	bcs.n	8004b14 <UART_SetConfig+0xcec>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	f023 030f 	bic.w	r3, r3, #15
 8004af6:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	085b      	lsrs	r3, r3, #1
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	f003 0307 	and.w	r3, r3, #7
 8004b02:	b29a      	uxth	r2, r3
 8004b04:	89fb      	ldrh	r3, [r7, #14]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	89fa      	ldrh	r2, [r7, #14]
 8004b10:	60da      	str	r2, [r3, #12]
 8004b12:	e1af      	b.n	8004e74 <UART_SetConfig+0x104c>
    }
    else
    {
      ret = HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	76fb      	strb	r3, [r7, #27]
 8004b18:	e1ac      	b.n	8004e74 <UART_SetConfig+0x104c>
    }
  }
  else
  {
    switch (clocksource)
 8004b1a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004b1e:	3b01      	subs	r3, #1
 8004b20:	2b07      	cmp	r3, #7
 8004b22:	f200 8196 	bhi.w	8004e52 <UART_SetConfig+0x102a>
 8004b26:	a201      	add	r2, pc, #4	; (adr r2, 8004b2c <UART_SetConfig+0xd04>)
 8004b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b2c:	08004b7d 	.word	0x08004b7d
 8004b30:	08004c33 	.word	0x08004c33
 8004b34:	08004e53 	.word	0x08004e53
 8004b38:	08004cdd 	.word	0x08004cdd
 8004b3c:	08004e53 	.word	0x08004e53
 8004b40:	08004e53 	.word	0x08004e53
 8004b44:	08004e53 	.word	0x08004e53
 8004b48:	08004d93 	.word	0x08004d93
 8004b4c:	0001e848 	.word	0x0001e848
 8004b50:	01e84800 	.word	0x01e84800
 8004b54:	0003d090 	.word	0x0003d090
 8004b58:	0007a120 	.word	0x0007a120
 8004b5c:	000f4240 	.word	0x000f4240
 8004b60:	001e8480 	.word	0x001e8480
 8004b64:	0028b0aa 	.word	0x0028b0aa
 8004b68:	0030d400 	.word	0x0030d400
 8004b6c:	003d0900 	.word	0x003d0900
 8004b70:	00516154 	.word	0x00516154
 8004b74:	007a1200 	.word	0x007a1200
 8004b78:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b7c:	f7fe f8ae 	bl	8002cdc <HAL_RCC_GetPCLK2Freq>
 8004b80:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d044      	beq.n	8004c14 <UART_SetConfig+0xdec>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d03e      	beq.n	8004c10 <UART_SetConfig+0xde8>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b96:	2b02      	cmp	r3, #2
 8004b98:	d038      	beq.n	8004c0c <UART_SetConfig+0xde4>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9e:	2b03      	cmp	r3, #3
 8004ba0:	d032      	beq.n	8004c08 <UART_SetConfig+0xde0>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba6:	2b04      	cmp	r3, #4
 8004ba8:	d02c      	beq.n	8004c04 <UART_SetConfig+0xddc>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bae:	2b05      	cmp	r3, #5
 8004bb0:	d026      	beq.n	8004c00 <UART_SetConfig+0xdd8>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb6:	2b06      	cmp	r3, #6
 8004bb8:	d020      	beq.n	8004bfc <UART_SetConfig+0xdd4>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bbe:	2b07      	cmp	r3, #7
 8004bc0:	d01a      	beq.n	8004bf8 <UART_SetConfig+0xdd0>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc6:	2b08      	cmp	r3, #8
 8004bc8:	d014      	beq.n	8004bf4 <UART_SetConfig+0xdcc>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bce:	2b09      	cmp	r3, #9
 8004bd0:	d00e      	beq.n	8004bf0 <UART_SetConfig+0xdc8>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd6:	2b0a      	cmp	r3, #10
 8004bd8:	d008      	beq.n	8004bec <UART_SetConfig+0xdc4>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bde:	2b0b      	cmp	r3, #11
 8004be0:	d102      	bne.n	8004be8 <UART_SetConfig+0xdc0>
 8004be2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004be6:	e016      	b.n	8004c16 <UART_SetConfig+0xdee>
 8004be8:	2301      	movs	r3, #1
 8004bea:	e014      	b.n	8004c16 <UART_SetConfig+0xdee>
 8004bec:	2380      	movs	r3, #128	; 0x80
 8004bee:	e012      	b.n	8004c16 <UART_SetConfig+0xdee>
 8004bf0:	2340      	movs	r3, #64	; 0x40
 8004bf2:	e010      	b.n	8004c16 <UART_SetConfig+0xdee>
 8004bf4:	2320      	movs	r3, #32
 8004bf6:	e00e      	b.n	8004c16 <UART_SetConfig+0xdee>
 8004bf8:	2310      	movs	r3, #16
 8004bfa:	e00c      	b.n	8004c16 <UART_SetConfig+0xdee>
 8004bfc:	230c      	movs	r3, #12
 8004bfe:	e00a      	b.n	8004c16 <UART_SetConfig+0xdee>
 8004c00:	230a      	movs	r3, #10
 8004c02:	e008      	b.n	8004c16 <UART_SetConfig+0xdee>
 8004c04:	2308      	movs	r3, #8
 8004c06:	e006      	b.n	8004c16 <UART_SetConfig+0xdee>
 8004c08:	2306      	movs	r3, #6
 8004c0a:	e004      	b.n	8004c16 <UART_SetConfig+0xdee>
 8004c0c:	2304      	movs	r3, #4
 8004c0e:	e002      	b.n	8004c16 <UART_SetConfig+0xdee>
 8004c10:	2302      	movs	r3, #2
 8004c12:	e000      	b.n	8004c16 <UART_SetConfig+0xdee>
 8004c14:	2301      	movs	r3, #1
 8004c16:	693a      	ldr	r2, [r7, #16]
 8004c18:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	085b      	lsrs	r3, r3, #1
 8004c22:	441a      	add	r2, r3
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	61fb      	str	r3, [r7, #28]
        break;
 8004c30:	e112      	b.n	8004e58 <UART_SetConfig+0x1030>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d044      	beq.n	8004cc4 <UART_SetConfig+0xe9c>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d03e      	beq.n	8004cc0 <UART_SetConfig+0xe98>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c46:	2b02      	cmp	r3, #2
 8004c48:	d038      	beq.n	8004cbc <UART_SetConfig+0xe94>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4e:	2b03      	cmp	r3, #3
 8004c50:	d032      	beq.n	8004cb8 <UART_SetConfig+0xe90>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c56:	2b04      	cmp	r3, #4
 8004c58:	d02c      	beq.n	8004cb4 <UART_SetConfig+0xe8c>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5e:	2b05      	cmp	r3, #5
 8004c60:	d026      	beq.n	8004cb0 <UART_SetConfig+0xe88>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c66:	2b06      	cmp	r3, #6
 8004c68:	d020      	beq.n	8004cac <UART_SetConfig+0xe84>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6e:	2b07      	cmp	r3, #7
 8004c70:	d01a      	beq.n	8004ca8 <UART_SetConfig+0xe80>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c76:	2b08      	cmp	r3, #8
 8004c78:	d014      	beq.n	8004ca4 <UART_SetConfig+0xe7c>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7e:	2b09      	cmp	r3, #9
 8004c80:	d00e      	beq.n	8004ca0 <UART_SetConfig+0xe78>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c86:	2b0a      	cmp	r3, #10
 8004c88:	d008      	beq.n	8004c9c <UART_SetConfig+0xe74>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8e:	2b0b      	cmp	r3, #11
 8004c90:	d102      	bne.n	8004c98 <UART_SetConfig+0xe70>
 8004c92:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004c96:	e016      	b.n	8004cc6 <UART_SetConfig+0xe9e>
 8004c98:	4b80      	ldr	r3, [pc, #512]	; (8004e9c <UART_SetConfig+0x1074>)
 8004c9a:	e014      	b.n	8004cc6 <UART_SetConfig+0xe9e>
 8004c9c:	4b80      	ldr	r3, [pc, #512]	; (8004ea0 <UART_SetConfig+0x1078>)
 8004c9e:	e012      	b.n	8004cc6 <UART_SetConfig+0xe9e>
 8004ca0:	4b80      	ldr	r3, [pc, #512]	; (8004ea4 <UART_SetConfig+0x107c>)
 8004ca2:	e010      	b.n	8004cc6 <UART_SetConfig+0xe9e>
 8004ca4:	4b80      	ldr	r3, [pc, #512]	; (8004ea8 <UART_SetConfig+0x1080>)
 8004ca6:	e00e      	b.n	8004cc6 <UART_SetConfig+0xe9e>
 8004ca8:	4b80      	ldr	r3, [pc, #512]	; (8004eac <UART_SetConfig+0x1084>)
 8004caa:	e00c      	b.n	8004cc6 <UART_SetConfig+0xe9e>
 8004cac:	4b80      	ldr	r3, [pc, #512]	; (8004eb0 <UART_SetConfig+0x1088>)
 8004cae:	e00a      	b.n	8004cc6 <UART_SetConfig+0xe9e>
 8004cb0:	4b80      	ldr	r3, [pc, #512]	; (8004eb4 <UART_SetConfig+0x108c>)
 8004cb2:	e008      	b.n	8004cc6 <UART_SetConfig+0xe9e>
 8004cb4:	4b80      	ldr	r3, [pc, #512]	; (8004eb8 <UART_SetConfig+0x1090>)
 8004cb6:	e006      	b.n	8004cc6 <UART_SetConfig+0xe9e>
 8004cb8:	4b80      	ldr	r3, [pc, #512]	; (8004ebc <UART_SetConfig+0x1094>)
 8004cba:	e004      	b.n	8004cc6 <UART_SetConfig+0xe9e>
 8004cbc:	4b80      	ldr	r3, [pc, #512]	; (8004ec0 <UART_SetConfig+0x1098>)
 8004cbe:	e002      	b.n	8004cc6 <UART_SetConfig+0xe9e>
 8004cc0:	4b80      	ldr	r3, [pc, #512]	; (8004ec4 <UART_SetConfig+0x109c>)
 8004cc2:	e000      	b.n	8004cc6 <UART_SetConfig+0xe9e>
 8004cc4:	4b75      	ldr	r3, [pc, #468]	; (8004e9c <UART_SetConfig+0x1074>)
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	6852      	ldr	r2, [r2, #4]
 8004cca:	0852      	lsrs	r2, r2, #1
 8004ccc:	441a      	add	r2, r3
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cd6:	b29b      	uxth	r3, r3
 8004cd8:	61fb      	str	r3, [r7, #28]
        break;
 8004cda:	e0bd      	b.n	8004e58 <UART_SetConfig+0x1030>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cdc:	f7fd ff6a 	bl	8002bb4 <HAL_RCC_GetSysClockFreq>
 8004ce0:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d044      	beq.n	8004d74 <UART_SetConfig+0xf4c>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d03e      	beq.n	8004d70 <UART_SetConfig+0xf48>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf6:	2b02      	cmp	r3, #2
 8004cf8:	d038      	beq.n	8004d6c <UART_SetConfig+0xf44>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfe:	2b03      	cmp	r3, #3
 8004d00:	d032      	beq.n	8004d68 <UART_SetConfig+0xf40>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d06:	2b04      	cmp	r3, #4
 8004d08:	d02c      	beq.n	8004d64 <UART_SetConfig+0xf3c>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0e:	2b05      	cmp	r3, #5
 8004d10:	d026      	beq.n	8004d60 <UART_SetConfig+0xf38>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d16:	2b06      	cmp	r3, #6
 8004d18:	d020      	beq.n	8004d5c <UART_SetConfig+0xf34>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1e:	2b07      	cmp	r3, #7
 8004d20:	d01a      	beq.n	8004d58 <UART_SetConfig+0xf30>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d26:	2b08      	cmp	r3, #8
 8004d28:	d014      	beq.n	8004d54 <UART_SetConfig+0xf2c>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2e:	2b09      	cmp	r3, #9
 8004d30:	d00e      	beq.n	8004d50 <UART_SetConfig+0xf28>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d36:	2b0a      	cmp	r3, #10
 8004d38:	d008      	beq.n	8004d4c <UART_SetConfig+0xf24>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3e:	2b0b      	cmp	r3, #11
 8004d40:	d102      	bne.n	8004d48 <UART_SetConfig+0xf20>
 8004d42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d46:	e016      	b.n	8004d76 <UART_SetConfig+0xf4e>
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e014      	b.n	8004d76 <UART_SetConfig+0xf4e>
 8004d4c:	2380      	movs	r3, #128	; 0x80
 8004d4e:	e012      	b.n	8004d76 <UART_SetConfig+0xf4e>
 8004d50:	2340      	movs	r3, #64	; 0x40
 8004d52:	e010      	b.n	8004d76 <UART_SetConfig+0xf4e>
 8004d54:	2320      	movs	r3, #32
 8004d56:	e00e      	b.n	8004d76 <UART_SetConfig+0xf4e>
 8004d58:	2310      	movs	r3, #16
 8004d5a:	e00c      	b.n	8004d76 <UART_SetConfig+0xf4e>
 8004d5c:	230c      	movs	r3, #12
 8004d5e:	e00a      	b.n	8004d76 <UART_SetConfig+0xf4e>
 8004d60:	230a      	movs	r3, #10
 8004d62:	e008      	b.n	8004d76 <UART_SetConfig+0xf4e>
 8004d64:	2308      	movs	r3, #8
 8004d66:	e006      	b.n	8004d76 <UART_SetConfig+0xf4e>
 8004d68:	2306      	movs	r3, #6
 8004d6a:	e004      	b.n	8004d76 <UART_SetConfig+0xf4e>
 8004d6c:	2304      	movs	r3, #4
 8004d6e:	e002      	b.n	8004d76 <UART_SetConfig+0xf4e>
 8004d70:	2302      	movs	r3, #2
 8004d72:	e000      	b.n	8004d76 <UART_SetConfig+0xf4e>
 8004d74:	2301      	movs	r3, #1
 8004d76:	693a      	ldr	r2, [r7, #16]
 8004d78:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	085b      	lsrs	r3, r3, #1
 8004d82:	441a      	add	r2, r3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	61fb      	str	r3, [r7, #28]
        break;
 8004d90:	e062      	b.n	8004e58 <UART_SetConfig+0x1030>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d04e      	beq.n	8004e38 <UART_SetConfig+0x1010>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d047      	beq.n	8004e32 <UART_SetConfig+0x100a>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da6:	2b02      	cmp	r3, #2
 8004da8:	d040      	beq.n	8004e2c <UART_SetConfig+0x1004>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dae:	2b03      	cmp	r3, #3
 8004db0:	d039      	beq.n	8004e26 <UART_SetConfig+0xffe>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db6:	2b04      	cmp	r3, #4
 8004db8:	d032      	beq.n	8004e20 <UART_SetConfig+0xff8>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dbe:	2b05      	cmp	r3, #5
 8004dc0:	d02b      	beq.n	8004e1a <UART_SetConfig+0xff2>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc6:	2b06      	cmp	r3, #6
 8004dc8:	d024      	beq.n	8004e14 <UART_SetConfig+0xfec>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dce:	2b07      	cmp	r3, #7
 8004dd0:	d01d      	beq.n	8004e0e <UART_SetConfig+0xfe6>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd6:	2b08      	cmp	r3, #8
 8004dd8:	d016      	beq.n	8004e08 <UART_SetConfig+0xfe0>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dde:	2b09      	cmp	r3, #9
 8004de0:	d00f      	beq.n	8004e02 <UART_SetConfig+0xfda>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de6:	2b0a      	cmp	r3, #10
 8004de8:	d008      	beq.n	8004dfc <UART_SetConfig+0xfd4>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dee:	2b0b      	cmp	r3, #11
 8004df0:	d101      	bne.n	8004df6 <UART_SetConfig+0xfce>
 8004df2:	2380      	movs	r3, #128	; 0x80
 8004df4:	e022      	b.n	8004e3c <UART_SetConfig+0x1014>
 8004df6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004dfa:	e01f      	b.n	8004e3c <UART_SetConfig+0x1014>
 8004dfc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e00:	e01c      	b.n	8004e3c <UART_SetConfig+0x1014>
 8004e02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e06:	e019      	b.n	8004e3c <UART_SetConfig+0x1014>
 8004e08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e0c:	e016      	b.n	8004e3c <UART_SetConfig+0x1014>
 8004e0e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004e12:	e013      	b.n	8004e3c <UART_SetConfig+0x1014>
 8004e14:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8004e18:	e010      	b.n	8004e3c <UART_SetConfig+0x1014>
 8004e1a:	f640 43cc 	movw	r3, #3276	; 0xccc
 8004e1e:	e00d      	b.n	8004e3c <UART_SetConfig+0x1014>
 8004e20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e24:	e00a      	b.n	8004e3c <UART_SetConfig+0x1014>
 8004e26:	f241 5355 	movw	r3, #5461	; 0x1555
 8004e2a:	e007      	b.n	8004e3c <UART_SetConfig+0x1014>
 8004e2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004e30:	e004      	b.n	8004e3c <UART_SetConfig+0x1014>
 8004e32:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004e36:	e001      	b.n	8004e3c <UART_SetConfig+0x1014>
 8004e38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	6852      	ldr	r2, [r2, #4]
 8004e40:	0852      	lsrs	r2, r2, #1
 8004e42:	441a      	add	r2, r3
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	61fb      	str	r3, [r7, #28]
        break;
 8004e50:	e002      	b.n	8004e58 <UART_SetConfig+0x1030>
      default:
        ret = HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	76fb      	strb	r3, [r7, #27]
        break;
 8004e56:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e58:	69fb      	ldr	r3, [r7, #28]
 8004e5a:	2b0f      	cmp	r3, #15
 8004e5c:	d908      	bls.n	8004e70 <UART_SetConfig+0x1048>
 8004e5e:	69fb      	ldr	r3, [r7, #28]
 8004e60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e64:	d204      	bcs.n	8004e70 <UART_SetConfig+0x1048>
    {
      huart->Instance->BRR = usartdiv;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	69fa      	ldr	r2, [r7, #28]
 8004e6c:	60da      	str	r2, [r3, #12]
 8004e6e:	e001      	b.n	8004e74 <UART_SetConfig+0x104c>
    }
    else
    {
      ret = HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	76fb      	strb	r3, [r7, #27]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8004e90:	7efb      	ldrb	r3, [r7, #27]
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	372c      	adds	r7, #44	; 0x2c
 8004e96:	46bd      	mov	sp, r7
 8004e98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004e9c:	00f42400 	.word	0x00f42400
 8004ea0:	0001e848 	.word	0x0001e848
 8004ea4:	0003d090 	.word	0x0003d090
 8004ea8:	0007a120 	.word	0x0007a120
 8004eac:	000f4240 	.word	0x000f4240
 8004eb0:	00145855 	.word	0x00145855
 8004eb4:	00186a00 	.word	0x00186a00
 8004eb8:	001e8480 	.word	0x001e8480
 8004ebc:	0028b0aa 	.word	0x0028b0aa
 8004ec0:	003d0900 	.word	0x003d0900
 8004ec4:	007a1200 	.word	0x007a1200

08004ec8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b083      	sub	sp, #12
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed4:	f003 0301 	and.w	r3, r3, #1
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d00a      	beq.n	8004ef2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	6812      	ldr	r2, [r2, #0]
 8004ee4:	6852      	ldr	r2, [r2, #4]
 8004ee6:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004eee:	430a      	orrs	r2, r1
 8004ef0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ef6:	f003 0302 	and.w	r3, r3, #2
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d00a      	beq.n	8004f14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	6812      	ldr	r2, [r2, #0]
 8004f06:	6852      	ldr	r2, [r2, #4]
 8004f08:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004f10:	430a      	orrs	r2, r1
 8004f12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f18:	f003 0304 	and.w	r3, r3, #4
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d00a      	beq.n	8004f36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	6812      	ldr	r2, [r2, #0]
 8004f28:	6852      	ldr	r2, [r2, #4]
 8004f2a:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004f32:	430a      	orrs	r2, r1
 8004f34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f3a:	f003 0308 	and.w	r3, r3, #8
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d00a      	beq.n	8004f58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	6812      	ldr	r2, [r2, #0]
 8004f4a:	6852      	ldr	r2, [r2, #4]
 8004f4c:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004f54:	430a      	orrs	r2, r1
 8004f56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f5c:	f003 0310 	and.w	r3, r3, #16
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d00a      	beq.n	8004f7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	6812      	ldr	r2, [r2, #0]
 8004f6c:	6892      	ldr	r2, [r2, #8]
 8004f6e:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004f76:	430a      	orrs	r2, r1
 8004f78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f7e:	f003 0320 	and.w	r3, r3, #32
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d00a      	beq.n	8004f9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	6812      	ldr	r2, [r2, #0]
 8004f8e:	6892      	ldr	r2, [r2, #8]
 8004f90:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004f98:	430a      	orrs	r2, r1
 8004f9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d01a      	beq.n	8004fde <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	6812      	ldr	r2, [r2, #0]
 8004fb0:	6852      	ldr	r2, [r2, #4]
 8004fb2:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004fba:	430a      	orrs	r2, r1
 8004fbc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fc2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fc6:	d10a      	bne.n	8004fde <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	6812      	ldr	r2, [r2, #0]
 8004fd0:	6852      	ldr	r2, [r2, #4]
 8004fd2:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004fda:	430a      	orrs	r2, r1
 8004fdc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d00a      	beq.n	8005000 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	6812      	ldr	r2, [r2, #0]
 8004ff2:	6852      	ldr	r2, [r2, #4]
 8004ff4:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 8004ff8:	687a      	ldr	r2, [r7, #4]
 8004ffa:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004ffc:	430a      	orrs	r2, r1
 8004ffe:	605a      	str	r2, [r3, #4]
  }
}
 8005000:	bf00      	nop
 8005002:	370c      	adds	r7, #12
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr

0800500c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b086      	sub	sp, #24
 8005010:	af02      	add	r7, sp, #8
 8005012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800501c:	f7fb faac 	bl	8000578 <HAL_GetTick>
 8005020:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 0308 	and.w	r3, r3, #8
 800502c:	2b08      	cmp	r3, #8
 800502e:	d10e      	bne.n	800504e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005030:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005034:	9300      	str	r3, [sp, #0]
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2200      	movs	r2, #0
 800503a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f000 f82c 	bl	800509c <UART_WaitOnFlagUntilTimeout>
 8005044:	4603      	mov	r3, r0
 8005046:	2b00      	cmp	r3, #0
 8005048:	d001      	beq.n	800504e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800504a:	2303      	movs	r3, #3
 800504c:	e022      	b.n	8005094 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 0304 	and.w	r3, r3, #4
 8005058:	2b04      	cmp	r3, #4
 800505a:	d10e      	bne.n	800507a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800505c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005060:	9300      	str	r3, [sp, #0]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2200      	movs	r2, #0
 8005066:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f000 f816 	bl	800509c <UART_WaitOnFlagUntilTimeout>
 8005070:	4603      	mov	r3, r0
 8005072:	2b00      	cmp	r3, #0
 8005074:	d001      	beq.n	800507a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005076:	2303      	movs	r3, #3
 8005078:	e00c      	b.n	8005094 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2220      	movs	r2, #32
 800507e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2220      	movs	r2, #32
 8005086:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005092:	2300      	movs	r3, #0
}
 8005094:	4618      	mov	r0, r3
 8005096:	3710      	adds	r7, #16
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}

0800509c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b084      	sub	sp, #16
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	60f8      	str	r0, [r7, #12]
 80050a4:	60b9      	str	r1, [r7, #8]
 80050a6:	603b      	str	r3, [r7, #0]
 80050a8:	4613      	mov	r3, r2
 80050aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050ac:	e062      	b.n	8005174 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050b4:	d05e      	beq.n	8005174 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050b6:	f7fb fa5f 	bl	8000578 <HAL_GetTick>
 80050ba:	4602      	mov	r2, r0
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	1ad2      	subs	r2, r2, r3
 80050c0:	69bb      	ldr	r3, [r7, #24]
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d802      	bhi.n	80050cc <UART_WaitOnFlagUntilTimeout+0x30>
 80050c6:	69bb      	ldr	r3, [r7, #24]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d11d      	bne.n	8005108 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	68fa      	ldr	r2, [r7, #12]
 80050d2:	6812      	ldr	r2, [r2, #0]
 80050d4:	6812      	ldr	r2, [r2, #0]
 80050d6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80050da:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	6812      	ldr	r2, [r2, #0]
 80050e4:	6892      	ldr	r2, [r2, #8]
 80050e6:	f022 0201 	bic.w	r2, r2, #1
 80050ea:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2220      	movs	r2, #32
 80050f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2220      	movs	r2, #32
 80050f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2200      	movs	r2, #0
 8005100:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005104:	2303      	movs	r3, #3
 8005106:	e045      	b.n	8005194 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 0304 	and.w	r3, r3, #4
 8005112:	2b00      	cmp	r3, #0
 8005114:	d02e      	beq.n	8005174 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	69db      	ldr	r3, [r3, #28]
 800511c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005120:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005124:	d126      	bne.n	8005174 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800512e:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	68fa      	ldr	r2, [r7, #12]
 8005136:	6812      	ldr	r2, [r2, #0]
 8005138:	6812      	ldr	r2, [r2, #0]
 800513a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800513e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	68fa      	ldr	r2, [r7, #12]
 8005146:	6812      	ldr	r2, [r2, #0]
 8005148:	6892      	ldr	r2, [r2, #8]
 800514a:	f022 0201 	bic.w	r2, r2, #1
 800514e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2220      	movs	r2, #32
 8005154:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2220      	movs	r2, #32
 800515c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2220      	movs	r2, #32
 8005164:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2200      	movs	r2, #0
 800516c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 8005170:	2303      	movs	r3, #3
 8005172:	e00f      	b.n	8005194 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	69da      	ldr	r2, [r3, #28]
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	401a      	ands	r2, r3
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	429a      	cmp	r2, r3
 8005182:	bf0c      	ite	eq
 8005184:	2301      	moveq	r3, #1
 8005186:	2300      	movne	r3, #0
 8005188:	b2db      	uxtb	r3, r3
 800518a:	461a      	mov	r2, r3
 800518c:	79fb      	ldrb	r3, [r7, #7]
 800518e:	429a      	cmp	r2, r3
 8005190:	d08d      	beq.n	80050ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005192:	2300      	movs	r3, #0
}
 8005194:	4618      	mov	r0, r3
 8005196:	3710      	adds	r7, #16
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}

0800519c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800519c:	b480      	push	{r7}
 800519e:	b085      	sub	sp, #20
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d101      	bne.n	80051b2 <HAL_UARTEx_DisableFifoMode+0x16>
 80051ae:	2302      	movs	r3, #2
 80051b0:	e027      	b.n	8005202 <HAL_UARTEx_DisableFifoMode+0x66>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2201      	movs	r2, #1
 80051b6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2224      	movs	r2, #36	; 0x24
 80051be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	6812      	ldr	r2, [r2, #0]
 80051d2:	6812      	ldr	r2, [r2, #0]
 80051d4:	f022 0201 	bic.w	r2, r2, #1
 80051d8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80051e0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	68fa      	ldr	r2, [r7, #12]
 80051ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2220      	movs	r2, #32
 80051f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005200:	2300      	movs	r3, #0
}
 8005202:	4618      	mov	r0, r3
 8005204:	3714      	adds	r7, #20
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr

0800520e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800520e:	b580      	push	{r7, lr}
 8005210:	b084      	sub	sp, #16
 8005212:	af00      	add	r7, sp, #0
 8005214:	6078      	str	r0, [r7, #4]
 8005216:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800521e:	2b01      	cmp	r3, #1
 8005220:	d101      	bne.n	8005226 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005222:	2302      	movs	r3, #2
 8005224:	e02d      	b.n	8005282 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2201      	movs	r2, #1
 800522a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2224      	movs	r2, #36	; 0x24
 8005232:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	6812      	ldr	r2, [r2, #0]
 8005246:	6812      	ldr	r2, [r2, #0]
 8005248:	f022 0201 	bic.w	r2, r2, #1
 800524c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	6812      	ldr	r2, [r2, #0]
 8005256:	6892      	ldr	r2, [r2, #8]
 8005258:	f022 4160 	bic.w	r1, r2, #3758096384	; 0xe0000000
 800525c:	683a      	ldr	r2, [r7, #0]
 800525e:	430a      	orrs	r2, r1
 8005260:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f000 f850 	bl	8005308 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	68fa      	ldr	r2, [r7, #12]
 800526e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2220      	movs	r2, #32
 8005274:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005280:	2300      	movs	r3, #0
}
 8005282:	4618      	mov	r0, r3
 8005284:	3710      	adds	r7, #16
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}

0800528a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800528a:	b580      	push	{r7, lr}
 800528c:	b084      	sub	sp, #16
 800528e:	af00      	add	r7, sp, #0
 8005290:	6078      	str	r0, [r7, #4]
 8005292:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800529a:	2b01      	cmp	r3, #1
 800529c:	d101      	bne.n	80052a2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800529e:	2302      	movs	r3, #2
 80052a0:	e02d      	b.n	80052fe <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2201      	movs	r2, #1
 80052a6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2224      	movs	r2, #36	; 0x24
 80052ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	6812      	ldr	r2, [r2, #0]
 80052c2:	6812      	ldr	r2, [r2, #0]
 80052c4:	f022 0201 	bic.w	r2, r2, #1
 80052c8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	6812      	ldr	r2, [r2, #0]
 80052d2:	6892      	ldr	r2, [r2, #8]
 80052d4:	f022 6160 	bic.w	r1, r2, #234881024	; 0xe000000
 80052d8:	683a      	ldr	r2, [r7, #0]
 80052da:	430a      	orrs	r2, r1
 80052dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f000 f812 	bl	8005308 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	68fa      	ldr	r2, [r7, #12]
 80052ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2220      	movs	r2, #32
 80052f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2200      	movs	r2, #0
 80052f8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80052fc:	2300      	movs	r3, #0
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3710      	adds	r7, #16
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
	...

08005308 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005308:	b480      	push	{r7}
 800530a:	b089      	sub	sp, #36	; 0x24
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8005310:	4a2f      	ldr	r2, [pc, #188]	; (80053d0 <UARTEx_SetNbDataToProcess+0xc8>)
 8005312:	f107 0314 	add.w	r3, r7, #20
 8005316:	e892 0003 	ldmia.w	r2, {r0, r1}
 800531a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800531e:	4a2d      	ldr	r2, [pc, #180]	; (80053d4 <UARTEx_SetNbDataToProcess+0xcc>)
 8005320:	f107 030c 	add.w	r3, r7, #12
 8005324:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005328:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005330:	2b00      	cmp	r3, #0
 8005332:	d108      	bne.n	8005346 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2201      	movs	r2, #1
 8005340:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005344:	e03d      	b.n	80053c2 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005346:	2308      	movs	r3, #8
 8005348:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800534a:	2308      	movs	r3, #8
 800534c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	0e5b      	lsrs	r3, r3, #25
 8005356:	b2db      	uxtb	r3, r3
 8005358:	f003 0307 	and.w	r3, r3, #7
 800535c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	0f5b      	lsrs	r3, r3, #29
 8005366:	b2db      	uxtb	r3, r3
 8005368:	f003 0307 	and.w	r3, r3, #7
 800536c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800536e:	7fbb      	ldrb	r3, [r7, #30]
 8005370:	7f3a      	ldrb	r2, [r7, #28]
 8005372:	f107 0120 	add.w	r1, r7, #32
 8005376:	440a      	add	r2, r1
 8005378:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800537c:	fb02 f303 	mul.w	r3, r2, r3
 8005380:	7f3a      	ldrb	r2, [r7, #28]
 8005382:	f107 0120 	add.w	r1, r7, #32
 8005386:	440a      	add	r2, r1
 8005388:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800538c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005390:	b29a      	uxth	r2, r3
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8005398:	7ffb      	ldrb	r3, [r7, #31]
 800539a:	7f7a      	ldrb	r2, [r7, #29]
 800539c:	f107 0120 	add.w	r1, r7, #32
 80053a0:	440a      	add	r2, r1
 80053a2:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80053a6:	fb02 f303 	mul.w	r3, r2, r3
 80053aa:	7f7a      	ldrb	r2, [r7, #29]
 80053ac:	f107 0120 	add.w	r1, r7, #32
 80053b0:	440a      	add	r2, r1
 80053b2:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80053b6:	fb93 f3f2 	sdiv	r3, r3, r2
 80053ba:	b29a      	uxth	r2, r3
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80053c2:	bf00      	nop
 80053c4:	3724      	adds	r7, #36	; 0x24
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr
 80053ce:	bf00      	nop
 80053d0:	08006504 	.word	0x08006504
 80053d4:	0800650c 	.word	0x0800650c

080053d8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80053d8:	b480      	push	{r7}
 80053da:	b085      	sub	sp, #20
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80053e0:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80053e4:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80053ec:	b29a      	uxth	r2, r3
 80053ee:	89fb      	ldrh	r3, [r7, #14]
 80053f0:	4313      	orrs	r3, r2
 80053f2:	b29a      	uxth	r2, r3
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80053fa:	2300      	movs	r3, #0
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3714      	adds	r7, #20
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr

08005408 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005408:	b480      	push	{r7}
 800540a:	b085      	sub	sp, #20
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005410:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005414:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800541c:	b29b      	uxth	r3, r3
 800541e:	b21a      	sxth	r2, r3
 8005420:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005424:	43db      	mvns	r3, r3
 8005426:	b21b      	sxth	r3, r3
 8005428:	4013      	ands	r3, r2
 800542a:	b21b      	sxth	r3, r3
 800542c:	b29a      	uxth	r2, r3
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005434:	2300      	movs	r3, #0
}
 8005436:	4618      	mov	r0, r3
 8005438:	3714      	adds	r7, #20
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr

08005442 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005442:	b084      	sub	sp, #16
 8005444:	b580      	push	{r7, lr}
 8005446:	b082      	sub	sp, #8
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	f107 0014 	add.w	r0, r7, #20
 8005450:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2201      	movs	r2, #1
 8005458:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2200      	movs	r2, #0
 8005460:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2200      	movs	r2, #0
 8005470:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f7ff ffaf 	bl	80053d8 <USB_EnableGlobalInt>

  return HAL_OK;
 800547a:	2300      	movs	r3, #0
}
 800547c:	4618      	mov	r0, r3
 800547e:	3708      	adds	r7, #8
 8005480:	46bd      	mov	sp, r7
 8005482:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005486:	b004      	add	sp, #16
 8005488:	4770      	bx	lr
	...

0800548c <leds_resetNotes>:

static uint8_t led_data[2 + (NUM_LEDS * 12)];
static uint8_t note_colors[] = {12,0,0, 0,12,0, 12,12,0, 12,0,12};
static int deleteOffset[] = {-1, -1, -1, -1};

void leds_resetNotes() {
 800548c:	b580      	push	{r7, lr}
 800548e:	b082      	sub	sp, #8
 8005490:	af00      	add	r7, sp, #0
	for(int led = 0; led<24; ++led) {
 8005492:	2300      	movs	r3, #0
 8005494:	607b      	str	r3, [r7, #4]
 8005496:	e008      	b.n	80054aa <leds_resetNotes+0x1e>
		setLedColor(led, 0, 0, 0);
 8005498:	2300      	movs	r3, #0
 800549a:	2200      	movs	r2, #0
 800549c:	2100      	movs	r1, #0
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f000 f87e 	bl	80055a0 <setLedColor>
	for(int led = 0; led<24; ++led) {
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	3301      	adds	r3, #1
 80054a8:	607b      	str	r3, [r7, #4]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2b17      	cmp	r3, #23
 80054ae:	ddf3      	ble.n	8005498 <leds_resetNotes+0xc>
	}
	for(int voice=0; voice<4; ++voice) {
 80054b0:	2300      	movs	r3, #0
 80054b2:	603b      	str	r3, [r7, #0]
 80054b4:	e008      	b.n	80054c8 <leds_resetNotes+0x3c>
		deleteOffset[voice] = -1;
 80054b6:	4a08      	ldr	r2, [pc, #32]	; (80054d8 <leds_resetNotes+0x4c>)
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	f04f 31ff 	mov.w	r1, #4294967295
 80054be:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int voice=0; voice<4; ++voice) {
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	3301      	adds	r3, #1
 80054c6:	603b      	str	r3, [r7, #0]
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	2b03      	cmp	r3, #3
 80054cc:	ddf3      	ble.n	80054b6 <leds_resetNotes+0x2a>
	}
}
 80054ce:	bf00      	nop
 80054d0:	3708      	adds	r7, #8
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
 80054d6:	bf00      	nop
 80054d8:	20000018 	.word	0x20000018

080054dc <leds_playNote>:

void leds_playNote(int voice) {
 80054dc:	b590      	push	{r4, r7, lr}
 80054de:	b087      	sub	sp, #28
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
	int ledOffset = voice * 6;
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	4613      	mov	r3, r2
 80054e8:	005b      	lsls	r3, r3, #1
 80054ea:	4413      	add	r3, r2
 80054ec:	005b      	lsls	r3, r3, #1
 80054ee:	613b      	str	r3, [r7, #16]
	int colorOffset = voice * 3;
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	4613      	mov	r3, r2
 80054f4:	005b      	lsls	r3, r3, #1
 80054f6:	4413      	add	r3, r2
 80054f8:	60fb      	str	r3, [r7, #12]
	deleteOffset[voice] = ledOffset + 5;
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	1d5a      	adds	r2, r3, #5
 80054fe:	4912      	ldr	r1, [pc, #72]	; (8005548 <leds_playNote+0x6c>)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i=0; i<6; ++i) {
 8005506:	2300      	movs	r3, #0
 8005508:	617b      	str	r3, [r7, #20]
 800550a:	e016      	b.n	800553a <leds_playNote+0x5e>
		setLedColor(ledOffset + i, note_colors[colorOffset], note_colors[colorOffset+1], note_colors[colorOffset+2]);
 800550c:	693a      	ldr	r2, [r7, #16]
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	18d0      	adds	r0, r2, r3
 8005512:	4a0e      	ldr	r2, [pc, #56]	; (800554c <leds_playNote+0x70>)
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	4413      	add	r3, r2
 8005518:	781b      	ldrb	r3, [r3, #0]
 800551a:	4619      	mov	r1, r3
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	3301      	adds	r3, #1
 8005520:	4a0a      	ldr	r2, [pc, #40]	; (800554c <leds_playNote+0x70>)
 8005522:	5cd3      	ldrb	r3, [r2, r3]
 8005524:	461c      	mov	r4, r3
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	3302      	adds	r3, #2
 800552a:	4a08      	ldr	r2, [pc, #32]	; (800554c <leds_playNote+0x70>)
 800552c:	5cd3      	ldrb	r3, [r2, r3]
 800552e:	4622      	mov	r2, r4
 8005530:	f000 f836 	bl	80055a0 <setLedColor>
	for(int i=0; i<6; ++i) {
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	3301      	adds	r3, #1
 8005538:	617b      	str	r3, [r7, #20]
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	2b05      	cmp	r3, #5
 800553e:	dde5      	ble.n	800550c <leds_playNote+0x30>
	}
}
 8005540:	bf00      	nop
 8005542:	371c      	adds	r7, #28
 8005544:	46bd      	mov	sp, r7
 8005546:	bd90      	pop	{r4, r7, pc}
 8005548:	20000018 	.word	0x20000018
 800554c:	2000000c 	.word	0x2000000c

08005550 <leds_scrollNote>:

void leds_scrollNote(int voice) {
 8005550:	b580      	push	{r7, lr}
 8005552:	b084      	sub	sp, #16
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
	int delOffset = deleteOffset[voice];
 8005558:	4a10      	ldr	r2, [pc, #64]	; (800559c <leds_scrollNote+0x4c>)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005560:	60fb      	str	r3, [r7, #12]
	if (delOffset > voice * 6) {
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	4613      	mov	r3, r2
 8005566:	005b      	lsls	r3, r3, #1
 8005568:	4413      	add	r3, r2
 800556a:	005b      	lsls	r3, r3, #1
 800556c:	461a      	mov	r2, r3
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	429a      	cmp	r2, r3
 8005572:	da0e      	bge.n	8005592 <leds_scrollNote+0x42>
		setLedColor(delOffset, 0, 0, 0);
 8005574:	2300      	movs	r3, #0
 8005576:	2200      	movs	r2, #0
 8005578:	2100      	movs	r1, #0
 800557a:	68f8      	ldr	r0, [r7, #12]
 800557c:	f000 f810 	bl	80055a0 <setLedColor>
		--deleteOffset[voice];
 8005580:	4a06      	ldr	r2, [pc, #24]	; (800559c <leds_scrollNote+0x4c>)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005588:	1e5a      	subs	r2, r3, #1
 800558a:	4904      	ldr	r1, [pc, #16]	; (800559c <leds_scrollNote+0x4c>)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}
}
 8005592:	bf00      	nop
 8005594:	3710      	adds	r7, #16
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}
 800559a:	bf00      	nop
 800559c:	20000018 	.word	0x20000018

080055a0 <setLedColor>:

void setLedColor(int led, int red, int green, int blue) {
 80055a0:	b480      	push	{r7}
 80055a2:	b08b      	sub	sp, #44	; 0x2c
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	60b9      	str	r1, [r7, #8]
 80055aa:	607a      	str	r2, [r7, #4]
 80055ac:	603b      	str	r3, [r7, #0]
	int offset = 2 + (led * 12);
 80055ae:	68fa      	ldr	r2, [r7, #12]
 80055b0:	4613      	mov	r3, r2
 80055b2:	005b      	lsls	r3, r3, #1
 80055b4:	4413      	add	r3, r2
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	3302      	adds	r3, #2
 80055ba:	627b      	str	r3, [r7, #36]	; 0x24

	int color = (green << 16) + (red << 8) + blue;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	041a      	lsls	r2, r3, #16
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	021b      	lsls	r3, r3, #8
 80055c4:	441a      	add	r2, r3
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	4413      	add	r3, r2
 80055ca:	623b      	str	r3, [r7, #32]
	int highQuartet = 1;
 80055cc:	2301      	movs	r3, #1
 80055ce:	61fb      	str	r3, [r7, #28]
	uint8_t byte = 0;
 80055d0:	2300      	movs	r3, #0
 80055d2:	76fb      	strb	r3, [r7, #27]
	for(int bit= 0; bit<24; ++bit) {
 80055d4:	2300      	movs	r3, #0
 80055d6:	617b      	str	r3, [r7, #20]
 80055d8:	e028      	b.n	800562c <setLedColor+0x8c>
		int value = (color >> 23) & 1;	// 0 or 1
 80055da:	6a3b      	ldr	r3, [r7, #32]
 80055dc:	15db      	asrs	r3, r3, #23
 80055de:	f003 0301 	and.w	r3, r3, #1
 80055e2:	613b      	str	r3, [r7, #16]

		if (highQuartet) {
 80055e4:	69fb      	ldr	r3, [r7, #28]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d007      	beq.n	80055fa <setLedColor+0x5a>
			// set high quartet part
			byte = (value == 0) ? 0x80 : 0xC0;
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d101      	bne.n	80055f4 <setLedColor+0x54>
 80055f0:	2380      	movs	r3, #128	; 0x80
 80055f2:	e000      	b.n	80055f6 <setLedColor+0x56>
 80055f4:	23c0      	movs	r3, #192	; 0xc0
 80055f6:	76fb      	strb	r3, [r7, #27]
 80055f8:	e00e      	b.n	8005618 <setLedColor+0x78>
		} else {
			// add low quartet part, and set buffer
			byte += (value == 0) ? 0x08 : 0x0C;
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d101      	bne.n	8005604 <setLedColor+0x64>
 8005600:	2208      	movs	r2, #8
 8005602:	e000      	b.n	8005606 <setLedColor+0x66>
 8005604:	220c      	movs	r2, #12
 8005606:	7efb      	ldrb	r3, [r7, #27]
 8005608:	4413      	add	r3, r2
 800560a:	76fb      	strb	r3, [r7, #27]
			led_data[offset++] = byte;
 800560c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560e:	1c5a      	adds	r2, r3, #1
 8005610:	627a      	str	r2, [r7, #36]	; 0x24
 8005612:	490b      	ldr	r1, [pc, #44]	; (8005640 <setLedColor+0xa0>)
 8005614:	7efa      	ldrb	r2, [r7, #27]
 8005616:	54ca      	strb	r2, [r1, r3]
		}
		highQuartet = 1 - highQuartet;	// invert true/false
 8005618:	69fb      	ldr	r3, [r7, #28]
 800561a:	f1c3 0301 	rsb	r3, r3, #1
 800561e:	61fb      	str	r3, [r7, #28]

		color = color << 1;
 8005620:	6a3b      	ldr	r3, [r7, #32]
 8005622:	005b      	lsls	r3, r3, #1
 8005624:	623b      	str	r3, [r7, #32]
	for(int bit= 0; bit<24; ++bit) {
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	3301      	adds	r3, #1
 800562a:	617b      	str	r3, [r7, #20]
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	2b17      	cmp	r3, #23
 8005630:	ddd3      	ble.n	80055da <setLedColor+0x3a>
	}
}
 8005632:	bf00      	nop
 8005634:	372c      	adds	r7, #44	; 0x2c
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr
 800563e:	bf00      	nop
 8005640:	20000254 	.word	0x20000254

08005644 <resetLeds>:
	for(int led=0; led<NUM_LEDS; ++ led) {
		setLedColor(led, red, green, blue);
	}
}

void resetLeds() {
 8005644:	b580      	push	{r7, lr}
 8005646:	b082      	sub	sp, #8
 8005648:	af00      	add	r7, sp, #0
	for(int i=0; i<NUM_LEDS; ++i) {
 800564a:	2300      	movs	r3, #0
 800564c:	607b      	str	r3, [r7, #4]
 800564e:	e008      	b.n	8005662 <resetLeds+0x1e>
		setLedColor(i, 0,0,0);
 8005650:	2300      	movs	r3, #0
 8005652:	2200      	movs	r2, #0
 8005654:	2100      	movs	r1, #0
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f7ff ffa2 	bl	80055a0 <setLedColor>
	for(int i=0; i<NUM_LEDS; ++i) {
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	3301      	adds	r3, #1
 8005660:	607b      	str	r3, [r7, #4]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2b17      	cmp	r3, #23
 8005666:	ddf3      	ble.n	8005650 <resetLeds+0xc>
	}
}
 8005668:	bf00      	nop
 800566a:	3708      	adds	r7, #8
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}

08005670 <updateLeds>:

void updateLeds(SPI_HandleTypeDef * spi) {
 8005670:	b580      	push	{r7, lr}
 8005672:	b082      	sub	sp, #8
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
	HAL_SPI_Transmit_DMA(spi, led_data, sizeof(led_data));
 8005678:	f44f 7291 	mov.w	r2, #290	; 0x122
 800567c:	4905      	ldr	r1, [pc, #20]	; (8005694 <updateLeds+0x24>)
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f7fe f8ba 	bl	80037f8 <HAL_SPI_Transmit_DMA>
	HAL_Delay(1);
 8005684:	2001      	movs	r0, #1
 8005686:	f7fa ff8f 	bl	80005a8 <HAL_Delay>
}
 800568a:	bf00      	nop
 800568c:	3708      	adds	r7, #8
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
 8005692:	bf00      	nop
 8005694:	20000254 	.word	0x20000254

08005698 <LL_RCC_LSE_SetDriveCapability>:
{
 8005698:	b480      	push	{r7}
 800569a:	b083      	sub	sp, #12
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80056a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80056a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056ac:	f023 0218 	bic.w	r2, r3, #24
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80056b8:	bf00      	nop
 80056ba:	370c      	adds	r7, #12
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr

080056c4 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b085      	sub	sp, #20
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80056cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80056d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056d4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4313      	orrs	r3, r2
 80056da:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80056dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	4013      	ands	r3, r2
 80056e6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80056e8:	68fb      	ldr	r3, [r7, #12]
}
 80056ea:	bf00      	nop
 80056ec:	3714      	adds	r7, #20
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr

080056f6 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_ADC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80056f6:	b480      	push	{r7}
 80056f8:	b085      	sub	sp, #20
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80056fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005702:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005706:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	4313      	orrs	r3, r2
 800570c:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800570e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005712:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	4013      	ands	r3, r2
 8005718:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800571a:	68fb      	ldr	r3, [r7, #12]
}
 800571c:	bf00      	nop
 800571e:	3714      	adds	r7, #20
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr

08005728 <resetAll>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void resetAll() {
 8005728:	b580      	push	{r7, lr}
 800572a:	af00      	add	r7, sp, #0
	patternOffset = 0;
 800572c:	4b03      	ldr	r3, [pc, #12]	; (800573c <resetAll+0x14>)
 800572e:	2200      	movs	r2, #0
 8005730:	601a      	str	r2, [r3, #0]
	leds_resetNotes();
 8005732:	f7ff feab 	bl	800548c <leds_resetNotes>
}
 8005736:	bf00      	nop
 8005738:	bd80      	pop	{r7, pc}
 800573a:	bf00      	nop
 800573c:	20000380 	.word	0x20000380

08005740 <printScore>:
		  setLedColor(16+led, 0, col, col);
		  setLedColor(20+led, col, col, 0);
	  }
}

void printScore() {
 8005740:	b580      	push	{r7, lr}
 8005742:	b084      	sub	sp, #16
 8005744:	af00      	add	r7, sp, #0
	char text[4] = {' ', ' ', ' ', ' '};
 8005746:	4b19      	ldr	r3, [pc, #100]	; (80057ac <printScore+0x6c>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	607b      	str	r3, [r7, #4]
	int left = scoreRed % 10;
 800574c:	4b18      	ldr	r3, [pc, #96]	; (80057b0 <printScore+0x70>)
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	4b18      	ldr	r3, [pc, #96]	; (80057b4 <printScore+0x74>)
 8005752:	fb83 1302 	smull	r1, r3, r3, r2
 8005756:	1099      	asrs	r1, r3, #2
 8005758:	17d3      	asrs	r3, r2, #31
 800575a:	1ac9      	subs	r1, r1, r3
 800575c:	460b      	mov	r3, r1
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	440b      	add	r3, r1
 8005762:	005b      	lsls	r3, r3, #1
 8005764:	1ad3      	subs	r3, r2, r3
 8005766:	60fb      	str	r3, [r7, #12]
	int right = scoreYellow % 10;
 8005768:	4b13      	ldr	r3, [pc, #76]	; (80057b8 <printScore+0x78>)
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	4b11      	ldr	r3, [pc, #68]	; (80057b4 <printScore+0x74>)
 800576e:	fb83 1302 	smull	r1, r3, r3, r2
 8005772:	1099      	asrs	r1, r3, #2
 8005774:	17d3      	asrs	r3, r2, #31
 8005776:	1ac9      	subs	r1, r1, r3
 8005778:	460b      	mov	r3, r1
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	440b      	add	r3, r1
 800577e:	005b      	lsls	r3, r3, #1
 8005780:	1ad3      	subs	r3, r2, r3
 8005782:	60bb      	str	r3, [r7, #8]
	text[0] = '0' + left;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	b2db      	uxtb	r3, r3
 8005788:	3330      	adds	r3, #48	; 0x30
 800578a:	b2db      	uxtb	r3, r3
 800578c:	713b      	strb	r3, [r7, #4]
	text[3] = '0' + right;
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	b2db      	uxtb	r3, r3
 8005792:	3330      	adds	r3, #48	; 0x30
 8005794:	b2db      	uxtb	r3, r3
 8005796:	71fb      	strb	r3, [r7, #7]
	segments_print(&hi2c1, 0x70, text);
 8005798:	1d3b      	adds	r3, r7, #4
 800579a:	461a      	mov	r2, r3
 800579c:	2170      	movs	r1, #112	; 0x70
 800579e:	4807      	ldr	r0, [pc, #28]	; (80057bc <printScore+0x7c>)
 80057a0:	f000 fb82 	bl	8005ea8 <segments_print>
}
 80057a4:	bf00      	nop
 80057a6:	3710      	adds	r7, #16
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}
 80057ac:	08006514 	.word	0x08006514
 80057b0:	20000378 	.word	0x20000378
 80057b4:	66666667 	.word	0x66666667
 80057b8:	2000037c 	.word	0x2000037c
 80057bc:	20000388 	.word	0x20000388

080057c0 <printNotes>:

printNotes() {
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b084      	sub	sp, #16
 80057c4:	af00      	add	r7, sp, #0
	char text[4] = {' ', ' ', ' ', ' '};
 80057c6:	4b13      	ldr	r3, [pc, #76]	; (8005814 <printNotes+0x54>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	607b      	str	r3, [r7, #4]
	for(int i=0; i<4; ++i) {
 80057cc:	2300      	movs	r3, #0
 80057ce:	60fb      	str	r3, [r7, #12]
 80057d0:	e012      	b.n	80057f8 <printNotes+0x38>
		int note = pattern[patternOffset+i];
 80057d2:	4b11      	ldr	r3, [pc, #68]	; (8005818 <printNotes+0x58>)
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	4413      	add	r3, r2
 80057da:	4a10      	ldr	r2, [pc, #64]	; (800581c <printNotes+0x5c>)
 80057dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057e0:	60bb      	str	r3, [r7, #8]
		if (note > 0) {
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	dd04      	ble.n	80057f2 <printNotes+0x32>
			text[i] = '-';
 80057e8:	1d3a      	adds	r2, r7, #4
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	4413      	add	r3, r2
 80057ee:	222d      	movs	r2, #45	; 0x2d
 80057f0:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<4; ++i) {
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	3301      	adds	r3, #1
 80057f6:	60fb      	str	r3, [r7, #12]
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2b03      	cmp	r3, #3
 80057fc:	dde9      	ble.n	80057d2 <printNotes+0x12>
		}
	}
	segments_print(&hi2c1, 0x70, text);
 80057fe:	1d3b      	adds	r3, r7, #4
 8005800:	461a      	mov	r2, r3
 8005802:	2170      	movs	r1, #112	; 0x70
 8005804:	4806      	ldr	r0, [pc, #24]	; (8005820 <printNotes+0x60>)
 8005806:	f000 fb4f 	bl	8005ea8 <segments_print>
}
 800580a:	bf00      	nop
 800580c:	4618      	mov	r0, r3
 800580e:	3710      	adds	r7, #16
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}
 8005814:	08006514 	.word	0x08006514
 8005818:	20000380 	.word	0x20000380
 800581c:	20000028 	.word	0x20000028
 8005820:	20000388 	.word	0x20000388

08005824 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b088      	sub	sp, #32
 8005828:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800582a:	f7fa fe39 	bl	80004a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800582e:	f000 f87d 	bl	800592c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005832:	f000 fa29 	bl	8005c88 <MX_GPIO_Init>
  MX_DMA_Init();
 8005836:	f000 fa15 	bl	8005c64 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800583a:	f000 f99d 	bl	8005b78 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 800583e:	f000 f9e9 	bl	8005c14 <MX_USB_PCD_Init>
  MX_I2C1_Init();
 8005842:	f000 f91b 	bl	8005a7c <MX_I2C1_Init>
  MX_SPI1_Init();
 8005846:	f000 f959 	bl	8005afc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  segments_init(&hi2c1, 0x70);
 800584a:	2170      	movs	r1, #112	; 0x70
 800584c:	4833      	ldr	r0, [pc, #204]	; (800591c <main+0xf8>)
 800584e:	f000 fa76 	bl	8005d3e <segments_init>
  printScore();
 8005852:	f7ff ff75 	bl	8005740 <printScore>

  resetLeds();
 8005856:	f7ff fef5 	bl	8005644 <resetLeds>
//  initLedColors();
  updateLeds(&hspi1);
 800585a:	4831      	ldr	r0, [pc, #196]	; (8005920 <main+0xfc>)
 800585c:	f7ff ff08 	bl	8005670 <updateLeds>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  int speed = 2;
 8005860:	2302      	movs	r3, #2
 8005862:	60bb      	str	r3, [r7, #8]

  int waitValue = (140 - 3)/speed;
 8005864:	2289      	movs	r2, #137	; 0x89
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	fb92 f3f3 	sdiv	r3, r2, r3
 800586c:	607b      	str	r3, [r7, #4]

  int skip4 = 0;
 800586e:	2300      	movs	r3, #0
 8005870:	61fb      	str	r3, [r7, #28]

  while (1)
  {
	  for(int i=0; i<speed; ++i) {
 8005872:	2300      	movs	r3, #0
 8005874:	61bb      	str	r3, [r7, #24]
 8005876:	e012      	b.n	800589e <main+0x7a>
		  HAL_Delay(waitValue);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4618      	mov	r0, r3
 800587c:	f7fa fe94 	bl	80005a8 <HAL_Delay>
		  for(int voice=0; voice<4; ++voice) {
 8005880:	2300      	movs	r3, #0
 8005882:	617b      	str	r3, [r7, #20]
 8005884:	e005      	b.n	8005892 <main+0x6e>
			  leds_scrollNote(voice);
 8005886:	6978      	ldr	r0, [r7, #20]
 8005888:	f7ff fe62 	bl	8005550 <leds_scrollNote>
		  for(int voice=0; voice<4; ++voice) {
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	3301      	adds	r3, #1
 8005890:	617b      	str	r3, [r7, #20]
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	2b03      	cmp	r3, #3
 8005896:	ddf6      	ble.n	8005886 <main+0x62>
	  for(int i=0; i<speed; ++i) {
 8005898:	69bb      	ldr	r3, [r7, #24]
 800589a:	3301      	adds	r3, #1
 800589c:	61bb      	str	r3, [r7, #24]
 800589e:	69ba      	ldr	r2, [r7, #24]
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	429a      	cmp	r2, r3
 80058a4:	dbe8      	blt.n	8005878 <main+0x54>
		  }
	  }

	  printNotes();
 80058a6:	f7ff ff8b 	bl	80057c0 <printNotes>

	  if (skip4 == 0) {
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d10b      	bne.n	80058c8 <main+0xa4>
		  for(int voice=0; voice<4; ++voice) {
 80058b0:	2300      	movs	r3, #0
 80058b2:	613b      	str	r3, [r7, #16]
 80058b4:	e005      	b.n	80058c2 <main+0x9e>
//			  if (pattern[patternOffset + voice] > 0) {
				  leds_playNote(voice);
 80058b6:	6938      	ldr	r0, [r7, #16]
 80058b8:	f7ff fe10 	bl	80054dc <leds_playNote>
		  for(int voice=0; voice<4; ++voice) {
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	3301      	adds	r3, #1
 80058c0:	613b      	str	r3, [r7, #16]
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	2b03      	cmp	r3, #3
 80058c6:	ddf6      	ble.n	80058b6 <main+0x92>
//			  }
		  }
	  }
	  skip4 = ((skip4 + 1) & 3);
 80058c8:	69fb      	ldr	r3, [r7, #28]
 80058ca:	3301      	adds	r3, #1
 80058cc:	f003 0303 	and.w	r3, r3, #3
 80058d0:	61fb      	str	r3, [r7, #28]

	  patternOffset += 4;
 80058d2:	4b14      	ldr	r3, [pc, #80]	; (8005924 <main+0x100>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	3304      	adds	r3, #4
 80058d8:	4a12      	ldr	r2, [pc, #72]	; (8005924 <main+0x100>)
 80058da:	6013      	str	r3, [r2, #0]
	  if (patternOffset >= sizeof(pattern) / sizeof(int)) {
 80058dc:	4b11      	ldr	r3, [pc, #68]	; (8005924 <main+0x100>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	2b7f      	cmp	r3, #127	; 0x7f
 80058e2:	d902      	bls.n	80058ea <main+0xc6>
		  patternOffset = 0;
 80058e4:	4b0f      	ldr	r3, [pc, #60]	; (8005924 <main+0x100>)
 80058e6:	2200      	movs	r2, #0
 80058e8:	601a      	str	r2, [r3, #0]
	  }
	  updateLeds(&hspi1);
 80058ea:	480d      	ldr	r0, [pc, #52]	; (8005920 <main+0xfc>)
 80058ec:	f7ff fec0 	bl	8005670 <updateLeds>
		//rotateLeds();

	  GPIO_PinState resetButton = HAL_GPIO_ReadPin(Reset_Track_GPIO_Port, Reset_Track_Pin);
 80058f0:	2101      	movs	r1, #1
 80058f2:	480d      	ldr	r0, [pc, #52]	; (8005928 <main+0x104>)
 80058f4:	f7fb fb6a 	bl	8000fcc <HAL_GPIO_ReadPin>
 80058f8:	4603      	mov	r3, r0
 80058fa:	73fb      	strb	r3, [r7, #15]
	  while(resetButton == GPIO_PIN_SET) {
 80058fc:	e00a      	b.n	8005914 <main+0xf0>
		  resetButton = HAL_GPIO_ReadPin(Reset_Track_GPIO_Port, Reset_Track_Pin);
 80058fe:	2101      	movs	r1, #1
 8005900:	4809      	ldr	r0, [pc, #36]	; (8005928 <main+0x104>)
 8005902:	f7fb fb63 	bl	8000fcc <HAL_GPIO_ReadPin>
 8005906:	4603      	mov	r3, r0
 8005908:	73fb      	strb	r3, [r7, #15]
		  resetAll();
 800590a:	f7ff ff0d 	bl	8005728 <resetAll>
		  HAL_Delay(1);
 800590e:	2001      	movs	r0, #1
 8005910:	f7fa fe4a 	bl	80005a8 <HAL_Delay>
	  while(resetButton == GPIO_PIN_SET) {
 8005914:	7bfb      	ldrb	r3, [r7, #15]
 8005916:	2b01      	cmp	r3, #1
 8005918:	d0f1      	beq.n	80058fe <main+0xda>
  {
 800591a:	e7aa      	b.n	8005872 <main+0x4e>
 800591c:	20000388 	.word	0x20000388
 8005920:	20000460 	.word	0x20000460
 8005924:	20000380 	.word	0x20000380
 8005928:	48000800 	.word	0x48000800

0800592c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b0ae      	sub	sp, #184	; 0xb8
 8005930:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005932:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005936:	2248      	movs	r2, #72	; 0x48
 8005938:	2100      	movs	r1, #0
 800593a:	4618      	mov	r0, r3
 800593c:	f000 fdb8 	bl	80064b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005940:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005944:	2200      	movs	r2, #0
 8005946:	601a      	str	r2, [r3, #0]
 8005948:	605a      	str	r2, [r3, #4]
 800594a:	609a      	str	r2, [r3, #8]
 800594c:	60da      	str	r2, [r3, #12]
 800594e:	611a      	str	r2, [r3, #16]
 8005950:	615a      	str	r2, [r3, #20]
 8005952:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005954:	1d3b      	adds	r3, r7, #4
 8005956:	2250      	movs	r2, #80	; 0x50
 8005958:	2100      	movs	r1, #0
 800595a:	4618      	mov	r0, r3
 800595c:	f000 fda8 	bl	80064b0 <memset>

  /** Macro to configure the PLL multiplication factor 
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8005960:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005964:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005968:	68db      	ldr	r3, [r3, #12]
 800596a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800596e:	60d3      	str	r3, [r2, #12]
  /** Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8005970:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005974:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	f023 0303 	bic.w	r3, r3, #3
 800597e:	f043 0301 	orr.w	r3, r3, #1
 8005982:	60d3      	str	r3, [r2, #12]
  /** Configure LSE Drive Capability 
  */
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8005984:	2000      	movs	r0, #0
 8005986:	f7ff fe87 	bl	8005698 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800598a:	4a3b      	ldr	r2, [pc, #236]	; (8005a78 <SystemClock_Config+0x14c>)
 800598c:	4b3a      	ldr	r3, [pc, #232]	; (8005a78 <SystemClock_Config+0x14c>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005994:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005998:	6013      	str	r3, [r2, #0]
 800599a:	4b37      	ldr	r3, [pc, #220]	; (8005a78 <SystemClock_Config+0x14c>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80059a2:	603b      	str	r3, [r7, #0]
 80059a4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80059a6:	2327      	movs	r3, #39	; 0x27
 80059a8:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80059aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80059ae:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80059b0:	2301      	movs	r3, #1
 80059b2:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80059b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80059b8:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80059ba:	2301      	movs	r3, #1
 80059bc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80059c0:	2340      	movs	r3, #64	; 0x40
 80059c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80059c6:	2300      	movs	r3, #0
 80059c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80059cc:	2360      	movs	r3, #96	; 0x60
 80059ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80059d2:	2300      	movs	r3, #0
 80059d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80059d8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80059dc:	4618      	mov	r0, r3
 80059de:	f7fc fc4f 	bl	8002280 <HAL_RCC_OscConfig>
 80059e2:	4603      	mov	r3, r0
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d001      	beq.n	80059ec <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80059e8:	f000 f9a2 	bl	8005d30 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80059ec:	236f      	movs	r3, #111	; 0x6f
 80059ee:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80059f0:	2302      	movs	r3, #2
 80059f2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80059f4:	2300      	movs	r3, #0
 80059f6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80059f8:	2300      	movs	r3, #0
 80059fa:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80059fc:	2300      	movs	r3, #0
 80059fe:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8005a00:	2300      	movs	r3, #0
 8005a02:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8005a04:	2300      	movs	r3, #0
 8005a06:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8005a08:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005a0c:	2101      	movs	r1, #1
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f7fc ff94 	bl	800293c <HAL_RCC_ClockConfig>
 8005a14:	4603      	mov	r3, r0
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d001      	beq.n	8005a1e <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8005a1a:	f000 f989 	bl	8005d30 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USART1
 8005a1e:	f242 1305 	movw	r3, #8453	; 0x2105
 8005a22:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8005a24:	2318      	movs	r3, #24
 8005a26:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8005a28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005a2c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8005a2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a32:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8005a34:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8005a38:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8005a3a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005a3e:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8005a40:	2300      	movs	r3, #0
 8005a42:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8005a44:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8005a48:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8005a4a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005a4e:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8005a50:	2300      	movs	r3, #0
 8005a52:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8005a54:	2310      	movs	r3, #16
 8005a56:	653b      	str	r3, [r7, #80]	; 0x50

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005a58:	1d3b      	adds	r3, r7, #4
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f7fd fbb8 	bl	80031d0 <HAL_RCCEx_PeriphCLKConfig>
 8005a60:	4603      	mov	r3, r0
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d001      	beq.n	8005a6a <SystemClock_Config+0x13e>
  {
    Error_Handler();
 8005a66:	f000 f963 	bl	8005d30 <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8005a6a:	f7fd fd26 	bl	80034ba <HAL_RCCEx_EnableMSIPLLMode>
}
 8005a6e:	bf00      	nop
 8005a70:	37b8      	adds	r7, #184	; 0xb8
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}
 8005a76:	bf00      	nop
 8005a78:	58000400 	.word	0x58000400

08005a7c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005a80:	4b1b      	ldr	r3, [pc, #108]	; (8005af0 <MX_I2C1_Init+0x74>)
 8005a82:	4a1c      	ldr	r2, [pc, #112]	; (8005af4 <MX_I2C1_Init+0x78>)
 8005a84:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8005a86:	4b1a      	ldr	r3, [pc, #104]	; (8005af0 <MX_I2C1_Init+0x74>)
 8005a88:	4a1b      	ldr	r2, [pc, #108]	; (8005af8 <MX_I2C1_Init+0x7c>)
 8005a8a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8005a8c:	4b18      	ldr	r3, [pc, #96]	; (8005af0 <MX_I2C1_Init+0x74>)
 8005a8e:	2200      	movs	r2, #0
 8005a90:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005a92:	4b17      	ldr	r3, [pc, #92]	; (8005af0 <MX_I2C1_Init+0x74>)
 8005a94:	2201      	movs	r2, #1
 8005a96:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005a98:	4b15      	ldr	r3, [pc, #84]	; (8005af0 <MX_I2C1_Init+0x74>)
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8005a9e:	4b14      	ldr	r3, [pc, #80]	; (8005af0 <MX_I2C1_Init+0x74>)
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005aa4:	4b12      	ldr	r3, [pc, #72]	; (8005af0 <MX_I2C1_Init+0x74>)
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005aaa:	4b11      	ldr	r3, [pc, #68]	; (8005af0 <MX_I2C1_Init+0x74>)
 8005aac:	2200      	movs	r2, #0
 8005aae:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005ab0:	4b0f      	ldr	r3, [pc, #60]	; (8005af0 <MX_I2C1_Init+0x74>)
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005ab6:	480e      	ldr	r0, [pc, #56]	; (8005af0 <MX_I2C1_Init+0x74>)
 8005ab8:	f7fb fab8 	bl	800102c <HAL_I2C_Init>
 8005abc:	4603      	mov	r3, r0
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d001      	beq.n	8005ac6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8005ac2:	f000 f935 	bl	8005d30 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005ac6:	2100      	movs	r1, #0
 8005ac8:	4809      	ldr	r0, [pc, #36]	; (8005af0 <MX_I2C1_Init+0x74>)
 8005aca:	f7fb feab 	bl	8001824 <HAL_I2CEx_ConfigAnalogFilter>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d001      	beq.n	8005ad8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8005ad4:	f000 f92c 	bl	8005d30 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8005ad8:	2100      	movs	r1, #0
 8005ada:	4805      	ldr	r0, [pc, #20]	; (8005af0 <MX_I2C1_Init+0x74>)
 8005adc:	f7fb feed 	bl	80018ba <HAL_I2CEx_ConfigDigitalFilter>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d001      	beq.n	8005aea <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8005ae6:	f000 f923 	bl	8005d30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005aea:	bf00      	nop
 8005aec:	bd80      	pop	{r7, pc}
 8005aee:	bf00      	nop
 8005af0:	20000388 	.word	0x20000388
 8005af4:	40005400 	.word	0x40005400
 8005af8:	00707cbb 	.word	0x00707cbb

08005afc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8005b00:	4b1b      	ldr	r3, [pc, #108]	; (8005b70 <MX_SPI1_Init+0x74>)
 8005b02:	4a1c      	ldr	r2, [pc, #112]	; (8005b74 <MX_SPI1_Init+0x78>)
 8005b04:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005b06:	4b1a      	ldr	r3, [pc, #104]	; (8005b70 <MX_SPI1_Init+0x74>)
 8005b08:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005b0c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005b0e:	4b18      	ldr	r3, [pc, #96]	; (8005b70 <MX_SPI1_Init+0x74>)
 8005b10:	2200      	movs	r2, #0
 8005b12:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005b14:	4b16      	ldr	r3, [pc, #88]	; (8005b70 <MX_SPI1_Init+0x74>)
 8005b16:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005b1a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005b1c:	4b14      	ldr	r3, [pc, #80]	; (8005b70 <MX_SPI1_Init+0x74>)
 8005b1e:	2200      	movs	r2, #0
 8005b20:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8005b22:	4b13      	ldr	r3, [pc, #76]	; (8005b70 <MX_SPI1_Init+0x74>)
 8005b24:	2201      	movs	r2, #1
 8005b26:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005b28:	4b11      	ldr	r3, [pc, #68]	; (8005b70 <MX_SPI1_Init+0x74>)
 8005b2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b2e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8005b30:	4b0f      	ldr	r3, [pc, #60]	; (8005b70 <MX_SPI1_Init+0x74>)
 8005b32:	2210      	movs	r2, #16
 8005b34:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005b36:	4b0e      	ldr	r3, [pc, #56]	; (8005b70 <MX_SPI1_Init+0x74>)
 8005b38:	2200      	movs	r2, #0
 8005b3a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005b3c:	4b0c      	ldr	r3, [pc, #48]	; (8005b70 <MX_SPI1_Init+0x74>)
 8005b3e:	2200      	movs	r2, #0
 8005b40:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b42:	4b0b      	ldr	r3, [pc, #44]	; (8005b70 <MX_SPI1_Init+0x74>)
 8005b44:	2200      	movs	r2, #0
 8005b46:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8005b48:	4b09      	ldr	r3, [pc, #36]	; (8005b70 <MX_SPI1_Init+0x74>)
 8005b4a:	2207      	movs	r2, #7
 8005b4c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005b4e:	4b08      	ldr	r3, [pc, #32]	; (8005b70 <MX_SPI1_Init+0x74>)
 8005b50:	2200      	movs	r2, #0
 8005b52:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8005b54:	4b06      	ldr	r3, [pc, #24]	; (8005b70 <MX_SPI1_Init+0x74>)
 8005b56:	2200      	movs	r2, #0
 8005b58:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005b5a:	4805      	ldr	r0, [pc, #20]	; (8005b70 <MX_SPI1_Init+0x74>)
 8005b5c:	f7fd fdc4 	bl	80036e8 <HAL_SPI_Init>
 8005b60:	4603      	mov	r3, r0
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d001      	beq.n	8005b6a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8005b66:	f000 f8e3 	bl	8005d30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8005b6a:	bf00      	nop
 8005b6c:	bd80      	pop	{r7, pc}
 8005b6e:	bf00      	nop
 8005b70:	20000460 	.word	0x20000460
 8005b74:	40013000 	.word	0x40013000

08005b78 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005b7c:	4b23      	ldr	r3, [pc, #140]	; (8005c0c <MX_USART1_UART_Init+0x94>)
 8005b7e:	4a24      	ldr	r2, [pc, #144]	; (8005c10 <MX_USART1_UART_Init+0x98>)
 8005b80:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005b82:	4b22      	ldr	r3, [pc, #136]	; (8005c0c <MX_USART1_UART_Init+0x94>)
 8005b84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005b88:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_7B;
 8005b8a:	4b20      	ldr	r3, [pc, #128]	; (8005c0c <MX_USART1_UART_Init+0x94>)
 8005b8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b90:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005b92:	4b1e      	ldr	r3, [pc, #120]	; (8005c0c <MX_USART1_UART_Init+0x94>)
 8005b94:	2200      	movs	r2, #0
 8005b96:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005b98:	4b1c      	ldr	r3, [pc, #112]	; (8005c0c <MX_USART1_UART_Init+0x94>)
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005b9e:	4b1b      	ldr	r3, [pc, #108]	; (8005c0c <MX_USART1_UART_Init+0x94>)
 8005ba0:	220c      	movs	r2, #12
 8005ba2:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005ba4:	4b19      	ldr	r3, [pc, #100]	; (8005c0c <MX_USART1_UART_Init+0x94>)
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005baa:	4b18      	ldr	r3, [pc, #96]	; (8005c0c <MX_USART1_UART_Init+0x94>)
 8005bac:	2200      	movs	r2, #0
 8005bae:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005bb0:	4b16      	ldr	r3, [pc, #88]	; (8005c0c <MX_USART1_UART_Init+0x94>)
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005bb6:	4b15      	ldr	r3, [pc, #84]	; (8005c0c <MX_USART1_UART_Init+0x94>)
 8005bb8:	2200      	movs	r2, #0
 8005bba:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005bbc:	4b13      	ldr	r3, [pc, #76]	; (8005c0c <MX_USART1_UART_Init+0x94>)
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005bc2:	4812      	ldr	r0, [pc, #72]	; (8005c0c <MX_USART1_UART_Init+0x94>)
 8005bc4:	f7fe f8e0 	bl	8003d88 <HAL_UART_Init>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d001      	beq.n	8005bd2 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8005bce:	f000 f8af 	bl	8005d30 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005bd2:	2100      	movs	r1, #0
 8005bd4:	480d      	ldr	r0, [pc, #52]	; (8005c0c <MX_USART1_UART_Init+0x94>)
 8005bd6:	f7ff fb1a 	bl	800520e <HAL_UARTEx_SetTxFifoThreshold>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d001      	beq.n	8005be4 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8005be0:	f000 f8a6 	bl	8005d30 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005be4:	2100      	movs	r1, #0
 8005be6:	4809      	ldr	r0, [pc, #36]	; (8005c0c <MX_USART1_UART_Init+0x94>)
 8005be8:	f7ff fb4f 	bl	800528a <HAL_UARTEx_SetRxFifoThreshold>
 8005bec:	4603      	mov	r3, r0
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d001      	beq.n	8005bf6 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8005bf2:	f000 f89d 	bl	8005d30 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8005bf6:	4805      	ldr	r0, [pc, #20]	; (8005c0c <MX_USART1_UART_Init+0x94>)
 8005bf8:	f7ff fad0 	bl	800519c <HAL_UARTEx_DisableFifoMode>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d001      	beq.n	8005c06 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8005c02:	f000 f895 	bl	8005d30 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005c06:	bf00      	nop
 8005c08:	bd80      	pop	{r7, pc}
 8005c0a:	bf00      	nop
 8005c0c:	200003d4 	.word	0x200003d4
 8005c10:	40013800 	.word	0x40013800

08005c14 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8005c18:	4b10      	ldr	r3, [pc, #64]	; (8005c5c <MX_USB_PCD_Init+0x48>)
 8005c1a:	4a11      	ldr	r2, [pc, #68]	; (8005c60 <MX_USB_PCD_Init+0x4c>)
 8005c1c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8005c1e:	4b0f      	ldr	r3, [pc, #60]	; (8005c5c <MX_USB_PCD_Init+0x48>)
 8005c20:	2208      	movs	r2, #8
 8005c22:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8005c24:	4b0d      	ldr	r3, [pc, #52]	; (8005c5c <MX_USB_PCD_Init+0x48>)
 8005c26:	2202      	movs	r2, #2
 8005c28:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8005c2a:	4b0c      	ldr	r3, [pc, #48]	; (8005c5c <MX_USB_PCD_Init+0x48>)
 8005c2c:	2202      	movs	r2, #2
 8005c2e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8005c30:	4b0a      	ldr	r3, [pc, #40]	; (8005c5c <MX_USB_PCD_Init+0x48>)
 8005c32:	2200      	movs	r2, #0
 8005c34:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8005c36:	4b09      	ldr	r3, [pc, #36]	; (8005c5c <MX_USB_PCD_Init+0x48>)
 8005c38:	2200      	movs	r2, #0
 8005c3a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8005c3c:	4b07      	ldr	r3, [pc, #28]	; (8005c5c <MX_USB_PCD_Init+0x48>)
 8005c3e:	2200      	movs	r2, #0
 8005c40:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8005c42:	4b06      	ldr	r3, [pc, #24]	; (8005c5c <MX_USB_PCD_Init+0x48>)
 8005c44:	2200      	movs	r2, #0
 8005c46:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8005c48:	4804      	ldr	r0, [pc, #16]	; (8005c5c <MX_USB_PCD_Init+0x48>)
 8005c4a:	f7fb fe82 	bl	8001952 <HAL_PCD_Init>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d001      	beq.n	8005c58 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8005c54:	f000 f86c 	bl	8005d30 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8005c58:	bf00      	nop
 8005c5a:	bd80      	pop	{r7, pc}
 8005c5c:	200004c4 	.word	0x200004c4
 8005c60:	40006800 	.word	0x40006800

08005c64 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8005c68:	2004      	movs	r0, #4
 8005c6a:	f7ff fd2b 	bl	80056c4 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005c6e:	2001      	movs	r0, #1
 8005c70:	f7ff fd28 	bl	80056c4 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8005c74:	2200      	movs	r2, #0
 8005c76:	2100      	movs	r1, #0
 8005c78:	200b      	movs	r0, #11
 8005c7a:	f7fa fd90 	bl	800079e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8005c7e:	200b      	movs	r0, #11
 8005c80:	f7fa fda7 	bl	80007d2 <HAL_NVIC_EnableIRQ>

}
 8005c84:	bf00      	nop
 8005c86:	bd80      	pop	{r7, pc}

08005c88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b086      	sub	sp, #24
 8005c8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c8e:	1d3b      	adds	r3, r7, #4
 8005c90:	2200      	movs	r2, #0
 8005c92:	601a      	str	r2, [r3, #0]
 8005c94:	605a      	str	r2, [r3, #4]
 8005c96:	609a      	str	r2, [r3, #8]
 8005c98:	60da      	str	r2, [r3, #12]
 8005c9a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005c9c:	2004      	movs	r0, #4
 8005c9e:	f7ff fd2a 	bl	80056f6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005ca2:	2002      	movs	r0, #2
 8005ca4:	f7ff fd27 	bl	80056f6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ca8:	2001      	movs	r0, #1
 8005caa:	f7ff fd24 	bl	80056f6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005cae:	2008      	movs	r0, #8
 8005cb0:	f7ff fd21 	bl	80056f6 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	2123      	movs	r1, #35	; 0x23
 8005cb8:	481a      	ldr	r0, [pc, #104]	; (8005d24 <MX_GPIO_Init+0x9c>)
 8005cba:	f7fb f99f 	bl	8000ffc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Reset_Track_Pin */
  GPIO_InitStruct.Pin = Reset_Track_Pin;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005cc6:	2302      	movs	r3, #2
 8005cc8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(Reset_Track_GPIO_Port, &GPIO_InitStruct);
 8005cca:	1d3b      	adds	r3, r7, #4
 8005ccc:	4619      	mov	r1, r3
 8005cce:	4816      	ldr	r0, [pc, #88]	; (8005d28 <MX_GPIO_Init+0xa0>)
 8005cd0:	f7fb f80c 	bl	8000cec <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8005cd4:	2310      	movs	r3, #16
 8005cd6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8005ce0:	1d3b      	adds	r3, r7, #4
 8005ce2:	4619      	mov	r1, r3
 8005ce4:	4810      	ldr	r0, [pc, #64]	; (8005d28 <MX_GPIO_Init+0xa0>)
 8005ce6:	f7fb f801 	bl	8000cec <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8005cea:	2323      	movs	r3, #35	; 0x23
 8005cec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005cfa:	1d3b      	adds	r3, r7, #4
 8005cfc:	4619      	mov	r1, r3
 8005cfe:	4809      	ldr	r0, [pc, #36]	; (8005d24 <MX_GPIO_Init+0x9c>)
 8005d00:	f7fa fff4 	bl	8000cec <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8005d04:	2303      	movs	r3, #3
 8005d06:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005d10:	1d3b      	adds	r3, r7, #4
 8005d12:	4619      	mov	r1, r3
 8005d14:	4805      	ldr	r0, [pc, #20]	; (8005d2c <MX_GPIO_Init+0xa4>)
 8005d16:	f7fa ffe9 	bl	8000cec <HAL_GPIO_Init>

}
 8005d1a:	bf00      	nop
 8005d1c:	3718      	adds	r7, #24
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}
 8005d22:	bf00      	nop
 8005d24:	48000400 	.word	0x48000400
 8005d28:	48000800 	.word	0x48000800
 8005d2c:	48000c00 	.word	0x48000c00

08005d30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005d30:	b480      	push	{r7}
 8005d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005d34:	bf00      	nop
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr

08005d3e <segments_init>:
uint8_t charBuffer[] = {0,0x5C, 1,0x5C, 2,0, 3,0x5C, 4,0x5C};

// private
void initChars();

int segments_init(I2C_HandleTypeDef * i2c, uint16_t deviceAddress) {
 8005d3e:	b580      	push	{r7, lr}
 8005d40:	b08a      	sub	sp, #40	; 0x28
 8005d42:	af02      	add	r7, sp, #8
 8005d44:	6078      	str	r0, [r7, #4]
 8005d46:	460b      	mov	r3, r1
 8005d48:	807b      	strh	r3, [r7, #2]

	initChars();
 8005d4a:	f000 f863 	bl	8005e14 <initChars>

	deviceAddress <<= 1;
 8005d4e:	887b      	ldrh	r3, [r7, #2]
 8005d50:	005b      	lsls	r3, r3, #1
 8005d52:	807b      	strh	r3, [r7, #2]
	uint32_t DELAY = 500;
 8005d54:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8005d58:	617b      	str	r3, [r7, #20]

	HAL_StatusTypeDef result = 0;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	77fb      	strb	r3, [r7, #31]
	for(int i=0; i<10; ++i) {
 8005d5e:	2300      	movs	r3, #0
 8005d60:	61bb      	str	r3, [r7, #24]
 8005d62:	e010      	b.n	8005d86 <segments_init+0x48>
	  result = HAL_I2C_IsDeviceReady(i2c, deviceAddress, 3, 200);
 8005d64:	8879      	ldrh	r1, [r7, #2]
 8005d66:	23c8      	movs	r3, #200	; 0xc8
 8005d68:	2203      	movs	r2, #3
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f7fb fae0 	bl	8001330 <HAL_I2C_IsDeviceReady>
 8005d70:	4603      	mov	r3, r0
 8005d72:	77fb      	strb	r3, [r7, #31]
	  if (result == HAL_OK) {
 8005d74:	7ffb      	ldrb	r3, [r7, #31]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d009      	beq.n	8005d8e <segments_init+0x50>
		  break;
	  }
	  HAL_Delay(DELAY);
 8005d7a:	6978      	ldr	r0, [r7, #20]
 8005d7c:	f7fa fc14 	bl	80005a8 <HAL_Delay>
	for(int i=0; i<10; ++i) {
 8005d80:	69bb      	ldr	r3, [r7, #24]
 8005d82:	3301      	adds	r3, #1
 8005d84:	61bb      	str	r3, [r7, #24]
 8005d86:	69bb      	ldr	r3, [r7, #24]
 8005d88:	2b09      	cmp	r3, #9
 8005d8a:	ddeb      	ble.n	8005d64 <segments_init+0x26>
 8005d8c:	e000      	b.n	8005d90 <segments_init+0x52>
		  break;
 8005d8e:	bf00      	nop
	}

	if (result != HAL_OK) {
 8005d90:	7ffb      	ldrb	r3, [r7, #31]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d001      	beq.n	8005d9a <segments_init+0x5c>
	  return result;
 8005d96:	7ffb      	ldrb	r3, [r7, #31]
 8005d98:	e037      	b.n	8005e0a <segments_init+0xcc>
	}

	uint8_t sysOn[] = {0x20 | 1};	// writeCommand(SYSTEM_SETUP_REGISTER, SYSTEM_SETUP_ON);
 8005d9a:	2321      	movs	r3, #33	; 0x21
 8005d9c:	743b      	strb	r3, [r7, #16]
	result = HAL_I2C_Master_Transmit(i2c, deviceAddress, sysOn, 1, 100);
 8005d9e:	f107 0210 	add.w	r2, r7, #16
 8005da2:	8879      	ldrh	r1, [r7, #2]
 8005da4:	2364      	movs	r3, #100	; 0x64
 8005da6:	9300      	str	r3, [sp, #0]
 8005da8:	2301      	movs	r3, #1
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f7fb f9cc 	bl	8001148 <HAL_I2C_Master_Transmit>
 8005db0:	4603      	mov	r3, r0
 8005db2:	77fb      	strb	r3, [r7, #31]
	if (result != HAL_OK) {
 8005db4:	7ffb      	ldrb	r3, [r7, #31]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d001      	beq.n	8005dbe <segments_init+0x80>
	  return result;
 8005dba:	7ffb      	ldrb	r3, [r7, #31]
 8005dbc:	e025      	b.n	8005e0a <segments_init+0xcc>
	}

	HAL_Delay(DELAY);
 8005dbe:	6978      	ldr	r0, [r7, #20]
 8005dc0:	f7fa fbf2 	bl	80005a8 <HAL_Delay>
	uint8_t dispOn[] = {0x80 | 1 | 0}; // writeCommand(DISPLAY_SETUP_REGISTER, DISPLAY_SETUP_ON | DISPLAY_SETUP_BLINK_NONE);
 8005dc4:	2381      	movs	r3, #129	; 0x81
 8005dc6:	733b      	strb	r3, [r7, #12]
	result = HAL_I2C_Master_Transmit(i2c, deviceAddress, dispOn, 1, 100);
 8005dc8:	f107 020c 	add.w	r2, r7, #12
 8005dcc:	8879      	ldrh	r1, [r7, #2]
 8005dce:	2364      	movs	r3, #100	; 0x64
 8005dd0:	9300      	str	r3, [sp, #0]
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f7fb f9b7 	bl	8001148 <HAL_I2C_Master_Transmit>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	77fb      	strb	r3, [r7, #31]
	if (result != HAL_OK) {
 8005dde:	7ffb      	ldrb	r3, [r7, #31]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d001      	beq.n	8005de8 <segments_init+0xaa>
	  return result;
 8005de4:	7ffb      	ldrb	r3, [r7, #31]
 8005de6:	e010      	b.n	8005e0a <segments_init+0xcc>
	}

	HAL_Delay(DELAY);
 8005de8:	6978      	ldr	r0, [r7, #20]
 8005dea:	f7fa fbdd 	bl	80005a8 <HAL_Delay>
	uint8_t bright[] = {0xE0| 7};	// writeCommand(BRIGTHNESS_REGISTER, 7);
 8005dee:	23e7      	movs	r3, #231	; 0xe7
 8005df0:	723b      	strb	r3, [r7, #8]
	result = HAL_I2C_Master_Transmit(i2c, deviceAddress, bright, 1, 100);
 8005df2:	f107 0208 	add.w	r2, r7, #8
 8005df6:	8879      	ldrh	r1, [r7, #2]
 8005df8:	2364      	movs	r3, #100	; 0x64
 8005dfa:	9300      	str	r3, [sp, #0]
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f7fb f9a2 	bl	8001148 <HAL_I2C_Master_Transmit>
 8005e04:	4603      	mov	r3, r0
 8005e06:	77fb      	strb	r3, [r7, #31]

	return result;
 8005e08:	7ffb      	ldrb	r3, [r7, #31]
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3720      	adds	r7, #32
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}
	...

08005e14 <initChars>:

void initChars() {
 8005e14:	b480      	push	{r7}
 8005e16:	b083      	sub	sp, #12
 8005e18:	af00      	add	r7, sp, #0
	for(int i=0; i<128; ++i) {
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	607b      	str	r3, [r7, #4]
 8005e1e:	e007      	b.n	8005e30 <initChars+0x1c>
		chars[i] = 0x40;
 8005e20:	4a20      	ldr	r2, [pc, #128]	; (8005ea4 <initChars+0x90>)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	4413      	add	r3, r2
 8005e26:	2240      	movs	r2, #64	; 0x40
 8005e28:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<128; ++i) {
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	3301      	adds	r3, #1
 8005e2e:	607b      	str	r3, [r7, #4]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2b7f      	cmp	r3, #127	; 0x7f
 8005e34:	ddf4      	ble.n	8005e20 <initChars+0xc>
	}
	chars[' '] = 0x00;
 8005e36:	4b1b      	ldr	r3, [pc, #108]	; (8005ea4 <initChars+0x90>)
 8005e38:	2200      	movs	r2, #0
 8005e3a:	f883 2020 	strb.w	r2, [r3, #32]
	chars['0'] = 0x3F;
 8005e3e:	4b19      	ldr	r3, [pc, #100]	; (8005ea4 <initChars+0x90>)
 8005e40:	223f      	movs	r2, #63	; 0x3f
 8005e42:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	chars['1'] = 0x06;
 8005e46:	4b17      	ldr	r3, [pc, #92]	; (8005ea4 <initChars+0x90>)
 8005e48:	2206      	movs	r2, #6
 8005e4a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	chars['2'] = 0x5B;
 8005e4e:	4b15      	ldr	r3, [pc, #84]	; (8005ea4 <initChars+0x90>)
 8005e50:	225b      	movs	r2, #91	; 0x5b
 8005e52:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	chars['3'] = 0x4F;
 8005e56:	4b13      	ldr	r3, [pc, #76]	; (8005ea4 <initChars+0x90>)
 8005e58:	224f      	movs	r2, #79	; 0x4f
 8005e5a:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	chars['4'] = 0x66;
 8005e5e:	4b11      	ldr	r3, [pc, #68]	; (8005ea4 <initChars+0x90>)
 8005e60:	2266      	movs	r2, #102	; 0x66
 8005e62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	chars['5'] = 0x6D;
 8005e66:	4b0f      	ldr	r3, [pc, #60]	; (8005ea4 <initChars+0x90>)
 8005e68:	226d      	movs	r2, #109	; 0x6d
 8005e6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	chars['6'] = 0x7D;
 8005e6e:	4b0d      	ldr	r3, [pc, #52]	; (8005ea4 <initChars+0x90>)
 8005e70:	227d      	movs	r2, #125	; 0x7d
 8005e72:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	chars['7'] = 0x07;
 8005e76:	4b0b      	ldr	r3, [pc, #44]	; (8005ea4 <initChars+0x90>)
 8005e78:	2207      	movs	r2, #7
 8005e7a:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	chars['8'] = 0x7F;
 8005e7e:	4b09      	ldr	r3, [pc, #36]	; (8005ea4 <initChars+0x90>)
 8005e80:	227f      	movs	r2, #127	; 0x7f
 8005e82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	chars['9'] = 0x6F;
 8005e86:	4b07      	ldr	r3, [pc, #28]	; (8005ea4 <initChars+0x90>)
 8005e88:	226f      	movs	r2, #111	; 0x6f
 8005e8a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	chars['-'] = 64;
 8005e8e:	4b05      	ldr	r3, [pc, #20]	; (8005ea4 <initChars+0x90>)
 8005e90:	2240      	movs	r2, #64	; 0x40
 8005e92:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8005e96:	bf00      	nop
 8005e98:	370c      	adds	r7, #12
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea0:	4770      	bx	lr
 8005ea2:	bf00      	nop
 8005ea4:	20000798 	.word	0x20000798

08005ea8 <segments_print>:

int segments_print(I2C_HandleTypeDef * i2c, uint16_t deviceAddress, char * text) {
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b088      	sub	sp, #32
 8005eac:	af02      	add	r7, sp, #8
 8005eae:	60f8      	str	r0, [r7, #12]
 8005eb0:	460b      	mov	r3, r1
 8005eb2:	607a      	str	r2, [r7, #4]
 8005eb4:	817b      	strh	r3, [r7, #10]
	deviceAddress <<= 1;
 8005eb6:	897b      	ldrh	r3, [r7, #10]
 8005eb8:	005b      	lsls	r3, r3, #1
 8005eba:	817b      	strh	r3, [r7, #10]
	for(size_t i=0; i<4; ++i) {
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	617b      	str	r3, [r7, #20]
 8005ec0:	e022      	b.n	8005f08 <segments_print+0x60>
		if (i < strlen(text)) {
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f7fa f95c 	bl	8000180 <strlen>
 8005ec8:	4602      	mov	r2, r0
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d918      	bls.n	8005f02 <segments_print+0x5a>
			uint8_t c = (uint8_t)text[i];
 8005ed0:	687a      	ldr	r2, [r7, #4]
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	4413      	add	r3, r2
 8005ed6:	781b      	ldrb	r3, [r3, #0]
 8005ed8:	74fb      	strb	r3, [r7, #19]
			if (i<2) {
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d808      	bhi.n	8005ef2 <segments_print+0x4a>
				charBuffer[i*2 + 1] = chars[c];
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	005b      	lsls	r3, r3, #1
 8005ee4:	3301      	adds	r3, #1
 8005ee6:	7cfa      	ldrb	r2, [r7, #19]
 8005ee8:	490f      	ldr	r1, [pc, #60]	; (8005f28 <segments_print+0x80>)
 8005eea:	5c89      	ldrb	r1, [r1, r2]
 8005eec:	4a0f      	ldr	r2, [pc, #60]	; (8005f2c <segments_print+0x84>)
 8005eee:	54d1      	strb	r1, [r2, r3]
 8005ef0:	e007      	b.n	8005f02 <segments_print+0x5a>
			} else {
				charBuffer[i*2 + 3] = chars[c];	// skip middle : character
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	005b      	lsls	r3, r3, #1
 8005ef6:	3303      	adds	r3, #3
 8005ef8:	7cfa      	ldrb	r2, [r7, #19]
 8005efa:	490b      	ldr	r1, [pc, #44]	; (8005f28 <segments_print+0x80>)
 8005efc:	5c89      	ldrb	r1, [r1, r2]
 8005efe:	4a0b      	ldr	r2, [pc, #44]	; (8005f2c <segments_print+0x84>)
 8005f00:	54d1      	strb	r1, [r2, r3]
	for(size_t i=0; i<4; ++i) {
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	3301      	adds	r3, #1
 8005f06:	617b      	str	r3, [r7, #20]
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	2b03      	cmp	r3, #3
 8005f0c:	d9d9      	bls.n	8005ec2 <segments_print+0x1a>
			}
		}
	}
	return HAL_I2C_Master_Transmit(i2c, deviceAddress, charBuffer, 10, 100);
 8005f0e:	8979      	ldrh	r1, [r7, #10]
 8005f10:	2364      	movs	r3, #100	; 0x64
 8005f12:	9300      	str	r3, [sp, #0]
 8005f14:	230a      	movs	r3, #10
 8005f16:	4a05      	ldr	r2, [pc, #20]	; (8005f2c <segments_print+0x84>)
 8005f18:	68f8      	ldr	r0, [r7, #12]
 8005f1a:	f7fb f915 	bl	8001148 <HAL_I2C_Master_Transmit>
 8005f1e:	4603      	mov	r3, r0
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3718      	adds	r7, #24
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}
 8005f28:	20000798 	.word	0x20000798
 8005f2c:	20000228 	.word	0x20000228

08005f30 <LL_AHB2_GRP1_EnableClock>:
{
 8005f30:	b480      	push	{r7}
 8005f32:	b085      	sub	sp, #20
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8005f38:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f40:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	4313      	orrs	r3, r2
 8005f46:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8005f48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f4c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	4013      	ands	r3, r2
 8005f52:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005f54:	68fb      	ldr	r3, [r7, #12]
}
 8005f56:	bf00      	nop
 8005f58:	3714      	adds	r7, #20
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr

08005f62 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_USB
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8005f62:	b480      	push	{r7}
 8005f64:	b085      	sub	sp, #20
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8005f6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f72:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	4313      	orrs	r3, r2
 8005f78:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8005f7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f7e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	4013      	ands	r3, r2
 8005f84:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005f86:	68fb      	ldr	r3, [r7, #12]
}
 8005f88:	bf00      	nop
 8005f8a:	3714      	adds	r7, #20
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr

08005f94 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b085      	sub	sp, #20
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8005f9c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005fa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fa4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8005fac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fb0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	4013      	ands	r3, r2
 8005fb6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
}
 8005fba:	bf00      	nop
 8005fbc:	3714      	adds	r7, #20
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc4:	4770      	bx	lr

08005fc6 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005fc6:	b480      	push	{r7}
 8005fc8:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005fca:	bf00      	nop
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr

08005fd4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b088      	sub	sp, #32
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005fdc:	f107 030c 	add.w	r3, r7, #12
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	601a      	str	r2, [r3, #0]
 8005fe4:	605a      	str	r2, [r3, #4]
 8005fe6:	609a      	str	r2, [r3, #8]
 8005fe8:	60da      	str	r2, [r3, #12]
 8005fea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a0f      	ldr	r2, [pc, #60]	; (8006030 <HAL_I2C_MspInit+0x5c>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d117      	bne.n	8006026 <HAL_I2C_MspInit+0x52>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005ff6:	2002      	movs	r0, #2
 8005ff8:	f7ff ff9a 	bl	8005f30 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005ffc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006000:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006002:	2312      	movs	r3, #18
 8006004:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006006:	2301      	movs	r3, #1
 8006008:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800600a:	2300      	movs	r3, #0
 800600c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800600e:	2304      	movs	r3, #4
 8006010:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006012:	f107 030c 	add.w	r3, r7, #12
 8006016:	4619      	mov	r1, r3
 8006018:	4806      	ldr	r0, [pc, #24]	; (8006034 <HAL_I2C_MspInit+0x60>)
 800601a:	f7fa fe67 	bl	8000cec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800601e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8006022:	f7ff ff9e 	bl	8005f62 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8006026:	bf00      	nop
 8006028:	3720      	adds	r7, #32
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}
 800602e:	bf00      	nop
 8006030:	40005400 	.word	0x40005400
 8006034:	48000400 	.word	0x48000400

08006038 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b088      	sub	sp, #32
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006040:	f107 030c 	add.w	r3, r7, #12
 8006044:	2200      	movs	r2, #0
 8006046:	601a      	str	r2, [r3, #0]
 8006048:	605a      	str	r2, [r3, #4]
 800604a:	609a      	str	r2, [r3, #8]
 800604c:	60da      	str	r2, [r3, #12]
 800604e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a24      	ldr	r2, [pc, #144]	; (80060e8 <HAL_SPI_MspInit+0xb0>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d141      	bne.n	80060de <HAL_SPI_MspInit+0xa6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800605a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800605e:	f7ff ff99 	bl	8005f94 <LL_APB2_GRP1_EnableClock>
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006062:	2001      	movs	r0, #1
 8006064:	f7ff ff64 	bl	8005f30 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration    
    PA1     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7;
 8006068:	2382      	movs	r3, #130	; 0x82
 800606a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800606c:	2302      	movs	r3, #2
 800606e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006070:	2300      	movs	r3, #0
 8006072:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006074:	2303      	movs	r3, #3
 8006076:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006078:	2305      	movs	r3, #5
 800607a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800607c:	f107 030c 	add.w	r3, r7, #12
 8006080:	4619      	mov	r1, r3
 8006082:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006086:	f7fa fe31 	bl	8000cec <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel1;
 800608a:	4b18      	ldr	r3, [pc, #96]	; (80060ec <HAL_SPI_MspInit+0xb4>)
 800608c:	4a18      	ldr	r2, [pc, #96]	; (80060f0 <HAL_SPI_MspInit+0xb8>)
 800608e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8006090:	4b16      	ldr	r3, [pc, #88]	; (80060ec <HAL_SPI_MspInit+0xb4>)
 8006092:	2207      	movs	r2, #7
 8006094:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006096:	4b15      	ldr	r3, [pc, #84]	; (80060ec <HAL_SPI_MspInit+0xb4>)
 8006098:	2210      	movs	r2, #16
 800609a:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800609c:	4b13      	ldr	r3, [pc, #76]	; (80060ec <HAL_SPI_MspInit+0xb4>)
 800609e:	2200      	movs	r2, #0
 80060a0:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80060a2:	4b12      	ldr	r3, [pc, #72]	; (80060ec <HAL_SPI_MspInit+0xb4>)
 80060a4:	2280      	movs	r2, #128	; 0x80
 80060a6:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80060a8:	4b10      	ldr	r3, [pc, #64]	; (80060ec <HAL_SPI_MspInit+0xb4>)
 80060aa:	2200      	movs	r2, #0
 80060ac:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80060ae:	4b0f      	ldr	r3, [pc, #60]	; (80060ec <HAL_SPI_MspInit+0xb4>)
 80060b0:	2200      	movs	r2, #0
 80060b2:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80060b4:	4b0d      	ldr	r3, [pc, #52]	; (80060ec <HAL_SPI_MspInit+0xb4>)
 80060b6:	2200      	movs	r2, #0
 80060b8:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80060ba:	4b0c      	ldr	r3, [pc, #48]	; (80060ec <HAL_SPI_MspInit+0xb4>)
 80060bc:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80060c0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80060c2:	480a      	ldr	r0, [pc, #40]	; (80060ec <HAL_SPI_MspInit+0xb4>)
 80060c4:	f7fa fba0 	bl	8000808 <HAL_DMA_Init>
 80060c8:	4603      	mov	r3, r0
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d001      	beq.n	80060d2 <HAL_SPI_MspInit+0x9a>
    {
      Error_Handler();
 80060ce:	f7ff fe2f 	bl	8005d30 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	4a05      	ldr	r2, [pc, #20]	; (80060ec <HAL_SPI_MspInit+0xb4>)
 80060d6:	655a      	str	r2, [r3, #84]	; 0x54
 80060d8:	4a04      	ldr	r2, [pc, #16]	; (80060ec <HAL_SPI_MspInit+0xb4>)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80060de:	bf00      	nop
 80060e0:	3720      	adds	r7, #32
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}
 80060e6:	bf00      	nop
 80060e8:	40013000 	.word	0x40013000
 80060ec:	20000738 	.word	0x20000738
 80060f0:	40020008 	.word	0x40020008

080060f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b088      	sub	sp, #32
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060fc:	f107 030c 	add.w	r3, r7, #12
 8006100:	2200      	movs	r2, #0
 8006102:	601a      	str	r2, [r3, #0]
 8006104:	605a      	str	r2, [r3, #4]
 8006106:	609a      	str	r2, [r3, #8]
 8006108:	60da      	str	r2, [r3, #12]
 800610a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a0e      	ldr	r2, [pc, #56]	; (800614c <HAL_UART_MspInit+0x58>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d116      	bne.n	8006144 <HAL_UART_MspInit+0x50>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006116:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800611a:	f7ff ff3b 	bl	8005f94 <LL_APB2_GRP1_EnableClock>
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800611e:	2002      	movs	r0, #2
 8006120:	f7ff ff06 	bl	8005f30 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8006124:	23c0      	movs	r3, #192	; 0xc0
 8006126:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006128:	2302      	movs	r3, #2
 800612a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800612c:	2300      	movs	r3, #0
 800612e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006130:	2300      	movs	r3, #0
 8006132:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006134:	2307      	movs	r3, #7
 8006136:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006138:	f107 030c 	add.w	r3, r7, #12
 800613c:	4619      	mov	r1, r3
 800613e:	4804      	ldr	r0, [pc, #16]	; (8006150 <HAL_UART_MspInit+0x5c>)
 8006140:	f7fa fdd4 	bl	8000cec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8006144:	bf00      	nop
 8006146:	3720      	adds	r7, #32
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}
 800614c:	40013800 	.word	0x40013800
 8006150:	48000400 	.word	0x48000400

08006154 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b088      	sub	sp, #32
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800615c:	f107 030c 	add.w	r3, r7, #12
 8006160:	2200      	movs	r2, #0
 8006162:	601a      	str	r2, [r3, #0]
 8006164:	605a      	str	r2, [r3, #4]
 8006166:	609a      	str	r2, [r3, #8]
 8006168:	60da      	str	r2, [r3, #12]
 800616a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a0f      	ldr	r2, [pc, #60]	; (80061b0 <HAL_PCD_MspInit+0x5c>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d118      	bne.n	80061a8 <HAL_PCD_MspInit+0x54>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006176:	2001      	movs	r0, #1
 8006178:	f7ff feda 	bl	8005f30 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration    
    PA11     ------> USB_DM
    PA12     ------> USB_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800617c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006180:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006182:	2302      	movs	r3, #2
 8006184:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006186:	2300      	movs	r3, #0
 8006188:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800618a:	2300      	movs	r3, #0
 800618c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800618e:	230a      	movs	r3, #10
 8006190:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006192:	f107 030c 	add.w	r3, r7, #12
 8006196:	4619      	mov	r1, r3
 8006198:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800619c:	f7fa fda6 	bl	8000cec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80061a0:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80061a4:	f7ff fedd 	bl	8005f62 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80061a8:	bf00      	nop
 80061aa:	3720      	adds	r7, #32
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}
 80061b0:	40006800 	.word	0x40006800

080061b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80061b4:	b480      	push	{r7}
 80061b6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80061b8:	bf00      	nop
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr

080061c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80061c2:	b480      	push	{r7}
 80061c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80061c6:	e7fe      	b.n	80061c6 <HardFault_Handler+0x4>

080061c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80061c8:	b480      	push	{r7}
 80061ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80061cc:	e7fe      	b.n	80061cc <MemManage_Handler+0x4>

080061ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80061ce:	b480      	push	{r7}
 80061d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80061d2:	e7fe      	b.n	80061d2 <BusFault_Handler+0x4>

080061d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80061d4:	b480      	push	{r7}
 80061d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80061d8:	e7fe      	b.n	80061d8 <UsageFault_Handler+0x4>

080061da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80061da:	b480      	push	{r7}
 80061dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80061de:	bf00      	nop
 80061e0:	46bd      	mov	sp, r7
 80061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e6:	4770      	bx	lr

080061e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80061e8:	b480      	push	{r7}
 80061ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80061ec:	bf00      	nop
 80061ee:	46bd      	mov	sp, r7
 80061f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f4:	4770      	bx	lr

080061f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80061f6:	b480      	push	{r7}
 80061f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80061fa:	bf00      	nop
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr

08006204 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006208:	f7fa f9a4 	bl	8000554 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800620c:	bf00      	nop
 800620e:	bd80      	pop	{r7, pc}

08006210 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8006214:	4802      	ldr	r0, [pc, #8]	; (8006220 <DMA1_Channel1_IRQHandler+0x10>)
 8006216:	f7fa fc1a 	bl	8000a4e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800621a:	bf00      	nop
 800621c:	bd80      	pop	{r7, pc}
 800621e:	bf00      	nop
 8006220:	20000738 	.word	0x20000738

08006224 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006224:	b480      	push	{r7}
 8006226:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8006228:	4b26      	ldr	r3, [pc, #152]	; (80062c4 <SystemInit+0xa0>)
 800622a:	2200      	movs	r2, #0
 800622c:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 800622e:	4a25      	ldr	r2, [pc, #148]	; (80062c4 <SystemInit+0xa0>)
 8006230:	4b24      	ldr	r3, [pc, #144]	; (80062c4 <SystemInit+0xa0>)
 8006232:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006236:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800623a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800623e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006242:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f043 0301 	orr.w	r3, r3, #1
 800624c:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800624e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006252:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8006256:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8006258:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800625c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	4b19      	ldr	r3, [pc, #100]	; (80062c8 <SystemInit+0xa4>)
 8006264:	4013      	ands	r3, r2
 8006266:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8006268:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800626c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006270:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006274:	f023 0305 	bic.w	r3, r3, #5
 8006278:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800627c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006280:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006284:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006288:	f023 0301 	bic.w	r3, r3, #1
 800628c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8006290:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006294:	4a0d      	ldr	r2, [pc, #52]	; (80062cc <SystemInit+0xa8>)
 8006296:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8006298:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800629c:	4a0b      	ldr	r2, [pc, #44]	; (80062cc <SystemInit+0xa8>)
 800629e:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80062a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80062a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80062ae:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80062b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062b4:	2200      	movs	r2, #0
 80062b6:	619a      	str	r2, [r3, #24]
}
 80062b8:	bf00      	nop
 80062ba:	46bd      	mov	sp, r7
 80062bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c0:	4770      	bx	lr
 80062c2:	bf00      	nop
 80062c4:	e000ed00 	.word	0xe000ed00
 80062c8:	faf6fefb 	.word	0xfaf6fefb
 80062cc:	22041000 	.word	0x22041000

080062d0 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b087      	sub	sp, #28
 80062d4:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 80062d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	091b      	lsrs	r3, r3, #4
 80062de:	f003 030f 	and.w	r3, r3, #15
 80062e2:	4a47      	ldr	r2, [pc, #284]	; (8006400 <SystemCoreClockUpdate+0x130>)
 80062e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062e8:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80062ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	f003 030c 	and.w	r3, r3, #12
 80062f4:	2b0c      	cmp	r3, #12
 80062f6:	d867      	bhi.n	80063c8 <SystemCoreClockUpdate+0xf8>
 80062f8:	a201      	add	r2, pc, #4	; (adr r2, 8006300 <SystemCoreClockUpdate+0x30>)
 80062fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062fe:	bf00      	nop
 8006300:	08006335 	.word	0x08006335
 8006304:	080063c9 	.word	0x080063c9
 8006308:	080063c9 	.word	0x080063c9
 800630c:	080063c9 	.word	0x080063c9
 8006310:	0800633d 	.word	0x0800633d
 8006314:	080063c9 	.word	0x080063c9
 8006318:	080063c9 	.word	0x080063c9
 800631c:	080063c9 	.word	0x080063c9
 8006320:	08006345 	.word	0x08006345
 8006324:	080063c9 	.word	0x080063c9
 8006328:	080063c9 	.word	0x080063c9
 800632c:	080063c9 	.word	0x080063c9
 8006330:	0800634d 	.word	0x0800634d
  {
    case 0x00:   /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8006334:	4a33      	ldr	r2, [pc, #204]	; (8006404 <SystemCoreClockUpdate+0x134>)
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	6013      	str	r3, [r2, #0]
      break;
 800633a:	e049      	b.n	80063d0 <SystemCoreClockUpdate+0x100>

    case 0x04:  /* HSI used as system clock source */
      /* HSI used as system clock source */
        SystemCoreClock = HSI_VALUE;
 800633c:	4b31      	ldr	r3, [pc, #196]	; (8006404 <SystemCoreClockUpdate+0x134>)
 800633e:	4a32      	ldr	r2, [pc, #200]	; (8006408 <SystemCoreClockUpdate+0x138>)
 8006340:	601a      	str	r2, [r3, #0]
      break;
 8006342:	e045      	b.n	80063d0 <SystemCoreClockUpdate+0x100>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8006344:	4b2f      	ldr	r3, [pc, #188]	; (8006404 <SystemCoreClockUpdate+0x134>)
 8006346:	4a31      	ldr	r2, [pc, #196]	; (800640c <SystemCoreClockUpdate+0x13c>)
 8006348:	601a      	str	r2, [r3, #0]
      break;
 800634a:	e041      	b.n	80063d0 <SystemCoreClockUpdate+0x100>

    case 0x0C: /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800634c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006350:	68db      	ldr	r3, [r3, #12]
 8006352:	f003 0303 	and.w	r3, r3, #3
 8006356:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 8006358:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800635c:	68db      	ldr	r3, [r3, #12]
 800635e:	091b      	lsrs	r3, r3, #4
 8006360:	f003 0307 	and.w	r3, r3, #7
 8006364:	3301      	adds	r3, #1
 8006366:	60bb      	str	r3, [r7, #8]

      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2b02      	cmp	r3, #2
 800636c:	d105      	bne.n	800637a <SystemCoreClockUpdate+0xaa>
      {
        pllvco = (HSI_VALUE / pllm);
 800636e:	4a26      	ldr	r2, [pc, #152]	; (8006408 <SystemCoreClockUpdate+0x138>)
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	fbb2 f3f3 	udiv	r3, r2, r3
 8006376:	617b      	str	r3, [r7, #20]
 8006378:	e00d      	b.n	8006396 <SystemCoreClockUpdate+0xc6>
      }
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2b03      	cmp	r3, #3
 800637e:	d105      	bne.n	800638c <SystemCoreClockUpdate+0xbc>
      {
        pllvco = (HSE_VALUE / pllm);
 8006380:	4a22      	ldr	r2, [pc, #136]	; (800640c <SystemCoreClockUpdate+0x13c>)
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	fbb2 f3f3 	udiv	r3, r2, r3
 8006388:	617b      	str	r3, [r7, #20]
 800638a:	e004      	b.n	8006396 <SystemCoreClockUpdate+0xc6>
      }
      else /* MSI used as PLL clock source */
      {
        pllvco = (msirange / pllm);
 800638c:	693a      	ldr	r2, [r7, #16]
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	fbb2 f3f3 	udiv	r3, r2, r3
 8006394:	617b      	str	r3, [r7, #20]
      }
      
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006396:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800639a:	68db      	ldr	r3, [r3, #12]
 800639c:	0a1b      	lsrs	r3, r3, #8
 800639e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	fb02 f303 	mul.w	r3, r2, r3
 80063a8:	617b      	str	r3, [r7, #20]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 80063aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063ae:	68db      	ldr	r3, [r3, #12]
 80063b0:	0f5b      	lsrs	r3, r3, #29
 80063b2:	f003 0307 	and.w	r3, r3, #7
 80063b6:	3301      	adds	r3, #1
 80063b8:	607b      	str	r3, [r7, #4]
      
      SystemCoreClock = pllvco/pllr;
 80063ba:	697a      	ldr	r2, [r7, #20]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	fbb2 f3f3 	udiv	r3, r2, r3
 80063c2:	4a10      	ldr	r2, [pc, #64]	; (8006404 <SystemCoreClockUpdate+0x134>)
 80063c4:	6013      	str	r3, [r2, #0]
      break;
 80063c6:	e003      	b.n	80063d0 <SystemCoreClockUpdate+0x100>

    default:
      SystemCoreClock = msirange;
 80063c8:	4a0e      	ldr	r2, [pc, #56]	; (8006404 <SystemCoreClockUpdate+0x134>)
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	6013      	str	r3, [r2, #0]
      break;
 80063ce:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80063d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063d4:	689b      	ldr	r3, [r3, #8]
 80063d6:	091b      	lsrs	r3, r3, #4
 80063d8:	f003 030f 	and.w	r3, r3, #15
 80063dc:	4a0c      	ldr	r2, [pc, #48]	; (8006410 <SystemCoreClockUpdate+0x140>)
 80063de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063e2:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 80063e4:	4b07      	ldr	r3, [pc, #28]	; (8006404 <SystemCoreClockUpdate+0x134>)
 80063e6:	681a      	ldr	r2, [r3, #0]
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80063ee:	4a05      	ldr	r2, [pc, #20]	; (8006404 <SystemCoreClockUpdate+0x134>)
 80063f0:	6013      	str	r3, [r2, #0]

}
 80063f2:	bf00      	nop
 80063f4:	371c      	adds	r7, #28
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr
 80063fe:	bf00      	nop
 8006400:	08006578 	.word	0x08006578
 8006404:	20000234 	.word	0x20000234
 8006408:	00f42400 	.word	0x00f42400
 800640c:	01e84800 	.word	0x01e84800
 8006410:	08006518 	.word	0x08006518

08006414 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006414:	480d      	ldr	r0, [pc, #52]	; (800644c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8006416:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006418:	480d      	ldr	r0, [pc, #52]	; (8006450 <LoopForever+0x6>)
  ldr r1, =_edata
 800641a:	490e      	ldr	r1, [pc, #56]	; (8006454 <LoopForever+0xa>)
  ldr r2, =_sidata
 800641c:	4a0e      	ldr	r2, [pc, #56]	; (8006458 <LoopForever+0xe>)
  movs r3, #0
 800641e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8006420:	e002      	b.n	8006428 <LoopCopyDataInit>

08006422 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006422:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006424:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006426:	3304      	adds	r3, #4

08006428 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006428:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800642a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800642c:	d3f9      	bcc.n	8006422 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800642e:	4a0b      	ldr	r2, [pc, #44]	; (800645c <LoopForever+0x12>)
  ldr r4, =_ebss
 8006430:	4c0b      	ldr	r4, [pc, #44]	; (8006460 <LoopForever+0x16>)
  movs r3, #0
 8006432:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006434:	e001      	b.n	800643a <LoopFillZerobss>

08006436 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006436:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006438:	3204      	adds	r2, #4

0800643a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800643a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800643c:	d3fb      	bcc.n	8006436 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800643e:	f7ff fef1 	bl	8006224 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8006442:	f000 f811 	bl	8006468 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8006446:	f7ff f9ed 	bl	8005824 <main>

0800644a <LoopForever>:

LoopForever:
  b LoopForever
 800644a:	e7fe      	b.n	800644a <LoopForever>
  ldr   r0, =_estack
 800644c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8006450:	20000004 	.word	0x20000004
  ldr r1, =_edata
 8006454:	20000238 	.word	0x20000238
  ldr r2, =_sidata
 8006458:	080065c8 	.word	0x080065c8
  ldr r2, =_sbss
 800645c:	20000238 	.word	0x20000238
  ldr r4, =_ebss
 8006460:	20000818 	.word	0x20000818

08006464 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006464:	e7fe      	b.n	8006464 <ADC1_IRQHandler>
	...

08006468 <__libc_init_array>:
 8006468:	b570      	push	{r4, r5, r6, lr}
 800646a:	4e0d      	ldr	r6, [pc, #52]	; (80064a0 <__libc_init_array+0x38>)
 800646c:	4c0d      	ldr	r4, [pc, #52]	; (80064a4 <__libc_init_array+0x3c>)
 800646e:	1ba4      	subs	r4, r4, r6
 8006470:	10a4      	asrs	r4, r4, #2
 8006472:	2500      	movs	r5, #0
 8006474:	42a5      	cmp	r5, r4
 8006476:	d109      	bne.n	800648c <__libc_init_array+0x24>
 8006478:	4e0b      	ldr	r6, [pc, #44]	; (80064a8 <__libc_init_array+0x40>)
 800647a:	4c0c      	ldr	r4, [pc, #48]	; (80064ac <__libc_init_array+0x44>)
 800647c:	f000 f820 	bl	80064c0 <_init>
 8006480:	1ba4      	subs	r4, r4, r6
 8006482:	10a4      	asrs	r4, r4, #2
 8006484:	2500      	movs	r5, #0
 8006486:	42a5      	cmp	r5, r4
 8006488:	d105      	bne.n	8006496 <__libc_init_array+0x2e>
 800648a:	bd70      	pop	{r4, r5, r6, pc}
 800648c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006490:	4798      	blx	r3
 8006492:	3501      	adds	r5, #1
 8006494:	e7ee      	b.n	8006474 <__libc_init_array+0xc>
 8006496:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800649a:	4798      	blx	r3
 800649c:	3501      	adds	r5, #1
 800649e:	e7f2      	b.n	8006486 <__libc_init_array+0x1e>
 80064a0:	080065c0 	.word	0x080065c0
 80064a4:	080065c0 	.word	0x080065c0
 80064a8:	080065c0 	.word	0x080065c0
 80064ac:	080065c4 	.word	0x080065c4

080064b0 <memset>:
 80064b0:	4402      	add	r2, r0
 80064b2:	4603      	mov	r3, r0
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d100      	bne.n	80064ba <memset+0xa>
 80064b8:	4770      	bx	lr
 80064ba:	f803 1b01 	strb.w	r1, [r3], #1
 80064be:	e7f9      	b.n	80064b4 <memset+0x4>

080064c0 <_init>:
 80064c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064c2:	bf00      	nop
 80064c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064c6:	bc08      	pop	{r3}
 80064c8:	469e      	mov	lr, r3
 80064ca:	4770      	bx	lr

080064cc <_fini>:
 80064cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ce:	bf00      	nop
 80064d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064d2:	bc08      	pop	{r3}
 80064d4:	469e      	mov	lr, r3
 80064d6:	4770      	bx	lr
