
Alchimie13.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006300  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08006440  08006440  00016440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006520  08006520  00016520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006528  08006528  00016528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800652c  0800652c  0001652c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000174  20000004  08006530  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000005e0  20000178  080066a4  00020178  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000758  080066a4  00020758  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020178  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001797d  00000000  00000000  000201a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002f5b  00000000  00000000  00037b25  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001a28  00000000  00000000  0003aa80  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000018c0  00000000  00000000  0003c4a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00022c64  00000000  00000000  0003dd68  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0001045a  00000000  00000000  000609cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000db2ae  00000000  00000000  00070e26  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0014c0d4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006ed8  00000000  00000000  0014c150  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000178 	.word	0x20000178
 800015c:	00000000 	.word	0x00000000
 8000160:	08006428 	.word	0x08006428

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000017c 	.word	0x2000017c
 800017c:	08006428 	.word	0x08006428

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_uldivmod>:
 8000190:	b953      	cbnz	r3, 80001a8 <__aeabi_uldivmod+0x18>
 8000192:	b94a      	cbnz	r2, 80001a8 <__aeabi_uldivmod+0x18>
 8000194:	2900      	cmp	r1, #0
 8000196:	bf08      	it	eq
 8000198:	2800      	cmpeq	r0, #0
 800019a:	bf1c      	itt	ne
 800019c:	f04f 31ff 	movne.w	r1, #4294967295
 80001a0:	f04f 30ff 	movne.w	r0, #4294967295
 80001a4:	f000 b97a 	b.w	800049c <__aeabi_idiv0>
 80001a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001b0:	f000 f806 	bl	80001c0 <__udivmoddi4>
 80001b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001bc:	b004      	add	sp, #16
 80001be:	4770      	bx	lr

080001c0 <__udivmoddi4>:
 80001c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c4:	468c      	mov	ip, r1
 80001c6:	460d      	mov	r5, r1
 80001c8:	4604      	mov	r4, r0
 80001ca:	9e08      	ldr	r6, [sp, #32]
 80001cc:	2b00      	cmp	r3, #0
 80001ce:	d151      	bne.n	8000274 <__udivmoddi4+0xb4>
 80001d0:	428a      	cmp	r2, r1
 80001d2:	4617      	mov	r7, r2
 80001d4:	d96d      	bls.n	80002b2 <__udivmoddi4+0xf2>
 80001d6:	fab2 fe82 	clz	lr, r2
 80001da:	f1be 0f00 	cmp.w	lr, #0
 80001de:	d00b      	beq.n	80001f8 <__udivmoddi4+0x38>
 80001e0:	f1ce 0c20 	rsb	ip, lr, #32
 80001e4:	fa01 f50e 	lsl.w	r5, r1, lr
 80001e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80001ec:	fa02 f70e 	lsl.w	r7, r2, lr
 80001f0:	ea4c 0c05 	orr.w	ip, ip, r5
 80001f4:	fa00 f40e 	lsl.w	r4, r0, lr
 80001f8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80001fc:	0c25      	lsrs	r5, r4, #16
 80001fe:	fbbc f8fa 	udiv	r8, ip, sl
 8000202:	fa1f f987 	uxth.w	r9, r7
 8000206:	fb0a cc18 	mls	ip, sl, r8, ip
 800020a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800020e:	fb08 f309 	mul.w	r3, r8, r9
 8000212:	42ab      	cmp	r3, r5
 8000214:	d90a      	bls.n	800022c <__udivmoddi4+0x6c>
 8000216:	19ed      	adds	r5, r5, r7
 8000218:	f108 32ff 	add.w	r2, r8, #4294967295
 800021c:	f080 8123 	bcs.w	8000466 <__udivmoddi4+0x2a6>
 8000220:	42ab      	cmp	r3, r5
 8000222:	f240 8120 	bls.w	8000466 <__udivmoddi4+0x2a6>
 8000226:	f1a8 0802 	sub.w	r8, r8, #2
 800022a:	443d      	add	r5, r7
 800022c:	1aed      	subs	r5, r5, r3
 800022e:	b2a4      	uxth	r4, r4
 8000230:	fbb5 f0fa 	udiv	r0, r5, sl
 8000234:	fb0a 5510 	mls	r5, sl, r0, r5
 8000238:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800023c:	fb00 f909 	mul.w	r9, r0, r9
 8000240:	45a1      	cmp	r9, r4
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x98>
 8000244:	19e4      	adds	r4, r4, r7
 8000246:	f100 33ff 	add.w	r3, r0, #4294967295
 800024a:	f080 810a 	bcs.w	8000462 <__udivmoddi4+0x2a2>
 800024e:	45a1      	cmp	r9, r4
 8000250:	f240 8107 	bls.w	8000462 <__udivmoddi4+0x2a2>
 8000254:	3802      	subs	r0, #2
 8000256:	443c      	add	r4, r7
 8000258:	eba4 0409 	sub.w	r4, r4, r9
 800025c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000260:	2100      	movs	r1, #0
 8000262:	2e00      	cmp	r6, #0
 8000264:	d061      	beq.n	800032a <__udivmoddi4+0x16a>
 8000266:	fa24 f40e 	lsr.w	r4, r4, lr
 800026a:	2300      	movs	r3, #0
 800026c:	6034      	str	r4, [r6, #0]
 800026e:	6073      	str	r3, [r6, #4]
 8000270:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000274:	428b      	cmp	r3, r1
 8000276:	d907      	bls.n	8000288 <__udivmoddi4+0xc8>
 8000278:	2e00      	cmp	r6, #0
 800027a:	d054      	beq.n	8000326 <__udivmoddi4+0x166>
 800027c:	2100      	movs	r1, #0
 800027e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000282:	4608      	mov	r0, r1
 8000284:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000288:	fab3 f183 	clz	r1, r3
 800028c:	2900      	cmp	r1, #0
 800028e:	f040 808e 	bne.w	80003ae <__udivmoddi4+0x1ee>
 8000292:	42ab      	cmp	r3, r5
 8000294:	d302      	bcc.n	800029c <__udivmoddi4+0xdc>
 8000296:	4282      	cmp	r2, r0
 8000298:	f200 80fa 	bhi.w	8000490 <__udivmoddi4+0x2d0>
 800029c:	1a84      	subs	r4, r0, r2
 800029e:	eb65 0503 	sbc.w	r5, r5, r3
 80002a2:	2001      	movs	r0, #1
 80002a4:	46ac      	mov	ip, r5
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	d03f      	beq.n	800032a <__udivmoddi4+0x16a>
 80002aa:	e886 1010 	stmia.w	r6, {r4, ip}
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	b912      	cbnz	r2, 80002ba <__udivmoddi4+0xfa>
 80002b4:	2701      	movs	r7, #1
 80002b6:	fbb7 f7f2 	udiv	r7, r7, r2
 80002ba:	fab7 fe87 	clz	lr, r7
 80002be:	f1be 0f00 	cmp.w	lr, #0
 80002c2:	d134      	bne.n	800032e <__udivmoddi4+0x16e>
 80002c4:	1beb      	subs	r3, r5, r7
 80002c6:	0c3a      	lsrs	r2, r7, #16
 80002c8:	fa1f fc87 	uxth.w	ip, r7
 80002cc:	2101      	movs	r1, #1
 80002ce:	fbb3 f8f2 	udiv	r8, r3, r2
 80002d2:	0c25      	lsrs	r5, r4, #16
 80002d4:	fb02 3318 	mls	r3, r2, r8, r3
 80002d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80002dc:	fb0c f308 	mul.w	r3, ip, r8
 80002e0:	42ab      	cmp	r3, r5
 80002e2:	d907      	bls.n	80002f4 <__udivmoddi4+0x134>
 80002e4:	19ed      	adds	r5, r5, r7
 80002e6:	f108 30ff 	add.w	r0, r8, #4294967295
 80002ea:	d202      	bcs.n	80002f2 <__udivmoddi4+0x132>
 80002ec:	42ab      	cmp	r3, r5
 80002ee:	f200 80d1 	bhi.w	8000494 <__udivmoddi4+0x2d4>
 80002f2:	4680      	mov	r8, r0
 80002f4:	1aed      	subs	r5, r5, r3
 80002f6:	b2a3      	uxth	r3, r4
 80002f8:	fbb5 f0f2 	udiv	r0, r5, r2
 80002fc:	fb02 5510 	mls	r5, r2, r0, r5
 8000300:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000304:	fb0c fc00 	mul.w	ip, ip, r0
 8000308:	45a4      	cmp	ip, r4
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x15c>
 800030c:	19e4      	adds	r4, r4, r7
 800030e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x15a>
 8000314:	45a4      	cmp	ip, r4
 8000316:	f200 80b8 	bhi.w	800048a <__udivmoddi4+0x2ca>
 800031a:	4618      	mov	r0, r3
 800031c:	eba4 040c 	sub.w	r4, r4, ip
 8000320:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000324:	e79d      	b.n	8000262 <__udivmoddi4+0xa2>
 8000326:	4631      	mov	r1, r6
 8000328:	4630      	mov	r0, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	f1ce 0420 	rsb	r4, lr, #32
 8000332:	fa05 f30e 	lsl.w	r3, r5, lr
 8000336:	fa07 f70e 	lsl.w	r7, r7, lr
 800033a:	fa20 f804 	lsr.w	r8, r0, r4
 800033e:	0c3a      	lsrs	r2, r7, #16
 8000340:	fa25 f404 	lsr.w	r4, r5, r4
 8000344:	ea48 0803 	orr.w	r8, r8, r3
 8000348:	fbb4 f1f2 	udiv	r1, r4, r2
 800034c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000350:	fb02 4411 	mls	r4, r2, r1, r4
 8000354:	fa1f fc87 	uxth.w	ip, r7
 8000358:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800035c:	fb01 f30c 	mul.w	r3, r1, ip
 8000360:	42ab      	cmp	r3, r5
 8000362:	fa00 f40e 	lsl.w	r4, r0, lr
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x1bc>
 8000368:	19ed      	adds	r5, r5, r7
 800036a:	f101 30ff 	add.w	r0, r1, #4294967295
 800036e:	f080 808a 	bcs.w	8000486 <__udivmoddi4+0x2c6>
 8000372:	42ab      	cmp	r3, r5
 8000374:	f240 8087 	bls.w	8000486 <__udivmoddi4+0x2c6>
 8000378:	3902      	subs	r1, #2
 800037a:	443d      	add	r5, r7
 800037c:	1aeb      	subs	r3, r5, r3
 800037e:	fa1f f588 	uxth.w	r5, r8
 8000382:	fbb3 f0f2 	udiv	r0, r3, r2
 8000386:	fb02 3310 	mls	r3, r2, r0, r3
 800038a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800038e:	fb00 f30c 	mul.w	r3, r0, ip
 8000392:	42ab      	cmp	r3, r5
 8000394:	d907      	bls.n	80003a6 <__udivmoddi4+0x1e6>
 8000396:	19ed      	adds	r5, r5, r7
 8000398:	f100 38ff 	add.w	r8, r0, #4294967295
 800039c:	d26f      	bcs.n	800047e <__udivmoddi4+0x2be>
 800039e:	42ab      	cmp	r3, r5
 80003a0:	d96d      	bls.n	800047e <__udivmoddi4+0x2be>
 80003a2:	3802      	subs	r0, #2
 80003a4:	443d      	add	r5, r7
 80003a6:	1aeb      	subs	r3, r5, r3
 80003a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003ac:	e78f      	b.n	80002ce <__udivmoddi4+0x10e>
 80003ae:	f1c1 0720 	rsb	r7, r1, #32
 80003b2:	fa22 f807 	lsr.w	r8, r2, r7
 80003b6:	408b      	lsls	r3, r1
 80003b8:	fa05 f401 	lsl.w	r4, r5, r1
 80003bc:	ea48 0303 	orr.w	r3, r8, r3
 80003c0:	fa20 fe07 	lsr.w	lr, r0, r7
 80003c4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80003c8:	40fd      	lsrs	r5, r7
 80003ca:	ea4e 0e04 	orr.w	lr, lr, r4
 80003ce:	fbb5 f9fc 	udiv	r9, r5, ip
 80003d2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80003d6:	fb0c 5519 	mls	r5, ip, r9, r5
 80003da:	fa1f f883 	uxth.w	r8, r3
 80003de:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80003e2:	fb09 f408 	mul.w	r4, r9, r8
 80003e6:	42ac      	cmp	r4, r5
 80003e8:	fa02 f201 	lsl.w	r2, r2, r1
 80003ec:	fa00 fa01 	lsl.w	sl, r0, r1
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x244>
 80003f2:	18ed      	adds	r5, r5, r3
 80003f4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003f8:	d243      	bcs.n	8000482 <__udivmoddi4+0x2c2>
 80003fa:	42ac      	cmp	r4, r5
 80003fc:	d941      	bls.n	8000482 <__udivmoddi4+0x2c2>
 80003fe:	f1a9 0902 	sub.w	r9, r9, #2
 8000402:	441d      	add	r5, r3
 8000404:	1b2d      	subs	r5, r5, r4
 8000406:	fa1f fe8e 	uxth.w	lr, lr
 800040a:	fbb5 f0fc 	udiv	r0, r5, ip
 800040e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000412:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000416:	fb00 f808 	mul.w	r8, r0, r8
 800041a:	45a0      	cmp	r8, r4
 800041c:	d907      	bls.n	800042e <__udivmoddi4+0x26e>
 800041e:	18e4      	adds	r4, r4, r3
 8000420:	f100 35ff 	add.w	r5, r0, #4294967295
 8000424:	d229      	bcs.n	800047a <__udivmoddi4+0x2ba>
 8000426:	45a0      	cmp	r8, r4
 8000428:	d927      	bls.n	800047a <__udivmoddi4+0x2ba>
 800042a:	3802      	subs	r0, #2
 800042c:	441c      	add	r4, r3
 800042e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000432:	eba4 0408 	sub.w	r4, r4, r8
 8000436:	fba0 8902 	umull	r8, r9, r0, r2
 800043a:	454c      	cmp	r4, r9
 800043c:	46c6      	mov	lr, r8
 800043e:	464d      	mov	r5, r9
 8000440:	d315      	bcc.n	800046e <__udivmoddi4+0x2ae>
 8000442:	d012      	beq.n	800046a <__udivmoddi4+0x2aa>
 8000444:	b156      	cbz	r6, 800045c <__udivmoddi4+0x29c>
 8000446:	ebba 030e 	subs.w	r3, sl, lr
 800044a:	eb64 0405 	sbc.w	r4, r4, r5
 800044e:	fa04 f707 	lsl.w	r7, r4, r7
 8000452:	40cb      	lsrs	r3, r1
 8000454:	431f      	orrs	r7, r3
 8000456:	40cc      	lsrs	r4, r1
 8000458:	6037      	str	r7, [r6, #0]
 800045a:	6074      	str	r4, [r6, #4]
 800045c:	2100      	movs	r1, #0
 800045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000462:	4618      	mov	r0, r3
 8000464:	e6f8      	b.n	8000258 <__udivmoddi4+0x98>
 8000466:	4690      	mov	r8, r2
 8000468:	e6e0      	b.n	800022c <__udivmoddi4+0x6c>
 800046a:	45c2      	cmp	sl, r8
 800046c:	d2ea      	bcs.n	8000444 <__udivmoddi4+0x284>
 800046e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000472:	eb69 0503 	sbc.w	r5, r9, r3
 8000476:	3801      	subs	r0, #1
 8000478:	e7e4      	b.n	8000444 <__udivmoddi4+0x284>
 800047a:	4628      	mov	r0, r5
 800047c:	e7d7      	b.n	800042e <__udivmoddi4+0x26e>
 800047e:	4640      	mov	r0, r8
 8000480:	e791      	b.n	80003a6 <__udivmoddi4+0x1e6>
 8000482:	4681      	mov	r9, r0
 8000484:	e7be      	b.n	8000404 <__udivmoddi4+0x244>
 8000486:	4601      	mov	r1, r0
 8000488:	e778      	b.n	800037c <__udivmoddi4+0x1bc>
 800048a:	3802      	subs	r0, #2
 800048c:	443c      	add	r4, r7
 800048e:	e745      	b.n	800031c <__udivmoddi4+0x15c>
 8000490:	4608      	mov	r0, r1
 8000492:	e708      	b.n	80002a6 <__udivmoddi4+0xe6>
 8000494:	f1a8 0802 	sub.w	r8, r8, #2
 8000498:	443d      	add	r5, r7
 800049a:	e72b      	b.n	80002f4 <__udivmoddi4+0x134>

0800049c <__aeabi_idiv0>:
 800049c:	4770      	bx	lr
 800049e:	bf00      	nop

080004a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b082      	sub	sp, #8
 80004a4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80004a6:	2300      	movs	r3, #0
 80004a8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004aa:	4a0c      	ldr	r2, [pc, #48]	; (80004dc <HAL_Init+0x3c>)
 80004ac:	4b0b      	ldr	r3, [pc, #44]	; (80004dc <HAL_Init+0x3c>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004b4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004b6:	2003      	movs	r0, #3
 80004b8:	f000 f966 	bl	8000788 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80004bc:	2000      	movs	r0, #0
 80004be:	f000 f80f 	bl	80004e0 <HAL_InitTick>
 80004c2:	4603      	mov	r3, r0
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d002      	beq.n	80004ce <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80004c8:	2301      	movs	r3, #1
 80004ca:	71fb      	strb	r3, [r7, #7]
 80004cc:	e001      	b.n	80004d2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80004ce:	f005 fd2e 	bl	8005f2e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80004d2:	79fb      	ldrb	r3, [r7, #7]
}
 80004d4:	4618      	mov	r0, r3
 80004d6:	3708      	adds	r7, #8
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	58004000 	.word	0x58004000

080004e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b084      	sub	sp, #16
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80004e8:	2300      	movs	r3, #0
 80004ea:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80004ec:	4b17      	ldr	r3, [pc, #92]	; (800054c <HAL_InitTick+0x6c>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d023      	beq.n	800053c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U /uwTickFreq)) == 0U)
 80004f4:	f002 fbb0 	bl	8002c58 <HAL_RCC_GetHCLKFreq>
 80004f8:	4601      	mov	r1, r0
 80004fa:	4b14      	ldr	r3, [pc, #80]	; (800054c <HAL_InitTick+0x6c>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000502:	fbb2 f3f3 	udiv	r3, r2, r3
 8000506:	fbb1 f3f3 	udiv	r3, r1, r3
 800050a:	4618      	mov	r0, r3
 800050c:	f000 f96f 	bl	80007ee <HAL_SYSTICK_Config>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d10f      	bne.n	8000536 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	2b0f      	cmp	r3, #15
 800051a:	d809      	bhi.n	8000530 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800051c:	2200      	movs	r2, #0
 800051e:	6879      	ldr	r1, [r7, #4]
 8000520:	f04f 30ff 	mov.w	r0, #4294967295
 8000524:	f000 f93b 	bl	800079e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000528:	4a09      	ldr	r2, [pc, #36]	; (8000550 <HAL_InitTick+0x70>)
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	6013      	str	r3, [r2, #0]
 800052e:	e007      	b.n	8000540 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000530:	2301      	movs	r3, #1
 8000532:	73fb      	strb	r3, [r7, #15]
 8000534:	e004      	b.n	8000540 <HAL_InitTick+0x60>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8000536:	2301      	movs	r3, #1
 8000538:	73fb      	strb	r3, [r7, #15]
 800053a:	e001      	b.n	8000540 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800053c:	2301      	movs	r3, #1
 800053e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000540:	7bfb      	ldrb	r3, [r7, #15]
}
 8000542:	4618      	mov	r0, r3
 8000544:	3710      	adds	r7, #16
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	20000008 	.word	0x20000008
 8000550:	20000004 	.word	0x20000004

08000554 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000558:	4b05      	ldr	r3, [pc, #20]	; (8000570 <HAL_IncTick+0x1c>)
 800055a:	681a      	ldr	r2, [r3, #0]
 800055c:	4b05      	ldr	r3, [pc, #20]	; (8000574 <HAL_IncTick+0x20>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4413      	add	r3, r2
 8000562:	4a03      	ldr	r2, [pc, #12]	; (8000570 <HAL_IncTick+0x1c>)
 8000564:	6013      	str	r3, [r2, #0]
}
 8000566:	bf00      	nop
 8000568:	46bd      	mov	sp, r7
 800056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056e:	4770      	bx	lr
 8000570:	200002c4 	.word	0x200002c4
 8000574:	20000008 	.word	0x20000008

08000578 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
  return uwTick;
 800057c:	4b03      	ldr	r3, [pc, #12]	; (800058c <HAL_GetTick+0x14>)
 800057e:	681b      	ldr	r3, [r3, #0]
}
 8000580:	4618      	mov	r0, r3
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	200002c4 	.word	0x200002c4

08000590 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000594:	4b03      	ldr	r3, [pc, #12]	; (80005a4 <HAL_GetTickPrio+0x14>)
 8000596:	681b      	ldr	r3, [r3, #0]
}
 8000598:	4618      	mov	r0, r3
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	20000004 	.word	0x20000004

080005a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b084      	sub	sp, #16
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 80005b0:	f7ff ffe2 	bl	8000578 <HAL_GetTick>
 80005b4:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005c0:	d004      	beq.n	80005cc <HAL_Delay+0x24>
    {
      wait += (uint32_t)(uwTickFreq);
 80005c2:	4b09      	ldr	r3, [pc, #36]	; (80005e8 <HAL_Delay+0x40>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	68fa      	ldr	r2, [r7, #12]
 80005c8:	4413      	add	r3, r2
 80005ca:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 80005cc:	bf00      	nop
 80005ce:	f7ff ffd3 	bl	8000578 <HAL_GetTick>
 80005d2:	4602      	mov	r2, r0
 80005d4:	68bb      	ldr	r3, [r7, #8]
 80005d6:	1ad2      	subs	r2, r2, r3
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	429a      	cmp	r2, r3
 80005dc:	d3f7      	bcc.n	80005ce <HAL_Delay+0x26>
    {
    }
  }
 80005de:	bf00      	nop
 80005e0:	3710      	adds	r7, #16
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	20000008 	.word	0x20000008

080005ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b085      	sub	sp, #20
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	f003 0307 	and.w	r3, r3, #7
 80005fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005fc:	4b0c      	ldr	r3, [pc, #48]	; (8000630 <__NVIC_SetPriorityGrouping+0x44>)
 80005fe:	68db      	ldr	r3, [r3, #12]
 8000600:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000602:	68ba      	ldr	r2, [r7, #8]
 8000604:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000608:	4013      	ands	r3, r2
 800060a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000610:	68bb      	ldr	r3, [r7, #8]
 8000612:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000614:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000618:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800061c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800061e:	4a04      	ldr	r2, [pc, #16]	; (8000630 <__NVIC_SetPriorityGrouping+0x44>)
 8000620:	68bb      	ldr	r3, [r7, #8]
 8000622:	60d3      	str	r3, [r2, #12]
}
 8000624:	bf00      	nop
 8000626:	3714      	adds	r7, #20
 8000628:	46bd      	mov	sp, r7
 800062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062e:	4770      	bx	lr
 8000630:	e000ed00 	.word	0xe000ed00

08000634 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000638:	4b04      	ldr	r3, [pc, #16]	; (800064c <__NVIC_GetPriorityGrouping+0x18>)
 800063a:	68db      	ldr	r3, [r3, #12]
 800063c:	0a1b      	lsrs	r3, r3, #8
 800063e:	f003 0307 	and.w	r3, r3, #7
}
 8000642:	4618      	mov	r0, r3
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr
 800064c:	e000ed00 	.word	0xe000ed00

08000650 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000650:	b480      	push	{r7}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0
 8000656:	4603      	mov	r3, r0
 8000658:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800065a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800065e:	2b00      	cmp	r3, #0
 8000660:	db0b      	blt.n	800067a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000662:	4909      	ldr	r1, [pc, #36]	; (8000688 <__NVIC_EnableIRQ+0x38>)
 8000664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000668:	095b      	lsrs	r3, r3, #5
 800066a:	79fa      	ldrb	r2, [r7, #7]
 800066c:	f002 021f 	and.w	r2, r2, #31
 8000670:	2001      	movs	r0, #1
 8000672:	fa00 f202 	lsl.w	r2, r0, r2
 8000676:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800067a:	bf00      	nop
 800067c:	370c      	adds	r7, #12
 800067e:	46bd      	mov	sp, r7
 8000680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop
 8000688:	e000e100 	.word	0xe000e100

0800068c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0
 8000692:	4603      	mov	r3, r0
 8000694:	6039      	str	r1, [r7, #0]
 8000696:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000698:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800069c:	2b00      	cmp	r3, #0
 800069e:	db0a      	blt.n	80006b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a0:	490d      	ldr	r1, [pc, #52]	; (80006d8 <__NVIC_SetPriority+0x4c>)
 80006a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a6:	683a      	ldr	r2, [r7, #0]
 80006a8:	b2d2      	uxtb	r2, r2
 80006aa:	0112      	lsls	r2, r2, #4
 80006ac:	b2d2      	uxtb	r2, r2
 80006ae:	440b      	add	r3, r1
 80006b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006b4:	e00a      	b.n	80006cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b6:	4909      	ldr	r1, [pc, #36]	; (80006dc <__NVIC_SetPriority+0x50>)
 80006b8:	79fb      	ldrb	r3, [r7, #7]
 80006ba:	f003 030f 	and.w	r3, r3, #15
 80006be:	3b04      	subs	r3, #4
 80006c0:	683a      	ldr	r2, [r7, #0]
 80006c2:	b2d2      	uxtb	r2, r2
 80006c4:	0112      	lsls	r2, r2, #4
 80006c6:	b2d2      	uxtb	r2, r2
 80006c8:	440b      	add	r3, r1
 80006ca:	761a      	strb	r2, [r3, #24]
}
 80006cc:	bf00      	nop
 80006ce:	370c      	adds	r7, #12
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	e000e100 	.word	0xe000e100
 80006dc:	e000ed00 	.word	0xe000ed00

080006e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b089      	sub	sp, #36	; 0x24
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	60f8      	str	r0, [r7, #12]
 80006e8:	60b9      	str	r1, [r7, #8]
 80006ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	f003 0307 	and.w	r3, r3, #7
 80006f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006f4:	69fb      	ldr	r3, [r7, #28]
 80006f6:	f1c3 0307 	rsb	r3, r3, #7
 80006fa:	2b04      	cmp	r3, #4
 80006fc:	bf28      	it	cs
 80006fe:	2304      	movcs	r3, #4
 8000700:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000702:	69fb      	ldr	r3, [r7, #28]
 8000704:	3304      	adds	r3, #4
 8000706:	2b06      	cmp	r3, #6
 8000708:	d902      	bls.n	8000710 <NVIC_EncodePriority+0x30>
 800070a:	69fb      	ldr	r3, [r7, #28]
 800070c:	3b03      	subs	r3, #3
 800070e:	e000      	b.n	8000712 <NVIC_EncodePriority+0x32>
 8000710:	2300      	movs	r3, #0
 8000712:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000714:	2201      	movs	r2, #1
 8000716:	69bb      	ldr	r3, [r7, #24]
 8000718:	fa02 f303 	lsl.w	r3, r2, r3
 800071c:	1e5a      	subs	r2, r3, #1
 800071e:	68bb      	ldr	r3, [r7, #8]
 8000720:	401a      	ands	r2, r3
 8000722:	697b      	ldr	r3, [r7, #20]
 8000724:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000726:	2101      	movs	r1, #1
 8000728:	697b      	ldr	r3, [r7, #20]
 800072a:	fa01 f303 	lsl.w	r3, r1, r3
 800072e:	1e59      	subs	r1, r3, #1
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000734:	4313      	orrs	r3, r2
         );
}
 8000736:	4618      	mov	r0, r3
 8000738:	3724      	adds	r7, #36	; 0x24
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
	...

08000744 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	3b01      	subs	r3, #1
 8000750:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000754:	d301      	bcc.n	800075a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000756:	2301      	movs	r3, #1
 8000758:	e00f      	b.n	800077a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800075a:	4a0a      	ldr	r2, [pc, #40]	; (8000784 <SysTick_Config+0x40>)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	3b01      	subs	r3, #1
 8000760:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000762:	210f      	movs	r1, #15
 8000764:	f04f 30ff 	mov.w	r0, #4294967295
 8000768:	f7ff ff90 	bl	800068c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800076c:	4b05      	ldr	r3, [pc, #20]	; (8000784 <SysTick_Config+0x40>)
 800076e:	2200      	movs	r2, #0
 8000770:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000772:	4b04      	ldr	r3, [pc, #16]	; (8000784 <SysTick_Config+0x40>)
 8000774:	2207      	movs	r2, #7
 8000776:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000778:	2300      	movs	r3, #0
}
 800077a:	4618      	mov	r0, r3
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	e000e010 	.word	0xe000e010

08000788 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000790:	6878      	ldr	r0, [r7, #4]
 8000792:	f7ff ff2b 	bl	80005ec <__NVIC_SetPriorityGrouping>
}
 8000796:	bf00      	nop
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}

0800079e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800079e:	b580      	push	{r7, lr}
 80007a0:	b086      	sub	sp, #24
 80007a2:	af00      	add	r7, sp, #0
 80007a4:	4603      	mov	r3, r0
 80007a6:	60b9      	str	r1, [r7, #8]
 80007a8:	607a      	str	r2, [r7, #4]
 80007aa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80007ac:	f7ff ff42 	bl	8000634 <__NVIC_GetPriorityGrouping>
 80007b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007b2:	687a      	ldr	r2, [r7, #4]
 80007b4:	68b9      	ldr	r1, [r7, #8]
 80007b6:	6978      	ldr	r0, [r7, #20]
 80007b8:	f7ff ff92 	bl	80006e0 <NVIC_EncodePriority>
 80007bc:	4602      	mov	r2, r0
 80007be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007c2:	4611      	mov	r1, r2
 80007c4:	4618      	mov	r0, r3
 80007c6:	f7ff ff61 	bl	800068c <__NVIC_SetPriority>
}
 80007ca:	bf00      	nop
 80007cc:	3718      	adds	r7, #24
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}

080007d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007d2:	b580      	push	{r7, lr}
 80007d4:	b082      	sub	sp, #8
 80007d6:	af00      	add	r7, sp, #0
 80007d8:	4603      	mov	r3, r0
 80007da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e0:	4618      	mov	r0, r3
 80007e2:	f7ff ff35 	bl	8000650 <__NVIC_EnableIRQ>
}
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}

080007ee <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007ee:	b580      	push	{r7, lr}
 80007f0:	b082      	sub	sp, #8
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007f6:	6878      	ldr	r0, [r7, #4]
 80007f8:	f7ff ffa4 	bl	8000744 <SysTick_Config>
 80007fc:	4603      	mov	r3, r0
}
 80007fe:	4618      	mov	r0, r3
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
	...

08000808 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d101      	bne.n	800081a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000816:	2301      	movs	r3, #1
 8000818:	e08d      	b.n	8000936 <HAL_DMA_Init+0x12e>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	461a      	mov	r2, r3
 8000820:	4b47      	ldr	r3, [pc, #284]	; (8000940 <HAL_DMA_Init+0x138>)
 8000822:	429a      	cmp	r2, r3
 8000824:	d80f      	bhi.n	8000846 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	461a      	mov	r2, r3
 800082c:	4b45      	ldr	r3, [pc, #276]	; (8000944 <HAL_DMA_Init+0x13c>)
 800082e:	4413      	add	r3, r2
 8000830:	4a45      	ldr	r2, [pc, #276]	; (8000948 <HAL_DMA_Init+0x140>)
 8000832:	fba2 2303 	umull	r2, r3, r2, r3
 8000836:	091b      	lsrs	r3, r3, #4
 8000838:	009a      	lsls	r2, r3, #2
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	4a42      	ldr	r2, [pc, #264]	; (800094c <HAL_DMA_Init+0x144>)
 8000842:	641a      	str	r2, [r3, #64]	; 0x40
 8000844:	e00e      	b.n	8000864 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	461a      	mov	r2, r3
 800084c:	4b40      	ldr	r3, [pc, #256]	; (8000950 <HAL_DMA_Init+0x148>)
 800084e:	4413      	add	r3, r2
 8000850:	4a3d      	ldr	r2, [pc, #244]	; (8000948 <HAL_DMA_Init+0x140>)
 8000852:	fba2 2303 	umull	r2, r3, r2, r3
 8000856:	091b      	lsrs	r3, r3, #4
 8000858:	009a      	lsls	r2, r3, #2
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	4a3c      	ldr	r2, [pc, #240]	; (8000954 <HAL_DMA_Init+0x14c>)
 8000862:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	2202      	movs	r2, #2
 8000868:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800087a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800087e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000888:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	691b      	ldr	r3, [r3, #16]
 800088e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000894:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	699b      	ldr	r3, [r3, #24]
 800089a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	6a1b      	ldr	r3, [r3, #32]
 80008a6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80008a8:	68fa      	ldr	r2, [r7, #12]
 80008aa:	4313      	orrs	r3, r2
 80008ac:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	68fa      	ldr	r2, [r7, #12]
 80008b4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80008b6:	6878      	ldr	r0, [r7, #4]
 80008b8:	f000 f9b6 	bl	8000c28 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	689b      	ldr	r3, [r3, #8]
 80008c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80008c4:	d102      	bne.n	80008cc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	2200      	movs	r2, #0
 80008ca:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008d0:	687a      	ldr	r2, [r7, #4]
 80008d2:	6852      	ldr	r2, [r2, #4]
 80008d4:	b2d2      	uxtb	r2, r2
 80008d6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008dc:	687a      	ldr	r2, [r7, #4]
 80008de:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80008e0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	685b      	ldr	r3, [r3, #4]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d010      	beq.n	800090c <HAL_DMA_Init+0x104>
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	685b      	ldr	r3, [r3, #4]
 80008ee:	2b04      	cmp	r3, #4
 80008f0:	d80c      	bhi.n	800090c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80008f2:	6878      	ldr	r0, [r7, #4]
 80008f4:	f000 f9d6 	bl	8000ca4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000904:	687a      	ldr	r2, [r7, #4]
 8000906:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	e008      	b.n	800091e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	2200      	movs	r2, #0
 8000910:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	2200      	movs	r2, #0
 8000916:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	2200      	movs	r2, #0
 800091c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	2200      	movs	r2, #0
 8000922:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	2201      	movs	r2, #1
 8000928:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	2200      	movs	r2, #0
 8000930:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8000934:	2300      	movs	r3, #0
}
 8000936:	4618      	mov	r0, r3
 8000938:	3710      	adds	r7, #16
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40020407 	.word	0x40020407
 8000944:	bffdfff8 	.word	0xbffdfff8
 8000948:	cccccccd 	.word	0xcccccccd
 800094c:	40020000 	.word	0x40020000
 8000950:	bffdfbf8 	.word	0xbffdfbf8
 8000954:	40020400 	.word	0x40020400

08000958 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b086      	sub	sp, #24
 800095c:	af00      	add	r7, sp, #0
 800095e:	60f8      	str	r0, [r7, #12]
 8000960:	60b9      	str	r1, [r7, #8]
 8000962:	607a      	str	r2, [r7, #4]
 8000964:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000966:	2300      	movs	r3, #0
 8000968:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000970:	2b01      	cmp	r3, #1
 8000972:	d101      	bne.n	8000978 <HAL_DMA_Start_IT+0x20>
 8000974:	2302      	movs	r3, #2
 8000976:	e066      	b.n	8000a46 <HAL_DMA_Start_IT+0xee>
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	2201      	movs	r2, #1
 800097c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000986:	b2db      	uxtb	r3, r3
 8000988:	2b01      	cmp	r3, #1
 800098a:	d155      	bne.n	8000a38 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	2202      	movs	r2, #2
 8000990:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	2200      	movs	r2, #0
 8000998:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	68fa      	ldr	r2, [r7, #12]
 80009a0:	6812      	ldr	r2, [r2, #0]
 80009a2:	6812      	ldr	r2, [r2, #0]
 80009a4:	f022 0201 	bic.w	r2, r2, #1
 80009a8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	687a      	ldr	r2, [r7, #4]
 80009ae:	68b9      	ldr	r1, [r7, #8]
 80009b0:	68f8      	ldr	r0, [r7, #12]
 80009b2:	f000 f8fb 	bl	8000bac <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d008      	beq.n	80009d0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	68fa      	ldr	r2, [r7, #12]
 80009c4:	6812      	ldr	r2, [r2, #0]
 80009c6:	6812      	ldr	r2, [r2, #0]
 80009c8:	f042 020e 	orr.w	r2, r2, #14
 80009cc:	601a      	str	r2, [r3, #0]
 80009ce:	e00f      	b.n	80009f0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	68fa      	ldr	r2, [r7, #12]
 80009d6:	6812      	ldr	r2, [r2, #0]
 80009d8:	6812      	ldr	r2, [r2, #0]
 80009da:	f022 0204 	bic.w	r2, r2, #4
 80009de:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	68fa      	ldr	r2, [r7, #12]
 80009e6:	6812      	ldr	r2, [r2, #0]
 80009e8:	6812      	ldr	r2, [r2, #0]
 80009ea:	f042 020a 	orr.w	r2, r2, #10
 80009ee:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d007      	beq.n	8000a0e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a02:	68fa      	ldr	r2, [r7, #12]
 8000a04:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8000a06:	6812      	ldr	r2, [r2, #0]
 8000a08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000a0c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d007      	beq.n	8000a26 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a1a:	68fa      	ldr	r2, [r7, #12]
 8000a1c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8000a1e:	6812      	ldr	r2, [r2, #0]
 8000a20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000a24:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	68fa      	ldr	r2, [r7, #12]
 8000a2c:	6812      	ldr	r2, [r2, #0]
 8000a2e:	6812      	ldr	r2, [r2, #0]
 8000a30:	f042 0201 	orr.w	r2, r2, #1
 8000a34:	601a      	str	r2, [r3, #0]
 8000a36:	e005      	b.n	8000a44 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8000a40:	2302      	movs	r3, #2
 8000a42:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8000a44:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	3718      	adds	r7, #24
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}

08000a4e <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000a4e:	b580      	push	{r7, lr}
 8000a50:	b084      	sub	sp, #16
 8000a52:	af00      	add	r7, sp, #0
 8000a54:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a6a:	f003 031c 	and.w	r3, r3, #28
 8000a6e:	2204      	movs	r2, #4
 8000a70:	409a      	lsls	r2, r3
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	4013      	ands	r3, r2
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d026      	beq.n	8000ac8 <HAL_DMA_IRQHandler+0x7a>
 8000a7a:	68bb      	ldr	r3, [r7, #8]
 8000a7c:	f003 0304 	and.w	r3, r3, #4
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d021      	beq.n	8000ac8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	f003 0320 	and.w	r3, r3, #32
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d107      	bne.n	8000aa2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	687a      	ldr	r2, [r7, #4]
 8000a98:	6812      	ldr	r2, [r2, #0]
 8000a9a:	6812      	ldr	r2, [r2, #0]
 8000a9c:	f022 0204 	bic.w	r2, r2, #4
 8000aa0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa6:	687a      	ldr	r2, [r7, #4]
 8000aa8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000aaa:	f002 021c 	and.w	r2, r2, #28
 8000aae:	2104      	movs	r1, #4
 8000ab0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ab4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d071      	beq.n	8000ba2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	6878      	ldr	r0, [r7, #4]
 8000ac4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8000ac6:	e06c      	b.n	8000ba2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000acc:	f003 031c 	and.w	r3, r3, #28
 8000ad0:	2202      	movs	r2, #2
 8000ad2:	409a      	lsls	r2, r3
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	4013      	ands	r3, r2
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d02e      	beq.n	8000b3a <HAL_DMA_IRQHandler+0xec>
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	f003 0302 	and.w	r3, r3, #2
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d029      	beq.n	8000b3a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f003 0320 	and.w	r3, r3, #32
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d10b      	bne.n	8000b0c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	687a      	ldr	r2, [r7, #4]
 8000afa:	6812      	ldr	r2, [r2, #0]
 8000afc:	6812      	ldr	r2, [r2, #0]
 8000afe:	f022 020a 	bic.w	r2, r2, #10
 8000b02:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	2201      	movs	r2, #1
 8000b08:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b10:	687a      	ldr	r2, [r7, #4]
 8000b12:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000b14:	f002 021c 	and.w	r2, r2, #28
 8000b18:	2102      	movs	r1, #2
 8000b1a:	fa01 f202 	lsl.w	r2, r1, r2
 8000b1e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	2200      	movs	r2, #0
 8000b24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d038      	beq.n	8000ba2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b34:	6878      	ldr	r0, [r7, #4]
 8000b36:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8000b38:	e033      	b.n	8000ba2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b3e:	f003 031c 	and.w	r3, r3, #28
 8000b42:	2208      	movs	r2, #8
 8000b44:	409a      	lsls	r2, r3
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	4013      	ands	r3, r2
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d02a      	beq.n	8000ba4 <HAL_DMA_IRQHandler+0x156>
 8000b4e:	68bb      	ldr	r3, [r7, #8]
 8000b50:	f003 0308 	and.w	r3, r3, #8
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d025      	beq.n	8000ba4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	687a      	ldr	r2, [r7, #4]
 8000b5e:	6812      	ldr	r2, [r2, #0]
 8000b60:	6812      	ldr	r2, [r2, #0]
 8000b62:	f022 020e 	bic.w	r2, r2, #14
 8000b66:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6c:	687a      	ldr	r2, [r7, #4]
 8000b6e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000b70:	f002 021c 	and.w	r2, r2, #28
 8000b74:	2101      	movs	r1, #1
 8000b76:	fa01 f202 	lsl.w	r2, r1, r2
 8000b7a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	2201      	movs	r2, #1
 8000b80:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	2201      	movs	r2, #1
 8000b86:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d004      	beq.n	8000ba4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b9e:	6878      	ldr	r0, [r7, #4]
 8000ba0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8000ba2:	bf00      	nop
 8000ba4:	bf00      	nop
}
 8000ba6:	3710      	adds	r7, #16
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}

08000bac <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b085      	sub	sp, #20
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	60f8      	str	r0, [r7, #12]
 8000bb4:	60b9      	str	r1, [r7, #8]
 8000bb6:	607a      	str	r2, [r7, #4]
 8000bb8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bbe:	68fa      	ldr	r2, [r7, #12]
 8000bc0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000bc2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d004      	beq.n	8000bd6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bd0:	68fa      	ldr	r2, [r7, #12]
 8000bd2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000bd4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bda:	68fa      	ldr	r2, [r7, #12]
 8000bdc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000bde:	f002 021c 	and.w	r2, r2, #28
 8000be2:	2101      	movs	r1, #1
 8000be4:	fa01 f202 	lsl.w	r2, r1, r2
 8000be8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	683a      	ldr	r2, [r7, #0]
 8000bf0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	689b      	ldr	r3, [r3, #8]
 8000bf6:	2b10      	cmp	r3, #16
 8000bf8:	d108      	bne.n	8000c0c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	687a      	ldr	r2, [r7, #4]
 8000c00:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	68ba      	ldr	r2, [r7, #8]
 8000c08:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000c0a:	e007      	b.n	8000c1c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	68ba      	ldr	r2, [r7, #8]
 8000c12:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	687a      	ldr	r2, [r7, #4]
 8000c1a:	60da      	str	r2, [r3, #12]
}
 8000c1c:	bf00      	nop
 8000c1e:	3714      	adds	r7, #20
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr

08000c28 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b085      	sub	sp, #20
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	461a      	mov	r2, r3
 8000c36:	4b17      	ldr	r3, [pc, #92]	; (8000c94 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	d80a      	bhi.n	8000c52 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c40:	089b      	lsrs	r3, r3, #2
 8000c42:	009b      	lsls	r3, r3, #2
 8000c44:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000c48:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8000c4c:	687a      	ldr	r2, [r7, #4]
 8000c4e:	6493      	str	r3, [r2, #72]	; 0x48
 8000c50:	e007      	b.n	8000c62 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c56:	089b      	lsrs	r3, r3, #2
 8000c58:	009a      	lsls	r2, r3, #2
 8000c5a:	4b0f      	ldr	r3, [pc, #60]	; (8000c98 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8000c5c:	4413      	add	r3, r2
 8000c5e:	687a      	ldr	r2, [r7, #4]
 8000c60:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	b2db      	uxtb	r3, r3
 8000c68:	3b08      	subs	r3, #8
 8000c6a:	4a0c      	ldr	r2, [pc, #48]	; (8000c9c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8000c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8000c70:	091b      	lsrs	r3, r3, #4
 8000c72:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	4a0a      	ldr	r2, [pc, #40]	; (8000ca0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8000c78:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	f003 031c 	and.w	r3, r3, #28
 8000c80:	2201      	movs	r2, #1
 8000c82:	409a      	lsls	r2, r3
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	651a      	str	r2, [r3, #80]	; 0x50
}
 8000c88:	bf00      	nop
 8000c8a:	3714      	adds	r7, #20
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr
 8000c94:	40020407 	.word	0x40020407
 8000c98:	4002081c 	.word	0x4002081c
 8000c9c:	cccccccd 	.word	0xcccccccd
 8000ca0:	40020880 	.word	0x40020880

08000ca4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8000cb4:	68fa      	ldr	r2, [r7, #12]
 8000cb6:	4b0b      	ldr	r3, [pc, #44]	; (8000ce4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8000cb8:	4413      	add	r3, r2
 8000cba:	009b      	lsls	r3, r3, #2
 8000cbc:	461a      	mov	r2, r3
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4a08      	ldr	r2, [pc, #32]	; (8000ce8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8000cc6:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	3b01      	subs	r3, #1
 8000ccc:	f003 0303 	and.w	r3, r3, #3
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	409a      	lsls	r2, r3
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000cd8:	bf00      	nop
 8000cda:	3714      	adds	r7, #20
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr
 8000ce4:	1000823f 	.word	0x1000823f
 8000ce8:	40020940 	.word	0x40020940

08000cec <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b087      	sub	sp, #28
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
 8000cf4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cfa:	e14c      	b.n	8000f96 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	2101      	movs	r1, #1
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	fa01 f303 	lsl.w	r3, r1, r3
 8000d08:	4013      	ands	r3, r2
 8000d0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	f000 813e 	beq.w	8000f90 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	2b02      	cmp	r3, #2
 8000d1a:	d003      	beq.n	8000d24 <HAL_GPIO_Init+0x38>
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	2b12      	cmp	r3, #18
 8000d22:	d123      	bne.n	8000d6c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	08da      	lsrs	r2, r3, #3
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	3208      	adds	r2, #8
 8000d2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d30:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	f003 0307 	and.w	r3, r3, #7
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	220f      	movs	r2, #15
 8000d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d40:	43db      	mvns	r3, r3
 8000d42:	693a      	ldr	r2, [r7, #16]
 8000d44:	4013      	ands	r3, r2
 8000d46:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	691a      	ldr	r2, [r3, #16]
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	f003 0307 	and.w	r3, r3, #7
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	fa02 f303 	lsl.w	r3, r2, r3
 8000d58:	693a      	ldr	r2, [r7, #16]
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	08da      	lsrs	r2, r3, #3
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	3208      	adds	r2, #8
 8000d66:	6939      	ldr	r1, [r7, #16]
 8000d68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	2203      	movs	r2, #3
 8000d78:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7c:	43db      	mvns	r3, r3
 8000d7e:	693a      	ldr	r2, [r7, #16]
 8000d80:	4013      	ands	r3, r2
 8000d82:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	f003 0203 	and.w	r2, r3, #3
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	fa02 f303 	lsl.w	r3, r2, r3
 8000d94:	693a      	ldr	r2, [r7, #16]
 8000d96:	4313      	orrs	r3, r2
 8000d98:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	693a      	ldr	r2, [r7, #16]
 8000d9e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	2b01      	cmp	r3, #1
 8000da6:	d00b      	beq.n	8000dc0 <HAL_GPIO_Init+0xd4>
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	2b02      	cmp	r3, #2
 8000dae:	d007      	beq.n	8000dc0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000db4:	2b11      	cmp	r3, #17
 8000db6:	d003      	beq.n	8000dc0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	2b12      	cmp	r3, #18
 8000dbe:	d130      	bne.n	8000e22 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	689b      	ldr	r3, [r3, #8]
 8000dc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	2203      	movs	r2, #3
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	43db      	mvns	r3, r3
 8000dd2:	693a      	ldr	r2, [r7, #16]
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	68da      	ldr	r2, [r3, #12]
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	005b      	lsls	r3, r3, #1
 8000de0:	fa02 f303 	lsl.w	r3, r2, r3
 8000de4:	693a      	ldr	r2, [r7, #16]
 8000de6:	4313      	orrs	r3, r2
 8000de8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	693a      	ldr	r2, [r7, #16]
 8000dee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000df6:	2201      	movs	r2, #1
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfe:	43db      	mvns	r3, r3
 8000e00:	693a      	ldr	r2, [r7, #16]
 8000e02:	4013      	ands	r3, r2
 8000e04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	091b      	lsrs	r3, r3, #4
 8000e0c:	f003 0201 	and.w	r2, r3, #1
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	68db      	ldr	r3, [r3, #12]
 8000e26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	005b      	lsls	r3, r3, #1
 8000e2c:	2203      	movs	r2, #3
 8000e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e32:	43db      	mvns	r3, r3
 8000e34:	693a      	ldr	r2, [r7, #16]
 8000e36:	4013      	ands	r3, r2
 8000e38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	689a      	ldr	r2, [r3, #8]
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	fa02 f303 	lsl.w	r3, r2, r3
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	f000 8098 	beq.w	8000f90 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000e60:	4a54      	ldr	r2, [pc, #336]	; (8000fb4 <HAL_GPIO_Init+0x2c8>)
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	089b      	lsrs	r3, r3, #2
 8000e66:	3302      	adds	r3, #2
 8000e68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	f003 0303 	and.w	r3, r3, #3
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	220f      	movs	r2, #15
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	43db      	mvns	r3, r3
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	4013      	ands	r3, r2
 8000e82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e8a:	d019      	beq.n	8000ec0 <HAL_GPIO_Init+0x1d4>
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4a4a      	ldr	r2, [pc, #296]	; (8000fb8 <HAL_GPIO_Init+0x2cc>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d013      	beq.n	8000ebc <HAL_GPIO_Init+0x1d0>
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	4a49      	ldr	r2, [pc, #292]	; (8000fbc <HAL_GPIO_Init+0x2d0>)
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d00d      	beq.n	8000eb8 <HAL_GPIO_Init+0x1cc>
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	4a48      	ldr	r2, [pc, #288]	; (8000fc0 <HAL_GPIO_Init+0x2d4>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d007      	beq.n	8000eb4 <HAL_GPIO_Init+0x1c8>
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	4a47      	ldr	r2, [pc, #284]	; (8000fc4 <HAL_GPIO_Init+0x2d8>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d101      	bne.n	8000eb0 <HAL_GPIO_Init+0x1c4>
 8000eac:	2304      	movs	r3, #4
 8000eae:	e008      	b.n	8000ec2 <HAL_GPIO_Init+0x1d6>
 8000eb0:	2307      	movs	r3, #7
 8000eb2:	e006      	b.n	8000ec2 <HAL_GPIO_Init+0x1d6>
 8000eb4:	2303      	movs	r3, #3
 8000eb6:	e004      	b.n	8000ec2 <HAL_GPIO_Init+0x1d6>
 8000eb8:	2302      	movs	r3, #2
 8000eba:	e002      	b.n	8000ec2 <HAL_GPIO_Init+0x1d6>
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	e000      	b.n	8000ec2 <HAL_GPIO_Init+0x1d6>
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	697a      	ldr	r2, [r7, #20]
 8000ec4:	f002 0203 	and.w	r2, r2, #3
 8000ec8:	0092      	lsls	r2, r2, #2
 8000eca:	4093      	lsls	r3, r2
 8000ecc:	693a      	ldr	r2, [r7, #16]
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ed2:	4938      	ldr	r1, [pc, #224]	; (8000fb4 <HAL_GPIO_Init+0x2c8>)
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	089b      	lsrs	r3, r3, #2
 8000ed8:	3302      	adds	r3, #2
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000ee0:	4b39      	ldr	r3, [pc, #228]	; (8000fc8 <HAL_GPIO_Init+0x2dc>)
 8000ee2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000ee6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	43db      	mvns	r3, r3
 8000eec:	693a      	ldr	r2, [r7, #16]
 8000eee:	4013      	ands	r3, r2
 8000ef0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d003      	beq.n	8000f06 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	4313      	orrs	r3, r2
 8000f04:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f06:	4a30      	ldr	r2, [pc, #192]	; (8000fc8 <HAL_GPIO_Init+0x2dc>)
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8000f0e:	4b2e      	ldr	r3, [pc, #184]	; (8000fc8 <HAL_GPIO_Init+0x2dc>)
 8000f10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000f14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d003      	beq.n	8000f34 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000f2c:	693a      	ldr	r2, [r7, #16]
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f34:	4a24      	ldr	r2, [pc, #144]	; (8000fc8 <HAL_GPIO_Init+0x2dc>)
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f3c:	4b22      	ldr	r3, [pc, #136]	; (8000fc8 <HAL_GPIO_Init+0x2dc>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	43db      	mvns	r3, r3
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d003      	beq.n	8000f60 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8000f58:	693a      	ldr	r2, [r7, #16]
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f60:	4a19      	ldr	r2, [pc, #100]	; (8000fc8 <HAL_GPIO_Init+0x2dc>)
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000f66:	4b18      	ldr	r3, [pc, #96]	; (8000fc8 <HAL_GPIO_Init+0x2dc>)
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	43db      	mvns	r3, r3
 8000f70:	693a      	ldr	r2, [r7, #16]
 8000f72:	4013      	ands	r3, r2
 8000f74:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d003      	beq.n	8000f8a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f8a:	4a0f      	ldr	r2, [pc, #60]	; (8000fc8 <HAL_GPIO_Init+0x2dc>)
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	3301      	adds	r3, #1
 8000f94:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	fa22 f303 	lsr.w	r3, r2, r3
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	f47f aeab 	bne.w	8000cfc <HAL_GPIO_Init+0x10>
  }
}
 8000fa6:	bf00      	nop
 8000fa8:	371c      	adds	r7, #28
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	40010000 	.word	0x40010000
 8000fb8:	48000400 	.word	0x48000400
 8000fbc:	48000800 	.word	0x48000800
 8000fc0:	48000c00 	.word	0x48000c00
 8000fc4:	48001000 	.word	0x48001000
 8000fc8:	58000800 	.word	0x58000800

08000fcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	807b      	strh	r3, [r7, #2]
 8000fd8:	4613      	mov	r3, r2
 8000fda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fdc:	787b      	ldrb	r3, [r7, #1]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d003      	beq.n	8000fea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000fe2:	887a      	ldrh	r2, [r7, #2]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000fe8:	e002      	b.n	8000ff0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000fea:	887a      	ldrh	r2, [r7, #2]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ff0:	bf00      	nop
 8000ff2:	370c      	adds	r7, #12
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr

08000ffc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d101      	bne.n	800100e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e080      	b.n	8001110 <HAL_I2C_Init+0x114>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001014:	b2db      	uxtb	r3, r3
 8001016:	2b00      	cmp	r3, #0
 8001018:	d106      	bne.n	8001028 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2200      	movs	r2, #0
 800101e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f004 ff8a 	bl	8005f3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2224      	movs	r2, #36	; 0x24
 800102c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	6812      	ldr	r2, [r2, #0]
 8001038:	6812      	ldr	r2, [r2, #0]
 800103a:	f022 0201 	bic.w	r2, r2, #1
 800103e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	687a      	ldr	r2, [r7, #4]
 8001046:	6852      	ldr	r2, [r2, #4]
 8001048:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800104c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	687a      	ldr	r2, [r7, #4]
 8001054:	6812      	ldr	r2, [r2, #0]
 8001056:	6892      	ldr	r2, [r2, #8]
 8001058:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800105c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	68db      	ldr	r3, [r3, #12]
 8001062:	2b01      	cmp	r3, #1
 8001064:	d107      	bne.n	8001076 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	687a      	ldr	r2, [r7, #4]
 800106c:	6892      	ldr	r2, [r2, #8]
 800106e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	e006      	b.n	8001084 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	6892      	ldr	r2, [r2, #8]
 800107e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001082:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	2b02      	cmp	r3, #2
 800108a:	d104      	bne.n	8001096 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001094:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010a8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	6812      	ldr	r2, [r2, #0]
 80010b2:	68d2      	ldr	r2, [r2, #12]
 80010b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80010b8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	6911      	ldr	r1, [r2, #16]
 80010c2:	687a      	ldr	r2, [r7, #4]
 80010c4:	6952      	ldr	r2, [r2, #20]
 80010c6:	4311      	orrs	r1, r2
 80010c8:	687a      	ldr	r2, [r7, #4]
 80010ca:	6992      	ldr	r2, [r2, #24]
 80010cc:	0212      	lsls	r2, r2, #8
 80010ce:	430a      	orrs	r2, r1
 80010d0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	687a      	ldr	r2, [r7, #4]
 80010d8:	69d1      	ldr	r1, [r2, #28]
 80010da:	687a      	ldr	r2, [r7, #4]
 80010dc:	6a12      	ldr	r2, [r2, #32]
 80010de:	430a      	orrs	r2, r1
 80010e0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	687a      	ldr	r2, [r7, #4]
 80010e8:	6812      	ldr	r2, [r2, #0]
 80010ea:	6812      	ldr	r2, [r2, #0]
 80010ec:	f042 0201 	orr.w	r2, r2, #1
 80010f0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2200      	movs	r2, #0
 80010f6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2220      	movs	r2, #32
 80010fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2200      	movs	r2, #0
 8001104:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2200      	movs	r2, #0
 800110a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800110e:	2300      	movs	r3, #0
}
 8001110:	4618      	mov	r0, r3
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b088      	sub	sp, #32
 800111c:	af02      	add	r7, sp, #8
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	607a      	str	r2, [r7, #4]
 8001122:	461a      	mov	r2, r3
 8001124:	460b      	mov	r3, r1
 8001126:	817b      	strh	r3, [r7, #10]
 8001128:	4613      	mov	r3, r2
 800112a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001132:	b2db      	uxtb	r3, r3
 8001134:	2b20      	cmp	r3, #32
 8001136:	f040 80da 	bne.w	80012ee <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001140:	2b01      	cmp	r3, #1
 8001142:	d101      	bne.n	8001148 <HAL_I2C_Master_Transmit+0x30>
 8001144:	2302      	movs	r3, #2
 8001146:	e0d3      	b.n	80012f0 <HAL_I2C_Master_Transmit+0x1d8>
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	2201      	movs	r2, #1
 800114c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001150:	f7ff fa12 	bl	8000578 <HAL_GetTick>
 8001154:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	9300      	str	r3, [sp, #0]
 800115a:	2319      	movs	r3, #25
 800115c:	2201      	movs	r2, #1
 800115e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001162:	68f8      	ldr	r0, [r7, #12]
 8001164:	f000 f9f7 	bl	8001556 <I2C_WaitOnFlagUntilTimeout>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e0be      	b.n	80012f0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	2221      	movs	r2, #33	; 0x21
 8001176:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	2210      	movs	r2, #16
 800117e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	2200      	movs	r2, #0
 8001186:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	687a      	ldr	r2, [r7, #4]
 800118c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	893a      	ldrh	r2, [r7, #8]
 8001192:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	2200      	movs	r2, #0
 8001198:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800119e:	b29b      	uxth	r3, r3
 80011a0:	2bff      	cmp	r3, #255	; 0xff
 80011a2:	d90e      	bls.n	80011c2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	22ff      	movs	r2, #255	; 0xff
 80011a8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011ae:	b2da      	uxtb	r2, r3
 80011b0:	8979      	ldrh	r1, [r7, #10]
 80011b2:	4b51      	ldr	r3, [pc, #324]	; (80012f8 <HAL_I2C_Master_Transmit+0x1e0>)
 80011b4:	9300      	str	r3, [sp, #0]
 80011b6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80011ba:	68f8      	ldr	r0, [r7, #12]
 80011bc:	f000 faee 	bl	800179c <I2C_TransferConfig>
 80011c0:	e06c      	b.n	800129c <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011c6:	b29a      	uxth	r2, r3
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011d0:	b2da      	uxtb	r2, r3
 80011d2:	8979      	ldrh	r1, [r7, #10]
 80011d4:	4b48      	ldr	r3, [pc, #288]	; (80012f8 <HAL_I2C_Master_Transmit+0x1e0>)
 80011d6:	9300      	str	r3, [sp, #0]
 80011d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80011dc:	68f8      	ldr	r0, [r7, #12]
 80011de:	f000 fadd 	bl	800179c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80011e2:	e05b      	b.n	800129c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80011e4:	697a      	ldr	r2, [r7, #20]
 80011e6:	6a39      	ldr	r1, [r7, #32]
 80011e8:	68f8      	ldr	r0, [r7, #12]
 80011ea:	f000 f9f4 	bl	80015d6 <I2C_WaitOnTXISFlagUntilTimeout>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80011f4:	2301      	movs	r3, #1
 80011f6:	e07b      	b.n	80012f0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	68fa      	ldr	r2, [r7, #12]
 80011fe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001200:	7812      	ldrb	r2, [r2, #0]
 8001202:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001208:	1c5a      	adds	r2, r3, #1
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001212:	b29b      	uxth	r3, r3
 8001214:	3b01      	subs	r3, #1
 8001216:	b29a      	uxth	r2, r3
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001220:	3b01      	subs	r3, #1
 8001222:	b29a      	uxth	r2, r3
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800122c:	b29b      	uxth	r3, r3
 800122e:	2b00      	cmp	r3, #0
 8001230:	d034      	beq.n	800129c <HAL_I2C_Master_Transmit+0x184>
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001236:	2b00      	cmp	r3, #0
 8001238:	d130      	bne.n	800129c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	9300      	str	r3, [sp, #0]
 800123e:	6a3b      	ldr	r3, [r7, #32]
 8001240:	2200      	movs	r2, #0
 8001242:	2180      	movs	r1, #128	; 0x80
 8001244:	68f8      	ldr	r0, [r7, #12]
 8001246:	f000 f986 	bl	8001556 <I2C_WaitOnFlagUntilTimeout>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001250:	2301      	movs	r3, #1
 8001252:	e04d      	b.n	80012f0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001258:	b29b      	uxth	r3, r3
 800125a:	2bff      	cmp	r3, #255	; 0xff
 800125c:	d90e      	bls.n	800127c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	22ff      	movs	r2, #255	; 0xff
 8001262:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001268:	b2da      	uxtb	r2, r3
 800126a:	8979      	ldrh	r1, [r7, #10]
 800126c:	2300      	movs	r3, #0
 800126e:	9300      	str	r3, [sp, #0]
 8001270:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001274:	68f8      	ldr	r0, [r7, #12]
 8001276:	f000 fa91 	bl	800179c <I2C_TransferConfig>
 800127a:	e00f      	b.n	800129c <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001280:	b29a      	uxth	r2, r3
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800128a:	b2da      	uxtb	r2, r3
 800128c:	8979      	ldrh	r1, [r7, #10]
 800128e:	2300      	movs	r3, #0
 8001290:	9300      	str	r3, [sp, #0]
 8001292:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001296:	68f8      	ldr	r0, [r7, #12]
 8001298:	f000 fa80 	bl	800179c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012a0:	b29b      	uxth	r3, r3
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d19e      	bne.n	80011e4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80012a6:	697a      	ldr	r2, [r7, #20]
 80012a8:	6a39      	ldr	r1, [r7, #32]
 80012aa:	68f8      	ldr	r0, [r7, #12]
 80012ac:	f000 f9d3 	bl	8001656 <I2C_WaitOnSTOPFlagUntilTimeout>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e01a      	b.n	80012f0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2220      	movs	r2, #32
 80012c0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	6859      	ldr	r1, [r3, #4]
 80012cc:	4b0b      	ldr	r3, [pc, #44]	; (80012fc <HAL_I2C_Master_Transmit+0x1e4>)
 80012ce:	400b      	ands	r3, r1
 80012d0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	2220      	movs	r2, #32
 80012d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	2200      	movs	r2, #0
 80012de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	2200      	movs	r2, #0
 80012e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80012ea:	2300      	movs	r3, #0
 80012ec:	e000      	b.n	80012f0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80012ee:	2302      	movs	r3, #2
  }
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3718      	adds	r7, #24
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	80002000 	.word	0x80002000
 80012fc:	fe00e800 	.word	0xfe00e800

08001300 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b08a      	sub	sp, #40	; 0x28
 8001304:	af02      	add	r7, sp, #8
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	607a      	str	r2, [r7, #4]
 800130a:	603b      	str	r3, [r7, #0]
 800130c:	460b      	mov	r3, r1
 800130e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001310:	2300      	movs	r3, #0
 8001312:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800131a:	b2db      	uxtb	r3, r3
 800131c:	2b20      	cmp	r3, #32
 800131e:	f040 80f1 	bne.w	8001504 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	699b      	ldr	r3, [r3, #24]
 8001328:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800132c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001330:	d101      	bne.n	8001336 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8001332:	2302      	movs	r3, #2
 8001334:	e0e7      	b.n	8001506 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800133c:	2b01      	cmp	r3, #1
 800133e:	d101      	bne.n	8001344 <HAL_I2C_IsDeviceReady+0x44>
 8001340:	2302      	movs	r3, #2
 8001342:	e0e0      	b.n	8001506 <HAL_I2C_IsDeviceReady+0x206>
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	2201      	movs	r2, #1
 8001348:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	2224      	movs	r2, #36	; 0x24
 8001350:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	2200      	movs	r2, #0
 8001358:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	68db      	ldr	r3, [r3, #12]
 8001362:	2b01      	cmp	r3, #1
 8001364:	d107      	bne.n	8001376 <HAL_I2C_IsDeviceReady+0x76>
 8001366:	897b      	ldrh	r3, [r7, #10]
 8001368:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800136c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001370:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001374:	e004      	b.n	8001380 <HAL_I2C_IsDeviceReady+0x80>
 8001376:	897b      	ldrh	r3, [r7, #10]
 8001378:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800137c:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8001380:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001382:	f7ff f8f9 	bl	8000578 <HAL_GetTick>
 8001386:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	699b      	ldr	r3, [r3, #24]
 800138e:	f003 0320 	and.w	r3, r3, #32
 8001392:	2b20      	cmp	r3, #32
 8001394:	bf0c      	ite	eq
 8001396:	2301      	moveq	r3, #1
 8001398:	2300      	movne	r3, #0
 800139a:	b2db      	uxtb	r3, r3
 800139c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	699b      	ldr	r3, [r3, #24]
 80013a4:	f003 0310 	and.w	r3, r3, #16
 80013a8:	2b10      	cmp	r3, #16
 80013aa:	bf0c      	ite	eq
 80013ac:	2301      	moveq	r3, #1
 80013ae:	2300      	movne	r3, #0
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80013b4:	e034      	b.n	8001420 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013bc:	d01a      	beq.n	80013f4 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80013be:	f7ff f8db 	bl	8000578 <HAL_GetTick>
 80013c2:	4602      	mov	r2, r0
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	1ad2      	subs	r2, r2, r3
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	429a      	cmp	r2, r3
 80013cc:	d802      	bhi.n	80013d4 <HAL_I2C_IsDeviceReady+0xd4>
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d10f      	bne.n	80013f4 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	2220      	movs	r2, #32
 80013d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e0:	f043 0220 	orr.w	r2, r3, #32
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	2200      	movs	r2, #0
 80013ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	e088      	b.n	8001506 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	699b      	ldr	r3, [r3, #24]
 80013fa:	f003 0320 	and.w	r3, r3, #32
 80013fe:	2b20      	cmp	r3, #32
 8001400:	bf0c      	ite	eq
 8001402:	2301      	moveq	r3, #1
 8001404:	2300      	movne	r3, #0
 8001406:	b2db      	uxtb	r3, r3
 8001408:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	f003 0310 	and.w	r3, r3, #16
 8001414:	2b10      	cmp	r3, #16
 8001416:	bf0c      	ite	eq
 8001418:	2301      	moveq	r3, #1
 800141a:	2300      	movne	r3, #0
 800141c:	b2db      	uxtb	r3, r3
 800141e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001420:	7ffb      	ldrb	r3, [r7, #31]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d102      	bne.n	800142c <HAL_I2C_IsDeviceReady+0x12c>
 8001426:	7fbb      	ldrb	r3, [r7, #30]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d0c4      	beq.n	80013b6 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	699b      	ldr	r3, [r3, #24]
 8001432:	f003 0310 	and.w	r3, r3, #16
 8001436:	2b10      	cmp	r3, #16
 8001438:	d01a      	beq.n	8001470 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800143a:	69bb      	ldr	r3, [r7, #24]
 800143c:	9300      	str	r3, [sp, #0]
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	2200      	movs	r2, #0
 8001442:	2120      	movs	r1, #32
 8001444:	68f8      	ldr	r0, [r7, #12]
 8001446:	f000 f886 	bl	8001556 <I2C_WaitOnFlagUntilTimeout>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	e058      	b.n	8001506 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2220      	movs	r2, #32
 800145a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	2220      	movs	r2, #32
 8001460:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	2200      	movs	r2, #0
 8001468:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 800146c:	2300      	movs	r3, #0
 800146e:	e04a      	b.n	8001506 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	9300      	str	r3, [sp, #0]
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	2200      	movs	r2, #0
 8001478:	2120      	movs	r1, #32
 800147a:	68f8      	ldr	r0, [r7, #12]
 800147c:	f000 f86b 	bl	8001556 <I2C_WaitOnFlagUntilTimeout>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e03d      	b.n	8001506 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	2210      	movs	r2, #16
 8001490:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	2220      	movs	r2, #32
 8001498:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800149a:	697a      	ldr	r2, [r7, #20]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	429a      	cmp	r2, r3
 80014a0:	d118      	bne.n	80014d4 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	68fa      	ldr	r2, [r7, #12]
 80014a8:	6812      	ldr	r2, [r2, #0]
 80014aa:	6852      	ldr	r2, [r2, #4]
 80014ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80014b0:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	9300      	str	r3, [sp, #0]
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	2200      	movs	r2, #0
 80014ba:	2120      	movs	r1, #32
 80014bc:	68f8      	ldr	r0, [r7, #12]
 80014be:	f000 f84a 	bl	8001556 <I2C_WaitOnFlagUntilTimeout>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e01c      	b.n	8001506 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2220      	movs	r2, #32
 80014d2:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	3301      	adds	r3, #1
 80014d8:	617b      	str	r3, [r7, #20]
    }
    while (I2C_Trials < Trials);
 80014da:	697a      	ldr	r2, [r7, #20]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	429a      	cmp	r2, r3
 80014e0:	f4ff af3b 	bcc.w	800135a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	2220      	movs	r2, #32
 80014e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f0:	f043 0220 	orr.w	r2, r3, #32
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	2200      	movs	r2, #0
 80014fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001500:	2301      	movs	r3, #1
 8001502:	e000      	b.n	8001506 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8001504:	2302      	movs	r3, #2
  }
}
 8001506:	4618      	mov	r0, r3
 8001508:	3720      	adds	r7, #32
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800150e:	b480      	push	{r7}
 8001510:	b083      	sub	sp, #12
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	699b      	ldr	r3, [r3, #24]
 800151c:	f003 0302 	and.w	r3, r3, #2
 8001520:	2b02      	cmp	r3, #2
 8001522:	d103      	bne.n	800152c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2200      	movs	r2, #0
 800152a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	699b      	ldr	r3, [r3, #24]
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	2b01      	cmp	r3, #1
 8001538:	d007      	beq.n	800154a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	6812      	ldr	r2, [r2, #0]
 8001542:	6992      	ldr	r2, [r2, #24]
 8001544:	f042 0201 	orr.w	r2, r2, #1
 8001548:	619a      	str	r2, [r3, #24]
  }
}
 800154a:	bf00      	nop
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr

08001556 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	b084      	sub	sp, #16
 800155a:	af00      	add	r7, sp, #0
 800155c:	60f8      	str	r0, [r7, #12]
 800155e:	60b9      	str	r1, [r7, #8]
 8001560:	603b      	str	r3, [r7, #0]
 8001562:	4613      	mov	r3, r2
 8001564:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001566:	e022      	b.n	80015ae <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800156e:	d01e      	beq.n	80015ae <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001570:	f7ff f802 	bl	8000578 <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	69bb      	ldr	r3, [r7, #24]
 8001578:	1ad2      	subs	r2, r2, r3
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	429a      	cmp	r2, r3
 800157e:	d802      	bhi.n	8001586 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d113      	bne.n	80015ae <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800158a:	f043 0220 	orr.w	r2, r3, #32
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	2220      	movs	r2, #32
 8001596:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	2200      	movs	r2, #0
 800159e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	2200      	movs	r2, #0
 80015a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e00f      	b.n	80015ce <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	699a      	ldr	r2, [r3, #24]
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	401a      	ands	r2, r3
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	429a      	cmp	r2, r3
 80015bc:	bf0c      	ite	eq
 80015be:	2301      	moveq	r3, #1
 80015c0:	2300      	movne	r3, #0
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	461a      	mov	r2, r3
 80015c6:	79fb      	ldrb	r3, [r7, #7]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d0cd      	beq.n	8001568 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80015cc:	2300      	movs	r3, #0
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3710      	adds	r7, #16
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80015d6:	b580      	push	{r7, lr}
 80015d8:	b084      	sub	sp, #16
 80015da:	af00      	add	r7, sp, #0
 80015dc:	60f8      	str	r0, [r7, #12]
 80015de:	60b9      	str	r1, [r7, #8]
 80015e0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80015e2:	e02c      	b.n	800163e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	68b9      	ldr	r1, [r7, #8]
 80015e8:	68f8      	ldr	r0, [r7, #12]
 80015ea:	f000 f871 	bl	80016d0 <I2C_IsAcknowledgeFailed>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	e02a      	b.n	800164e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015fe:	d01e      	beq.n	800163e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001600:	f7fe ffba 	bl	8000578 <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	1ad2      	subs	r2, r2, r3
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	429a      	cmp	r2, r3
 800160e:	d802      	bhi.n	8001616 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d113      	bne.n	800163e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800161a:	f043 0220 	orr.w	r2, r3, #32
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	2220      	movs	r2, #32
 8001626:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	2200      	movs	r2, #0
 800162e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	2200      	movs	r2, #0
 8001636:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e007      	b.n	800164e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	699b      	ldr	r3, [r3, #24]
 8001644:	f003 0302 	and.w	r3, r3, #2
 8001648:	2b02      	cmp	r3, #2
 800164a:	d1cb      	bne.n	80015e4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800164c:	2300      	movs	r3, #0
}
 800164e:	4618      	mov	r0, r3
 8001650:	3710      	adds	r7, #16
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001656:	b580      	push	{r7, lr}
 8001658:	b084      	sub	sp, #16
 800165a:	af00      	add	r7, sp, #0
 800165c:	60f8      	str	r0, [r7, #12]
 800165e:	60b9      	str	r1, [r7, #8]
 8001660:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001662:	e028      	b.n	80016b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001664:	687a      	ldr	r2, [r7, #4]
 8001666:	68b9      	ldr	r1, [r7, #8]
 8001668:	68f8      	ldr	r0, [r7, #12]
 800166a:	f000 f831 	bl	80016d0 <I2C_IsAcknowledgeFailed>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e026      	b.n	80016c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001678:	f7fe ff7e 	bl	8000578 <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	1ad2      	subs	r2, r2, r3
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	429a      	cmp	r2, r3
 8001686:	d802      	bhi.n	800168e <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d113      	bne.n	80016b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001692:	f043 0220 	orr.w	r2, r3, #32
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	2220      	movs	r2, #32
 800169e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	2200      	movs	r2, #0
 80016a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	2200      	movs	r2, #0
 80016ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e007      	b.n	80016c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	f003 0320 	and.w	r3, r3, #32
 80016c0:	2b20      	cmp	r3, #32
 80016c2:	d1cf      	bne.n	8001664 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80016c4:	2300      	movs	r3, #0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3710      	adds	r7, #16
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
	...

080016d0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	699b      	ldr	r3, [r3, #24]
 80016e2:	f003 0310 	and.w	r3, r3, #16
 80016e6:	2b10      	cmp	r3, #16
 80016e8:	d151      	bne.n	800178e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80016ea:	e022      	b.n	8001732 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016f2:	d01e      	beq.n	8001732 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016f4:	f7fe ff40 	bl	8000578 <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	1ad2      	subs	r2, r2, r3
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	429a      	cmp	r2, r3
 8001702:	d802      	bhi.n	800170a <I2C_IsAcknowledgeFailed+0x3a>
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d113      	bne.n	8001732 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170e:	f043 0220 	orr.w	r2, r3, #32
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	2220      	movs	r2, #32
 800171a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	2200      	movs	r2, #0
 8001722:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	2200      	movs	r2, #0
 800172a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e02e      	b.n	8001790 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	699b      	ldr	r3, [r3, #24]
 8001738:	f003 0320 	and.w	r3, r3, #32
 800173c:	2b20      	cmp	r3, #32
 800173e:	d1d5      	bne.n	80016ec <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2210      	movs	r2, #16
 8001746:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2220      	movs	r2, #32
 800174e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001750:	68f8      	ldr	r0, [r7, #12]
 8001752:	f7ff fedc 	bl	800150e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	6859      	ldr	r1, [r3, #4]
 8001760:	4b0d      	ldr	r3, [pc, #52]	; (8001798 <I2C_IsAcknowledgeFailed+0xc8>)
 8001762:	400b      	ands	r3, r1
 8001764:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800176a:	f043 0204 	orr.w	r2, r3, #4
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	2220      	movs	r2, #32
 8001776:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	2200      	movs	r2, #0
 800177e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	2200      	movs	r2, #0
 8001786:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e000      	b.n	8001790 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800178e:	2300      	movs	r3, #0
}
 8001790:	4618      	mov	r0, r3
 8001792:	3710      	adds	r7, #16
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	fe00e800 	.word	0xfe00e800

0800179c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800179c:	b480      	push	{r7}
 800179e:	b085      	sub	sp, #20
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	60f8      	str	r0, [r7, #12]
 80017a4:	607b      	str	r3, [r7, #4]
 80017a6:	460b      	mov	r3, r1
 80017a8:	817b      	strh	r3, [r7, #10]
 80017aa:	4613      	mov	r3, r2
 80017ac:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	6859      	ldr	r1, [r3, #4]
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	0d5b      	lsrs	r3, r3, #21
 80017bc:	f403 6080 	and.w	r0, r3, #1024	; 0x400
 80017c0:	4b0b      	ldr	r3, [pc, #44]	; (80017f0 <I2C_TransferConfig+0x54>)
 80017c2:	4303      	orrs	r3, r0
 80017c4:	43db      	mvns	r3, r3
 80017c6:	4019      	ands	r1, r3
 80017c8:	897b      	ldrh	r3, [r7, #10]
 80017ca:	f3c3 0009 	ubfx	r0, r3, #0, #10
 80017ce:	7a7b      	ldrb	r3, [r7, #9]
 80017d0:	041b      	lsls	r3, r3, #16
 80017d2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80017d6:	4318      	orrs	r0, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	4318      	orrs	r0, r3
 80017dc:	69bb      	ldr	r3, [r7, #24]
 80017de:	4303      	orrs	r3, r0
 80017e0:	430b      	orrs	r3, r1
 80017e2:	6053      	str	r3, [r2, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80017e4:	bf00      	nop
 80017e6:	3714      	adds	r7, #20
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr
 80017f0:	03ff63ff 	.word	0x03ff63ff

080017f4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001804:	b2db      	uxtb	r3, r3
 8001806:	2b20      	cmp	r3, #32
 8001808:	d138      	bne.n	800187c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001810:	2b01      	cmp	r3, #1
 8001812:	d101      	bne.n	8001818 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001814:	2302      	movs	r3, #2
 8001816:	e032      	b.n	800187e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2201      	movs	r2, #1
 800181c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2224      	movs	r2, #36	; 0x24
 8001824:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	6812      	ldr	r2, [r2, #0]
 8001830:	6812      	ldr	r2, [r2, #0]
 8001832:	f022 0201 	bic.w	r2, r2, #1
 8001836:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	6812      	ldr	r2, [r2, #0]
 8001840:	6812      	ldr	r2, [r2, #0]
 8001842:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001846:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	687a      	ldr	r2, [r7, #4]
 800184e:	6812      	ldr	r2, [r2, #0]
 8001850:	6811      	ldr	r1, [r2, #0]
 8001852:	683a      	ldr	r2, [r7, #0]
 8001854:	430a      	orrs	r2, r1
 8001856:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	687a      	ldr	r2, [r7, #4]
 800185e:	6812      	ldr	r2, [r2, #0]
 8001860:	6812      	ldr	r2, [r2, #0]
 8001862:	f042 0201 	orr.w	r2, r2, #1
 8001866:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2220      	movs	r2, #32
 800186c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2200      	movs	r2, #0
 8001874:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001878:	2300      	movs	r3, #0
 800187a:	e000      	b.n	800187e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800187c:	2302      	movs	r3, #2
  }
}
 800187e:	4618      	mov	r0, r3
 8001880:	370c      	adds	r7, #12
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr

0800188a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800188a:	b480      	push	{r7}
 800188c:	b085      	sub	sp, #20
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
 8001892:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800189a:	b2db      	uxtb	r3, r3
 800189c:	2b20      	cmp	r3, #32
 800189e:	d139      	bne.n	8001914 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d101      	bne.n	80018ae <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80018aa:	2302      	movs	r3, #2
 80018ac:	e033      	b.n	8001916 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2201      	movs	r2, #1
 80018b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2224      	movs	r2, #36	; 0x24
 80018ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	6812      	ldr	r2, [r2, #0]
 80018c6:	6812      	ldr	r2, [r2, #0]
 80018c8:	f022 0201 	bic.w	r2, r2, #1
 80018cc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80018dc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	021b      	lsls	r3, r3, #8
 80018e2:	68fa      	ldr	r2, [r7, #12]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	68fa      	ldr	r2, [r7, #12]
 80018ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	6812      	ldr	r2, [r2, #0]
 80018f8:	6812      	ldr	r2, [r2, #0]
 80018fa:	f042 0201 	orr.w	r2, r2, #1
 80018fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2220      	movs	r2, #32
 8001904:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2200      	movs	r2, #0
 800190c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001910:	2300      	movs	r3, #0
 8001912:	e000      	b.n	8001916 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001914:	2302      	movs	r3, #2
  }
}
 8001916:	4618      	mov	r0, r3
 8001918:	3714      	adds	r7, #20
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr

08001922 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001922:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001924:	b08b      	sub	sp, #44	; 0x2c
 8001926:	af06      	add	r7, sp, #24
 8001928:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d101      	bne.n	8001934 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e0ad      	b.n	8001a90 <HAL_PCD_Init+0x16e>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 800193a:	b2db      	uxtb	r3, r3
 800193c:	2b00      	cmp	r3, #0
 800193e:	d106      	bne.n	800194e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2200      	movs	r2, #0
 8001944:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f004 fbb7 	bl	80060bc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2203      	movs	r2, #3
 8001952:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4618      	mov	r0, r3
 800195c:	f003 fd3c 	bl	80053d8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001960:	2300      	movs	r3, #0
 8001962:	73fb      	strb	r3, [r7, #15]
 8001964:	e035      	b.n	80019d2 <HAL_PCD_Init+0xb0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001966:	7bfb      	ldrb	r3, [r7, #15]
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	015b      	lsls	r3, r3, #5
 800196c:	4413      	add	r3, r2
 800196e:	3329      	adds	r3, #41	; 0x29
 8001970:	2201      	movs	r2, #1
 8001972:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001974:	7bfb      	ldrb	r3, [r7, #15]
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	015b      	lsls	r3, r3, #5
 800197a:	4413      	add	r3, r2
 800197c:	3328      	adds	r3, #40	; 0x28
 800197e:	7bfa      	ldrb	r2, [r7, #15]
 8001980:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001982:	7bfb      	ldrb	r3, [r7, #15]
 8001984:	7bfa      	ldrb	r2, [r7, #15]
 8001986:	b291      	uxth	r1, r2
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	015b      	lsls	r3, r3, #5
 800198c:	4413      	add	r3, r2
 800198e:	3336      	adds	r3, #54	; 0x36
 8001990:	460a      	mov	r2, r1
 8001992:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001994:	7bfb      	ldrb	r3, [r7, #15]
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	015b      	lsls	r3, r3, #5
 800199a:	4413      	add	r3, r2
 800199c:	332b      	adds	r3, #43	; 0x2b
 800199e:	2200      	movs	r2, #0
 80019a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80019a2:	7bfb      	ldrb	r3, [r7, #15]
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	015b      	lsls	r3, r3, #5
 80019a8:	4413      	add	r3, r2
 80019aa:	3338      	adds	r3, #56	; 0x38
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80019b0:	7bfb      	ldrb	r3, [r7, #15]
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	015b      	lsls	r3, r3, #5
 80019b6:	4413      	add	r3, r2
 80019b8:	333c      	adds	r3, #60	; 0x3c
 80019ba:	2200      	movs	r2, #0
 80019bc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80019be:	7bfb      	ldrb	r3, [r7, #15]
 80019c0:	687a      	ldr	r2, [r7, #4]
 80019c2:	3302      	adds	r3, #2
 80019c4:	015b      	lsls	r3, r3, #5
 80019c6:	4413      	add	r3, r2
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019cc:	7bfb      	ldrb	r3, [r7, #15]
 80019ce:	3301      	adds	r3, #1
 80019d0:	73fb      	strb	r3, [r7, #15]
 80019d2:	7bfa      	ldrb	r2, [r7, #15]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d3c4      	bcc.n	8001966 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019dc:	2300      	movs	r3, #0
 80019de:	73fb      	strb	r3, [r7, #15]
 80019e0:	e031      	b.n	8001a46 <HAL_PCD_Init+0x124>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80019e2:	7bfb      	ldrb	r3, [r7, #15]
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	015b      	lsls	r3, r3, #5
 80019e8:	4413      	add	r3, r2
 80019ea:	f203 1329 	addw	r3, r3, #297	; 0x129
 80019ee:	2200      	movs	r2, #0
 80019f0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80019f2:	7bfb      	ldrb	r3, [r7, #15]
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	015b      	lsls	r3, r3, #5
 80019f8:	4413      	add	r3, r2
 80019fa:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80019fe:	7bfa      	ldrb	r2, [r7, #15]
 8001a00:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001a02:	7bfb      	ldrb	r3, [r7, #15]
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	015b      	lsls	r3, r3, #5
 8001a08:	4413      	add	r3, r2
 8001a0a:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8001a0e:	2200      	movs	r2, #0
 8001a10:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001a12:	7bfb      	ldrb	r3, [r7, #15]
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	015b      	lsls	r3, r3, #5
 8001a18:	4413      	add	r3, r2
 8001a1a:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001a1e:	2200      	movs	r2, #0
 8001a20:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001a22:	7bfb      	ldrb	r3, [r7, #15]
 8001a24:	687a      	ldr	r2, [r7, #4]
 8001a26:	015b      	lsls	r3, r3, #5
 8001a28:	4413      	add	r3, r2
 8001a2a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001a2e:	2200      	movs	r2, #0
 8001a30:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001a32:	7bfb      	ldrb	r3, [r7, #15]
 8001a34:	687a      	ldr	r2, [r7, #4]
 8001a36:	330a      	adds	r3, #10
 8001a38:	015b      	lsls	r3, r3, #5
 8001a3a:	4413      	add	r3, r2
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a40:	7bfb      	ldrb	r3, [r7, #15]
 8001a42:	3301      	adds	r3, #1
 8001a44:	73fb      	strb	r3, [r7, #15]
 8001a46:	7bfa      	ldrb	r2, [r7, #15]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d3c8      	bcc.n	80019e2 <HAL_PCD_Init+0xc0>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	603b      	str	r3, [r7, #0]
 8001a56:	687e      	ldr	r6, [r7, #4]
 8001a58:	466d      	mov	r5, sp
 8001a5a:	f106 0410 	add.w	r4, r6, #16
 8001a5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a62:	6823      	ldr	r3, [r4, #0]
 8001a64:	602b      	str	r3, [r5, #0]
 8001a66:	1d33      	adds	r3, r6, #4
 8001a68:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a6a:	6838      	ldr	r0, [r7, #0]
 8001a6c:	f003 fcd1 	bl	8005412 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2200      	movs	r2, #0
 8001a74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	69db      	ldr	r3, [r3, #28]
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d102      	bne.n	8001a8e <HAL_PCD_Init+0x16c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f000 f805 	bl	8001a98 <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 8001a8e:	2300      	movs	r3, #0
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3714      	adds	r7, #20
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a98 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b085      	sub	sp, #20
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	f043 0301 	orr.w	r3, r3, #1
 8001ac2:	b29a      	uxth	r2, r3
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	f043 0302 	orr.w	r3, r3, #2
 8001ad6:	b29a      	uxth	r2, r3
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8001ade:	2300      	movs	r3, #0
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3714      	adds	r7, #20
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001af0:	4a05      	ldr	r2, [pc, #20]	; (8001b08 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001af2:	4b05      	ldr	r3, [pc, #20]	; (8001b08 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001afa:	6013      	str	r3, [r2, #0]
}
 8001afc:	bf00      	nop
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	58000400 	.word	0x58000400

08001b0c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001b10:	4b04      	ldr	r3, [pc, #16]	; (8001b24 <HAL_PWREx_GetVoltageRange+0x18>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	58000400 	.word	0x58000400

08001b28 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001b2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b3a:	d101      	bne.n	8001b40 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e000      	b.n	8001b42 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <LL_RCC_HSE_EnableBypass>:
  * @brief  Enable HSE external oscillator (HSE Bypass)
  * @rmtoll CR           HSEBYP        LL_RCC_HSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableBypass(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001b50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b5e:	6013      	str	r3, [r2, #0]
}
 8001b60:	bf00      	nop
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr

08001b6a <LL_RCC_HSE_DisableBypass>:
  * @brief  Disable HSE external oscillator (HSE Bypass)
  * @rmtoll CR           HSEBYP        LL_RCC_HSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableBypass(void)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001b6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b7c:	6013      	str	r3, [r2, #0]
}
 8001b7e:	bf00      	nop
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001b8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b9a:	6013      	str	r3, [r2, #0]
}
 8001b9c:	bf00      	nop
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr

08001ba6 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001baa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bb8:	6013      	str	r3, [r2, #0]
}
 8001bba:	bf00      	nop
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001bc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001bd6:	d101      	bne.n	8001bdc <LL_RCC_HSE_IsReady+0x18>
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e000      	b.n	8001bde <LL_RCC_HSE_IsReady+0x1a>
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001bec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bfa:	6013      	str	r3, [r2, #0]
}
 8001bfc:	bf00      	nop
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr

08001c06 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8001c06:	b480      	push	{r7}
 8001c08:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001c0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c18:	6013      	str	r3, [r2, #0]
}
 8001c1a:	bf00      	nop
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001c28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c36:	d101      	bne.n	8001c3c <LL_RCC_HSI_IsReady+0x18>
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e000      	b.n	8001c3e <LL_RCC_HSI_IsReady+0x1a>
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001c50:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	061b      	lsls	r3, r3, #24
 8001c62:	4313      	orrs	r3, r2
 8001c64:	604b      	str	r3, [r1, #4]
}
 8001c66:	bf00      	nop
 8001c68:	370c      	adds	r7, #12
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr

08001c72 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8001c72:	b480      	push	{r7}
 8001c74:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001c76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c82:	f043 0301 	orr.w	r3, r3, #1
 8001c86:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001c8a:	bf00      	nop
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001c98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ca0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ca4:	f023 0301 	bic.w	r3, r3, #1
 8001ca8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001cac:	bf00      	nop
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr

08001cb6 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8001cba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cbe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d101      	bne.n	8001cce <LL_RCC_HSI48_IsReady+0x18>
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e000      	b.n	8001cd0 <LL_RCC_HSI48_IsReady+0x1a>
 8001cce:	2300      	movs	r3, #0
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr

08001cda <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001cde:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ce2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cea:	f043 0301 	orr.w	r3, r3, #1
 8001cee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001cf2:	bf00      	nop
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001d00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d0c:	f023 0301 	bic.w	r3, r3, #1
 8001d10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001d14:	bf00      	nop
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr

08001d1e <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001d22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d2e:	f043 0304 	orr.w	r3, r3, #4
 8001d32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001d36:	bf00      	nop
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001d44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d50:	f023 0304 	bic.w	r3, r3, #4
 8001d54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001d58:	bf00      	nop
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr

08001d62 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001d62:	b480      	push	{r7}
 8001d64:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001d66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d101      	bne.n	8001d7a <LL_RCC_LSE_IsReady+0x18>
 8001d76:	2301      	movs	r3, #1
 8001d78:	e000      	b.n	8001d7c <LL_RCC_LSE_IsReady+0x1a>
 8001d7a:	2300      	movs	r3, #0
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr

08001d86 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8001d86:	b480      	push	{r7}
 8001d88:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001d8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d96:	f043 0301 	orr.w	r3, r3, #1
 8001d9a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001d9e:	bf00      	nop
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001dac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001db0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001db4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001db8:	f023 0301 	bic.w	r3, r3, #1
 8001dbc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001dc0:	bf00      	nop
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr

08001dca <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8001dce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d101      	bne.n	8001de2 <LL_RCC_LSI1_IsReady+0x18>
 8001dde:	2301      	movs	r3, #1
 8001de0:	e000      	b.n	8001de4 <LL_RCC_LSI1_IsReady+0x1a>
 8001de2:	2300      	movs	r3, #0
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr

08001dee <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8001dee:	b480      	push	{r7}
 8001df0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001df2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001df6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dfe:	f043 0304 	orr.w	r3, r3, #4
 8001e02:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001e06:	bf00      	nop
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001e14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e20:	f023 0304 	bic.w	r3, r3, #4
 8001e24:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001e28:	bf00      	nop
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr

08001e32 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8001e32:	b480      	push	{r7}
 8001e34:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001e36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e3e:	f003 0308 	and.w	r3, r3, #8
 8001e42:	2b08      	cmp	r3, #8
 8001e44:	d101      	bne.n	8001e4a <LL_RCC_LSI2_IsReady+0x18>
 8001e46:	2301      	movs	r3, #1
 8001e48:	e000      	b.n	8001e4c <LL_RCC_LSI2_IsReady+0x1a>
 8001e4a:	2300      	movs	r3, #0
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr

08001e56 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8001e56:	b480      	push	{r7}
 8001e58:	b083      	sub	sp, #12
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8001e5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e6a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	021b      	lsls	r3, r3, #8
 8001e72:	4313      	orrs	r3, r2
 8001e74:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8001e78:	bf00      	nop
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001e88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f043 0301 	orr.w	r3, r3, #1
 8001e96:	6013      	str	r3, [r2, #0]
}
 8001e98:	bf00      	nop
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr

08001ea2 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001ea6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001eaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f023 0301 	bic.w	r3, r3, #1
 8001eb4:	6013      	str	r3, [r2, #0]
}
 8001eb6:	bf00      	nop
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001ec4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d101      	bne.n	8001ed6 <LL_RCC_MSI_IsReady+0x16>
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e000      	b.n	8001ed8 <LL_RCC_MSI_IsReady+0x18>
 8001ed6:	2300      	movs	r3, #0
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr

08001ee2 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	b083      	sub	sp, #12
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001eea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001eee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	600b      	str	r3, [r1, #0]
}
 8001efe:	bf00      	nop
 8001f00:	370c      	adds	r7, #12
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr

08001f0a <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	b083      	sub	sp, #12
 8001f0e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001f10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f1a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2bb0      	cmp	r3, #176	; 0xb0
 8001f20:	d901      	bls.n	8001f26 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8001f22:	23b0      	movs	r3, #176	; 0xb0
 8001f24:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8001f26:	687b      	ldr	r3, [r7, #4]
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001f3c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	021b      	lsls	r3, r3, #8
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	604b      	str	r3, [r1, #4]
}
 8001f52:	bf00      	nop
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr

08001f5e <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001f5e:	b480      	push	{r7}
 8001f60:	b083      	sub	sp, #12
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001f66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	f023 0203 	bic.w	r2, r3, #3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	608b      	str	r3, [r1, #8]
}
 8001f7a:	bf00      	nop
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr

08001f86 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001f86:	b480      	push	{r7}
 8001f88:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001f8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	f003 030c 	and.w	r3, r3, #12
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr

08001f9e <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	b083      	sub	sp, #12
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001fa6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001faa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	608b      	str	r3, [r1, #8]
}
 8001fba:	bf00      	nop
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr

08001fc6 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	b083      	sub	sp, #12
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001fce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fd6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001fda:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001fe6:	bf00      	nop
 8001fe8:	370c      	adds	r7, #12
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr

08001ff2 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	b083      	sub	sp, #12
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001ffa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ffe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002002:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002006:	f023 020f 	bic.w	r2, r3, #15
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	091b      	lsrs	r3, r3, #4
 800200e:	4313      	orrs	r3, r2
 8002010:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002014:	bf00      	nop
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002028:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800202c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4313      	orrs	r3, r2
 800203a:	608b      	str	r3, [r1, #8]
}
 800203c:	bf00      	nop
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002050:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002054:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4313      	orrs	r3, r2
 8002062:	608b      	str	r3, [r1, #8]
}
 8002064:	bf00      	nop
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002074:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800207e:	4618      	mov	r0, r3
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800208c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002090:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002094:	011b      	lsls	r3, r3, #4
 8002096:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800209a:	4618      	mov	r0, r3
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80020a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80020c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80020d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020e6:	6013      	str	r3, [r2, #0]
}
 80020e8:	bf00      	nop
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr

080020f2 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80020f2:	b480      	push	{r7}
 80020f4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80020f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002104:	6013      	str	r3, [r2, #0]
}
 8002106:	bf00      	nop
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002114:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800211e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002122:	d101      	bne.n	8002128 <LL_RCC_PLL_IsReady+0x18>
 8002124:	2301      	movs	r3, #1
 8002126:	e000      	b.n	800212a <LL_RCC_PLL_IsReady+0x1a>
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002138:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	0a1b      	lsrs	r3, r3, #8
 8002140:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002144:	4618      	mov	r0, r3
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr

0800214e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800214e:	b480      	push	{r7}
 8002150:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002152:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800215c:	4618      	mov	r0, r3
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr

08002166 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002166:	b480      	push	{r7}
 8002168:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800216a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002174:	4618      	mov	r0, r3
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr

0800217e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800217e:	b480      	push	{r7}
 8002180:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002182:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	f003 0303 	and.w	r3, r3, #3
}
 800218c:	4618      	mov	r0, r3
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr

08002196 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002196:	b480      	push	{r7}
 8002198:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800219a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021a8:	d101      	bne.n	80021ae <LL_RCC_IsActiveFlag_HPRE+0x18>
 80021aa:	2301      	movs	r3, #1
 80021ac:	e000      	b.n	80021b0 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80021ae:	2300      	movs	r3, #0
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr

080021ba <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80021ba:	b480      	push	{r7}
 80021bc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80021be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021c2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80021c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80021ce:	d101      	bne.n	80021d4 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80021d0:	2301      	movs	r3, #1
 80021d2:	e000      	b.n	80021d6 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80021e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021e8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80021ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021f4:	d101      	bne.n	80021fa <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80021f6:	2301      	movs	r3, #1
 80021f8:	e000      	b.n	80021fc <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80021fa:	2300      	movs	r3, #0
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr

08002206 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002206:	b480      	push	{r7}
 8002208:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800220a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002214:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002218:	d101      	bne.n	800221e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800221a:	2301      	movs	r3, #1
 800221c:	e000      	b.n	8002220 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800221e:	2300      	movs	r3, #0
}
 8002220:	4618      	mov	r0, r3
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr

0800222a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800222a:	b480      	push	{r7}
 800222c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800222e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002238:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800223c:	d101      	bne.n	8002242 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800223e:	2301      	movs	r3, #1
 8002240:	e000      	b.n	8002244 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002242:	2300      	movs	r3, #0
}
 8002244:	4618      	mov	r0, r3
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
	...

08002250 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002250:	b590      	push	{r4, r7, lr}
 8002252:	b08b      	sub	sp, #44	; 0x2c
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d101      	bne.n	8002262 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e34b      	b.n	80028fa <HAL_RCC_OscConfig+0x6aa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0320 	and.w	r3, r3, #32
 800226a:	2b00      	cmp	r3, #0
 800226c:	f000 808f 	beq.w	800238e <HAL_RCC_OscConfig+0x13e>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002270:	f7ff fe89 	bl	8001f86 <LL_RCC_GetSysClkSource>
 8002274:	6278      	str	r0, [r7, #36]	; 0x24
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002276:	f7ff ff82 	bl	800217e <LL_RCC_PLL_GetMainSource>
 800227a:	6238      	str	r0, [r7, #32]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800227c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227e:	2b00      	cmp	r3, #0
 8002280:	d005      	beq.n	800228e <HAL_RCC_OscConfig+0x3e>
 8002282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002284:	2b0c      	cmp	r3, #12
 8002286:	d149      	bne.n	800231c <HAL_RCC_OscConfig+0xcc>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8002288:	6a3b      	ldr	r3, [r7, #32]
 800228a:	2b01      	cmp	r3, #1
 800228c:	d146      	bne.n	800231c <HAL_RCC_OscConfig+0xcc>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800228e:	f7ff fe17 	bl	8001ec0 <LL_RCC_MSI_IsReady>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d005      	beq.n	80022a4 <HAL_RCC_OscConfig+0x54>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	69db      	ldr	r3, [r3, #28]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d101      	bne.n	80022a4 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e32a      	b.n	80028fa <HAL_RCC_OscConfig+0x6aa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80022a8:	f7ff fe2f 	bl	8001f0a <LL_RCC_MSI_GetRange>
 80022ac:	4603      	mov	r3, r0
 80022ae:	429c      	cmp	r4, r3
 80022b0:	d914      	bls.n	80022dc <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b6:	4618      	mov	r0, r3
 80022b8:	f000 fd0e 	bl	8002cd8 <RCC_SetFlashLatencyFromMSIRange>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e319      	b.n	80028fa <HAL_RCC_OscConfig+0x6aa>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7ff fe09 	bl	8001ee2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6a1b      	ldr	r3, [r3, #32]
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7ff fe2d 	bl	8001f34 <LL_RCC_MSI_SetCalibTrimming>
 80022da:	e013      	b.n	8002304 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7ff fdfe 	bl	8001ee2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a1b      	ldr	r3, [r3, #32]
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7ff fe22 	bl	8001f34 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f4:	4618      	mov	r0, r3
 80022f6:	f000 fcef 	bl	8002cd8 <RCC_SetFlashLatencyFromMSIRange>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d001      	beq.n	8002304 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e2fa      	b.n	80028fa <HAL_RCC_OscConfig+0x6aa>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClockUpdate();
 8002304:	f003 ff98 	bl	8006238 <SystemCoreClockUpdate>
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002308:	4bb4      	ldr	r3, [pc, #720]	; (80025dc <HAL_RCC_OscConfig+0x38c>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4618      	mov	r0, r3
 800230e:	f7fe f8e7 	bl	80004e0 <HAL_InitTick>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d039      	beq.n	800238c <HAL_RCC_OscConfig+0x13c>
        {
          return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e2ee      	b.n	80028fa <HAL_RCC_OscConfig+0x6aa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	69db      	ldr	r3, [r3, #28]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d01e      	beq.n	8002362 <HAL_RCC_OscConfig+0x112>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002324:	f7ff fdae 	bl	8001e84 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002328:	f7fe f926 	bl	8000578 <HAL_GetTick>
 800232c:	61f8      	str	r0, [r7, #28]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800232e:	e008      	b.n	8002342 <HAL_RCC_OscConfig+0xf2>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002330:	f7fe f922 	bl	8000578 <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	2b02      	cmp	r3, #2
 800233c:	d901      	bls.n	8002342 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e2db      	b.n	80028fa <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002342:	f7ff fdbd 	bl	8001ec0 <LL_RCC_MSI_IsReady>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d0f1      	beq.n	8002330 <HAL_RCC_OscConfig+0xe0>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002350:	4618      	mov	r0, r3
 8002352:	f7ff fdc6 	bl	8001ee2 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6a1b      	ldr	r3, [r3, #32]
 800235a:	4618      	mov	r0, r3
 800235c:	f7ff fdea 	bl	8001f34 <LL_RCC_MSI_SetCalibTrimming>
 8002360:	e015      	b.n	800238e <HAL_RCC_OscConfig+0x13e>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002362:	f7ff fd9e 	bl	8001ea2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002366:	f7fe f907 	bl	8000578 <HAL_GetTick>
 800236a:	61f8      	str	r0, [r7, #28]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800236c:	e008      	b.n	8002380 <HAL_RCC_OscConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800236e:	f7fe f903 	bl	8000578 <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	2b02      	cmp	r3, #2
 800237a:	d901      	bls.n	8002380 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	e2bc      	b.n	80028fa <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002380:	f7ff fd9e 	bl	8001ec0 <LL_RCC_MSI_IsReady>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d1f1      	bne.n	800236e <HAL_RCC_OscConfig+0x11e>
 800238a:	e000      	b.n	800238e <HAL_RCC_OscConfig+0x13e>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800238c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	2b00      	cmp	r3, #0
 8002398:	d05a      	beq.n	8002450 <HAL_RCC_OscConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800239a:	f7ff fdf4 	bl	8001f86 <LL_RCC_GetSysClkSource>
 800239e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023a0:	f7ff feed 	bl	800217e <LL_RCC_PLL_GetMainSource>
 80023a4:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	2b08      	cmp	r3, #8
 80023aa:	d005      	beq.n	80023b8 <HAL_RCC_OscConfig+0x168>
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	2b0c      	cmp	r3, #12
 80023b0:	d10d      	bne.n	80023ce <HAL_RCC_OscConfig+0x17e>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	2b03      	cmp	r3, #3
 80023b6:	d10a      	bne.n	80023ce <HAL_RCC_OscConfig+0x17e>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023b8:	f7ff fc04 	bl	8001bc4 <LL_RCC_HSE_IsReady>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d045      	beq.n	800244e <HAL_RCC_OscConfig+0x1fe>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d141      	bne.n	800244e <HAL_RCC_OscConfig+0x1fe>
      {
        return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e295      	b.n	80028fa <HAL_RCC_OscConfig+0x6aa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023d6:	d102      	bne.n	80023de <HAL_RCC_OscConfig+0x18e>
 80023d8:	f7ff fbd6 	bl	8001b88 <LL_RCC_HSE_Enable>
 80023dc:	e00d      	b.n	80023fa <HAL_RCC_OscConfig+0x1aa>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023e6:	d104      	bne.n	80023f2 <HAL_RCC_OscConfig+0x1a2>
 80023e8:	f7ff fbb0 	bl	8001b4c <LL_RCC_HSE_EnableBypass>
 80023ec:	f7ff fbcc 	bl	8001b88 <LL_RCC_HSE_Enable>
 80023f0:	e003      	b.n	80023fa <HAL_RCC_OscConfig+0x1aa>
 80023f2:	f7ff fbd8 	bl	8001ba6 <LL_RCC_HSE_Disable>
 80023f6:	f7ff fbb8 	bl	8001b6a <LL_RCC_HSE_DisableBypass>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d012      	beq.n	8002428 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002402:	f7fe f8b9 	bl	8000578 <HAL_GetTick>
 8002406:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002408:	e008      	b.n	800241c <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800240a:	f7fe f8b5 	bl	8000578 <HAL_GetTick>
 800240e:	4602      	mov	r2, r0
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	2b64      	cmp	r3, #100	; 0x64
 8002416:	d901      	bls.n	800241c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002418:	2303      	movs	r3, #3
 800241a:	e26e      	b.n	80028fa <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSE_IsReady() == 0U)
 800241c:	f7ff fbd2 	bl	8001bc4 <LL_RCC_HSE_IsReady>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d0f1      	beq.n	800240a <HAL_RCC_OscConfig+0x1ba>
 8002426:	e013      	b.n	8002450 <HAL_RCC_OscConfig+0x200>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002428:	f7fe f8a6 	bl	8000578 <HAL_GetTick>
 800242c:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800242e:	e008      	b.n	8002442 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002430:	f7fe f8a2 	bl	8000578 <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	2b64      	cmp	r3, #100	; 0x64
 800243c:	d901      	bls.n	8002442 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e25b      	b.n	80028fa <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002442:	f7ff fbbf 	bl	8001bc4 <LL_RCC_HSE_IsReady>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d1f1      	bne.n	8002430 <HAL_RCC_OscConfig+0x1e0>
 800244c:	e000      	b.n	8002450 <HAL_RCC_OscConfig+0x200>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800244e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0302 	and.w	r3, r3, #2
 8002458:	2b00      	cmp	r3, #0
 800245a:	d051      	beq.n	8002500 <HAL_RCC_OscConfig+0x2b0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800245c:	f7ff fd93 	bl	8001f86 <LL_RCC_GetSysClkSource>
 8002460:	6138      	str	r0, [r7, #16]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002462:	f7ff fe8c 	bl	800217e <LL_RCC_PLL_GetMainSource>
 8002466:	60f8      	str	r0, [r7, #12]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	2b04      	cmp	r3, #4
 800246c:	d005      	beq.n	800247a <HAL_RCC_OscConfig+0x22a>
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	2b0c      	cmp	r3, #12
 8002472:	d113      	bne.n	800249c <HAL_RCC_OscConfig+0x24c>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2b02      	cmp	r3, #2
 8002478:	d110      	bne.n	800249c <HAL_RCC_OscConfig+0x24c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800247a:	f7ff fbd3 	bl	8001c24 <LL_RCC_HSI_IsReady>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d005      	beq.n	8002490 <HAL_RCC_OscConfig+0x240>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d101      	bne.n	8002490 <HAL_RCC_OscConfig+0x240>
      {
        return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e234      	b.n	80028fa <HAL_RCC_OscConfig+0x6aa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	691b      	ldr	r3, [r3, #16]
 8002494:	4618      	mov	r0, r3
 8002496:	f7ff fbd7 	bl	8001c48 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800249a:	e031      	b.n	8002500 <HAL_RCC_OscConfig+0x2b0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d019      	beq.n	80024d8 <HAL_RCC_OscConfig+0x288>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024a4:	f7ff fba0 	bl	8001be8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a8:	f7fe f866 	bl	8000578 <HAL_GetTick>
 80024ac:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80024ae:	e008      	b.n	80024c2 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024b0:	f7fe f862 	bl	8000578 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e21b      	b.n	80028fa <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSI_IsReady() == 0U)
 80024c2:	f7ff fbaf 	bl	8001c24 <LL_RCC_HSI_IsReady>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d0f1      	beq.n	80024b0 <HAL_RCC_OscConfig+0x260>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	691b      	ldr	r3, [r3, #16]
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7ff fbb9 	bl	8001c48 <LL_RCC_HSI_SetCalibTrimming>
 80024d6:	e013      	b.n	8002500 <HAL_RCC_OscConfig+0x2b0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024d8:	f7ff fb95 	bl	8001c06 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024dc:	f7fe f84c 	bl	8000578 <HAL_GetTick>
 80024e0:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80024e2:	e008      	b.n	80024f6 <HAL_RCC_OscConfig+0x2a6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024e4:	f7fe f848 	bl	8000578 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e201      	b.n	80028fa <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSI_IsReady() != 0U)
 80024f6:	f7ff fb95 	bl	8001c24 <LL_RCC_HSI_IsReady>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d1f1      	bne.n	80024e4 <HAL_RCC_OscConfig+0x294>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0308 	and.w	r3, r3, #8
 8002508:	2b00      	cmp	r3, #0
 800250a:	d106      	bne.n	800251a <HAL_RCC_OscConfig+0x2ca>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002514:	2b00      	cmp	r3, #0
 8002516:	f000 80a2 	beq.w	800265e <HAL_RCC_OscConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	695b      	ldr	r3, [r3, #20]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d075      	beq.n	800260e <HAL_RCC_OscConfig+0x3be>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0310 	and.w	r3, r3, #16
 800252a:	2b00      	cmp	r3, #0
 800252c:	d046      	beq.n	80025bc <HAL_RCC_OscConfig+0x36c>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800252e:	f7ff fc4c 	bl	8001dca <LL_RCC_LSI1_IsReady>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d113      	bne.n	8002560 <HAL_RCC_OscConfig+0x310>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8002538:	f7ff fc25 	bl	8001d86 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800253c:	f7fe f81c 	bl	8000578 <HAL_GetTick>
 8002540:	61f8      	str	r0, [r7, #28]

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002542:	e008      	b.n	8002556 <HAL_RCC_OscConfig+0x306>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002544:	f7fe f818 	bl	8000578 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2b02      	cmp	r3, #2
 8002550:	d901      	bls.n	8002556 <HAL_RCC_OscConfig+0x306>
            {
              return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e1d1      	b.n	80028fa <HAL_RCC_OscConfig+0x6aa>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002556:	f7ff fc38 	bl	8001dca <LL_RCC_LSI1_IsReady>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d0f1      	beq.n	8002544 <HAL_RCC_OscConfig+0x2f4>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8002560:	f7ff fc45 	bl	8001dee <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002564:	f7fe f808 	bl	8000578 <HAL_GetTick>
 8002568:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800256a:	e008      	b.n	800257e <HAL_RCC_OscConfig+0x32e>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800256c:	f7fe f804 	bl	8000578 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b03      	cmp	r3, #3
 8002578:	d901      	bls.n	800257e <HAL_RCC_OscConfig+0x32e>
          {
            return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e1bd      	b.n	80028fa <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800257e:	f7ff fc58 	bl	8001e32 <LL_RCC_LSI2_IsReady>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d0f1      	beq.n	800256c <HAL_RCC_OscConfig+0x31c>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	699b      	ldr	r3, [r3, #24]
 800258c:	4618      	mov	r0, r3
 800258e:	f7ff fc62 	bl	8001e56 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8002592:	f7ff fc09 	bl	8001da8 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002596:	f7fd ffef 	bl	8000578 <HAL_GetTick>
 800259a:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800259c:	e008      	b.n	80025b0 <HAL_RCC_OscConfig+0x360>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800259e:	f7fd ffeb 	bl	8000578 <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d901      	bls.n	80025b0 <HAL_RCC_OscConfig+0x360>
          {
            return HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	e1a4      	b.n	80028fa <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80025b0:	f7ff fc0b 	bl	8001dca <LL_RCC_LSI1_IsReady>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d1f1      	bne.n	800259e <HAL_RCC_OscConfig+0x34e>
 80025ba:	e050      	b.n	800265e <HAL_RCC_OscConfig+0x40e>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80025bc:	f7ff fbe3 	bl	8001d86 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c0:	f7fd ffda 	bl	8000578 <HAL_GetTick>
 80025c4:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80025c6:	e00b      	b.n	80025e0 <HAL_RCC_OscConfig+0x390>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80025c8:	f7fd ffd6 	bl	8000578 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d904      	bls.n	80025e0 <HAL_RCC_OscConfig+0x390>
          {
            return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e18f      	b.n	80028fa <HAL_RCC_OscConfig+0x6aa>
 80025da:	bf00      	nop
 80025dc:	20000004 	.word	0x20000004
        while (LL_RCC_LSI1_IsReady() == 0U)
 80025e0:	f7ff fbf3 	bl	8001dca <LL_RCC_LSI1_IsReady>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d0ee      	beq.n	80025c8 <HAL_RCC_OscConfig+0x378>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80025ea:	f7ff fc11 	bl	8001e10 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80025ee:	e008      	b.n	8002602 <HAL_RCC_OscConfig+0x3b2>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80025f0:	f7fd ffc2 	bl	8000578 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b03      	cmp	r3, #3
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e17b      	b.n	80028fa <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002602:	f7ff fc16 	bl	8001e32 <LL_RCC_LSI2_IsReady>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d1f1      	bne.n	80025f0 <HAL_RCC_OscConfig+0x3a0>
 800260c:	e027      	b.n	800265e <HAL_RCC_OscConfig+0x40e>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800260e:	f7ff fbff 	bl	8001e10 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002612:	f7fd ffb1 	bl	8000578 <HAL_GetTick>
 8002616:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002618:	e008      	b.n	800262c <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800261a:	f7fd ffad 	bl	8000578 <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	2b03      	cmp	r3, #3
 8002626:	d901      	bls.n	800262c <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e166      	b.n	80028fa <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800262c:	f7ff fc01 	bl	8001e32 <LL_RCC_LSI2_IsReady>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d1f1      	bne.n	800261a <HAL_RCC_OscConfig+0x3ca>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8002636:	f7ff fbb7 	bl	8001da8 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800263a:	f7fd ff9d 	bl	8000578 <HAL_GetTick>
 800263e:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002640:	e008      	b.n	8002654 <HAL_RCC_OscConfig+0x404>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002642:	f7fd ff99 	bl	8000578 <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	2b02      	cmp	r3, #2
 800264e:	d901      	bls.n	8002654 <HAL_RCC_OscConfig+0x404>
        {
          return HAL_TIMEOUT;
 8002650:	2303      	movs	r3, #3
 8002652:	e152      	b.n	80028fa <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002654:	f7ff fbb9 	bl	8001dca <LL_RCC_LSI1_IsReady>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d1f1      	bne.n	8002642 <HAL_RCC_OscConfig+0x3f2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0304 	and.w	r3, r3, #4
 8002666:	2b00      	cmp	r3, #0
 8002668:	d05b      	beq.n	8002722 <HAL_RCC_OscConfig+0x4d2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800266a:	4ba6      	ldr	r3, [pc, #664]	; (8002904 <HAL_RCC_OscConfig+0x6b4>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002672:	2b00      	cmp	r3, #0
 8002674:	d114      	bne.n	80026a0 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002676:	f7ff fa39 	bl	8001aec <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800267a:	f7fd ff7d 	bl	8000578 <HAL_GetTick>
 800267e:	61f8      	str	r0, [r7, #28]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002680:	e008      	b.n	8002694 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002682:	f7fd ff79 	bl	8000578 <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	2b02      	cmp	r3, #2
 800268e:	d901      	bls.n	8002694 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	e132      	b.n	80028fa <HAL_RCC_OscConfig+0x6aa>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002694:	4b9b      	ldr	r3, [pc, #620]	; (8002904 <HAL_RCC_OscConfig+0x6b4>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800269c:	2b00      	cmp	r3, #0
 800269e:	d0f0      	beq.n	8002682 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d102      	bne.n	80026ae <HAL_RCC_OscConfig+0x45e>
 80026a8:	f7ff fb17 	bl	8001cda <LL_RCC_LSE_Enable>
 80026ac:	e00c      	b.n	80026c8 <HAL_RCC_OscConfig+0x478>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	2b05      	cmp	r3, #5
 80026b4:	d104      	bne.n	80026c0 <HAL_RCC_OscConfig+0x470>
 80026b6:	f7ff fb32 	bl	8001d1e <LL_RCC_LSE_EnableBypass>
 80026ba:	f7ff fb0e 	bl	8001cda <LL_RCC_LSE_Enable>
 80026be:	e003      	b.n	80026c8 <HAL_RCC_OscConfig+0x478>
 80026c0:	f7ff fb1c 	bl	8001cfc <LL_RCC_LSE_Disable>
 80026c4:	f7ff fb3c 	bl	8001d40 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d014      	beq.n	80026fa <HAL_RCC_OscConfig+0x4aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026d0:	f7fd ff52 	bl	8000578 <HAL_GetTick>
 80026d4:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80026d6:	e00a      	b.n	80026ee <HAL_RCC_OscConfig+0x49e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026d8:	f7fd ff4e 	bl	8000578 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e105      	b.n	80028fa <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSE_IsReady() == 0U)
 80026ee:	f7ff fb38 	bl	8001d62 <LL_RCC_LSE_IsReady>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d0ef      	beq.n	80026d8 <HAL_RCC_OscConfig+0x488>
 80026f8:	e013      	b.n	8002722 <HAL_RCC_OscConfig+0x4d2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026fa:	f7fd ff3d 	bl	8000578 <HAL_GetTick>
 80026fe:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002700:	e00a      	b.n	8002718 <HAL_RCC_OscConfig+0x4c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002702:	f7fd ff39 	bl	8000578 <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002710:	4293      	cmp	r3, r2
 8002712:	d901      	bls.n	8002718 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	e0f0      	b.n	80028fa <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002718:	f7ff fb23 	bl	8001d62 <LL_RCC_LSE_IsReady>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d1ef      	bne.n	8002702 <HAL_RCC_OscConfig+0x4b2>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800272a:	2b00      	cmp	r3, #0
 800272c:	d02c      	beq.n	8002788 <HAL_RCC_OscConfig+0x538>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002732:	2b00      	cmp	r3, #0
 8002734:	d014      	beq.n	8002760 <HAL_RCC_OscConfig+0x510>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002736:	f7ff fa9c 	bl	8001c72 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800273a:	f7fd ff1d 	bl	8000578 <HAL_GetTick>
 800273e:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002740:	e008      	b.n	8002754 <HAL_RCC_OscConfig+0x504>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002742:	f7fd ff19 	bl	8000578 <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	2b02      	cmp	r3, #2
 800274e:	d901      	bls.n	8002754 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e0d2      	b.n	80028fa <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002754:	f7ff faaf 	bl	8001cb6 <LL_RCC_HSI48_IsReady>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d0f1      	beq.n	8002742 <HAL_RCC_OscConfig+0x4f2>
 800275e:	e013      	b.n	8002788 <HAL_RCC_OscConfig+0x538>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002760:	f7ff fa98 	bl	8001c94 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002764:	f7fd ff08 	bl	8000578 <HAL_GetTick>
 8002768:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800276a:	e008      	b.n	800277e <HAL_RCC_OscConfig+0x52e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800276c:	f7fd ff04 	bl	8000578 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	2b02      	cmp	r3, #2
 8002778:	d901      	bls.n	800277e <HAL_RCC_OscConfig+0x52e>
        {
          return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e0bd      	b.n	80028fa <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800277e:	f7ff fa9a 	bl	8001cb6 <LL_RCC_HSI48_IsReady>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d1f1      	bne.n	800276c <HAL_RCC_OscConfig+0x51c>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800278c:	2b00      	cmp	r3, #0
 800278e:	f000 80b3 	beq.w	80028f8 <HAL_RCC_OscConfig+0x6a8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002792:	f7ff fbf8 	bl	8001f86 <LL_RCC_GetSysClkSource>
 8002796:	4603      	mov	r3, r0
 8002798:	2b0c      	cmp	r3, #12
 800279a:	d076      	beq.n	800288a <HAL_RCC_OscConfig+0x63a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d14b      	bne.n	800283c <HAL_RCC_OscConfig+0x5ec>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027a4:	f7ff fca5 	bl	80020f2 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a8:	f7fd fee6 	bl	8000578 <HAL_GetTick>
 80027ac:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 80027ae:	e008      	b.n	80027c2 <HAL_RCC_OscConfig+0x572>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027b0:	f7fd fee2 	bl	8000578 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d901      	bls.n	80027c2 <HAL_RCC_OscConfig+0x572>
          {
            return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e09b      	b.n	80028fa <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() != 0U)
 80027c2:	f7ff fca5 	bl	8002110 <LL_RCC_PLL_IsReady>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d1f1      	bne.n	80027b0 <HAL_RCC_OscConfig+0x560>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027cc:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 80027d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027d4:	68da      	ldr	r2, [r3, #12]
 80027d6:	4b4c      	ldr	r3, [pc, #304]	; (8002908 <HAL_RCC_OscConfig+0x6b8>)
 80027d8:	4013      	ands	r3, r2
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80027e2:	4311      	orrs	r1, r2
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80027e8:	0212      	lsls	r2, r2, #8
 80027ea:	4311      	orrs	r1, r2
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80027f0:	4311      	orrs	r1, r2
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80027f6:	4311      	orrs	r1, r2
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80027fc:	430a      	orrs	r2, r1
 80027fe:	4313      	orrs	r3, r2
 8002800:	60c3      	str	r3, [r0, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002802:	f7ff fc67 	bl	80020d4 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002806:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800280a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002814:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002816:	f7fd feaf 	bl	8000578 <HAL_GetTick>
 800281a:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 800281c:	e008      	b.n	8002830 <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800281e:	f7fd feab 	bl	8000578 <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	2b02      	cmp	r3, #2
 800282a:	d901      	bls.n	8002830 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e064      	b.n	80028fa <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() == 0U)
 8002830:	f7ff fc6e 	bl	8002110 <LL_RCC_PLL_IsReady>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d0f1      	beq.n	800281e <HAL_RCC_OscConfig+0x5ce>
 800283a:	e05d      	b.n	80028f8 <HAL_RCC_OscConfig+0x6a8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800283c:	f7ff fc59 	bl	80020f2 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8002840:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002844:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	f023 0303 	bic.w	r3, r3, #3
 800284e:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8002850:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002854:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 800285e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002862:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002864:	f7fd fe88 	bl	8000578 <HAL_GetTick>
 8002868:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 800286a:	e008      	b.n	800287e <HAL_RCC_OscConfig+0x62e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800286c:	f7fd fe84 	bl	8000578 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b02      	cmp	r3, #2
 8002878:	d901      	bls.n	800287e <HAL_RCC_OscConfig+0x62e>
          {
            return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e03d      	b.n	80028fa <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() != 0U)
 800287e:	f7ff fc47 	bl	8002110 <LL_RCC_PLL_IsReady>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d1f1      	bne.n	800286c <HAL_RCC_OscConfig+0x61c>
 8002888:	e036      	b.n	80028f8 <HAL_RCC_OscConfig+0x6a8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800288e:	2b01      	cmp	r3, #1
 8002890:	d101      	bne.n	8002896 <HAL_RCC_OscConfig+0x646>
      {
        return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e031      	b.n	80028fa <HAL_RCC_OscConfig+0x6aa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8002896:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	60bb      	str	r3, [r7, #8]

        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	f003 0203 	and.w	r2, r3, #3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d123      	bne.n	80028f4 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d11c      	bne.n	80028f4 <HAL_RCC_OscConfig+0x6a4>
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	0a1b      	lsrs	r3, r3, #8
 80028be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d114      	bne.n	80028f4 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d10d      	bne.n	80028f4 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d106      	bne.n	80028f4 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d001      	beq.n	80028f8 <HAL_RCC_OscConfig+0x6a8>
        {
          return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e000      	b.n	80028fa <HAL_RCC_OscConfig+0x6aa>
        }
      }
    }
  }
  return HAL_OK;
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	372c      	adds	r7, #44	; 0x2c
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd90      	pop	{r4, r7, pc}
 8002902:	bf00      	nop
 8002904:	58000400 	.word	0x58000400
 8002908:	11c1808c 	.word	0x11c1808c

0800290c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d101      	bne.n	8002920 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e12a      	b.n	8002b76 <HAL_RCC_ClockConfig+0x26a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002920:	4b97      	ldr	r3, [pc, #604]	; (8002b80 <HAL_RCC_ClockConfig+0x274>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0207 	and.w	r2, r3, #7
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	429a      	cmp	r2, r3
 800292c:	d21b      	bcs.n	8002966 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800292e:	4994      	ldr	r1, [pc, #592]	; (8002b80 <HAL_RCC_ClockConfig+0x274>)
 8002930:	4b93      	ldr	r3, [pc, #588]	; (8002b80 <HAL_RCC_ClockConfig+0x274>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f023 0207 	bic.w	r2, r3, #7
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	4313      	orrs	r3, r2
 800293c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800293e:	f7fd fe1b 	bl	8000578 <HAL_GetTick>
 8002942:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002944:	e008      	b.n	8002958 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002946:	f7fd fe17 	bl	8000578 <HAL_GetTick>
 800294a:	4602      	mov	r2, r0
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	2b02      	cmp	r3, #2
 8002952:	d901      	bls.n	8002958 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	e10e      	b.n	8002b76 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002958:	4b89      	ldr	r3, [pc, #548]	; (8002b80 <HAL_RCC_ClockConfig+0x274>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0207 	and.w	r2, r3, #7
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	429a      	cmp	r2, r3
 8002964:	d1ef      	bne.n	8002946 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d016      	beq.n	80029a0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	4618      	mov	r0, r3
 8002978:	f7ff fb11 	bl	8001f9e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800297c:	f7fd fdfc 	bl	8000578 <HAL_GetTick>
 8002980:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002982:	e008      	b.n	8002996 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002984:	f7fd fdf8 	bl	8000578 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	2b02      	cmp	r3, #2
 8002990:	d901      	bls.n	8002996 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e0ef      	b.n	8002b76 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002996:	f7ff fbfe 	bl	8002196 <LL_RCC_IsActiveFlag_HPRE>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d0f1      	beq.n	8002984 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0320 	and.w	r3, r3, #32
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d016      	beq.n	80029da <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	695b      	ldr	r3, [r3, #20]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7ff fb08 	bl	8001fc6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80029b6:	f7fd fddf 	bl	8000578 <HAL_GetTick>
 80029ba:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80029bc:	e008      	b.n	80029d0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80029be:	f7fd fddb 	bl	8000578 <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d901      	bls.n	80029d0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e0d2      	b.n	8002b76 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80029d0:	f7ff fbf3 	bl	80021ba <LL_RCC_IsActiveFlag_C2HPRE>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d0f1      	beq.n	80029be <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d016      	beq.n	8002a14 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	699b      	ldr	r3, [r3, #24]
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7ff fb01 	bl	8001ff2 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80029f0:	f7fd fdc2 	bl	8000578 <HAL_GetTick>
 80029f4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80029f6:	e008      	b.n	8002a0a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80029f8:	f7fd fdbe 	bl	8000578 <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d901      	bls.n	8002a0a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e0b5      	b.n	8002b76 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002a0a:	f7ff fbe9 	bl	80021e0 <LL_RCC_IsActiveFlag_SHDHPRE>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d0f1      	beq.n	80029f8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0304 	and.w	r3, r3, #4
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d016      	beq.n	8002a4e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7ff fafb 	bl	8002020 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002a2a:	f7fd fda5 	bl	8000578 <HAL_GetTick>
 8002a2e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002a30:	e008      	b.n	8002a44 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002a32:	f7fd fda1 	bl	8000578 <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d901      	bls.n	8002a44 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	e098      	b.n	8002b76 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002a44:	f7ff fbdf 	bl	8002206 <LL_RCC_IsActiveFlag_PPRE1>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d0f1      	beq.n	8002a32 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0308 	and.w	r3, r3, #8
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d017      	beq.n	8002a8a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	00db      	lsls	r3, r3, #3
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7ff faf1 	bl	8002048 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002a66:	f7fd fd87 	bl	8000578 <HAL_GetTick>
 8002a6a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002a6c:	e008      	b.n	8002a80 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002a6e:	f7fd fd83 	bl	8000578 <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d901      	bls.n	8002a80 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e07a      	b.n	8002b76 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002a80:	f7ff fbd3 	bl	800222a <LL_RCC_IsActiveFlag_PPRE2>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d0f1      	beq.n	8002a6e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0301 	and.w	r3, r3, #1
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d043      	beq.n	8002b1e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d106      	bne.n	8002aac <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002a9e:	f7ff f891 	bl	8001bc4 <LL_RCC_HSE_IsReady>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d11e      	bne.n	8002ae6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e064      	b.n	8002b76 <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	2b03      	cmp	r3, #3
 8002ab2:	d106      	bne.n	8002ac2 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002ab4:	f7ff fb2c 	bl	8002110 <LL_RCC_PLL_IsReady>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d113      	bne.n	8002ae6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e059      	b.n	8002b76 <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d106      	bne.n	8002ad8 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002aca:	f7ff f9f9 	bl	8001ec0 <LL_RCC_MSI_IsReady>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d108      	bne.n	8002ae6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e04e      	b.n	8002b76 <HAL_RCC_ClockConfig+0x26a>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002ad8:	f7ff f8a4 	bl	8001c24 <LL_RCC_HSI_IsReady>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d101      	bne.n	8002ae6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e047      	b.n	8002b76 <HAL_RCC_ClockConfig+0x26a>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7ff fa37 	bl	8001f5e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002af0:	f7fd fd42 	bl	8000578 <HAL_GetTick>
 8002af4:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002af6:	e00a      	b.n	8002b0e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002af8:	f7fd fd3e 	bl	8000578 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d901      	bls.n	8002b0e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e033      	b.n	8002b76 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b0e:	f7ff fa3a 	bl	8001f86 <LL_RCC_GetSysClkSource>
 8002b12:	4602      	mov	r2, r0
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d1ec      	bne.n	8002af8 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b1e:	4b18      	ldr	r3, [pc, #96]	; (8002b80 <HAL_RCC_ClockConfig+0x274>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0207 	and.w	r2, r3, #7
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d91b      	bls.n	8002b64 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b2c:	4914      	ldr	r1, [pc, #80]	; (8002b80 <HAL_RCC_ClockConfig+0x274>)
 8002b2e:	4b14      	ldr	r3, [pc, #80]	; (8002b80 <HAL_RCC_ClockConfig+0x274>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f023 0207 	bic.w	r2, r3, #7
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b3c:	f7fd fd1c 	bl	8000578 <HAL_GetTick>
 8002b40:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b42:	e008      	b.n	8002b56 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002b44:	f7fd fd18 	bl	8000578 <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d901      	bls.n	8002b56 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e00f      	b.n	8002b76 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b56:	4b0a      	ldr	r3, [pc, #40]	; (8002b80 <HAL_RCC_ClockConfig+0x274>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0207 	and.w	r2, r3, #7
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d1ef      	bne.n	8002b44 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClockUpdate();
 8002b64:	f003 fb68 	bl	8006238 <SystemCoreClockUpdate>
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8002b68:	f7fd fd12 	bl	8000590 <HAL_GetTickPrio>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7fd fcb6 	bl	80004e0 <HAL_InitTick>
 8002b74:	4603      	mov	r3, r0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3710      	adds	r7, #16
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	58004000 	.word	0x58004000

08002b84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b84:	b590      	push	{r4, r7, lr}
 8002b86:	b085      	sub	sp, #20
 8002b88:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b8a:	f7ff f9fc 	bl	8001f86 <LL_RCC_GetSysClkSource>
 8002b8e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d10a      	bne.n	8002bac <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002b96:	f7ff f9b8 	bl	8001f0a <LL_RCC_MSI_GetRange>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	091b      	lsrs	r3, r3, #4
 8002b9e:	f003 030f 	and.w	r3, r3, #15
 8002ba2:	4a2a      	ldr	r2, [pc, #168]	; (8002c4c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002ba4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ba8:	60fb      	str	r3, [r7, #12]
 8002baa:	e04a      	b.n	8002c42 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2b04      	cmp	r3, #4
 8002bb0:	d102      	bne.n	8002bb8 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002bb2:	4b27      	ldr	r3, [pc, #156]	; (8002c50 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002bb4:	60fb      	str	r3, [r7, #12]
 8002bb6:	e044      	b.n	8002c42 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2b08      	cmp	r3, #8
 8002bbc:	d10a      	bne.n	8002bd4 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002bbe:	f7fe ffb3 	bl	8001b28 <LL_RCC_HSE_IsEnabledDiv2>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d102      	bne.n	8002bce <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002bc8:	4b21      	ldr	r3, [pc, #132]	; (8002c50 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002bca:	60fb      	str	r3, [r7, #12]
 8002bcc:	e039      	b.n	8002c42 <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002bce:	4b21      	ldr	r3, [pc, #132]	; (8002c54 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002bd0:	60fb      	str	r3, [r7, #12]
 8002bd2:	e036      	b.n	8002c42 <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002bd4:	f7ff fad3 	bl	800217e <LL_RCC_PLL_GetMainSource>
 8002bd8:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d002      	beq.n	8002be6 <HAL_RCC_GetSysClockFreq+0x62>
 8002be0:	2b03      	cmp	r3, #3
 8002be2:	d003      	beq.n	8002bec <HAL_RCC_GetSysClockFreq+0x68>
 8002be4:	e00d      	b.n	8002c02 <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002be6:	4b1a      	ldr	r3, [pc, #104]	; (8002c50 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002be8:	60bb      	str	r3, [r7, #8]
        break;
 8002bea:	e015      	b.n	8002c18 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002bec:	f7fe ff9c 	bl	8001b28 <LL_RCC_HSE_IsEnabledDiv2>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d102      	bne.n	8002bfc <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002bf6:	4b16      	ldr	r3, [pc, #88]	; (8002c50 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002bf8:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002bfa:	e00d      	b.n	8002c18 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 8002bfc:	4b15      	ldr	r3, [pc, #84]	; (8002c54 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002bfe:	60bb      	str	r3, [r7, #8]
        break;
 8002c00:	e00a      	b.n	8002c18 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002c02:	f7ff f982 	bl	8001f0a <LL_RCC_MSI_GetRange>
 8002c06:	4603      	mov	r3, r0
 8002c08:	091b      	lsrs	r3, r3, #4
 8002c0a:	f003 030f 	and.w	r3, r3, #15
 8002c0e:	4a0f      	ldr	r2, [pc, #60]	; (8002c4c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002c10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c14:	60bb      	str	r3, [r7, #8]
        break;
 8002c16:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8002c18:	f7ff fa8c 	bl	8002134 <LL_RCC_PLL_GetN>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	fb03 f402 	mul.w	r4, r3, r2
 8002c24:	f7ff fa9f 	bl	8002166 <LL_RCC_PLL_GetDivider>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	091b      	lsrs	r3, r3, #4
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	fbb4 f4f3 	udiv	r4, r4, r3
 8002c32:	f7ff fa8c 	bl	800214e <LL_RCC_PLL_GetR>
 8002c36:	4603      	mov	r3, r0
 8002c38:	0f5b      	lsrs	r3, r3, #29
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	fbb4 f3f3 	udiv	r3, r4, r3
 8002c40:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8002c42:	68fb      	ldr	r3, [r7, #12]
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3714      	adds	r7, #20
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd90      	pop	{r4, r7, pc}
 8002c4c:	080064e0 	.word	0x080064e0
 8002c50:	00f42400 	.word	0x00f42400
 8002c54:	01e84800 	.word	0x01e84800

08002c58 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c58:	b598      	push	{r3, r4, r7, lr}
 8002c5a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002c5c:	f7ff ff92 	bl	8002b84 <HAL_RCC_GetSysClockFreq>
 8002c60:	4604      	mov	r4, r0
 8002c62:	f7ff fa05 	bl	8002070 <LL_RCC_GetAHBPrescaler>
 8002c66:	4603      	mov	r3, r0
 8002c68:	091b      	lsrs	r3, r3, #4
 8002c6a:	f003 030f 	and.w	r3, r3, #15
 8002c6e:	4a03      	ldr	r2, [pc, #12]	; (8002c7c <HAL_RCC_GetHCLKFreq+0x24>)
 8002c70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c74:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	bd98      	pop	{r3, r4, r7, pc}
 8002c7c:	08006480 	.word	0x08006480

08002c80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c80:	b598      	push	{r3, r4, r7, lr}
 8002c82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002c84:	f7ff ffe8 	bl	8002c58 <HAL_RCC_GetHCLKFreq>
 8002c88:	4604      	mov	r4, r0
 8002c8a:	f7ff fa0b 	bl	80020a4 <LL_RCC_GetAPB1Prescaler>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	0a1b      	lsrs	r3, r3, #8
 8002c92:	f003 0307 	and.w	r3, r3, #7
 8002c96:	4a04      	ldr	r2, [pc, #16]	; (8002ca8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002c98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c9c:	f003 031f 	and.w	r3, r3, #31
 8002ca0:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	bd98      	pop	{r3, r4, r7, pc}
 8002ca8:	080064c0 	.word	0x080064c0

08002cac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cac:	b598      	push	{r3, r4, r7, lr}
 8002cae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002cb0:	f7ff ffd2 	bl	8002c58 <HAL_RCC_GetHCLKFreq>
 8002cb4:	4604      	mov	r4, r0
 8002cb6:	f7ff fa01 	bl	80020bc <LL_RCC_GetAPB2Prescaler>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	0adb      	lsrs	r3, r3, #11
 8002cbe:	f003 0307 	and.w	r3, r3, #7
 8002cc2:	4a04      	ldr	r2, [pc, #16]	; (8002cd4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002cc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cc8:	f003 031f 	and.w	r3, r3, #31
 8002ccc:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	bd98      	pop	{r3, r4, r7, pc}
 8002cd4:	080064c0 	.word	0x080064c0

08002cd8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002cd8:	b590      	push	{r4, r7, lr}
 8002cda:	b085      	sub	sp, #20
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2bb0      	cmp	r3, #176	; 0xb0
 8002ce4:	d903      	bls.n	8002cee <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8002ce6:	4b15      	ldr	r3, [pc, #84]	; (8002d3c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cea:	60fb      	str	r3, [r7, #12]
 8002cec:	e007      	b.n	8002cfe <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	091b      	lsrs	r3, r3, #4
 8002cf2:	f003 030f 	and.w	r3, r3, #15
 8002cf6:	4a11      	ldr	r2, [pc, #68]	; (8002d3c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002cf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cfc:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002cfe:	f7ff f9c3 	bl	8002088 <LL_RCC_GetAHB4Prescaler>
 8002d02:	4603      	mov	r3, r0
 8002d04:	091b      	lsrs	r3, r3, #4
 8002d06:	f003 030f 	and.w	r3, r3, #15
 8002d0a:	4a0d      	ldr	r2, [pc, #52]	; (8002d40 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002d0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d10:	68fa      	ldr	r2, [r7, #12]
 8002d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d16:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	4a0a      	ldr	r2, [pc, #40]	; (8002d44 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8002d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d20:	0c9c      	lsrs	r4, r3, #18
 8002d22:	f7fe fef3 	bl	8001b0c <HAL_PWREx_GetVoltageRange>
 8002d26:	4603      	mov	r3, r0
 8002d28:	4619      	mov	r1, r3
 8002d2a:	4620      	mov	r0, r4
 8002d2c:	f000 f80c 	bl	8002d48 <RCC_SetFlashLatency>
 8002d30:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3714      	adds	r7, #20
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd90      	pop	{r4, r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	080064e0 	.word	0x080064e0
 8002d40:	08006480 	.word	0x08006480
 8002d44:	431bde83 	.word	0x431bde83

08002d48 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002d48:	b590      	push	{r4, r7, lr}
 8002d4a:	b093      	sub	sp, #76	; 0x4c
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8002d52:	4b39      	ldr	r3, [pc, #228]	; (8002e38 <RCC_SetFlashLatency+0xf0>)
 8002d54:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002d58:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d5a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8002d5e:	4a37      	ldr	r2, [pc, #220]	; (8002e3c <RCC_SetFlashLatency+0xf4>)
 8002d60:	f107 031c 	add.w	r3, r7, #28
 8002d64:	ca07      	ldmia	r2, {r0, r1, r2}
 8002d66:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002d6a:	4b35      	ldr	r3, [pc, #212]	; (8002e40 <RCC_SetFlashLatency+0xf8>)
 8002d6c:	f107 040c 	add.w	r4, r7, #12
 8002d70:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d72:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002d76:	2300      	movs	r3, #0
 8002d78:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d80:	d11c      	bne.n	8002dbc <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002d82:	2300      	movs	r3, #0
 8002d84:	643b      	str	r3, [r7, #64]	; 0x40
 8002d86:	e015      	b.n	8002db4 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002d88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002d90:	4413      	add	r3, r2
 8002d92:	f853 2c20 	ldr.w	r2, [r3, #-32]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d308      	bcc.n	8002dae <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002d9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002da4:	4413      	add	r3, r2
 8002da6:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002daa:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002dac:	e022      	b.n	8002df4 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002dae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002db0:	3301      	adds	r3, #1
 8002db2:	643b      	str	r3, [r7, #64]	; 0x40
 8002db4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002db6:	2b03      	cmp	r3, #3
 8002db8:	d9e6      	bls.n	8002d88 <RCC_SetFlashLatency+0x40>
 8002dba:	e01b      	b.n	8002df4 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dc0:	e015      	b.n	8002dee <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002dc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002dca:	4413      	add	r3, r2
 8002dcc:	f853 2c2c 	ldr.w	r2, [r3, #-44]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d308      	bcc.n	8002de8 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002dd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002dde:	4413      	add	r3, r2
 8002de0:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002de4:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002de6:	e005      	b.n	8002df4 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002de8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dea:	3301      	adds	r3, #1
 8002dec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d9e6      	bls.n	8002dc2 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8002df4:	4913      	ldr	r1, [pc, #76]	; (8002e44 <RCC_SetFlashLatency+0xfc>)
 8002df6:	4b13      	ldr	r3, [pc, #76]	; (8002e44 <RCC_SetFlashLatency+0xfc>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f023 0207 	bic.w	r2, r3, #7
 8002dfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e00:	4313      	orrs	r3, r2
 8002e02:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002e04:	f7fd fbb8 	bl	8000578 <HAL_GetTick>
 8002e08:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002e0a:	e008      	b.n	8002e1e <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002e0c:	f7fd fbb4 	bl	8000578 <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d901      	bls.n	8002e1e <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e007      	b.n	8002e2e <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002e1e:	4b09      	ldr	r3, [pc, #36]	; (8002e44 <RCC_SetFlashLatency+0xfc>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0207 	and.w	r2, r3, #7
 8002e26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d1ef      	bne.n	8002e0c <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	374c      	adds	r7, #76	; 0x4c
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd90      	pop	{r4, r7, pc}
 8002e36:	bf00      	nop
 8002e38:	08006440 	.word	0x08006440
 8002e3c:	08006450 	.word	0x08006450
 8002e40:	0800645c 	.word	0x0800645c
 8002e44:	58004000 	.word	0x58004000

08002e48 <LL_RCC_LSE_IsEnabled>:
{
 8002e48:	b480      	push	{r7}
 8002e4a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002e4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e54:	f003 0301 	and.w	r3, r3, #1
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d101      	bne.n	8002e60 <LL_RCC_LSE_IsEnabled+0x18>
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e000      	b.n	8002e62 <LL_RCC_LSE_IsEnabled+0x1a>
 8002e60:	2300      	movs	r3, #0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr

08002e6c <LL_RCC_LSE_IsReady>:
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002e70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e78:	f003 0302 	and.w	r3, r3, #2
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d101      	bne.n	8002e84 <LL_RCC_LSE_IsReady+0x18>
 8002e80:	2301      	movs	r3, #1
 8002e82:	e000      	b.n	8002e86 <LL_RCC_LSE_IsReady+0x1a>
 8002e84:	2300      	movs	r3, #0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <LL_RCC_MSI_EnablePLLMode>:
{
 8002e90:	b480      	push	{r7}
 8002e92:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8002e94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f043 0304 	orr.w	r3, r3, #4
 8002ea2:	6013      	str	r3, [r2, #0]
}
 8002ea4:	bf00      	nop
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr

08002eae <LL_RCC_SetRFWKPClockSource>:
{
 8002eae:	b480      	push	{r7}
 8002eb0:	b083      	sub	sp, #12
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8002eb6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002eba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ebe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ec2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002ece:	bf00      	nop
 8002ed0:	370c      	adds	r7, #12
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr

08002eda <LL_RCC_SetSMPSClockSource>:
{
 8002eda:	b480      	push	{r7}
 8002edc:	b083      	sub	sp, #12
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002ee2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ee6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eec:	f023 0203 	bic.w	r2, r3, #3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002ef6:	bf00      	nop
 8002ef8:	370c      	adds	r7, #12
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr

08002f02 <LL_RCC_SetSMPSPrescaler>:
{
 8002f02:	b480      	push	{r7}
 8002f04:	b083      	sub	sp, #12
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8002f0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f14:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002f1e:	bf00      	nop
 8002f20:	370c      	adds	r7, #12
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr

08002f2a <LL_RCC_SetUSARTClockSource>:
{
 8002f2a:	b480      	push	{r7}
 8002f2c:	b083      	sub	sp, #12
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8002f32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f3e:	f023 0203 	bic.w	r2, r3, #3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002f4a:	bf00      	nop
 8002f4c:	370c      	adds	r7, #12
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr

08002f56 <LL_RCC_SetLPUARTClockSource>:
{
 8002f56:	b480      	push	{r7}
 8002f58:	b083      	sub	sp, #12
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002f5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f6a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002f76:	bf00      	nop
 8002f78:	370c      	adds	r7, #12
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr

08002f82 <LL_RCC_SetI2CClockSource>:
{
 8002f82:	b480      	push	{r7}
 8002f84:	b083      	sub	sp, #12
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002f8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f92:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	091b      	lsrs	r3, r3, #4
 8002f9a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002f9e:	43db      	mvns	r3, r3
 8002fa0:	401a      	ands	r2, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	011b      	lsls	r3, r3, #4
 8002fa6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002faa:	4313      	orrs	r3, r2
 8002fac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002fb0:	bf00      	nop
 8002fb2:	370c      	adds	r7, #12
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr

08002fbc <LL_RCC_SetLPTIMClockSource>:
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002fc4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fcc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	0c1b      	lsrs	r3, r3, #16
 8002fd4:	041b      	lsls	r3, r3, #16
 8002fd6:	43db      	mvns	r3, r3
 8002fd8:	401a      	ands	r2, r3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	041b      	lsls	r3, r3, #16
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002fe4:	bf00      	nop
 8002fe6:	370c      	adds	r7, #12
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr

08002ff0 <LL_RCC_SetSAIClockSource>:
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8002ff8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ffc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003000:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003004:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4313      	orrs	r3, r2
 800300c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003010:	bf00      	nop
 8003012:	370c      	adds	r7, #12
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <LL_RCC_SetRNGClockSource>:
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003024:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003028:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800302c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003030:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4313      	orrs	r3, r2
 8003038:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800303c:	bf00      	nop
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr

08003048 <LL_RCC_SetCLK48ClockSource>:
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003050:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003054:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003058:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800305c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	4313      	orrs	r3, r2
 8003064:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003068:	bf00      	nop
 800306a:	370c      	adds	r7, #12
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr

08003074 <LL_RCC_SetUSBClockSource>:
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b082      	sub	sp, #8
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f7ff ffe3 	bl	8003048 <LL_RCC_SetCLK48ClockSource>
}
 8003082:	bf00      	nop
 8003084:	3708      	adds	r7, #8
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}

0800308a <LL_RCC_SetADCClockSource>:
{
 800308a:	b480      	push	{r7}
 800308c:	b083      	sub	sp, #12
 800308e:	af00      	add	r7, sp, #0
 8003090:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003092:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003096:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800309a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800309e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80030aa:	bf00      	nop
 80030ac:	370c      	adds	r7, #12
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr

080030b6 <LL_RCC_SetRTCClockSource>:
{
 80030b6:	b480      	push	{r7}
 80030b8:	b083      	sub	sp, #12
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80030be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80030d6:	bf00      	nop
 80030d8:	370c      	adds	r7, #12
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr

080030e2 <LL_RCC_GetRTCClockSource>:
{
 80030e2:	b480      	push	{r7}
 80030e4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80030e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr

080030fc <LL_RCC_ForceBackupDomainReset>:
{
 80030fc:	b480      	push	{r7}
 80030fe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003100:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003104:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003108:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800310c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003110:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003114:	bf00      	nop
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr

0800311e <LL_RCC_ReleaseBackupDomainReset>:
{
 800311e:	b480      	push	{r7}
 8003120:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003122:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003126:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800312a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800312e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003132:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003136:	bf00      	nop
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr

08003140 <LL_RCC_PLLSAI1_Enable>:
{
 8003140:	b480      	push	{r7}
 8003142:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003144:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003148:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003152:	6013      	str	r3, [r2, #0]
}
 8003154:	bf00      	nop
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr

0800315e <LL_RCC_PLLSAI1_Disable>:
{
 800315e:	b480      	push	{r7}
 8003160:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003162:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003166:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003170:	6013      	str	r3, [r2, #0]
}
 8003172:	bf00      	nop
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr

0800317c <LL_RCC_PLLSAI1_IsReady>:
{
 800317c:	b480      	push	{r7}
 800317e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8003180:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800318a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800318e:	d101      	bne.n	8003194 <LL_RCC_PLLSAI1_IsReady+0x18>
 8003190:	2301      	movs	r3, #1
 8003192:	e000      	b.n	8003196 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr

080031a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b088      	sub	sp, #32
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80031a8:	2300      	movs	r3, #0
 80031aa:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80031ac:	2300      	movs	r3, #0
 80031ae:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d033      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031c4:	d00c      	beq.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80031c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031ca:	d802      	bhi.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d010      	beq.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80031d0:	e017      	b.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80031d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80031d6:	d017      	beq.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x68>
 80031d8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80031dc:	d016      	beq.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x6c>
 80031de:	e010      	b.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80031e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031ee:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80031f0:	e00d      	b.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x6e>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	3304      	adds	r3, #4
 80031f6:	4618      	mov	r0, r3
 80031f8:	f000 f94d 	bl	8003496 <RCCEx_PLLSAI1_ConfigNP>
 80031fc:	4603      	mov	r3, r0
 80031fe:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003200:	e005      	b.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	77fb      	strb	r3, [r7, #31]
        break;
 8003206:	e002      	b.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8003208:	bf00      	nop
 800320a:	e000      	b.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 800320c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800320e:	7ffb      	ldrb	r3, [r7, #31]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d105      	bne.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003218:	4618      	mov	r0, r3
 800321a:	f7ff fee9 	bl	8002ff0 <LL_RCC_SetSAIClockSource>
 800321e:	e001      	b.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003220:	7ffb      	ldrb	r3, [r7, #31]
 8003222:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800322c:	2b00      	cmp	r3, #0
 800322e:	d046      	beq.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8003230:	f7ff ff57 	bl	80030e2 <LL_RCC_GetRTCClockSource>
 8003234:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	429a      	cmp	r2, r3
 800323e:	d03c      	beq.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003240:	f7fe fc54 	bl	8001aec <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8003244:	69bb      	ldr	r3, [r7, #24]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d105      	bne.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324e:	4618      	mov	r0, r3
 8003250:	f7ff ff31 	bl	80030b6 <LL_RCC_SetRTCClockSource>
 8003254:	e02e      	b.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8003256:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800325a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800325e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8003260:	f7ff ff4c 	bl	80030fc <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8003264:	f7ff ff5b 	bl	800311e <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003272:	4313      	orrs	r3, r2
 8003274:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8003276:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8003280:	f7ff fde2 	bl	8002e48 <LL_RCC_LSE_IsEnabled>
 8003284:	4603      	mov	r3, r0
 8003286:	2b01      	cmp	r3, #1
 8003288:	d114      	bne.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800328a:	f7fd f975 	bl	8000578 <HAL_GetTick>
 800328e:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8003290:	e00b      	b.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003292:	f7fd f971 	bl	8000578 <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	f241 3288 	movw	r2, #5000	; 0x1388
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d902      	bls.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	77fb      	strb	r3, [r7, #31]
              break;
 80032a8:	e004      	b.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 80032aa:	f7ff fddf 	bl	8002e6c <LL_RCC_LSE_IsReady>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d1ee      	bne.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80032b4:	7ffb      	ldrb	r3, [r7, #31]
 80032b6:	77bb      	strb	r3, [r7, #30]
 80032b8:	e001      	b.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032ba:	7ffb      	ldrb	r3, [r7, #31]
 80032bc:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d004      	beq.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	699b      	ldr	r3, [r3, #24]
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7ff fe2b 	bl	8002f2a <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0302 	and.w	r3, r3, #2
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d004      	beq.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	69db      	ldr	r3, [r3, #28]
 80032e4:	4618      	mov	r0, r3
 80032e6:	f7ff fe36 	bl	8002f56 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0310 	and.w	r3, r3, #16
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d004      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7ff fe5e 	bl	8002fbc <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0320 	and.w	r3, r3, #32
 8003308:	2b00      	cmp	r3, #0
 800330a:	d004      	beq.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003310:	4618      	mov	r0, r3
 8003312:	f7ff fe53 	bl	8002fbc <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0304 	and.w	r3, r3, #4
 800331e:	2b00      	cmp	r3, #0
 8003320:	d004      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a1b      	ldr	r3, [r3, #32]
 8003326:	4618      	mov	r0, r3
 8003328:	f7ff fe2b 	bl	8002f82 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0308 	and.w	r3, r3, #8
 8003334:	2b00      	cmp	r3, #0
 8003336:	d004      	beq.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333c:	4618      	mov	r0, r3
 800333e:	f7ff fe20 	bl	8002f82 <LL_RCC_SetI2CClockSource>
  }
#endif

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800334a:	2b00      	cmp	r3, #0
 800334c:	d022      	beq.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003352:	4618      	mov	r0, r3
 8003354:	f7ff fe8e 	bl	8003074 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800335c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003360:	d107      	bne.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8003362:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003366:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003370:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003376:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800337a:	d10b      	bne.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	3304      	adds	r3, #4
 8003380:	4618      	mov	r0, r3
 8003382:	f000 f8e3 	bl	800354c <RCCEx_PLLSAI1_ConfigNQ>
 8003386:	4603      	mov	r3, r0
 8003388:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800338a:	7ffb      	ldrb	r3, [r7, #31]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d001      	beq.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
      {
        /* set overall return value */
        status = ret;
 8003390:	7ffb      	ldrb	r3, [r7, #31]
 8003392:	77bb      	strb	r3, [r7, #30]
    }
#endif
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800339c:	2b00      	cmp	r3, #0
 800339e:	d02b      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033a8:	d008      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x21c>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80033b2:	d003      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x21c>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d105      	bne.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x228>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c0:	4618      	mov	r0, r3
 80033c2:	f7ff fe2b 	bl	800301c <LL_RCC_SetRNGClockSource>
 80033c6:	e00a      	b.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x23e>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033d0:	60fb      	str	r3, [r7, #12]
 80033d2:	2000      	movs	r0, #0
 80033d4:	f7ff fe22 	bl	800301c <LL_RCC_SetRNGClockSource>
 80033d8:	68f8      	ldr	r0, [r7, #12]
 80033da:	f7ff fe35 	bl	8003048 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e2:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80033e6:	d107      	bne.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80033e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033f6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003400:	2b00      	cmp	r3, #0
 8003402:	d022      	beq.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003408:	4618      	mov	r0, r3
 800340a:	f7ff fe3e 	bl	800308a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003412:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003416:	d107      	bne.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003418:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800341c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003426:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800342c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003430:	d10b      	bne.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	3304      	adds	r3, #4
 8003436:	4618      	mov	r0, r3
 8003438:	f000 f8e3 	bl	8003602 <RCCEx_PLLSAI1_ConfigNR>
 800343c:	4603      	mov	r3, r0
 800343e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003440:	7ffb      	ldrb	r3, [r7, #31]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d001      	beq.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
      {
        /* set overall return value */
        status = ret;
 8003446:	7ffb      	ldrb	r3, [r7, #31]
 8003448:	77bb      	strb	r3, [r7, #30]
    }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d004      	beq.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800345a:	4618      	mov	r0, r3
 800345c:	f7ff fd27 	bl	8002eae <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003468:	2b00      	cmp	r3, #0
 800346a:	d009      	beq.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003470:	4618      	mov	r0, r3
 8003472:	f7ff fd46 	bl	8002f02 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800347a:	4618      	mov	r0, r3
 800347c:	f7ff fd2d 	bl	8002eda <LL_RCC_SetSMPSClockSource>
  }
#endif

  return status;
 8003480:	7fbb      	ldrb	r3, [r7, #30]
}
 8003482:	4618      	mov	r0, r3
 8003484:	3720      	adds	r7, #32
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}

0800348a <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800348a:	b580      	push	{r7, lr}
 800348c:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 800348e:	f7ff fcff 	bl	8002e90 <LL_RCC_MSI_EnablePLLMode>
}
 8003492:	bf00      	nop
 8003494:	bd80      	pop	{r7, pc}

08003496 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003496:	b580      	push	{r7, lr}
 8003498:	b084      	sub	sp, #16
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800349e:	2300      	movs	r3, #0
 80034a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80034a2:	f7ff fe5c 	bl	800315e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80034a6:	f7fd f867 	bl	8000578 <HAL_GetTick>
 80034aa:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80034ac:	e009      	b.n	80034c2 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80034ae:	f7fd f863 	bl	8000578 <HAL_GetTick>
 80034b2:	4602      	mov	r2, r0
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d902      	bls.n	80034c2 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80034bc:	2303      	movs	r3, #3
 80034be:	73fb      	strb	r3, [r7, #15]
      break;
 80034c0:	e004      	b.n	80034cc <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80034c2:	f7ff fe5b 	bl	800317c <LL_RCC_PLLSAI1_IsReady>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d1f0      	bne.n	80034ae <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80034cc:	7bfb      	ldrb	r3, [r7, #15]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d137      	bne.n	8003542 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80034d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034da:	691b      	ldr	r3, [r3, #16]
 80034dc:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	021b      	lsls	r3, r3, #8
 80034e6:	4313      	orrs	r3, r2
 80034e8:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80034ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034f2:	691b      	ldr	r3, [r3, #16]
 80034f4:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003500:	f7ff fe1e 	bl	8003140 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003504:	f7fd f838 	bl	8000578 <HAL_GetTick>
 8003508:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800350a:	e009      	b.n	8003520 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800350c:	f7fd f834 	bl	8000578 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	2b02      	cmp	r3, #2
 8003518:	d902      	bls.n	8003520 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	73fb      	strb	r3, [r7, #15]
        break;
 800351e:	e004      	b.n	800352a <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003520:	f7ff fe2c 	bl	800317c <LL_RCC_PLLSAI1_IsReady>
 8003524:	4603      	mov	r3, r0
 8003526:	2b01      	cmp	r3, #1
 8003528:	d1f0      	bne.n	800350c <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800352a:	7bfb      	ldrb	r3, [r7, #15]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d108      	bne.n	8003542 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003530:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003534:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003538:	691a      	ldr	r2, [r3, #16]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	4313      	orrs	r3, r2
 8003540:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003542:	7bfb      	ldrb	r3, [r7, #15]
}
 8003544:	4618      	mov	r0, r3
 8003546:	3710      	adds	r7, #16
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003554:	2300      	movs	r3, #0
 8003556:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003558:	f7ff fe01 	bl	800315e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800355c:	f7fd f80c 	bl	8000578 <HAL_GetTick>
 8003560:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003562:	e009      	b.n	8003578 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003564:	f7fd f808 	bl	8000578 <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	2b02      	cmp	r3, #2
 8003570:	d902      	bls.n	8003578 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	73fb      	strb	r3, [r7, #15]
      break;
 8003576:	e004      	b.n	8003582 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003578:	f7ff fe00 	bl	800317c <LL_RCC_PLLSAI1_IsReady>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d1f0      	bne.n	8003564 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8003582:	7bfb      	ldrb	r3, [r7, #15]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d137      	bne.n	80035f8 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003588:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800358c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	021b      	lsls	r3, r3, #8
 800359c:	4313      	orrs	r3, r2
 800359e:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80035a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80035a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80035b6:	f7ff fdc3 	bl	8003140 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035ba:	f7fc ffdd 	bl	8000578 <HAL_GetTick>
 80035be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80035c0:	e009      	b.n	80035d6 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80035c2:	f7fc ffd9 	bl	8000578 <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	d902      	bls.n	80035d6 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	73fb      	strb	r3, [r7, #15]
        break;
 80035d4:	e004      	b.n	80035e0 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80035d6:	f7ff fdd1 	bl	800317c <LL_RCC_PLLSAI1_IsReady>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d1f0      	bne.n	80035c2 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80035e0:	7bfb      	ldrb	r3, [r7, #15]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d108      	bne.n	80035f8 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80035e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80035ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035ee:	691a      	ldr	r2, [r3, #16]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	691b      	ldr	r3, [r3, #16]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80035f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3710      	adds	r7, #16
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}

08003602 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003602:	b580      	push	{r7, lr}
 8003604:	b084      	sub	sp, #16
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800360a:	2300      	movs	r3, #0
 800360c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800360e:	f7ff fda6 	bl	800315e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003612:	f7fc ffb1 	bl	8000578 <HAL_GetTick>
 8003616:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003618:	e009      	b.n	800362e <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800361a:	f7fc ffad 	bl	8000578 <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	2b02      	cmp	r3, #2
 8003626:	d902      	bls.n	800362e <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	73fb      	strb	r3, [r7, #15]
      break;
 800362c:	e004      	b.n	8003638 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800362e:	f7ff fda5 	bl	800317c <LL_RCC_PLLSAI1_IsReady>
 8003632:	4603      	mov	r3, r0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d1f0      	bne.n	800361a <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8003638:	7bfb      	ldrb	r3, [r7, #15]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d137      	bne.n	80036ae <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800363e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003642:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003646:	691b      	ldr	r3, [r3, #16]
 8003648:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	021b      	lsls	r3, r3, #8
 8003652:	4313      	orrs	r3, r2
 8003654:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8003656:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800365a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800365e:	691b      	ldr	r3, [r3, #16]
 8003660:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	4313      	orrs	r3, r2
 800366a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800366c:	f7ff fd68 	bl	8003140 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003670:	f7fc ff82 	bl	8000578 <HAL_GetTick>
 8003674:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003676:	e009      	b.n	800368c <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003678:	f7fc ff7e 	bl	8000578 <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	2b02      	cmp	r3, #2
 8003684:	d902      	bls.n	800368c <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	73fb      	strb	r3, [r7, #15]
        break;
 800368a:	e004      	b.n	8003696 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800368c:	f7ff fd76 	bl	800317c <LL_RCC_PLLSAI1_IsReady>
 8003690:	4603      	mov	r3, r0
 8003692:	2b01      	cmp	r3, #1
 8003694:	d1f0      	bne.n	8003678 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8003696:	7bfb      	ldrb	r3, [r7, #15]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d108      	bne.n	80036ae <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800369c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80036a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036a4:	691a      	ldr	r2, [r3, #16]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80036ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3710      	adds	r7, #16
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d101      	bne.n	80036ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e07a      	b.n	80037c0 <HAL_SPI_Init+0x108>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d106      	bne.n	80036ea <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f002 fc5b 	bl	8005fa0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2202      	movs	r2, #2
 80036ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	6812      	ldr	r2, [r2, #0]
 80036fa:	6812      	ldr	r2, [r2, #0]
 80036fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003700:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800370a:	d902      	bls.n	8003712 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800370c:	2300      	movs	r3, #0
 800370e:	60fb      	str	r3, [r7, #12]
 8003710:	e002      	b.n	8003718 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003712:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003716:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003720:	d007      	beq.n	8003732 <HAL_SPI_Init+0x7a>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800372a:	d002      	beq.n	8003732 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003736:	2b00      	cmp	r3, #0
 8003738:	d10b      	bne.n	8003752 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003742:	d903      	bls.n	800374c <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2202      	movs	r2, #2
 8003748:	631a      	str	r2, [r3, #48]	; 0x30
 800374a:	e002      	b.n	8003752 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	6851      	ldr	r1, [r2, #4]
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	6892      	ldr	r2, [r2, #8]
 800375e:	4311      	orrs	r1, r2
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	6912      	ldr	r2, [r2, #16]
 8003764:	4311      	orrs	r1, r2
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	6952      	ldr	r2, [r2, #20]
 800376a:	4311      	orrs	r1, r2
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	6992      	ldr	r2, [r2, #24]
 8003770:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8003774:	4311      	orrs	r1, r2
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	69d2      	ldr	r2, [r2, #28]
 800377a:	4311      	orrs	r1, r2
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	6a12      	ldr	r2, [r2, #32]
 8003780:	4311      	orrs	r1, r2
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003786:	430a      	orrs	r2, r1
 8003788:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	6992      	ldr	r2, [r2, #24]
 8003792:	0c12      	lsrs	r2, r2, #16
 8003794:	f002 0104 	and.w	r1, r2, #4
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800379c:	4311      	orrs	r1, r2
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80037a2:	4311      	orrs	r1, r2
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	68d2      	ldr	r2, [r2, #12]
 80037a8:	4311      	orrs	r1, r2
 80037aa:	68fa      	ldr	r2, [r7, #12]
 80037ac:	430a      	orrs	r2, r1
 80037ae:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2201      	movs	r2, #1
 80037ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80037be:	2300      	movs	r3, #0
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3710      	adds	r7, #16
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b086      	sub	sp, #24
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	60b9      	str	r1, [r7, #8]
 80037d2:	4613      	mov	r3, r2
 80037d4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80037d6:	2300      	movs	r3, #0
 80037d8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d101      	bne.n	80037e8 <HAL_SPI_Transmit_DMA+0x20>
 80037e4:	2302      	movs	r3, #2
 80037e6:	e0d0      	b.n	800398a <HAL_SPI_Transmit_DMA+0x1c2>
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d002      	beq.n	8003802 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80037fc:	2302      	movs	r3, #2
 80037fe:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003800:	e0be      	b.n	8003980 <HAL_SPI_Transmit_DMA+0x1b8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d002      	beq.n	800380e <HAL_SPI_Transmit_DMA+0x46>
 8003808:	88fb      	ldrh	r3, [r7, #6]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d102      	bne.n	8003814 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003812:	e0b5      	b.n	8003980 <HAL_SPI_Transmit_DMA+0x1b8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2203      	movs	r2, #3
 8003818:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2200      	movs	r2, #0
 8003820:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	68ba      	ldr	r2, [r7, #8]
 8003826:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	88fa      	ldrh	r2, [r7, #6]
 800382c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	88fa      	ldrh	r2, [r7, #6]
 8003832:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2200      	movs	r2, #0
 8003838:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2200      	movs	r2, #0
 800383e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2200      	movs	r2, #0
 8003844:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2200      	movs	r2, #0
 800384a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2200      	movs	r2, #0
 8003852:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800385e:	d107      	bne.n	8003870 <HAL_SPI_Transmit_DMA+0xa8>
  {
    SPI_1LINE_TX(hspi);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	68fa      	ldr	r2, [r7, #12]
 8003866:	6812      	ldr	r2, [r2, #0]
 8003868:	6812      	ldr	r2, [r2, #0]
 800386a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800386e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003874:	4a47      	ldr	r2, [pc, #284]	; (8003994 <HAL_SPI_Transmit_DMA+0x1cc>)
 8003876:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800387c:	4a46      	ldr	r2, [pc, #280]	; (8003998 <HAL_SPI_Transmit_DMA+0x1d0>)
 800387e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003884:	4a45      	ldr	r2, [pc, #276]	; (800399c <HAL_SPI_Transmit_DMA+0x1d4>)
 8003886:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800388c:	2200      	movs	r2, #0
 800388e:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	68fa      	ldr	r2, [r7, #12]
 8003896:	6812      	ldr	r2, [r2, #0]
 8003898:	6852      	ldr	r2, [r2, #4]
 800389a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800389e:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80038a8:	d82d      	bhi.n	8003906 <HAL_SPI_Transmit_DMA+0x13e>
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ae:	699b      	ldr	r3, [r3, #24]
 80038b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038b4:	d127      	bne.n	8003906 <HAL_SPI_Transmit_DMA+0x13e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	f003 0301 	and.w	r3, r3, #1
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d10f      	bne.n	80038e4 <HAL_SPI_Transmit_DMA+0x11c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	68fa      	ldr	r2, [r7, #12]
 80038ca:	6812      	ldr	r2, [r2, #0]
 80038cc:	6852      	ldr	r2, [r2, #4]
 80038ce:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80038d2:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038d8:	b29b      	uxth	r3, r3
 80038da:	085b      	lsrs	r3, r3, #1
 80038dc:	b29a      	uxth	r2, r3
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80038e2:	e010      	b.n	8003906 <HAL_SPI_Transmit_DMA+0x13e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	68fa      	ldr	r2, [r7, #12]
 80038ea:	6812      	ldr	r2, [r2, #0]
 80038ec:	6852      	ldr	r2, [r2, #4]
 80038ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038f2:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	085b      	lsrs	r3, r3, #1
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	3301      	adds	r3, #1
 8003900:	b29a      	uxth	r2, r3
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800390e:	4619      	mov	r1, r3
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	330c      	adds	r3, #12
 8003916:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800391c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800391e:	f7fd f81b 	bl	8000958 <HAL_DMA_Start_IT>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d00c      	beq.n	8003942 <HAL_SPI_Transmit_DMA+0x17a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800392c:	f043 0210 	orr.w	r2, r3, #16
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8003940:	e01e      	b.n	8003980 <HAL_SPI_Transmit_DMA+0x1b8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800394c:	2b40      	cmp	r3, #64	; 0x40
 800394e:	d007      	beq.n	8003960 <HAL_SPI_Transmit_DMA+0x198>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	68fa      	ldr	r2, [r7, #12]
 8003956:	6812      	ldr	r2, [r2, #0]
 8003958:	6812      	ldr	r2, [r2, #0]
 800395a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800395e:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	68fa      	ldr	r2, [r7, #12]
 8003966:	6812      	ldr	r2, [r2, #0]
 8003968:	6852      	ldr	r2, [r2, #4]
 800396a:	f042 0220 	orr.w	r2, r2, #32
 800396e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	68fa      	ldr	r2, [r7, #12]
 8003976:	6812      	ldr	r2, [r2, #0]
 8003978:	6852      	ldr	r2, [r2, #4]
 800397a:	f042 0202 	orr.w	r2, r2, #2
 800397e:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2200      	movs	r2, #0
 8003984:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003988:	7dfb      	ldrb	r3, [r7, #23]
}
 800398a:	4618      	mov	r0, r3
 800398c:	3718      	adds	r7, #24
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	08003a83 	.word	0x08003a83
 8003998:	080039dd 	.word	0x080039dd
 800399c:	08003a9f 	.word	0x08003a9f

080039a0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80039a8:	bf00      	nop
 80039aa:	370c      	adds	r7, #12
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr

080039b4 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80039bc:	bf00      	nop
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr

080039c8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80039d0:	bf00      	nop
 80039d2:	370c      	adds	r7, #12
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr

080039dc <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b086      	sub	sp, #24
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80039ea:	f7fc fdc5 	bl	8000578 <HAL_GetTick>
 80039ee:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0320 	and.w	r3, r3, #32
 80039fa:	2b20      	cmp	r3, #32
 80039fc:	d03b      	beq.n	8003a76 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	697a      	ldr	r2, [r7, #20]
 8003a04:	6812      	ldr	r2, [r2, #0]
 8003a06:	6852      	ldr	r2, [r2, #4]
 8003a08:	f022 0220 	bic.w	r2, r2, #32
 8003a0c:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	697a      	ldr	r2, [r7, #20]
 8003a14:	6812      	ldr	r2, [r2, #0]
 8003a16:	6852      	ldr	r2, [r2, #4]
 8003a18:	f022 0202 	bic.w	r2, r2, #2
 8003a1c:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003a1e:	693a      	ldr	r2, [r7, #16]
 8003a20:	2164      	movs	r1, #100	; 0x64
 8003a22:	6978      	ldr	r0, [r7, #20]
 8003a24:	f000 f932 	bl	8003c8c <SPI_EndRxTxTransaction>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d005      	beq.n	8003a3a <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a32:	f043 0220 	orr.w	r2, r3, #32
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d10a      	bne.n	8003a58 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a42:	2300      	movs	r3, #0
 8003a44:	60fb      	str	r3, [r7, #12]
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	60fb      	str	r3, [r7, #12]
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	60fb      	str	r3, [r7, #12]
 8003a56:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	2201      	movs	r2, #1
 8003a62:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d003      	beq.n	8003a76 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003a6e:	6978      	ldr	r0, [r7, #20]
 8003a70:	f7ff ffaa 	bl	80039c8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003a74:	e002      	b.n	8003a7c <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8003a76:	6978      	ldr	r0, [r7, #20]
 8003a78:	f7ff ff92 	bl	80039a0 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003a7c:	3718      	adds	r7, #24
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}

08003a82 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003a82:	b580      	push	{r7, lr}
 8003a84:	b084      	sub	sp, #16
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a8e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8003a90:	68f8      	ldr	r0, [r7, #12]
 8003a92:	f7ff ff8f 	bl	80039b4 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003a96:	bf00      	nop
 8003a98:	3710      	adds	r7, #16
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}

08003a9e <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003a9e:	b580      	push	{r7, lr}
 8003aa0:	b084      	sub	sp, #16
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aaa:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	68fa      	ldr	r2, [r7, #12]
 8003ab2:	6812      	ldr	r2, [r2, #0]
 8003ab4:	6852      	ldr	r2, [r2, #4]
 8003ab6:	f022 0203 	bic.w	r2, r2, #3
 8003aba:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ac0:	f043 0210 	orr.w	r2, r3, #16
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2201      	movs	r2, #1
 8003acc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003ad0:	68f8      	ldr	r0, [r7, #12]
 8003ad2:	f7ff ff79 	bl	80039c8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003ad6:	bf00      	nop
 8003ad8:	3710      	adds	r7, #16
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}

08003ade <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ade:	b580      	push	{r7, lr}
 8003ae0:	b084      	sub	sp, #16
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	60f8      	str	r0, [r7, #12]
 8003ae6:	60b9      	str	r1, [r7, #8]
 8003ae8:	603b      	str	r3, [r7, #0]
 8003aea:	4613      	mov	r3, r2
 8003aec:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003aee:	e04c      	b.n	8003b8a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003af6:	d048      	beq.n	8003b8a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003af8:	f7fc fd3e 	bl	8000578 <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	1ad2      	subs	r2, r2, r3
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d202      	bcs.n	8003b0e <SPI_WaitFlagStateUntilTimeout+0x30>
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d13d      	bne.n	8003b8a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	68fa      	ldr	r2, [r7, #12]
 8003b14:	6812      	ldr	r2, [r2, #0]
 8003b16:	6852      	ldr	r2, [r2, #4]
 8003b18:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003b1c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b26:	d111      	bne.n	8003b4c <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b30:	d004      	beq.n	8003b3c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b3a:	d107      	bne.n	8003b4c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	68fa      	ldr	r2, [r7, #12]
 8003b42:	6812      	ldr	r2, [r2, #0]
 8003b44:	6812      	ldr	r2, [r2, #0]
 8003b46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b4a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b54:	d10f      	bne.n	8003b76 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	68fa      	ldr	r2, [r7, #12]
 8003b5c:	6812      	ldr	r2, [r2, #0]
 8003b5e:	6812      	ldr	r2, [r2, #0]
 8003b60:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b64:	601a      	str	r2, [r3, #0]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	68fa      	ldr	r2, [r7, #12]
 8003b6c:	6812      	ldr	r2, [r2, #0]
 8003b6e:	6812      	ldr	r2, [r2, #0]
 8003b70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b74:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2201      	movs	r2, #1
 8003b7a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e00f      	b.n	8003baa <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	689a      	ldr	r2, [r3, #8]
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	401a      	ands	r2, r3
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	429a      	cmp	r2, r3
 8003b98:	bf0c      	ite	eq
 8003b9a:	2301      	moveq	r3, #1
 8003b9c:	2300      	movne	r3, #0
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	79fb      	ldrb	r3, [r7, #7]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d1a3      	bne.n	8003af0 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3710      	adds	r7, #16
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}

08003bb2 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003bb2:	b580      	push	{r7, lr}
 8003bb4:	b084      	sub	sp, #16
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	60f8      	str	r0, [r7, #12]
 8003bba:	60b9      	str	r1, [r7, #8]
 8003bbc:	607a      	str	r2, [r7, #4]
 8003bbe:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8003bc0:	e057      	b.n	8003c72 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003bc8:	d106      	bne.n	8003bd8 <SPI_WaitFifoStateUntilTimeout+0x26>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d103      	bne.n	8003bd8 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	330c      	adds	r3, #12
 8003bd6:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bde:	d048      	beq.n	8003c72 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003be0:	f7fc fcca 	bl	8000578 <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	69bb      	ldr	r3, [r7, #24]
 8003be8:	1ad2      	subs	r2, r2, r3
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d202      	bcs.n	8003bf6 <SPI_WaitFifoStateUntilTimeout+0x44>
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d13d      	bne.n	8003c72 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	68fa      	ldr	r2, [r7, #12]
 8003bfc:	6812      	ldr	r2, [r2, #0]
 8003bfe:	6852      	ldr	r2, [r2, #4]
 8003c00:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003c04:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c0e:	d111      	bne.n	8003c34 <SPI_WaitFifoStateUntilTimeout+0x82>
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c18:	d004      	beq.n	8003c24 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c22:	d107      	bne.n	8003c34 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	68fa      	ldr	r2, [r7, #12]
 8003c2a:	6812      	ldr	r2, [r2, #0]
 8003c2c:	6812      	ldr	r2, [r2, #0]
 8003c2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c32:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c3c:	d10f      	bne.n	8003c5e <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	68fa      	ldr	r2, [r7, #12]
 8003c44:	6812      	ldr	r2, [r2, #0]
 8003c46:	6812      	ldr	r2, [r2, #0]
 8003c48:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c4c:	601a      	str	r2, [r3, #0]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	68fa      	ldr	r2, [r7, #12]
 8003c54:	6812      	ldr	r2, [r2, #0]
 8003c56:	6812      	ldr	r2, [r2, #0]
 8003c58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c5c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2201      	movs	r2, #1
 8003c62:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e008      	b.n	8003c84 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	689a      	ldr	r2, [r3, #8]
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	401a      	ands	r2, r3
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d19f      	bne.n	8003bc2 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8003c82:	2300      	movs	r3, #0
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3710      	adds	r7, #16
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b086      	sub	sp, #24
 8003c90:	af02      	add	r7, sp, #8
 8003c92:	60f8      	str	r0, [r7, #12]
 8003c94:	60b9      	str	r1, [r7, #8]
 8003c96:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	9300      	str	r3, [sp, #0]
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003ca4:	68f8      	ldr	r0, [r7, #12]
 8003ca6:	f7ff ff84 	bl	8003bb2 <SPI_WaitFifoStateUntilTimeout>
 8003caa:	4603      	mov	r3, r0
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d007      	beq.n	8003cc0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cb4:	f043 0220 	orr.w	r2, r3, #32
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	e027      	b.n	8003d10 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	9300      	str	r3, [sp, #0]
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	2180      	movs	r1, #128	; 0x80
 8003cca:	68f8      	ldr	r0, [r7, #12]
 8003ccc:	f7ff ff07 	bl	8003ade <SPI_WaitFlagStateUntilTimeout>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d007      	beq.n	8003ce6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cda:	f043 0220 	orr.w	r2, r3, #32
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e014      	b.n	8003d10 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	9300      	str	r3, [sp, #0]
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	2200      	movs	r2, #0
 8003cee:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003cf2:	68f8      	ldr	r0, [r7, #12]
 8003cf4:	f7ff ff5d 	bl	8003bb2 <SPI_WaitFifoStateUntilTimeout>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d007      	beq.n	8003d0e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d02:	f043 0220 	orr.w	r2, r3, #32
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e000      	b.n	8003d10 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003d0e:	2300      	movs	r3, #0
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3710      	adds	r7, #16
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <LL_RCC_GetUSARTClockSource>:
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8003d20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d24:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	4013      	ands	r3, r2
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	370c      	adds	r7, #12
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <LL_RCC_GetLPUARTClockSource>:
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8003d40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d44:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4013      	ands	r3, r2
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d101      	bne.n	8003d6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e042      	b.n	8003df0 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d106      	bne.n	8003d82 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f002 f96d 	bl	800605c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2224      	movs	r2, #36	; 0x24
 8003d86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	6812      	ldr	r2, [r2, #0]
 8003d92:	6812      	ldr	r2, [r2, #0]
 8003d94:	f022 0201 	bic.w	r2, r2, #1
 8003d98:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f000 f82c 	bl	8003df8 <UART_SetConfig>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d101      	bne.n	8003daa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e022      	b.n	8003df0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d002      	beq.n	8003db8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f001 f870 	bl	8004e98 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	6812      	ldr	r2, [r2, #0]
 8003dc0:	6852      	ldr	r2, [r2, #4]
 8003dc2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003dc6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	6812      	ldr	r2, [r2, #0]
 8003dd0:	6892      	ldr	r2, [r2, #8]
 8003dd2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003dd6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	6812      	ldr	r2, [r2, #0]
 8003de0:	6812      	ldr	r2, [r2, #0]
 8003de2:	f042 0201 	orr.w	r2, r2, #1
 8003de6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f001 f8f7 	bl	8004fdc <UART_CheckIdleState>
 8003dee:	4603      	mov	r3, r0
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3708      	adds	r7, #8
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}

08003df8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003df8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003dfc:	b08b      	sub	sp, #44	; 0x2c
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003e02:	2300      	movs	r3, #0
 8003e04:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e06:	2300      	movs	r3, #0
 8003e08:	76fb      	strb	r3, [r7, #27]
#if defined(LPUART1)
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	689a      	ldr	r2, [r3, #8]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	431a      	orrs	r2, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	695b      	ldr	r3, [r3, #20]
 8003e1c:	431a      	orrs	r2, r3
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	69db      	ldr	r3, [r3, #28]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	627b      	str	r3, [r7, #36]	; 0x24
  tmpreg |= (uint32_t)huart->FifoMode;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	6819      	ldr	r1, [r3, #0]
 8003e3a:	4ba4      	ldr	r3, [pc, #656]	; (80040cc <UART_SetConfig+0x2d4>)
 8003e3c:	400b      	ands	r3, r1
 8003e3e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e40:	430b      	orrs	r3, r1
 8003e42:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	6812      	ldr	r2, [r2, #0]
 8003e4c:	6852      	ldr	r2, [r2, #4]
 8003e4e:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	68d2      	ldr	r2, [r2, #12]
 8003e56:	430a      	orrs	r2, r1
 8003e58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	699b      	ldr	r3, [r3, #24]
 8003e5e:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a9a      	ldr	r2, [pc, #616]	; (80040d0 <UART_SetConfig+0x2d8>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d004      	beq.n	8003e74 <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a1b      	ldr	r3, [r3, #32]
 8003e6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e70:	4313      	orrs	r3, r2
 8003e72:	627b      	str	r3, [r7, #36]	; 0x24
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003e82:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003e86:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e88:	430b      	orrs	r3, r1
 8003e8a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	687a      	ldr	r2, [r7, #4]
 8003e92:	6812      	ldr	r2, [r2, #0]
 8003e94:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003e96:	f022 010f 	bic.w	r1, r2, #15
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e9e:	430a      	orrs	r2, r1
 8003ea0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a8b      	ldr	r2, [pc, #556]	; (80040d4 <UART_SetConfig+0x2dc>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d126      	bne.n	8003efa <UART_SetConfig+0x102>
 8003eac:	2003      	movs	r0, #3
 8003eae:	f7ff ff33 	bl	8003d18 <LL_RCC_GetUSARTClockSource>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b03      	cmp	r3, #3
 8003eb6:	d81b      	bhi.n	8003ef0 <UART_SetConfig+0xf8>
 8003eb8:	a201      	add	r2, pc, #4	; (adr r2, 8003ec0 <UART_SetConfig+0xc8>)
 8003eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ebe:	bf00      	nop
 8003ec0:	08003ed1 	.word	0x08003ed1
 8003ec4:	08003ee1 	.word	0x08003ee1
 8003ec8:	08003ed9 	.word	0x08003ed9
 8003ecc:	08003ee9 	.word	0x08003ee9
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ed6:	e042      	b.n	8003f5e <UART_SetConfig+0x166>
 8003ed8:	2302      	movs	r3, #2
 8003eda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ede:	e03e      	b.n	8003f5e <UART_SetConfig+0x166>
 8003ee0:	2304      	movs	r3, #4
 8003ee2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ee6:	e03a      	b.n	8003f5e <UART_SetConfig+0x166>
 8003ee8:	2308      	movs	r3, #8
 8003eea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003eee:	e036      	b.n	8003f5e <UART_SetConfig+0x166>
 8003ef0:	2310      	movs	r3, #16
 8003ef2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ef6:	bf00      	nop
 8003ef8:	e031      	b.n	8003f5e <UART_SetConfig+0x166>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a74      	ldr	r2, [pc, #464]	; (80040d0 <UART_SetConfig+0x2d8>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d129      	bne.n	8003f58 <UART_SetConfig+0x160>
 8003f04:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8003f08:	f7ff ff16 	bl	8003d38 <LL_RCC_GetLPUARTClockSource>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f12:	d014      	beq.n	8003f3e <UART_SetConfig+0x146>
 8003f14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f18:	d802      	bhi.n	8003f20 <UART_SetConfig+0x128>
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d007      	beq.n	8003f2e <UART_SetConfig+0x136>
 8003f1e:	e016      	b.n	8003f4e <UART_SetConfig+0x156>
 8003f20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f24:	d007      	beq.n	8003f36 <UART_SetConfig+0x13e>
 8003f26:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f2a:	d00c      	beq.n	8003f46 <UART_SetConfig+0x14e>
 8003f2c:	e00f      	b.n	8003f4e <UART_SetConfig+0x156>
 8003f2e:	2300      	movs	r3, #0
 8003f30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f34:	e013      	b.n	8003f5e <UART_SetConfig+0x166>
 8003f36:	2302      	movs	r3, #2
 8003f38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f3c:	e00f      	b.n	8003f5e <UART_SetConfig+0x166>
 8003f3e:	2304      	movs	r3, #4
 8003f40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f44:	e00b      	b.n	8003f5e <UART_SetConfig+0x166>
 8003f46:	2308      	movs	r3, #8
 8003f48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f4c:	e007      	b.n	8003f5e <UART_SetConfig+0x166>
 8003f4e:	2310      	movs	r3, #16
 8003f50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f54:	bf00      	nop
 8003f56:	e002      	b.n	8003f5e <UART_SetConfig+0x166>
 8003f58:	2310      	movs	r3, #16
 8003f5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a5b      	ldr	r2, [pc, #364]	; (80040d0 <UART_SetConfig+0x2d8>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	f040 8413 	bne.w	8004790 <UART_SetConfig+0x998>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003f6a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f6e:	2b08      	cmp	r3, #8
 8003f70:	f200 8173 	bhi.w	800425a <UART_SetConfig+0x462>
 8003f74:	a201      	add	r2, pc, #4	; (adr r2, 8003f7c <UART_SetConfig+0x184>)
 8003f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f7a:	bf00      	nop
 8003f7c:	08003fa1 	.word	0x08003fa1
 8003f80:	0800425b 	.word	0x0800425b
 8003f84:	08004043 	.word	0x08004043
 8003f88:	0800425b 	.word	0x0800425b
 8003f8c:	0800410b 	.word	0x0800410b
 8003f90:	0800425b 	.word	0x0800425b
 8003f94:	0800425b 	.word	0x0800425b
 8003f98:	0800425b 	.word	0x0800425b
 8003f9c:	080041ad 	.word	0x080041ad
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003fa0:	f7fe fe6e 	bl	8002c80 <HAL_RCC_GetPCLK1Freq>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d044      	beq.n	8004038 <UART_SetConfig+0x240>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d03e      	beq.n	8004034 <UART_SetConfig+0x23c>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fba:	2b02      	cmp	r3, #2
 8003fbc:	d038      	beq.n	8004030 <UART_SetConfig+0x238>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc2:	2b03      	cmp	r3, #3
 8003fc4:	d032      	beq.n	800402c <UART_SetConfig+0x234>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fca:	2b04      	cmp	r3, #4
 8003fcc:	d02c      	beq.n	8004028 <UART_SetConfig+0x230>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd2:	2b05      	cmp	r3, #5
 8003fd4:	d026      	beq.n	8004024 <UART_SetConfig+0x22c>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fda:	2b06      	cmp	r3, #6
 8003fdc:	d020      	beq.n	8004020 <UART_SetConfig+0x228>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe2:	2b07      	cmp	r3, #7
 8003fe4:	d01a      	beq.n	800401c <UART_SetConfig+0x224>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fea:	2b08      	cmp	r3, #8
 8003fec:	d014      	beq.n	8004018 <UART_SetConfig+0x220>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff2:	2b09      	cmp	r3, #9
 8003ff4:	d00e      	beq.n	8004014 <UART_SetConfig+0x21c>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffa:	2b0a      	cmp	r3, #10
 8003ffc:	d008      	beq.n	8004010 <UART_SetConfig+0x218>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004002:	2b0b      	cmp	r3, #11
 8004004:	d102      	bne.n	800400c <UART_SetConfig+0x214>
 8004006:	f44f 7380 	mov.w	r3, #256	; 0x100
 800400a:	e016      	b.n	800403a <UART_SetConfig+0x242>
 800400c:	2301      	movs	r3, #1
 800400e:	e014      	b.n	800403a <UART_SetConfig+0x242>
 8004010:	2380      	movs	r3, #128	; 0x80
 8004012:	e012      	b.n	800403a <UART_SetConfig+0x242>
 8004014:	2340      	movs	r3, #64	; 0x40
 8004016:	e010      	b.n	800403a <UART_SetConfig+0x242>
 8004018:	2320      	movs	r3, #32
 800401a:	e00e      	b.n	800403a <UART_SetConfig+0x242>
 800401c:	2310      	movs	r3, #16
 800401e:	e00c      	b.n	800403a <UART_SetConfig+0x242>
 8004020:	230c      	movs	r3, #12
 8004022:	e00a      	b.n	800403a <UART_SetConfig+0x242>
 8004024:	230a      	movs	r3, #10
 8004026:	e008      	b.n	800403a <UART_SetConfig+0x242>
 8004028:	2308      	movs	r3, #8
 800402a:	e006      	b.n	800403a <UART_SetConfig+0x242>
 800402c:	2306      	movs	r3, #6
 800402e:	e004      	b.n	800403a <UART_SetConfig+0x242>
 8004030:	2304      	movs	r3, #4
 8004032:	e002      	b.n	800403a <UART_SetConfig+0x242>
 8004034:	2302      	movs	r3, #2
 8004036:	e000      	b.n	800403a <UART_SetConfig+0x242>
 8004038:	2301      	movs	r3, #1
 800403a:	fbb2 f3f3 	udiv	r3, r2, r3
 800403e:	617b      	str	r3, [r7, #20]
        break;
 8004040:	e10e      	b.n	8004260 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004046:	2b00      	cmp	r3, #0
 8004048:	d05c      	beq.n	8004104 <UART_SetConfig+0x30c>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404e:	2b01      	cmp	r3, #1
 8004050:	d056      	beq.n	8004100 <UART_SetConfig+0x308>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004056:	2b02      	cmp	r3, #2
 8004058:	d050      	beq.n	80040fc <UART_SetConfig+0x304>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405e:	2b03      	cmp	r3, #3
 8004060:	d032      	beq.n	80040c8 <UART_SetConfig+0x2d0>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004066:	2b04      	cmp	r3, #4
 8004068:	d02c      	beq.n	80040c4 <UART_SetConfig+0x2cc>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406e:	2b05      	cmp	r3, #5
 8004070:	d026      	beq.n	80040c0 <UART_SetConfig+0x2c8>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004076:	2b06      	cmp	r3, #6
 8004078:	d020      	beq.n	80040bc <UART_SetConfig+0x2c4>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407e:	2b07      	cmp	r3, #7
 8004080:	d01a      	beq.n	80040b8 <UART_SetConfig+0x2c0>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004086:	2b08      	cmp	r3, #8
 8004088:	d014      	beq.n	80040b4 <UART_SetConfig+0x2bc>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408e:	2b09      	cmp	r3, #9
 8004090:	d00e      	beq.n	80040b0 <UART_SetConfig+0x2b8>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004096:	2b0a      	cmp	r3, #10
 8004098:	d008      	beq.n	80040ac <UART_SetConfig+0x2b4>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409e:	2b0b      	cmp	r3, #11
 80040a0:	d102      	bne.n	80040a8 <UART_SetConfig+0x2b0>
 80040a2:	f24f 4324 	movw	r3, #62500	; 0xf424
 80040a6:	e02e      	b.n	8004106 <UART_SetConfig+0x30e>
 80040a8:	4b0b      	ldr	r3, [pc, #44]	; (80040d8 <UART_SetConfig+0x2e0>)
 80040aa:	e02c      	b.n	8004106 <UART_SetConfig+0x30e>
 80040ac:	4b0b      	ldr	r3, [pc, #44]	; (80040dc <UART_SetConfig+0x2e4>)
 80040ae:	e02a      	b.n	8004106 <UART_SetConfig+0x30e>
 80040b0:	4b0b      	ldr	r3, [pc, #44]	; (80040e0 <UART_SetConfig+0x2e8>)
 80040b2:	e028      	b.n	8004106 <UART_SetConfig+0x30e>
 80040b4:	4b0b      	ldr	r3, [pc, #44]	; (80040e4 <UART_SetConfig+0x2ec>)
 80040b6:	e026      	b.n	8004106 <UART_SetConfig+0x30e>
 80040b8:	4b0b      	ldr	r3, [pc, #44]	; (80040e8 <UART_SetConfig+0x2f0>)
 80040ba:	e024      	b.n	8004106 <UART_SetConfig+0x30e>
 80040bc:	4b0b      	ldr	r3, [pc, #44]	; (80040ec <UART_SetConfig+0x2f4>)
 80040be:	e022      	b.n	8004106 <UART_SetConfig+0x30e>
 80040c0:	4b0b      	ldr	r3, [pc, #44]	; (80040f0 <UART_SetConfig+0x2f8>)
 80040c2:	e020      	b.n	8004106 <UART_SetConfig+0x30e>
 80040c4:	4b0b      	ldr	r3, [pc, #44]	; (80040f4 <UART_SetConfig+0x2fc>)
 80040c6:	e01e      	b.n	8004106 <UART_SetConfig+0x30e>
 80040c8:	4b0b      	ldr	r3, [pc, #44]	; (80040f8 <UART_SetConfig+0x300>)
 80040ca:	e01c      	b.n	8004106 <UART_SetConfig+0x30e>
 80040cc:	cfff69f3 	.word	0xcfff69f3
 80040d0:	40008000 	.word	0x40008000
 80040d4:	40013800 	.word	0x40013800
 80040d8:	00f42400 	.word	0x00f42400
 80040dc:	0001e848 	.word	0x0001e848
 80040e0:	0003d090 	.word	0x0003d090
 80040e4:	0007a120 	.word	0x0007a120
 80040e8:	000f4240 	.word	0x000f4240
 80040ec:	00145855 	.word	0x00145855
 80040f0:	00186a00 	.word	0x00186a00
 80040f4:	001e8480 	.word	0x001e8480
 80040f8:	0028b0aa 	.word	0x0028b0aa
 80040fc:	4ba7      	ldr	r3, [pc, #668]	; (800439c <UART_SetConfig+0x5a4>)
 80040fe:	e002      	b.n	8004106 <UART_SetConfig+0x30e>
 8004100:	4ba7      	ldr	r3, [pc, #668]	; (80043a0 <UART_SetConfig+0x5a8>)
 8004102:	e000      	b.n	8004106 <UART_SetConfig+0x30e>
 8004104:	4ba7      	ldr	r3, [pc, #668]	; (80043a4 <UART_SetConfig+0x5ac>)
 8004106:	617b      	str	r3, [r7, #20]
        break;
 8004108:	e0aa      	b.n	8004260 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800410a:	f7fe fd3b 	bl	8002b84 <HAL_RCC_GetSysClockFreq>
 800410e:	4602      	mov	r2, r0
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004114:	2b00      	cmp	r3, #0
 8004116:	d044      	beq.n	80041a2 <UART_SetConfig+0x3aa>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411c:	2b01      	cmp	r3, #1
 800411e:	d03e      	beq.n	800419e <UART_SetConfig+0x3a6>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004124:	2b02      	cmp	r3, #2
 8004126:	d038      	beq.n	800419a <UART_SetConfig+0x3a2>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412c:	2b03      	cmp	r3, #3
 800412e:	d032      	beq.n	8004196 <UART_SetConfig+0x39e>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004134:	2b04      	cmp	r3, #4
 8004136:	d02c      	beq.n	8004192 <UART_SetConfig+0x39a>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413c:	2b05      	cmp	r3, #5
 800413e:	d026      	beq.n	800418e <UART_SetConfig+0x396>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004144:	2b06      	cmp	r3, #6
 8004146:	d020      	beq.n	800418a <UART_SetConfig+0x392>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414c:	2b07      	cmp	r3, #7
 800414e:	d01a      	beq.n	8004186 <UART_SetConfig+0x38e>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004154:	2b08      	cmp	r3, #8
 8004156:	d014      	beq.n	8004182 <UART_SetConfig+0x38a>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415c:	2b09      	cmp	r3, #9
 800415e:	d00e      	beq.n	800417e <UART_SetConfig+0x386>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004164:	2b0a      	cmp	r3, #10
 8004166:	d008      	beq.n	800417a <UART_SetConfig+0x382>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416c:	2b0b      	cmp	r3, #11
 800416e:	d102      	bne.n	8004176 <UART_SetConfig+0x37e>
 8004170:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004174:	e016      	b.n	80041a4 <UART_SetConfig+0x3ac>
 8004176:	2301      	movs	r3, #1
 8004178:	e014      	b.n	80041a4 <UART_SetConfig+0x3ac>
 800417a:	2380      	movs	r3, #128	; 0x80
 800417c:	e012      	b.n	80041a4 <UART_SetConfig+0x3ac>
 800417e:	2340      	movs	r3, #64	; 0x40
 8004180:	e010      	b.n	80041a4 <UART_SetConfig+0x3ac>
 8004182:	2320      	movs	r3, #32
 8004184:	e00e      	b.n	80041a4 <UART_SetConfig+0x3ac>
 8004186:	2310      	movs	r3, #16
 8004188:	e00c      	b.n	80041a4 <UART_SetConfig+0x3ac>
 800418a:	230c      	movs	r3, #12
 800418c:	e00a      	b.n	80041a4 <UART_SetConfig+0x3ac>
 800418e:	230a      	movs	r3, #10
 8004190:	e008      	b.n	80041a4 <UART_SetConfig+0x3ac>
 8004192:	2308      	movs	r3, #8
 8004194:	e006      	b.n	80041a4 <UART_SetConfig+0x3ac>
 8004196:	2306      	movs	r3, #6
 8004198:	e004      	b.n	80041a4 <UART_SetConfig+0x3ac>
 800419a:	2304      	movs	r3, #4
 800419c:	e002      	b.n	80041a4 <UART_SetConfig+0x3ac>
 800419e:	2302      	movs	r3, #2
 80041a0:	e000      	b.n	80041a4 <UART_SetConfig+0x3ac>
 80041a2:	2301      	movs	r3, #1
 80041a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041a8:	617b      	str	r3, [r7, #20]
        break;
 80041aa:	e059      	b.n	8004260 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d04e      	beq.n	8004252 <UART_SetConfig+0x45a>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d047      	beq.n	800424c <UART_SetConfig+0x454>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d040      	beq.n	8004246 <UART_SetConfig+0x44e>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c8:	2b03      	cmp	r3, #3
 80041ca:	d039      	beq.n	8004240 <UART_SetConfig+0x448>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d0:	2b04      	cmp	r3, #4
 80041d2:	d032      	beq.n	800423a <UART_SetConfig+0x442>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d8:	2b05      	cmp	r3, #5
 80041da:	d02b      	beq.n	8004234 <UART_SetConfig+0x43c>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e0:	2b06      	cmp	r3, #6
 80041e2:	d024      	beq.n	800422e <UART_SetConfig+0x436>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e8:	2b07      	cmp	r3, #7
 80041ea:	d01d      	beq.n	8004228 <UART_SetConfig+0x430>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f0:	2b08      	cmp	r3, #8
 80041f2:	d016      	beq.n	8004222 <UART_SetConfig+0x42a>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f8:	2b09      	cmp	r3, #9
 80041fa:	d00f      	beq.n	800421c <UART_SetConfig+0x424>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004200:	2b0a      	cmp	r3, #10
 8004202:	d008      	beq.n	8004216 <UART_SetConfig+0x41e>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004208:	2b0b      	cmp	r3, #11
 800420a:	d101      	bne.n	8004210 <UART_SetConfig+0x418>
 800420c:	2380      	movs	r3, #128	; 0x80
 800420e:	e022      	b.n	8004256 <UART_SetConfig+0x45e>
 8004210:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004214:	e01f      	b.n	8004256 <UART_SetConfig+0x45e>
 8004216:	f44f 7380 	mov.w	r3, #256	; 0x100
 800421a:	e01c      	b.n	8004256 <UART_SetConfig+0x45e>
 800421c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004220:	e019      	b.n	8004256 <UART_SetConfig+0x45e>
 8004222:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004226:	e016      	b.n	8004256 <UART_SetConfig+0x45e>
 8004228:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800422c:	e013      	b.n	8004256 <UART_SetConfig+0x45e>
 800422e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8004232:	e010      	b.n	8004256 <UART_SetConfig+0x45e>
 8004234:	f640 43cc 	movw	r3, #3276	; 0xccc
 8004238:	e00d      	b.n	8004256 <UART_SetConfig+0x45e>
 800423a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800423e:	e00a      	b.n	8004256 <UART_SetConfig+0x45e>
 8004240:	f241 5355 	movw	r3, #5461	; 0x1555
 8004244:	e007      	b.n	8004256 <UART_SetConfig+0x45e>
 8004246:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800424a:	e004      	b.n	8004256 <UART_SetConfig+0x45e>
 800424c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004250:	e001      	b.n	8004256 <UART_SetConfig+0x45e>
 8004252:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004256:	617b      	str	r3, [r7, #20]
        break;
 8004258:	e002      	b.n	8004260 <UART_SetConfig+0x468>
      default:
        ret = HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	76fb      	strb	r3, [r7, #27]
        break;
 800425e:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	2b00      	cmp	r3, #0
 8004264:	f000 85ee 	beq.w	8004e44 <UART_SetConfig+0x104c>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	685a      	ldr	r2, [r3, #4]
 800426c:	4613      	mov	r3, r2
 800426e:	005b      	lsls	r3, r3, #1
 8004270:	441a      	add	r2, r3
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	429a      	cmp	r2, r3
 8004276:	d805      	bhi.n	8004284 <UART_SetConfig+0x48c>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	429a      	cmp	r2, r3
 8004282:	d203      	bcs.n	800428c <UART_SetConfig+0x494>
      {
        ret = HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	76fb      	strb	r3, [r7, #27]
 8004288:	f000 bddc 	b.w	8004e44 <UART_SetConfig+0x104c>
      }
      else
      {
        switch (clocksource)
 800428c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004290:	2b08      	cmp	r3, #8
 8004292:	f200 826a 	bhi.w	800476a <UART_SetConfig+0x972>
 8004296:	a201      	add	r2, pc, #4	; (adr r2, 800429c <UART_SetConfig+0x4a4>)
 8004298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800429c:	080042c1 	.word	0x080042c1
 80042a0:	0800476b 	.word	0x0800476b
 80042a4:	080043fd 	.word	0x080043fd
 80042a8:	0800476b 	.word	0x0800476b
 80042ac:	080044ed 	.word	0x080044ed
 80042b0:	0800476b 	.word	0x0800476b
 80042b4:	0800476b 	.word	0x0800476b
 80042b8:	0800476b 	.word	0x0800476b
 80042bc:	08004617 	.word	0x08004617
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 80042c0:	f7fe fcde 	bl	8002c80 <HAL_RCC_GetPCLK1Freq>
 80042c4:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	4618      	mov	r0, r3
 80042ca:	f04f 0100 	mov.w	r1, #0
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d06d      	beq.n	80043b2 <UART_SetConfig+0x5ba>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d064      	beq.n	80043a8 <UART_SetConfig+0x5b0>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	d055      	beq.n	8004392 <UART_SetConfig+0x59a>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ea:	2b03      	cmp	r3, #3
 80042ec:	d04c      	beq.n	8004388 <UART_SetConfig+0x590>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f2:	2b04      	cmp	r3, #4
 80042f4:	d043      	beq.n	800437e <UART_SetConfig+0x586>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fa:	2b05      	cmp	r3, #5
 80042fc:	d03a      	beq.n	8004374 <UART_SetConfig+0x57c>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004302:	2b06      	cmp	r3, #6
 8004304:	d031      	beq.n	800436a <UART_SetConfig+0x572>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430a:	2b07      	cmp	r3, #7
 800430c:	d028      	beq.n	8004360 <UART_SetConfig+0x568>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004312:	2b08      	cmp	r3, #8
 8004314:	d01f      	beq.n	8004356 <UART_SetConfig+0x55e>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431a:	2b09      	cmp	r3, #9
 800431c:	d016      	beq.n	800434c <UART_SetConfig+0x554>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004322:	2b0a      	cmp	r3, #10
 8004324:	d00d      	beq.n	8004342 <UART_SetConfig+0x54a>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432a:	2b0b      	cmp	r3, #11
 800432c:	d104      	bne.n	8004338 <UART_SetConfig+0x540>
 800432e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004332:	f04f 0400 	mov.w	r4, #0
 8004336:	e040      	b.n	80043ba <UART_SetConfig+0x5c2>
 8004338:	f04f 0301 	mov.w	r3, #1
 800433c:	f04f 0400 	mov.w	r4, #0
 8004340:	e03b      	b.n	80043ba <UART_SetConfig+0x5c2>
 8004342:	f04f 0380 	mov.w	r3, #128	; 0x80
 8004346:	f04f 0400 	mov.w	r4, #0
 800434a:	e036      	b.n	80043ba <UART_SetConfig+0x5c2>
 800434c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8004350:	f04f 0400 	mov.w	r4, #0
 8004354:	e031      	b.n	80043ba <UART_SetConfig+0x5c2>
 8004356:	f04f 0320 	mov.w	r3, #32
 800435a:	f04f 0400 	mov.w	r4, #0
 800435e:	e02c      	b.n	80043ba <UART_SetConfig+0x5c2>
 8004360:	f04f 0310 	mov.w	r3, #16
 8004364:	f04f 0400 	mov.w	r4, #0
 8004368:	e027      	b.n	80043ba <UART_SetConfig+0x5c2>
 800436a:	f04f 030c 	mov.w	r3, #12
 800436e:	f04f 0400 	mov.w	r4, #0
 8004372:	e022      	b.n	80043ba <UART_SetConfig+0x5c2>
 8004374:	f04f 030a 	mov.w	r3, #10
 8004378:	f04f 0400 	mov.w	r4, #0
 800437c:	e01d      	b.n	80043ba <UART_SetConfig+0x5c2>
 800437e:	f04f 0308 	mov.w	r3, #8
 8004382:	f04f 0400 	mov.w	r4, #0
 8004386:	e018      	b.n	80043ba <UART_SetConfig+0x5c2>
 8004388:	f04f 0306 	mov.w	r3, #6
 800438c:	f04f 0400 	mov.w	r4, #0
 8004390:	e013      	b.n	80043ba <UART_SetConfig+0x5c2>
 8004392:	f04f 0304 	mov.w	r3, #4
 8004396:	f04f 0400 	mov.w	r4, #0
 800439a:	e00e      	b.n	80043ba <UART_SetConfig+0x5c2>
 800439c:	003d0900 	.word	0x003d0900
 80043a0:	007a1200 	.word	0x007a1200
 80043a4:	00f42400 	.word	0x00f42400
 80043a8:	f04f 0302 	mov.w	r3, #2
 80043ac:	f04f 0400 	mov.w	r4, #0
 80043b0:	e003      	b.n	80043ba <UART_SetConfig+0x5c2>
 80043b2:	f04f 0301 	mov.w	r3, #1
 80043b6:	f04f 0400 	mov.w	r4, #0
 80043ba:	461a      	mov	r2, r3
 80043bc:	4623      	mov	r3, r4
 80043be:	f7fb fee7 	bl	8000190 <__aeabi_uldivmod>
 80043c2:	4603      	mov	r3, r0
 80043c4:	460c      	mov	r4, r1
 80043c6:	ea4f 2904 	mov.w	r9, r4, lsl #8
 80043ca:	ea49 6913 	orr.w	r9, r9, r3, lsr #24
 80043ce:	ea4f 2803 	mov.w	r8, r3, lsl #8
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	085b      	lsrs	r3, r3, #1
 80043d8:	f04f 0400 	mov.w	r4, #0
 80043dc:	eb18 0003 	adds.w	r0, r8, r3
 80043e0:	eb49 0104 	adc.w	r1, r9, r4
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	f04f 0400 	mov.w	r4, #0
 80043ec:	461a      	mov	r2, r3
 80043ee:	4623      	mov	r3, r4
 80043f0:	f7fb fece 	bl	8000190 <__aeabi_uldivmod>
 80043f4:	4603      	mov	r3, r0
 80043f6:	460c      	mov	r4, r1
 80043f8:	61fb      	str	r3, [r7, #28]
            break;
 80043fa:	e1b9      	b.n	8004770 <UART_SetConfig+0x978>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004400:	2b00      	cmp	r3, #0
 8004402:	d059      	beq.n	80044b8 <UART_SetConfig+0x6c0>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004408:	2b01      	cmp	r3, #1
 800440a:	d051      	beq.n	80044b0 <UART_SetConfig+0x6b8>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004410:	2b02      	cmp	r3, #2
 8004412:	d049      	beq.n	80044a8 <UART_SetConfig+0x6b0>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004418:	2b03      	cmp	r3, #3
 800441a:	d042      	beq.n	80044a2 <UART_SetConfig+0x6aa>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004420:	2b04      	cmp	r3, #4
 8004422:	d03a      	beq.n	800449a <UART_SetConfig+0x6a2>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004428:	2b05      	cmp	r3, #5
 800442a:	d032      	beq.n	8004492 <UART_SetConfig+0x69a>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004430:	2b06      	cmp	r3, #6
 8004432:	d02b      	beq.n	800448c <UART_SetConfig+0x694>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004438:	2b07      	cmp	r3, #7
 800443a:	d023      	beq.n	8004484 <UART_SetConfig+0x68c>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004440:	2b08      	cmp	r3, #8
 8004442:	d01b      	beq.n	800447c <UART_SetConfig+0x684>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004448:	2b09      	cmp	r3, #9
 800444a:	d013      	beq.n	8004474 <UART_SetConfig+0x67c>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004450:	2b0a      	cmp	r3, #10
 8004452:	d00b      	beq.n	800446c <UART_SetConfig+0x674>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004458:	2b0b      	cmp	r3, #11
 800445a:	d103      	bne.n	8004464 <UART_SetConfig+0x66c>
 800445c:	4ba8      	ldr	r3, [pc, #672]	; (8004700 <UART_SetConfig+0x908>)
 800445e:	f04f 0400 	mov.w	r4, #0
 8004462:	e02c      	b.n	80044be <UART_SetConfig+0x6c6>
 8004464:	4ba7      	ldr	r3, [pc, #668]	; (8004704 <UART_SetConfig+0x90c>)
 8004466:	f04f 0400 	mov.w	r4, #0
 800446a:	e028      	b.n	80044be <UART_SetConfig+0x6c6>
 800446c:	4ba6      	ldr	r3, [pc, #664]	; (8004708 <UART_SetConfig+0x910>)
 800446e:	f04f 0400 	mov.w	r4, #0
 8004472:	e024      	b.n	80044be <UART_SetConfig+0x6c6>
 8004474:	4ba5      	ldr	r3, [pc, #660]	; (800470c <UART_SetConfig+0x914>)
 8004476:	f04f 0400 	mov.w	r4, #0
 800447a:	e020      	b.n	80044be <UART_SetConfig+0x6c6>
 800447c:	4ba4      	ldr	r3, [pc, #656]	; (8004710 <UART_SetConfig+0x918>)
 800447e:	f04f 0400 	mov.w	r4, #0
 8004482:	e01c      	b.n	80044be <UART_SetConfig+0x6c6>
 8004484:	4ba3      	ldr	r3, [pc, #652]	; (8004714 <UART_SetConfig+0x91c>)
 8004486:	f04f 0400 	mov.w	r4, #0
 800448a:	e018      	b.n	80044be <UART_SetConfig+0x6c6>
 800448c:	a498      	add	r4, pc, #608	; (adr r4, 80046f0 <UART_SetConfig+0x8f8>)
 800448e:	cc18      	ldmia	r4, {r3, r4}
 8004490:	e015      	b.n	80044be <UART_SetConfig+0x6c6>
 8004492:	4ba1      	ldr	r3, [pc, #644]	; (8004718 <UART_SetConfig+0x920>)
 8004494:	f04f 0400 	mov.w	r4, #0
 8004498:	e011      	b.n	80044be <UART_SetConfig+0x6c6>
 800449a:	4ba0      	ldr	r3, [pc, #640]	; (800471c <UART_SetConfig+0x924>)
 800449c:	f04f 0400 	mov.w	r4, #0
 80044a0:	e00d      	b.n	80044be <UART_SetConfig+0x6c6>
 80044a2:	a495      	add	r4, pc, #596	; (adr r4, 80046f8 <UART_SetConfig+0x900>)
 80044a4:	cc18      	ldmia	r4, {r3, r4}
 80044a6:	e00a      	b.n	80044be <UART_SetConfig+0x6c6>
 80044a8:	4b9d      	ldr	r3, [pc, #628]	; (8004720 <UART_SetConfig+0x928>)
 80044aa:	f04f 0400 	mov.w	r4, #0
 80044ae:	e006      	b.n	80044be <UART_SetConfig+0x6c6>
 80044b0:	4b9c      	ldr	r3, [pc, #624]	; (8004724 <UART_SetConfig+0x92c>)
 80044b2:	f04f 0400 	mov.w	r4, #0
 80044b6:	e002      	b.n	80044be <UART_SetConfig+0x6c6>
 80044b8:	4b92      	ldr	r3, [pc, #584]	; (8004704 <UART_SetConfig+0x90c>)
 80044ba:	f04f 0400 	mov.w	r4, #0
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	6852      	ldr	r2, [r2, #4]
 80044c2:	0852      	lsrs	r2, r2, #1
 80044c4:	4611      	mov	r1, r2
 80044c6:	f04f 0200 	mov.w	r2, #0
 80044ca:	185d      	adds	r5, r3, r1
 80044cc:	eb44 0602 	adc.w	r6, r4, r2
 80044d0:	4628      	mov	r0, r5
 80044d2:	4631      	mov	r1, r6
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	f04f 0400 	mov.w	r4, #0
 80044dc:	461a      	mov	r2, r3
 80044de:	4623      	mov	r3, r4
 80044e0:	f7fb fe56 	bl	8000190 <__aeabi_uldivmod>
 80044e4:	4603      	mov	r3, r0
 80044e6:	460c      	mov	r4, r1
 80044e8:	61fb      	str	r3, [r7, #28]
            break;
 80044ea:	e141      	b.n	8004770 <UART_SetConfig+0x978>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 80044ec:	f7fe fb4a 	bl	8002b84 <HAL_RCC_GetSysClockFreq>
 80044f0:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	4618      	mov	r0, r3
 80044f6:	f04f 0100 	mov.w	r1, #0
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d067      	beq.n	80045d2 <UART_SetConfig+0x7da>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004506:	2b01      	cmp	r3, #1
 8004508:	d05e      	beq.n	80045c8 <UART_SetConfig+0x7d0>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450e:	2b02      	cmp	r3, #2
 8004510:	d055      	beq.n	80045be <UART_SetConfig+0x7c6>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004516:	2b03      	cmp	r3, #3
 8004518:	d04c      	beq.n	80045b4 <UART_SetConfig+0x7bc>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451e:	2b04      	cmp	r3, #4
 8004520:	d043      	beq.n	80045aa <UART_SetConfig+0x7b2>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004526:	2b05      	cmp	r3, #5
 8004528:	d03a      	beq.n	80045a0 <UART_SetConfig+0x7a8>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452e:	2b06      	cmp	r3, #6
 8004530:	d031      	beq.n	8004596 <UART_SetConfig+0x79e>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004536:	2b07      	cmp	r3, #7
 8004538:	d028      	beq.n	800458c <UART_SetConfig+0x794>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453e:	2b08      	cmp	r3, #8
 8004540:	d01f      	beq.n	8004582 <UART_SetConfig+0x78a>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004546:	2b09      	cmp	r3, #9
 8004548:	d016      	beq.n	8004578 <UART_SetConfig+0x780>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454e:	2b0a      	cmp	r3, #10
 8004550:	d00d      	beq.n	800456e <UART_SetConfig+0x776>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004556:	2b0b      	cmp	r3, #11
 8004558:	d104      	bne.n	8004564 <UART_SetConfig+0x76c>
 800455a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800455e:	f04f 0400 	mov.w	r4, #0
 8004562:	e03a      	b.n	80045da <UART_SetConfig+0x7e2>
 8004564:	f04f 0301 	mov.w	r3, #1
 8004568:	f04f 0400 	mov.w	r4, #0
 800456c:	e035      	b.n	80045da <UART_SetConfig+0x7e2>
 800456e:	f04f 0380 	mov.w	r3, #128	; 0x80
 8004572:	f04f 0400 	mov.w	r4, #0
 8004576:	e030      	b.n	80045da <UART_SetConfig+0x7e2>
 8004578:	f04f 0340 	mov.w	r3, #64	; 0x40
 800457c:	f04f 0400 	mov.w	r4, #0
 8004580:	e02b      	b.n	80045da <UART_SetConfig+0x7e2>
 8004582:	f04f 0320 	mov.w	r3, #32
 8004586:	f04f 0400 	mov.w	r4, #0
 800458a:	e026      	b.n	80045da <UART_SetConfig+0x7e2>
 800458c:	f04f 0310 	mov.w	r3, #16
 8004590:	f04f 0400 	mov.w	r4, #0
 8004594:	e021      	b.n	80045da <UART_SetConfig+0x7e2>
 8004596:	f04f 030c 	mov.w	r3, #12
 800459a:	f04f 0400 	mov.w	r4, #0
 800459e:	e01c      	b.n	80045da <UART_SetConfig+0x7e2>
 80045a0:	f04f 030a 	mov.w	r3, #10
 80045a4:	f04f 0400 	mov.w	r4, #0
 80045a8:	e017      	b.n	80045da <UART_SetConfig+0x7e2>
 80045aa:	f04f 0308 	mov.w	r3, #8
 80045ae:	f04f 0400 	mov.w	r4, #0
 80045b2:	e012      	b.n	80045da <UART_SetConfig+0x7e2>
 80045b4:	f04f 0306 	mov.w	r3, #6
 80045b8:	f04f 0400 	mov.w	r4, #0
 80045bc:	e00d      	b.n	80045da <UART_SetConfig+0x7e2>
 80045be:	f04f 0304 	mov.w	r3, #4
 80045c2:	f04f 0400 	mov.w	r4, #0
 80045c6:	e008      	b.n	80045da <UART_SetConfig+0x7e2>
 80045c8:	f04f 0302 	mov.w	r3, #2
 80045cc:	f04f 0400 	mov.w	r4, #0
 80045d0:	e003      	b.n	80045da <UART_SetConfig+0x7e2>
 80045d2:	f04f 0301 	mov.w	r3, #1
 80045d6:	f04f 0400 	mov.w	r4, #0
 80045da:	461a      	mov	r2, r3
 80045dc:	4623      	mov	r3, r4
 80045de:	f7fb fdd7 	bl	8000190 <__aeabi_uldivmod>
 80045e2:	4603      	mov	r3, r0
 80045e4:	460c      	mov	r4, r1
 80045e6:	0226      	lsls	r6, r4, #8
 80045e8:	ea46 6613 	orr.w	r6, r6, r3, lsr #24
 80045ec:	021d      	lsls	r5, r3, #8
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	085b      	lsrs	r3, r3, #1
 80045f4:	f04f 0400 	mov.w	r4, #0
 80045f8:	18e8      	adds	r0, r5, r3
 80045fa:	eb46 0104 	adc.w	r1, r6, r4
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	f04f 0400 	mov.w	r4, #0
 8004606:	461a      	mov	r2, r3
 8004608:	4623      	mov	r3, r4
 800460a:	f7fb fdc1 	bl	8000190 <__aeabi_uldivmod>
 800460e:	4603      	mov	r3, r0
 8004610:	460c      	mov	r4, r1
 8004612:	61fb      	str	r3, [r7, #28]
            break;
 8004614:	e0ac      	b.n	8004770 <UART_SetConfig+0x978>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461a:	2b00      	cmp	r3, #0
 800461c:	f000 808a 	beq.w	8004734 <UART_SetConfig+0x93c>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004624:	2b01      	cmp	r3, #1
 8004626:	d05b      	beq.n	80046e0 <UART_SetConfig+0x8e8>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462c:	2b02      	cmp	r3, #2
 800462e:	d052      	beq.n	80046d6 <UART_SetConfig+0x8de>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004634:	2b03      	cmp	r3, #3
 8004636:	d04a      	beq.n	80046ce <UART_SetConfig+0x8d6>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463c:	2b04      	cmp	r3, #4
 800463e:	d041      	beq.n	80046c4 <UART_SetConfig+0x8cc>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004644:	2b05      	cmp	r3, #5
 8004646:	d039      	beq.n	80046bc <UART_SetConfig+0x8c4>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464c:	2b06      	cmp	r3, #6
 800464e:	d031      	beq.n	80046b4 <UART_SetConfig+0x8bc>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004654:	2b07      	cmp	r3, #7
 8004656:	d028      	beq.n	80046aa <UART_SetConfig+0x8b2>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465c:	2b08      	cmp	r3, #8
 800465e:	d01f      	beq.n	80046a0 <UART_SetConfig+0x8a8>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004664:	2b09      	cmp	r3, #9
 8004666:	d016      	beq.n	8004696 <UART_SetConfig+0x89e>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466c:	2b0a      	cmp	r3, #10
 800466e:	d00d      	beq.n	800468c <UART_SetConfig+0x894>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004674:	2b0b      	cmp	r3, #11
 8004676:	d104      	bne.n	8004682 <UART_SetConfig+0x88a>
 8004678:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800467c:	f04f 0400 	mov.w	r4, #0
 8004680:	e05c      	b.n	800473c <UART_SetConfig+0x944>
 8004682:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004686:	f04f 0400 	mov.w	r4, #0
 800468a:	e057      	b.n	800473c <UART_SetConfig+0x944>
 800468c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004690:	f04f 0400 	mov.w	r4, #0
 8004694:	e052      	b.n	800473c <UART_SetConfig+0x944>
 8004696:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800469a:	f04f 0400 	mov.w	r4, #0
 800469e:	e04d      	b.n	800473c <UART_SetConfig+0x944>
 80046a0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80046a4:	f04f 0400 	mov.w	r4, #0
 80046a8:	e048      	b.n	800473c <UART_SetConfig+0x944>
 80046aa:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80046ae:	f04f 0400 	mov.w	r4, #0
 80046b2:	e043      	b.n	800473c <UART_SetConfig+0x944>
 80046b4:	4b1c      	ldr	r3, [pc, #112]	; (8004728 <UART_SetConfig+0x930>)
 80046b6:	f04f 0400 	mov.w	r4, #0
 80046ba:	e03f      	b.n	800473c <UART_SetConfig+0x944>
 80046bc:	4b1b      	ldr	r3, [pc, #108]	; (800472c <UART_SetConfig+0x934>)
 80046be:	f04f 0400 	mov.w	r4, #0
 80046c2:	e03b      	b.n	800473c <UART_SetConfig+0x944>
 80046c4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80046c8:	f04f 0400 	mov.w	r4, #0
 80046cc:	e036      	b.n	800473c <UART_SetConfig+0x944>
 80046ce:	4b18      	ldr	r3, [pc, #96]	; (8004730 <UART_SetConfig+0x938>)
 80046d0:	f04f 0400 	mov.w	r4, #0
 80046d4:	e032      	b.n	800473c <UART_SetConfig+0x944>
 80046d6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80046da:	f04f 0400 	mov.w	r4, #0
 80046de:	e02d      	b.n	800473c <UART_SetConfig+0x944>
 80046e0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80046e4:	f04f 0400 	mov.w	r4, #0
 80046e8:	e028      	b.n	800473c <UART_SetConfig+0x944>
 80046ea:	bf00      	nop
 80046ec:	f3af 8000 	nop.w
 80046f0:	14585500 	.word	0x14585500
 80046f4:	00000000 	.word	0x00000000
 80046f8:	28b0aa00 	.word	0x28b0aa00
 80046fc:	00000000 	.word	0x00000000
 8004700:	00f42400 	.word	0x00f42400
 8004704:	f4240000 	.word	0xf4240000
 8004708:	01e84800 	.word	0x01e84800
 800470c:	03d09000 	.word	0x03d09000
 8004710:	07a12000 	.word	0x07a12000
 8004714:	0f424000 	.word	0x0f424000
 8004718:	186a0000 	.word	0x186a0000
 800471c:	1e848000 	.word	0x1e848000
 8004720:	3d090000 	.word	0x3d090000
 8004724:	7a120000 	.word	0x7a120000
 8004728:	000aaa00 	.word	0x000aaa00
 800472c:	000ccc00 	.word	0x000ccc00
 8004730:	00155500 	.word	0x00155500
 8004734:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004738:	f04f 0400 	mov.w	r4, #0
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	6852      	ldr	r2, [r2, #4]
 8004740:	0852      	lsrs	r2, r2, #1
 8004742:	4611      	mov	r1, r2
 8004744:	f04f 0200 	mov.w	r2, #0
 8004748:	185d      	adds	r5, r3, r1
 800474a:	eb44 0602 	adc.w	r6, r4, r2
 800474e:	4628      	mov	r0, r5
 8004750:	4631      	mov	r1, r6
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	f04f 0400 	mov.w	r4, #0
 800475a:	461a      	mov	r2, r3
 800475c:	4623      	mov	r3, r4
 800475e:	f7fb fd17 	bl	8000190 <__aeabi_uldivmod>
 8004762:	4603      	mov	r3, r0
 8004764:	460c      	mov	r4, r1
 8004766:	61fb      	str	r3, [r7, #28]
            break;
 8004768:	e002      	b.n	8004770 <UART_SetConfig+0x978>
          default:
            ret = HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	76fb      	strb	r3, [r7, #27]
            break;
 800476e:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004770:	69fb      	ldr	r3, [r7, #28]
 8004772:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004776:	d308      	bcc.n	800478a <UART_SetConfig+0x992>
 8004778:	69fb      	ldr	r3, [r7, #28]
 800477a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800477e:	d204      	bcs.n	800478a <UART_SetConfig+0x992>
        {
          huart->Instance->BRR = usartdiv;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	69fa      	ldr	r2, [r7, #28]
 8004786:	60da      	str	r2, [r3, #12]
 8004788:	e35c      	b.n	8004e44 <UART_SetConfig+0x104c>
        }
        else
        {
          ret = HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	76fb      	strb	r3, [r7, #27]
 800478e:	e359      	b.n	8004e44 <UART_SetConfig+0x104c>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	69db      	ldr	r3, [r3, #28]
 8004794:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004798:	f040 81a7 	bne.w	8004aea <UART_SetConfig+0xcf2>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800479c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80047a0:	3b01      	subs	r3, #1
 80047a2:	2b07      	cmp	r3, #7
 80047a4:	f200 8181 	bhi.w	8004aaa <UART_SetConfig+0xcb2>
 80047a8:	a201      	add	r2, pc, #4	; (adr r2, 80047b0 <UART_SetConfig+0x9b8>)
 80047aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ae:	bf00      	nop
 80047b0:	080047d1 	.word	0x080047d1
 80047b4:	08004889 	.word	0x08004889
 80047b8:	08004aab 	.word	0x08004aab
 80047bc:	08004931 	.word	0x08004931
 80047c0:	08004aab 	.word	0x08004aab
 80047c4:	08004aab 	.word	0x08004aab
 80047c8:	08004aab 	.word	0x08004aab
 80047cc:	080049e9 	.word	0x080049e9
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047d0:	f7fe fa6c 	bl	8002cac <HAL_RCC_GetPCLK2Freq>
 80047d4:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d044      	beq.n	8004868 <UART_SetConfig+0xa70>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d03e      	beq.n	8004864 <UART_SetConfig+0xa6c>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d038      	beq.n	8004860 <UART_SetConfig+0xa68>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f2:	2b03      	cmp	r3, #3
 80047f4:	d032      	beq.n	800485c <UART_SetConfig+0xa64>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fa:	2b04      	cmp	r3, #4
 80047fc:	d02c      	beq.n	8004858 <UART_SetConfig+0xa60>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004802:	2b05      	cmp	r3, #5
 8004804:	d026      	beq.n	8004854 <UART_SetConfig+0xa5c>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480a:	2b06      	cmp	r3, #6
 800480c:	d020      	beq.n	8004850 <UART_SetConfig+0xa58>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004812:	2b07      	cmp	r3, #7
 8004814:	d01a      	beq.n	800484c <UART_SetConfig+0xa54>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481a:	2b08      	cmp	r3, #8
 800481c:	d014      	beq.n	8004848 <UART_SetConfig+0xa50>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004822:	2b09      	cmp	r3, #9
 8004824:	d00e      	beq.n	8004844 <UART_SetConfig+0xa4c>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482a:	2b0a      	cmp	r3, #10
 800482c:	d008      	beq.n	8004840 <UART_SetConfig+0xa48>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004832:	2b0b      	cmp	r3, #11
 8004834:	d102      	bne.n	800483c <UART_SetConfig+0xa44>
 8004836:	f44f 7380 	mov.w	r3, #256	; 0x100
 800483a:	e016      	b.n	800486a <UART_SetConfig+0xa72>
 800483c:	2301      	movs	r3, #1
 800483e:	e014      	b.n	800486a <UART_SetConfig+0xa72>
 8004840:	2380      	movs	r3, #128	; 0x80
 8004842:	e012      	b.n	800486a <UART_SetConfig+0xa72>
 8004844:	2340      	movs	r3, #64	; 0x40
 8004846:	e010      	b.n	800486a <UART_SetConfig+0xa72>
 8004848:	2320      	movs	r3, #32
 800484a:	e00e      	b.n	800486a <UART_SetConfig+0xa72>
 800484c:	2310      	movs	r3, #16
 800484e:	e00c      	b.n	800486a <UART_SetConfig+0xa72>
 8004850:	230c      	movs	r3, #12
 8004852:	e00a      	b.n	800486a <UART_SetConfig+0xa72>
 8004854:	230a      	movs	r3, #10
 8004856:	e008      	b.n	800486a <UART_SetConfig+0xa72>
 8004858:	2308      	movs	r3, #8
 800485a:	e006      	b.n	800486a <UART_SetConfig+0xa72>
 800485c:	2306      	movs	r3, #6
 800485e:	e004      	b.n	800486a <UART_SetConfig+0xa72>
 8004860:	2304      	movs	r3, #4
 8004862:	e002      	b.n	800486a <UART_SetConfig+0xa72>
 8004864:	2302      	movs	r3, #2
 8004866:	e000      	b.n	800486a <UART_SetConfig+0xa72>
 8004868:	2301      	movs	r3, #1
 800486a:	693a      	ldr	r2, [r7, #16]
 800486c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004870:	005a      	lsls	r2, r3, #1
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	085b      	lsrs	r3, r3, #1
 8004878:	441a      	add	r2, r3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004882:	b29b      	uxth	r3, r3
 8004884:	61fb      	str	r3, [r7, #28]
        break;
 8004886:	e113      	b.n	8004ab0 <UART_SetConfig+0xcb8>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488c:	2b00      	cmp	r3, #0
 800488e:	d043      	beq.n	8004918 <UART_SetConfig+0xb20>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004894:	2b01      	cmp	r3, #1
 8004896:	d03d      	beq.n	8004914 <UART_SetConfig+0xb1c>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489c:	2b02      	cmp	r3, #2
 800489e:	d037      	beq.n	8004910 <UART_SetConfig+0xb18>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a4:	2b03      	cmp	r3, #3
 80048a6:	d031      	beq.n	800490c <UART_SetConfig+0xb14>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ac:	2b04      	cmp	r3, #4
 80048ae:	d02b      	beq.n	8004908 <UART_SetConfig+0xb10>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b4:	2b05      	cmp	r3, #5
 80048b6:	d025      	beq.n	8004904 <UART_SetConfig+0xb0c>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048bc:	2b06      	cmp	r3, #6
 80048be:	d01f      	beq.n	8004900 <UART_SetConfig+0xb08>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c4:	2b07      	cmp	r3, #7
 80048c6:	d019      	beq.n	80048fc <UART_SetConfig+0xb04>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048cc:	2b08      	cmp	r3, #8
 80048ce:	d013      	beq.n	80048f8 <UART_SetConfig+0xb00>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d4:	2b09      	cmp	r3, #9
 80048d6:	d00d      	beq.n	80048f4 <UART_SetConfig+0xafc>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048dc:	2b0a      	cmp	r3, #10
 80048de:	d007      	beq.n	80048f0 <UART_SetConfig+0xaf8>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e4:	2b0b      	cmp	r3, #11
 80048e6:	d101      	bne.n	80048ec <UART_SetConfig+0xaf4>
 80048e8:	4b8c      	ldr	r3, [pc, #560]	; (8004b1c <UART_SetConfig+0xd24>)
 80048ea:	e016      	b.n	800491a <UART_SetConfig+0xb22>
 80048ec:	4b8c      	ldr	r3, [pc, #560]	; (8004b20 <UART_SetConfig+0xd28>)
 80048ee:	e014      	b.n	800491a <UART_SetConfig+0xb22>
 80048f0:	4b8c      	ldr	r3, [pc, #560]	; (8004b24 <UART_SetConfig+0xd2c>)
 80048f2:	e012      	b.n	800491a <UART_SetConfig+0xb22>
 80048f4:	4b8c      	ldr	r3, [pc, #560]	; (8004b28 <UART_SetConfig+0xd30>)
 80048f6:	e010      	b.n	800491a <UART_SetConfig+0xb22>
 80048f8:	4b8c      	ldr	r3, [pc, #560]	; (8004b2c <UART_SetConfig+0xd34>)
 80048fa:	e00e      	b.n	800491a <UART_SetConfig+0xb22>
 80048fc:	4b8c      	ldr	r3, [pc, #560]	; (8004b30 <UART_SetConfig+0xd38>)
 80048fe:	e00c      	b.n	800491a <UART_SetConfig+0xb22>
 8004900:	4b8c      	ldr	r3, [pc, #560]	; (8004b34 <UART_SetConfig+0xd3c>)
 8004902:	e00a      	b.n	800491a <UART_SetConfig+0xb22>
 8004904:	4b8c      	ldr	r3, [pc, #560]	; (8004b38 <UART_SetConfig+0xd40>)
 8004906:	e008      	b.n	800491a <UART_SetConfig+0xb22>
 8004908:	4b8c      	ldr	r3, [pc, #560]	; (8004b3c <UART_SetConfig+0xd44>)
 800490a:	e006      	b.n	800491a <UART_SetConfig+0xb22>
 800490c:	4b8c      	ldr	r3, [pc, #560]	; (8004b40 <UART_SetConfig+0xd48>)
 800490e:	e004      	b.n	800491a <UART_SetConfig+0xb22>
 8004910:	4b8c      	ldr	r3, [pc, #560]	; (8004b44 <UART_SetConfig+0xd4c>)
 8004912:	e002      	b.n	800491a <UART_SetConfig+0xb22>
 8004914:	4b8c      	ldr	r3, [pc, #560]	; (8004b48 <UART_SetConfig+0xd50>)
 8004916:	e000      	b.n	800491a <UART_SetConfig+0xb22>
 8004918:	4b81      	ldr	r3, [pc, #516]	; (8004b20 <UART_SetConfig+0xd28>)
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	6852      	ldr	r2, [r2, #4]
 800491e:	0852      	lsrs	r2, r2, #1
 8004920:	441a      	add	r2, r3
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	fbb2 f3f3 	udiv	r3, r2, r3
 800492a:	b29b      	uxth	r3, r3
 800492c:	61fb      	str	r3, [r7, #28]
        break;
 800492e:	e0bf      	b.n	8004ab0 <UART_SetConfig+0xcb8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004930:	f7fe f928 	bl	8002b84 <HAL_RCC_GetSysClockFreq>
 8004934:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493a:	2b00      	cmp	r3, #0
 800493c:	d044      	beq.n	80049c8 <UART_SetConfig+0xbd0>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004942:	2b01      	cmp	r3, #1
 8004944:	d03e      	beq.n	80049c4 <UART_SetConfig+0xbcc>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494a:	2b02      	cmp	r3, #2
 800494c:	d038      	beq.n	80049c0 <UART_SetConfig+0xbc8>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004952:	2b03      	cmp	r3, #3
 8004954:	d032      	beq.n	80049bc <UART_SetConfig+0xbc4>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495a:	2b04      	cmp	r3, #4
 800495c:	d02c      	beq.n	80049b8 <UART_SetConfig+0xbc0>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004962:	2b05      	cmp	r3, #5
 8004964:	d026      	beq.n	80049b4 <UART_SetConfig+0xbbc>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496a:	2b06      	cmp	r3, #6
 800496c:	d020      	beq.n	80049b0 <UART_SetConfig+0xbb8>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004972:	2b07      	cmp	r3, #7
 8004974:	d01a      	beq.n	80049ac <UART_SetConfig+0xbb4>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497a:	2b08      	cmp	r3, #8
 800497c:	d014      	beq.n	80049a8 <UART_SetConfig+0xbb0>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004982:	2b09      	cmp	r3, #9
 8004984:	d00e      	beq.n	80049a4 <UART_SetConfig+0xbac>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498a:	2b0a      	cmp	r3, #10
 800498c:	d008      	beq.n	80049a0 <UART_SetConfig+0xba8>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004992:	2b0b      	cmp	r3, #11
 8004994:	d102      	bne.n	800499c <UART_SetConfig+0xba4>
 8004996:	f44f 7380 	mov.w	r3, #256	; 0x100
 800499a:	e016      	b.n	80049ca <UART_SetConfig+0xbd2>
 800499c:	2301      	movs	r3, #1
 800499e:	e014      	b.n	80049ca <UART_SetConfig+0xbd2>
 80049a0:	2380      	movs	r3, #128	; 0x80
 80049a2:	e012      	b.n	80049ca <UART_SetConfig+0xbd2>
 80049a4:	2340      	movs	r3, #64	; 0x40
 80049a6:	e010      	b.n	80049ca <UART_SetConfig+0xbd2>
 80049a8:	2320      	movs	r3, #32
 80049aa:	e00e      	b.n	80049ca <UART_SetConfig+0xbd2>
 80049ac:	2310      	movs	r3, #16
 80049ae:	e00c      	b.n	80049ca <UART_SetConfig+0xbd2>
 80049b0:	230c      	movs	r3, #12
 80049b2:	e00a      	b.n	80049ca <UART_SetConfig+0xbd2>
 80049b4:	230a      	movs	r3, #10
 80049b6:	e008      	b.n	80049ca <UART_SetConfig+0xbd2>
 80049b8:	2308      	movs	r3, #8
 80049ba:	e006      	b.n	80049ca <UART_SetConfig+0xbd2>
 80049bc:	2306      	movs	r3, #6
 80049be:	e004      	b.n	80049ca <UART_SetConfig+0xbd2>
 80049c0:	2304      	movs	r3, #4
 80049c2:	e002      	b.n	80049ca <UART_SetConfig+0xbd2>
 80049c4:	2302      	movs	r3, #2
 80049c6:	e000      	b.n	80049ca <UART_SetConfig+0xbd2>
 80049c8:	2301      	movs	r3, #1
 80049ca:	693a      	ldr	r2, [r7, #16]
 80049cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80049d0:	005a      	lsls	r2, r3, #1
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	085b      	lsrs	r3, r3, #1
 80049d8:	441a      	add	r2, r3
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	fbb2 f3f3 	udiv	r3, r2, r3
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	61fb      	str	r3, [r7, #28]
        break;
 80049e6:	e063      	b.n	8004ab0 <UART_SetConfig+0xcb8>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d04f      	beq.n	8004a90 <UART_SetConfig+0xc98>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d048      	beq.n	8004a8a <UART_SetConfig+0xc92>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fc:	2b02      	cmp	r3, #2
 80049fe:	d041      	beq.n	8004a84 <UART_SetConfig+0xc8c>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a04:	2b03      	cmp	r3, #3
 8004a06:	d03a      	beq.n	8004a7e <UART_SetConfig+0xc86>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0c:	2b04      	cmp	r3, #4
 8004a0e:	d033      	beq.n	8004a78 <UART_SetConfig+0xc80>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a14:	2b05      	cmp	r3, #5
 8004a16:	d02c      	beq.n	8004a72 <UART_SetConfig+0xc7a>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1c:	2b06      	cmp	r3, #6
 8004a1e:	d025      	beq.n	8004a6c <UART_SetConfig+0xc74>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a24:	2b07      	cmp	r3, #7
 8004a26:	d01e      	beq.n	8004a66 <UART_SetConfig+0xc6e>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2c:	2b08      	cmp	r3, #8
 8004a2e:	d017      	beq.n	8004a60 <UART_SetConfig+0xc68>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a34:	2b09      	cmp	r3, #9
 8004a36:	d010      	beq.n	8004a5a <UART_SetConfig+0xc62>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3c:	2b0a      	cmp	r3, #10
 8004a3e:	d009      	beq.n	8004a54 <UART_SetConfig+0xc5c>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a44:	2b0b      	cmp	r3, #11
 8004a46:	d102      	bne.n	8004a4e <UART_SetConfig+0xc56>
 8004a48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a4c:	e022      	b.n	8004a94 <UART_SetConfig+0xc9c>
 8004a4e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004a52:	e01f      	b.n	8004a94 <UART_SetConfig+0xc9c>
 8004a54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a58:	e01c      	b.n	8004a94 <UART_SetConfig+0xc9c>
 8004a5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a5e:	e019      	b.n	8004a94 <UART_SetConfig+0xc9c>
 8004a60:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004a64:	e016      	b.n	8004a94 <UART_SetConfig+0xc9c>
 8004a66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a6a:	e013      	b.n	8004a94 <UART_SetConfig+0xc9c>
 8004a6c:	f241 5354 	movw	r3, #5460	; 0x1554
 8004a70:	e010      	b.n	8004a94 <UART_SetConfig+0xc9c>
 8004a72:	f641 1398 	movw	r3, #6552	; 0x1998
 8004a76:	e00d      	b.n	8004a94 <UART_SetConfig+0xc9c>
 8004a78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004a7c:	e00a      	b.n	8004a94 <UART_SetConfig+0xc9c>
 8004a7e:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8004a82:	e007      	b.n	8004a94 <UART_SetConfig+0xc9c>
 8004a84:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004a88:	e004      	b.n	8004a94 <UART_SetConfig+0xc9c>
 8004a8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a8e:	e001      	b.n	8004a94 <UART_SetConfig+0xc9c>
 8004a90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	6852      	ldr	r2, [r2, #4]
 8004a98:	0852      	lsrs	r2, r2, #1
 8004a9a:	441a      	add	r2, r3
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	61fb      	str	r3, [r7, #28]
        break;
 8004aa8:	e002      	b.n	8004ab0 <UART_SetConfig+0xcb8>
      default:
        ret = HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	76fb      	strb	r3, [r7, #27]
        break;
 8004aae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ab0:	69fb      	ldr	r3, [r7, #28]
 8004ab2:	2b0f      	cmp	r3, #15
 8004ab4:	d916      	bls.n	8004ae4 <UART_SetConfig+0xcec>
 8004ab6:	69fb      	ldr	r3, [r7, #28]
 8004ab8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004abc:	d212      	bcs.n	8004ae4 <UART_SetConfig+0xcec>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	f023 030f 	bic.w	r3, r3, #15
 8004ac6:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	085b      	lsrs	r3, r3, #1
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	f003 0307 	and.w	r3, r3, #7
 8004ad2:	b29a      	uxth	r2, r3
 8004ad4:	89fb      	ldrh	r3, [r7, #14]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	89fa      	ldrh	r2, [r7, #14]
 8004ae0:	60da      	str	r2, [r3, #12]
 8004ae2:	e1af      	b.n	8004e44 <UART_SetConfig+0x104c>
    }
    else
    {
      ret = HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	76fb      	strb	r3, [r7, #27]
 8004ae8:	e1ac      	b.n	8004e44 <UART_SetConfig+0x104c>
    }
  }
  else
  {
    switch (clocksource)
 8004aea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004aee:	3b01      	subs	r3, #1
 8004af0:	2b07      	cmp	r3, #7
 8004af2:	f200 8196 	bhi.w	8004e22 <UART_SetConfig+0x102a>
 8004af6:	a201      	add	r2, pc, #4	; (adr r2, 8004afc <UART_SetConfig+0xd04>)
 8004af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004afc:	08004b4d 	.word	0x08004b4d
 8004b00:	08004c03 	.word	0x08004c03
 8004b04:	08004e23 	.word	0x08004e23
 8004b08:	08004cad 	.word	0x08004cad
 8004b0c:	08004e23 	.word	0x08004e23
 8004b10:	08004e23 	.word	0x08004e23
 8004b14:	08004e23 	.word	0x08004e23
 8004b18:	08004d63 	.word	0x08004d63
 8004b1c:	0001e848 	.word	0x0001e848
 8004b20:	01e84800 	.word	0x01e84800
 8004b24:	0003d090 	.word	0x0003d090
 8004b28:	0007a120 	.word	0x0007a120
 8004b2c:	000f4240 	.word	0x000f4240
 8004b30:	001e8480 	.word	0x001e8480
 8004b34:	0028b0aa 	.word	0x0028b0aa
 8004b38:	0030d400 	.word	0x0030d400
 8004b3c:	003d0900 	.word	0x003d0900
 8004b40:	00516154 	.word	0x00516154
 8004b44:	007a1200 	.word	0x007a1200
 8004b48:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b4c:	f7fe f8ae 	bl	8002cac <HAL_RCC_GetPCLK2Freq>
 8004b50:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d044      	beq.n	8004be4 <UART_SetConfig+0xdec>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d03e      	beq.n	8004be0 <UART_SetConfig+0xde8>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b66:	2b02      	cmp	r3, #2
 8004b68:	d038      	beq.n	8004bdc <UART_SetConfig+0xde4>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6e:	2b03      	cmp	r3, #3
 8004b70:	d032      	beq.n	8004bd8 <UART_SetConfig+0xde0>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b76:	2b04      	cmp	r3, #4
 8004b78:	d02c      	beq.n	8004bd4 <UART_SetConfig+0xddc>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7e:	2b05      	cmp	r3, #5
 8004b80:	d026      	beq.n	8004bd0 <UART_SetConfig+0xdd8>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b86:	2b06      	cmp	r3, #6
 8004b88:	d020      	beq.n	8004bcc <UART_SetConfig+0xdd4>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8e:	2b07      	cmp	r3, #7
 8004b90:	d01a      	beq.n	8004bc8 <UART_SetConfig+0xdd0>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b96:	2b08      	cmp	r3, #8
 8004b98:	d014      	beq.n	8004bc4 <UART_SetConfig+0xdcc>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9e:	2b09      	cmp	r3, #9
 8004ba0:	d00e      	beq.n	8004bc0 <UART_SetConfig+0xdc8>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba6:	2b0a      	cmp	r3, #10
 8004ba8:	d008      	beq.n	8004bbc <UART_SetConfig+0xdc4>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bae:	2b0b      	cmp	r3, #11
 8004bb0:	d102      	bne.n	8004bb8 <UART_SetConfig+0xdc0>
 8004bb2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004bb6:	e016      	b.n	8004be6 <UART_SetConfig+0xdee>
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e014      	b.n	8004be6 <UART_SetConfig+0xdee>
 8004bbc:	2380      	movs	r3, #128	; 0x80
 8004bbe:	e012      	b.n	8004be6 <UART_SetConfig+0xdee>
 8004bc0:	2340      	movs	r3, #64	; 0x40
 8004bc2:	e010      	b.n	8004be6 <UART_SetConfig+0xdee>
 8004bc4:	2320      	movs	r3, #32
 8004bc6:	e00e      	b.n	8004be6 <UART_SetConfig+0xdee>
 8004bc8:	2310      	movs	r3, #16
 8004bca:	e00c      	b.n	8004be6 <UART_SetConfig+0xdee>
 8004bcc:	230c      	movs	r3, #12
 8004bce:	e00a      	b.n	8004be6 <UART_SetConfig+0xdee>
 8004bd0:	230a      	movs	r3, #10
 8004bd2:	e008      	b.n	8004be6 <UART_SetConfig+0xdee>
 8004bd4:	2308      	movs	r3, #8
 8004bd6:	e006      	b.n	8004be6 <UART_SetConfig+0xdee>
 8004bd8:	2306      	movs	r3, #6
 8004bda:	e004      	b.n	8004be6 <UART_SetConfig+0xdee>
 8004bdc:	2304      	movs	r3, #4
 8004bde:	e002      	b.n	8004be6 <UART_SetConfig+0xdee>
 8004be0:	2302      	movs	r3, #2
 8004be2:	e000      	b.n	8004be6 <UART_SetConfig+0xdee>
 8004be4:	2301      	movs	r3, #1
 8004be6:	693a      	ldr	r2, [r7, #16]
 8004be8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	085b      	lsrs	r3, r3, #1
 8004bf2:	441a      	add	r2, r3
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	61fb      	str	r3, [r7, #28]
        break;
 8004c00:	e112      	b.n	8004e28 <UART_SetConfig+0x1030>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d044      	beq.n	8004c94 <UART_SetConfig+0xe9c>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d03e      	beq.n	8004c90 <UART_SetConfig+0xe98>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c16:	2b02      	cmp	r3, #2
 8004c18:	d038      	beq.n	8004c8c <UART_SetConfig+0xe94>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1e:	2b03      	cmp	r3, #3
 8004c20:	d032      	beq.n	8004c88 <UART_SetConfig+0xe90>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c26:	2b04      	cmp	r3, #4
 8004c28:	d02c      	beq.n	8004c84 <UART_SetConfig+0xe8c>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2e:	2b05      	cmp	r3, #5
 8004c30:	d026      	beq.n	8004c80 <UART_SetConfig+0xe88>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c36:	2b06      	cmp	r3, #6
 8004c38:	d020      	beq.n	8004c7c <UART_SetConfig+0xe84>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3e:	2b07      	cmp	r3, #7
 8004c40:	d01a      	beq.n	8004c78 <UART_SetConfig+0xe80>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c46:	2b08      	cmp	r3, #8
 8004c48:	d014      	beq.n	8004c74 <UART_SetConfig+0xe7c>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4e:	2b09      	cmp	r3, #9
 8004c50:	d00e      	beq.n	8004c70 <UART_SetConfig+0xe78>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c56:	2b0a      	cmp	r3, #10
 8004c58:	d008      	beq.n	8004c6c <UART_SetConfig+0xe74>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5e:	2b0b      	cmp	r3, #11
 8004c60:	d102      	bne.n	8004c68 <UART_SetConfig+0xe70>
 8004c62:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004c66:	e016      	b.n	8004c96 <UART_SetConfig+0xe9e>
 8004c68:	4b80      	ldr	r3, [pc, #512]	; (8004e6c <UART_SetConfig+0x1074>)
 8004c6a:	e014      	b.n	8004c96 <UART_SetConfig+0xe9e>
 8004c6c:	4b80      	ldr	r3, [pc, #512]	; (8004e70 <UART_SetConfig+0x1078>)
 8004c6e:	e012      	b.n	8004c96 <UART_SetConfig+0xe9e>
 8004c70:	4b80      	ldr	r3, [pc, #512]	; (8004e74 <UART_SetConfig+0x107c>)
 8004c72:	e010      	b.n	8004c96 <UART_SetConfig+0xe9e>
 8004c74:	4b80      	ldr	r3, [pc, #512]	; (8004e78 <UART_SetConfig+0x1080>)
 8004c76:	e00e      	b.n	8004c96 <UART_SetConfig+0xe9e>
 8004c78:	4b80      	ldr	r3, [pc, #512]	; (8004e7c <UART_SetConfig+0x1084>)
 8004c7a:	e00c      	b.n	8004c96 <UART_SetConfig+0xe9e>
 8004c7c:	4b80      	ldr	r3, [pc, #512]	; (8004e80 <UART_SetConfig+0x1088>)
 8004c7e:	e00a      	b.n	8004c96 <UART_SetConfig+0xe9e>
 8004c80:	4b80      	ldr	r3, [pc, #512]	; (8004e84 <UART_SetConfig+0x108c>)
 8004c82:	e008      	b.n	8004c96 <UART_SetConfig+0xe9e>
 8004c84:	4b80      	ldr	r3, [pc, #512]	; (8004e88 <UART_SetConfig+0x1090>)
 8004c86:	e006      	b.n	8004c96 <UART_SetConfig+0xe9e>
 8004c88:	4b80      	ldr	r3, [pc, #512]	; (8004e8c <UART_SetConfig+0x1094>)
 8004c8a:	e004      	b.n	8004c96 <UART_SetConfig+0xe9e>
 8004c8c:	4b80      	ldr	r3, [pc, #512]	; (8004e90 <UART_SetConfig+0x1098>)
 8004c8e:	e002      	b.n	8004c96 <UART_SetConfig+0xe9e>
 8004c90:	4b80      	ldr	r3, [pc, #512]	; (8004e94 <UART_SetConfig+0x109c>)
 8004c92:	e000      	b.n	8004c96 <UART_SetConfig+0xe9e>
 8004c94:	4b75      	ldr	r3, [pc, #468]	; (8004e6c <UART_SetConfig+0x1074>)
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	6852      	ldr	r2, [r2, #4]
 8004c9a:	0852      	lsrs	r2, r2, #1
 8004c9c:	441a      	add	r2, r3
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	61fb      	str	r3, [r7, #28]
        break;
 8004caa:	e0bd      	b.n	8004e28 <UART_SetConfig+0x1030>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cac:	f7fd ff6a 	bl	8002b84 <HAL_RCC_GetSysClockFreq>
 8004cb0:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d044      	beq.n	8004d44 <UART_SetConfig+0xf4c>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d03e      	beq.n	8004d40 <UART_SetConfig+0xf48>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d038      	beq.n	8004d3c <UART_SetConfig+0xf44>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cce:	2b03      	cmp	r3, #3
 8004cd0:	d032      	beq.n	8004d38 <UART_SetConfig+0xf40>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd6:	2b04      	cmp	r3, #4
 8004cd8:	d02c      	beq.n	8004d34 <UART_SetConfig+0xf3c>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cde:	2b05      	cmp	r3, #5
 8004ce0:	d026      	beq.n	8004d30 <UART_SetConfig+0xf38>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce6:	2b06      	cmp	r3, #6
 8004ce8:	d020      	beq.n	8004d2c <UART_SetConfig+0xf34>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cee:	2b07      	cmp	r3, #7
 8004cf0:	d01a      	beq.n	8004d28 <UART_SetConfig+0xf30>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf6:	2b08      	cmp	r3, #8
 8004cf8:	d014      	beq.n	8004d24 <UART_SetConfig+0xf2c>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfe:	2b09      	cmp	r3, #9
 8004d00:	d00e      	beq.n	8004d20 <UART_SetConfig+0xf28>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d06:	2b0a      	cmp	r3, #10
 8004d08:	d008      	beq.n	8004d1c <UART_SetConfig+0xf24>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0e:	2b0b      	cmp	r3, #11
 8004d10:	d102      	bne.n	8004d18 <UART_SetConfig+0xf20>
 8004d12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d16:	e016      	b.n	8004d46 <UART_SetConfig+0xf4e>
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e014      	b.n	8004d46 <UART_SetConfig+0xf4e>
 8004d1c:	2380      	movs	r3, #128	; 0x80
 8004d1e:	e012      	b.n	8004d46 <UART_SetConfig+0xf4e>
 8004d20:	2340      	movs	r3, #64	; 0x40
 8004d22:	e010      	b.n	8004d46 <UART_SetConfig+0xf4e>
 8004d24:	2320      	movs	r3, #32
 8004d26:	e00e      	b.n	8004d46 <UART_SetConfig+0xf4e>
 8004d28:	2310      	movs	r3, #16
 8004d2a:	e00c      	b.n	8004d46 <UART_SetConfig+0xf4e>
 8004d2c:	230c      	movs	r3, #12
 8004d2e:	e00a      	b.n	8004d46 <UART_SetConfig+0xf4e>
 8004d30:	230a      	movs	r3, #10
 8004d32:	e008      	b.n	8004d46 <UART_SetConfig+0xf4e>
 8004d34:	2308      	movs	r3, #8
 8004d36:	e006      	b.n	8004d46 <UART_SetConfig+0xf4e>
 8004d38:	2306      	movs	r3, #6
 8004d3a:	e004      	b.n	8004d46 <UART_SetConfig+0xf4e>
 8004d3c:	2304      	movs	r3, #4
 8004d3e:	e002      	b.n	8004d46 <UART_SetConfig+0xf4e>
 8004d40:	2302      	movs	r3, #2
 8004d42:	e000      	b.n	8004d46 <UART_SetConfig+0xf4e>
 8004d44:	2301      	movs	r3, #1
 8004d46:	693a      	ldr	r2, [r7, #16]
 8004d48:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	085b      	lsrs	r3, r3, #1
 8004d52:	441a      	add	r2, r3
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	61fb      	str	r3, [r7, #28]
        break;
 8004d60:	e062      	b.n	8004e28 <UART_SetConfig+0x1030>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d04e      	beq.n	8004e08 <UART_SetConfig+0x1010>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d047      	beq.n	8004e02 <UART_SetConfig+0x100a>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	d040      	beq.n	8004dfc <UART_SetConfig+0x1004>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7e:	2b03      	cmp	r3, #3
 8004d80:	d039      	beq.n	8004df6 <UART_SetConfig+0xffe>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d86:	2b04      	cmp	r3, #4
 8004d88:	d032      	beq.n	8004df0 <UART_SetConfig+0xff8>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8e:	2b05      	cmp	r3, #5
 8004d90:	d02b      	beq.n	8004dea <UART_SetConfig+0xff2>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d96:	2b06      	cmp	r3, #6
 8004d98:	d024      	beq.n	8004de4 <UART_SetConfig+0xfec>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9e:	2b07      	cmp	r3, #7
 8004da0:	d01d      	beq.n	8004dde <UART_SetConfig+0xfe6>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da6:	2b08      	cmp	r3, #8
 8004da8:	d016      	beq.n	8004dd8 <UART_SetConfig+0xfe0>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dae:	2b09      	cmp	r3, #9
 8004db0:	d00f      	beq.n	8004dd2 <UART_SetConfig+0xfda>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db6:	2b0a      	cmp	r3, #10
 8004db8:	d008      	beq.n	8004dcc <UART_SetConfig+0xfd4>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dbe:	2b0b      	cmp	r3, #11
 8004dc0:	d101      	bne.n	8004dc6 <UART_SetConfig+0xfce>
 8004dc2:	2380      	movs	r3, #128	; 0x80
 8004dc4:	e022      	b.n	8004e0c <UART_SetConfig+0x1014>
 8004dc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004dca:	e01f      	b.n	8004e0c <UART_SetConfig+0x1014>
 8004dcc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004dd0:	e01c      	b.n	8004e0c <UART_SetConfig+0x1014>
 8004dd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004dd6:	e019      	b.n	8004e0c <UART_SetConfig+0x1014>
 8004dd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ddc:	e016      	b.n	8004e0c <UART_SetConfig+0x1014>
 8004dde:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004de2:	e013      	b.n	8004e0c <UART_SetConfig+0x1014>
 8004de4:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8004de8:	e010      	b.n	8004e0c <UART_SetConfig+0x1014>
 8004dea:	f640 43cc 	movw	r3, #3276	; 0xccc
 8004dee:	e00d      	b.n	8004e0c <UART_SetConfig+0x1014>
 8004df0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004df4:	e00a      	b.n	8004e0c <UART_SetConfig+0x1014>
 8004df6:	f241 5355 	movw	r3, #5461	; 0x1555
 8004dfa:	e007      	b.n	8004e0c <UART_SetConfig+0x1014>
 8004dfc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004e00:	e004      	b.n	8004e0c <UART_SetConfig+0x1014>
 8004e02:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004e06:	e001      	b.n	8004e0c <UART_SetConfig+0x1014>
 8004e08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	6852      	ldr	r2, [r2, #4]
 8004e10:	0852      	lsrs	r2, r2, #1
 8004e12:	441a      	add	r2, r3
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	61fb      	str	r3, [r7, #28]
        break;
 8004e20:	e002      	b.n	8004e28 <UART_SetConfig+0x1030>
      default:
        ret = HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	76fb      	strb	r3, [r7, #27]
        break;
 8004e26:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	2b0f      	cmp	r3, #15
 8004e2c:	d908      	bls.n	8004e40 <UART_SetConfig+0x1048>
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e34:	d204      	bcs.n	8004e40 <UART_SetConfig+0x1048>
    {
      huart->Instance->BRR = usartdiv;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	69fa      	ldr	r2, [r7, #28]
 8004e3c:	60da      	str	r2, [r3, #12]
 8004e3e:	e001      	b.n	8004e44 <UART_SetConfig+0x104c>
    }
    else
    {
      ret = HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	76fb      	strb	r3, [r7, #27]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8004e60:	7efb      	ldrb	r3, [r7, #27]
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	372c      	adds	r7, #44	; 0x2c
 8004e66:	46bd      	mov	sp, r7
 8004e68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004e6c:	00f42400 	.word	0x00f42400
 8004e70:	0001e848 	.word	0x0001e848
 8004e74:	0003d090 	.word	0x0003d090
 8004e78:	0007a120 	.word	0x0007a120
 8004e7c:	000f4240 	.word	0x000f4240
 8004e80:	00145855 	.word	0x00145855
 8004e84:	00186a00 	.word	0x00186a00
 8004e88:	001e8480 	.word	0x001e8480
 8004e8c:	0028b0aa 	.word	0x0028b0aa
 8004e90:	003d0900 	.word	0x003d0900
 8004e94:	007a1200 	.word	0x007a1200

08004e98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b083      	sub	sp, #12
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea4:	f003 0301 	and.w	r3, r3, #1
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d00a      	beq.n	8004ec2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	6812      	ldr	r2, [r2, #0]
 8004eb4:	6852      	ldr	r2, [r2, #4]
 8004eb6:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004ebe:	430a      	orrs	r2, r1
 8004ec0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ec6:	f003 0302 	and.w	r3, r3, #2
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d00a      	beq.n	8004ee4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	6812      	ldr	r2, [r2, #0]
 8004ed6:	6852      	ldr	r2, [r2, #4]
 8004ed8:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8004edc:	687a      	ldr	r2, [r7, #4]
 8004ede:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004ee0:	430a      	orrs	r2, r1
 8004ee2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee8:	f003 0304 	and.w	r3, r3, #4
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d00a      	beq.n	8004f06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	6812      	ldr	r2, [r2, #0]
 8004ef8:	6852      	ldr	r2, [r2, #4]
 8004efa:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004f02:	430a      	orrs	r2, r1
 8004f04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f0a:	f003 0308 	and.w	r3, r3, #8
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d00a      	beq.n	8004f28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	6812      	ldr	r2, [r2, #0]
 8004f1a:	6852      	ldr	r2, [r2, #4]
 8004f1c:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 8004f20:	687a      	ldr	r2, [r7, #4]
 8004f22:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004f24:	430a      	orrs	r2, r1
 8004f26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f2c:	f003 0310 	and.w	r3, r3, #16
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d00a      	beq.n	8004f4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	6812      	ldr	r2, [r2, #0]
 8004f3c:	6892      	ldr	r2, [r2, #8]
 8004f3e:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004f46:	430a      	orrs	r2, r1
 8004f48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f4e:	f003 0320 	and.w	r3, r3, #32
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d00a      	beq.n	8004f6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	6812      	ldr	r2, [r2, #0]
 8004f5e:	6892      	ldr	r2, [r2, #8]
 8004f60:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004f68:	430a      	orrs	r2, r1
 8004f6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d01a      	beq.n	8004fae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	6812      	ldr	r2, [r2, #0]
 8004f80:	6852      	ldr	r2, [r2, #4]
 8004f82:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 8004f86:	687a      	ldr	r2, [r7, #4]
 8004f88:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004f8a:	430a      	orrs	r2, r1
 8004f8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f96:	d10a      	bne.n	8004fae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	687a      	ldr	r2, [r7, #4]
 8004f9e:	6812      	ldr	r2, [r2, #0]
 8004fa0:	6852      	ldr	r2, [r2, #4]
 8004fa2:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004faa:	430a      	orrs	r2, r1
 8004fac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d00a      	beq.n	8004fd0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	6812      	ldr	r2, [r2, #0]
 8004fc2:	6852      	ldr	r2, [r2, #4]
 8004fc4:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004fcc:	430a      	orrs	r2, r1
 8004fce:	605a      	str	r2, [r3, #4]
  }
}
 8004fd0:	bf00      	nop
 8004fd2:	370c      	adds	r7, #12
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr

08004fdc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b086      	sub	sp, #24
 8004fe0:	af02      	add	r7, sp, #8
 8004fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004fec:	f7fb fac4 	bl	8000578 <HAL_GetTick>
 8004ff0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f003 0308 	and.w	r3, r3, #8
 8004ffc:	2b08      	cmp	r3, #8
 8004ffe:	d10e      	bne.n	800501e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005000:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005004:	9300      	str	r3, [sp, #0]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2200      	movs	r2, #0
 800500a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f000 f82c 	bl	800506c <UART_WaitOnFlagUntilTimeout>
 8005014:	4603      	mov	r3, r0
 8005016:	2b00      	cmp	r3, #0
 8005018:	d001      	beq.n	800501e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800501a:	2303      	movs	r3, #3
 800501c:	e022      	b.n	8005064 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 0304 	and.w	r3, r3, #4
 8005028:	2b04      	cmp	r3, #4
 800502a:	d10e      	bne.n	800504a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800502c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005030:	9300      	str	r3, [sp, #0]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2200      	movs	r2, #0
 8005036:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 f816 	bl	800506c <UART_WaitOnFlagUntilTimeout>
 8005040:	4603      	mov	r3, r0
 8005042:	2b00      	cmp	r3, #0
 8005044:	d001      	beq.n	800504a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005046:	2303      	movs	r3, #3
 8005048:	e00c      	b.n	8005064 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2220      	movs	r2, #32
 800504e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2220      	movs	r2, #32
 8005056:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005062:	2300      	movs	r3, #0
}
 8005064:	4618      	mov	r0, r3
 8005066:	3710      	adds	r7, #16
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}

0800506c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b084      	sub	sp, #16
 8005070:	af00      	add	r7, sp, #0
 8005072:	60f8      	str	r0, [r7, #12]
 8005074:	60b9      	str	r1, [r7, #8]
 8005076:	603b      	str	r3, [r7, #0]
 8005078:	4613      	mov	r3, r2
 800507a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800507c:	e062      	b.n	8005144 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800507e:	69bb      	ldr	r3, [r7, #24]
 8005080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005084:	d05e      	beq.n	8005144 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005086:	f7fb fa77 	bl	8000578 <HAL_GetTick>
 800508a:	4602      	mov	r2, r0
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	1ad2      	subs	r2, r2, r3
 8005090:	69bb      	ldr	r3, [r7, #24]
 8005092:	429a      	cmp	r2, r3
 8005094:	d802      	bhi.n	800509c <UART_WaitOnFlagUntilTimeout+0x30>
 8005096:	69bb      	ldr	r3, [r7, #24]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d11d      	bne.n	80050d8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	68fa      	ldr	r2, [r7, #12]
 80050a2:	6812      	ldr	r2, [r2, #0]
 80050a4:	6812      	ldr	r2, [r2, #0]
 80050a6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80050aa:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	68fa      	ldr	r2, [r7, #12]
 80050b2:	6812      	ldr	r2, [r2, #0]
 80050b4:	6892      	ldr	r2, [r2, #8]
 80050b6:	f022 0201 	bic.w	r2, r2, #1
 80050ba:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2220      	movs	r2, #32
 80050c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2220      	movs	r2, #32
 80050c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2200      	movs	r2, #0
 80050d0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80050d4:	2303      	movs	r3, #3
 80050d6:	e045      	b.n	8005164 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f003 0304 	and.w	r3, r3, #4
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d02e      	beq.n	8005144 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	69db      	ldr	r3, [r3, #28]
 80050ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050f4:	d126      	bne.n	8005144 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80050fe:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	68fa      	ldr	r2, [r7, #12]
 8005106:	6812      	ldr	r2, [r2, #0]
 8005108:	6812      	ldr	r2, [r2, #0]
 800510a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800510e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	68fa      	ldr	r2, [r7, #12]
 8005116:	6812      	ldr	r2, [r2, #0]
 8005118:	6892      	ldr	r2, [r2, #8]
 800511a:	f022 0201 	bic.w	r2, r2, #1
 800511e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2220      	movs	r2, #32
 8005124:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2220      	movs	r2, #32
 800512c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2220      	movs	r2, #32
 8005134:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2200      	movs	r2, #0
 800513c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 8005140:	2303      	movs	r3, #3
 8005142:	e00f      	b.n	8005164 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	69da      	ldr	r2, [r3, #28]
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	401a      	ands	r2, r3
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	429a      	cmp	r2, r3
 8005152:	bf0c      	ite	eq
 8005154:	2301      	moveq	r3, #1
 8005156:	2300      	movne	r3, #0
 8005158:	b2db      	uxtb	r3, r3
 800515a:	461a      	mov	r2, r3
 800515c:	79fb      	ldrb	r3, [r7, #7]
 800515e:	429a      	cmp	r2, r3
 8005160:	d08d      	beq.n	800507e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005162:	2300      	movs	r3, #0
}
 8005164:	4618      	mov	r0, r3
 8005166:	3710      	adds	r7, #16
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}

0800516c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800516c:	b480      	push	{r7}
 800516e:	b085      	sub	sp, #20
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800517a:	2b01      	cmp	r3, #1
 800517c:	d101      	bne.n	8005182 <HAL_UARTEx_DisableFifoMode+0x16>
 800517e:	2302      	movs	r3, #2
 8005180:	e027      	b.n	80051d2 <HAL_UARTEx_DisableFifoMode+0x66>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2201      	movs	r2, #1
 8005186:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2224      	movs	r2, #36	; 0x24
 800518e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	6812      	ldr	r2, [r2, #0]
 80051a2:	6812      	ldr	r2, [r2, #0]
 80051a4:	f022 0201 	bic.w	r2, r2, #1
 80051a8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80051b0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	68fa      	ldr	r2, [r7, #12]
 80051be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2220      	movs	r2, #32
 80051c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2200      	movs	r2, #0
 80051cc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80051d0:	2300      	movs	r3, #0
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3714      	adds	r7, #20
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr

080051de <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80051de:	b580      	push	{r7, lr}
 80051e0:	b084      	sub	sp, #16
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	6078      	str	r0, [r7, #4]
 80051e6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d101      	bne.n	80051f6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80051f2:	2302      	movs	r3, #2
 80051f4:	e02d      	b.n	8005252 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2201      	movs	r2, #1
 80051fa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2224      	movs	r2, #36	; 0x24
 8005202:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	6812      	ldr	r2, [r2, #0]
 8005216:	6812      	ldr	r2, [r2, #0]
 8005218:	f022 0201 	bic.w	r2, r2, #1
 800521c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	6812      	ldr	r2, [r2, #0]
 8005226:	6892      	ldr	r2, [r2, #8]
 8005228:	f022 4160 	bic.w	r1, r2, #3758096384	; 0xe0000000
 800522c:	683a      	ldr	r2, [r7, #0]
 800522e:	430a      	orrs	r2, r1
 8005230:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f000 f850 	bl	80052d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	68fa      	ldr	r2, [r7, #12]
 800523e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2220      	movs	r2, #32
 8005244:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2200      	movs	r2, #0
 800524c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005250:	2300      	movs	r3, #0
}
 8005252:	4618      	mov	r0, r3
 8005254:	3710      	adds	r7, #16
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}

0800525a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800525a:	b580      	push	{r7, lr}
 800525c:	b084      	sub	sp, #16
 800525e:	af00      	add	r7, sp, #0
 8005260:	6078      	str	r0, [r7, #4]
 8005262:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800526a:	2b01      	cmp	r3, #1
 800526c:	d101      	bne.n	8005272 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800526e:	2302      	movs	r3, #2
 8005270:	e02d      	b.n	80052ce <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2201      	movs	r2, #1
 8005276:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2224      	movs	r2, #36	; 0x24
 800527e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	6812      	ldr	r2, [r2, #0]
 8005292:	6812      	ldr	r2, [r2, #0]
 8005294:	f022 0201 	bic.w	r2, r2, #1
 8005298:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	6812      	ldr	r2, [r2, #0]
 80052a2:	6892      	ldr	r2, [r2, #8]
 80052a4:	f022 6160 	bic.w	r1, r2, #234881024	; 0xe000000
 80052a8:	683a      	ldr	r2, [r7, #0]
 80052aa:	430a      	orrs	r2, r1
 80052ac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f000 f812 	bl	80052d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	68fa      	ldr	r2, [r7, #12]
 80052ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2220      	movs	r2, #32
 80052c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3710      	adds	r7, #16
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
	...

080052d8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80052d8:	b480      	push	{r7}
 80052da:	b089      	sub	sp, #36	; 0x24
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80052e0:	4a2f      	ldr	r2, [pc, #188]	; (80053a0 <UARTEx_SetNbDataToProcess+0xc8>)
 80052e2:	f107 0314 	add.w	r3, r7, #20
 80052e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80052ea:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80052ee:	4a2d      	ldr	r2, [pc, #180]	; (80053a4 <UARTEx_SetNbDataToProcess+0xcc>)
 80052f0:	f107 030c 	add.w	r3, r7, #12
 80052f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80052f8:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005300:	2b00      	cmp	r3, #0
 8005302:	d108      	bne.n	8005316 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005314:	e03d      	b.n	8005392 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005316:	2308      	movs	r3, #8
 8005318:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800531a:	2308      	movs	r3, #8
 800531c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	0e5b      	lsrs	r3, r3, #25
 8005326:	b2db      	uxtb	r3, r3
 8005328:	f003 0307 	and.w	r3, r3, #7
 800532c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	0f5b      	lsrs	r3, r3, #29
 8005336:	b2db      	uxtb	r3, r3
 8005338:	f003 0307 	and.w	r3, r3, #7
 800533c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800533e:	7fbb      	ldrb	r3, [r7, #30]
 8005340:	7f3a      	ldrb	r2, [r7, #28]
 8005342:	f107 0120 	add.w	r1, r7, #32
 8005346:	440a      	add	r2, r1
 8005348:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800534c:	fb02 f303 	mul.w	r3, r2, r3
 8005350:	7f3a      	ldrb	r2, [r7, #28]
 8005352:	f107 0120 	add.w	r1, r7, #32
 8005356:	440a      	add	r2, r1
 8005358:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800535c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005360:	b29a      	uxth	r2, r3
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8005368:	7ffb      	ldrb	r3, [r7, #31]
 800536a:	7f7a      	ldrb	r2, [r7, #29]
 800536c:	f107 0120 	add.w	r1, r7, #32
 8005370:	440a      	add	r2, r1
 8005372:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8005376:	fb02 f303 	mul.w	r3, r2, r3
 800537a:	7f7a      	ldrb	r2, [r7, #29]
 800537c:	f107 0120 	add.w	r1, r7, #32
 8005380:	440a      	add	r2, r1
 8005382:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8005386:	fb93 f3f2 	sdiv	r3, r3, r2
 800538a:	b29a      	uxth	r2, r3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005392:	bf00      	nop
 8005394:	3724      	adds	r7, #36	; 0x24
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr
 800539e:	bf00      	nop
 80053a0:	0800646c 	.word	0x0800646c
 80053a4:	08006474 	.word	0x08006474

080053a8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b085      	sub	sp, #20
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80053b0:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80053b4:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80053bc:	b29a      	uxth	r2, r3
 80053be:	89fb      	ldrh	r3, [r7, #14]
 80053c0:	4313      	orrs	r3, r2
 80053c2:	b29a      	uxth	r2, r3
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80053ca:	2300      	movs	r3, #0
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3714      	adds	r7, #20
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr

080053d8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80053d8:	b480      	push	{r7}
 80053da:	b085      	sub	sp, #20
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80053e0:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80053e4:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	b21a      	sxth	r2, r3
 80053f0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80053f4:	43db      	mvns	r3, r3
 80053f6:	b21b      	sxth	r3, r3
 80053f8:	4013      	ands	r3, r2
 80053fa:	b21b      	sxth	r3, r3
 80053fc:	b29a      	uxth	r2, r3
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005404:	2300      	movs	r3, #0
}
 8005406:	4618      	mov	r0, r3
 8005408:	3714      	adds	r7, #20
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr

08005412 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005412:	b084      	sub	sp, #16
 8005414:	b580      	push	{r7, lr}
 8005416:	b082      	sub	sp, #8
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	f107 0014 	add.w	r0, r7, #20
 8005420:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2200      	movs	r2, #0
 8005438:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2200      	movs	r2, #0
 8005440:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f7ff ffaf 	bl	80053a8 <USB_EnableGlobalInt>

  return HAL_OK;
 800544a:	2300      	movs	r3, #0
}
 800544c:	4618      	mov	r0, r3
 800544e:	3708      	adds	r7, #8
 8005450:	46bd      	mov	sp, r7
 8005452:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005456:	b004      	add	sp, #16
 8005458:	4770      	bx	lr
	...

0800545c <leds_playNote>:

static uint8_t led_data[2 + (NUM_LEDS * 12)];
static uint8_t note_colors[] = {24,0,0, 0,24,0, 24,24,0, 24,0,24};
static int deleteOffset[] = {-1, -1, -1, -1};

void leds_playNote(int voice) {
 800545c:	b590      	push	{r4, r7, lr}
 800545e:	b087      	sub	sp, #28
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
	int ledOffset = voice * 6;
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	4613      	mov	r3, r2
 8005468:	005b      	lsls	r3, r3, #1
 800546a:	4413      	add	r3, r2
 800546c:	005b      	lsls	r3, r3, #1
 800546e:	613b      	str	r3, [r7, #16]
	int colorOffset = voice * 3;
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	4613      	mov	r3, r2
 8005474:	005b      	lsls	r3, r3, #1
 8005476:	4413      	add	r3, r2
 8005478:	60fb      	str	r3, [r7, #12]
	deleteOffset[voice] = ledOffset + 5;
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	1d5a      	adds	r2, r3, #5
 800547e:	4912      	ldr	r1, [pc, #72]	; (80054c8 <leds_playNote+0x6c>)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i=0; i<6; ++i) {
 8005486:	2300      	movs	r3, #0
 8005488:	617b      	str	r3, [r7, #20]
 800548a:	e016      	b.n	80054ba <leds_playNote+0x5e>
		setLedColor(ledOffset + i, note_colors[colorOffset], note_colors[colorOffset+1], note_colors[colorOffset+2]);
 800548c:	693a      	ldr	r2, [r7, #16]
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	18d0      	adds	r0, r2, r3
 8005492:	4a0e      	ldr	r2, [pc, #56]	; (80054cc <leds_playNote+0x70>)
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	4413      	add	r3, r2
 8005498:	781b      	ldrb	r3, [r3, #0]
 800549a:	4619      	mov	r1, r3
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	3301      	adds	r3, #1
 80054a0:	4a0a      	ldr	r2, [pc, #40]	; (80054cc <leds_playNote+0x70>)
 80054a2:	5cd3      	ldrb	r3, [r2, r3]
 80054a4:	461c      	mov	r4, r3
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	3302      	adds	r3, #2
 80054aa:	4a08      	ldr	r2, [pc, #32]	; (80054cc <leds_playNote+0x70>)
 80054ac:	5cd3      	ldrb	r3, [r2, r3]
 80054ae:	4622      	mov	r2, r4
 80054b0:	f000 f836 	bl	8005520 <setLedColor>
	for(int i=0; i<6; ++i) {
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	3301      	adds	r3, #1
 80054b8:	617b      	str	r3, [r7, #20]
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	2b05      	cmp	r3, #5
 80054be:	dde5      	ble.n	800548c <leds_playNote+0x30>
	}
}
 80054c0:	bf00      	nop
 80054c2:	371c      	adds	r7, #28
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd90      	pop	{r4, r7, pc}
 80054c8:	20000018 	.word	0x20000018
 80054cc:	2000000c 	.word	0x2000000c

080054d0 <leds_scrollNote>:

void leds_scrollNote(int voice) {
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b084      	sub	sp, #16
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
	int delOffset = deleteOffset[voice];
 80054d8:	4a10      	ldr	r2, [pc, #64]	; (800551c <leds_scrollNote+0x4c>)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054e0:	60fb      	str	r3, [r7, #12]
	if (delOffset > voice * 6) {
 80054e2:	687a      	ldr	r2, [r7, #4]
 80054e4:	4613      	mov	r3, r2
 80054e6:	005b      	lsls	r3, r3, #1
 80054e8:	4413      	add	r3, r2
 80054ea:	005b      	lsls	r3, r3, #1
 80054ec:	461a      	mov	r2, r3
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	429a      	cmp	r2, r3
 80054f2:	da0e      	bge.n	8005512 <leds_scrollNote+0x42>
		setLedColor(delOffset, 0, 0, 0);
 80054f4:	2300      	movs	r3, #0
 80054f6:	2200      	movs	r2, #0
 80054f8:	2100      	movs	r1, #0
 80054fa:	68f8      	ldr	r0, [r7, #12]
 80054fc:	f000 f810 	bl	8005520 <setLedColor>
		--deleteOffset[voice];
 8005500:	4a06      	ldr	r2, [pc, #24]	; (800551c <leds_scrollNote+0x4c>)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005508:	1e5a      	subs	r2, r3, #1
 800550a:	4904      	ldr	r1, [pc, #16]	; (800551c <leds_scrollNote+0x4c>)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}
}
 8005512:	bf00      	nop
 8005514:	3710      	adds	r7, #16
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
 800551a:	bf00      	nop
 800551c:	20000018 	.word	0x20000018

08005520 <setLedColor>:

void setLedColor(int led, int red, int green, int blue) {
 8005520:	b480      	push	{r7}
 8005522:	b08b      	sub	sp, #44	; 0x2c
 8005524:	af00      	add	r7, sp, #0
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	60b9      	str	r1, [r7, #8]
 800552a:	607a      	str	r2, [r7, #4]
 800552c:	603b      	str	r3, [r7, #0]
	int offset = 2 + (led * 12);
 800552e:	68fa      	ldr	r2, [r7, #12]
 8005530:	4613      	mov	r3, r2
 8005532:	005b      	lsls	r3, r3, #1
 8005534:	4413      	add	r3, r2
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	3302      	adds	r3, #2
 800553a:	627b      	str	r3, [r7, #36]	; 0x24

	int color = (green << 16) + (red << 8) + blue;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	041a      	lsls	r2, r3, #16
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	021b      	lsls	r3, r3, #8
 8005544:	441a      	add	r2, r3
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	4413      	add	r3, r2
 800554a:	623b      	str	r3, [r7, #32]
	int highQuartet = 1;
 800554c:	2301      	movs	r3, #1
 800554e:	61fb      	str	r3, [r7, #28]
	uint8_t byte = 0;
 8005550:	2300      	movs	r3, #0
 8005552:	76fb      	strb	r3, [r7, #27]
	for(int bit= 0; bit<24; ++bit) {
 8005554:	2300      	movs	r3, #0
 8005556:	617b      	str	r3, [r7, #20]
 8005558:	e028      	b.n	80055ac <setLedColor+0x8c>
		int value = (color >> 23) & 1;	// 0 or 1
 800555a:	6a3b      	ldr	r3, [r7, #32]
 800555c:	15db      	asrs	r3, r3, #23
 800555e:	f003 0301 	and.w	r3, r3, #1
 8005562:	613b      	str	r3, [r7, #16]

		if (highQuartet) {
 8005564:	69fb      	ldr	r3, [r7, #28]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d007      	beq.n	800557a <setLedColor+0x5a>
			// set high quartet part
			byte = (value == 0) ? 0x80 : 0xC0;
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d101      	bne.n	8005574 <setLedColor+0x54>
 8005570:	2380      	movs	r3, #128	; 0x80
 8005572:	e000      	b.n	8005576 <setLedColor+0x56>
 8005574:	23c0      	movs	r3, #192	; 0xc0
 8005576:	76fb      	strb	r3, [r7, #27]
 8005578:	e00e      	b.n	8005598 <setLedColor+0x78>
		} else {
			// add low quartet part, and set buffer
			byte += (value == 0) ? 0x08 : 0x0C;
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d101      	bne.n	8005584 <setLedColor+0x64>
 8005580:	2208      	movs	r2, #8
 8005582:	e000      	b.n	8005586 <setLedColor+0x66>
 8005584:	220c      	movs	r2, #12
 8005586:	7efb      	ldrb	r3, [r7, #27]
 8005588:	4413      	add	r3, r2
 800558a:	76fb      	strb	r3, [r7, #27]
			led_data[offset++] = byte;
 800558c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558e:	1c5a      	adds	r2, r3, #1
 8005590:	627a      	str	r2, [r7, #36]	; 0x24
 8005592:	490b      	ldr	r1, [pc, #44]	; (80055c0 <setLedColor+0xa0>)
 8005594:	7efa      	ldrb	r2, [r7, #27]
 8005596:	54ca      	strb	r2, [r1, r3]
		}
		highQuartet = 1 - highQuartet;	// invert true/false
 8005598:	69fb      	ldr	r3, [r7, #28]
 800559a:	f1c3 0301 	rsb	r3, r3, #1
 800559e:	61fb      	str	r3, [r7, #28]

		color = color << 1;
 80055a0:	6a3b      	ldr	r3, [r7, #32]
 80055a2:	005b      	lsls	r3, r3, #1
 80055a4:	623b      	str	r3, [r7, #32]
	for(int bit= 0; bit<24; ++bit) {
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	3301      	adds	r3, #1
 80055aa:	617b      	str	r3, [r7, #20]
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	2b17      	cmp	r3, #23
 80055b0:	ddd3      	ble.n	800555a <setLedColor+0x3a>
	}
}
 80055b2:	bf00      	nop
 80055b4:	372c      	adds	r7, #44	; 0x2c
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr
 80055be:	bf00      	nop
 80055c0:	20000194 	.word	0x20000194

080055c4 <resetLeds>:
	for(int led=0; led<NUM_LEDS; ++ led) {
		setLedColor(led, red, green, blue);
	}
}

void resetLeds() {
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b082      	sub	sp, #8
 80055c8:	af00      	add	r7, sp, #0
	for(int i=0; i<NUM_LEDS; ++i) {
 80055ca:	2300      	movs	r3, #0
 80055cc:	607b      	str	r3, [r7, #4]
 80055ce:	e008      	b.n	80055e2 <resetLeds+0x1e>
		setLedColor(i, 0,0,0);
 80055d0:	2300      	movs	r3, #0
 80055d2:	2200      	movs	r2, #0
 80055d4:	2100      	movs	r1, #0
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f7ff ffa2 	bl	8005520 <setLedColor>
	for(int i=0; i<NUM_LEDS; ++i) {
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	3301      	adds	r3, #1
 80055e0:	607b      	str	r3, [r7, #4]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2b17      	cmp	r3, #23
 80055e6:	ddf3      	ble.n	80055d0 <resetLeds+0xc>
	}
}
 80055e8:	bf00      	nop
 80055ea:	3708      	adds	r7, #8
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}

080055f0 <updateLeds>:

void updateLeds(SPI_HandleTypeDef * spi) {
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b082      	sub	sp, #8
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
	HAL_SPI_Transmit_DMA(spi, led_data, sizeof(led_data));
 80055f8:	f44f 7291 	mov.w	r2, #290	; 0x122
 80055fc:	4905      	ldr	r1, [pc, #20]	; (8005614 <updateLeds+0x24>)
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f7fe f8e2 	bl	80037c8 <HAL_SPI_Transmit_DMA>
	HAL_Delay(1);
 8005604:	2001      	movs	r0, #1
 8005606:	f7fa ffcf 	bl	80005a8 <HAL_Delay>
}
 800560a:	bf00      	nop
 800560c:	3708      	adds	r7, #8
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}
 8005612:	bf00      	nop
 8005614:	20000194 	.word	0x20000194

08005618 <LL_RCC_LSE_SetDriveCapability>:
{
 8005618:	b480      	push	{r7}
 800561a:	b083      	sub	sp, #12
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8005620:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005624:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005628:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800562c:	f023 0218 	bic.w	r2, r3, #24
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4313      	orrs	r3, r2
 8005634:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8005638:	bf00      	nop
 800563a:	370c      	adds	r7, #12
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr

08005644 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8005644:	b480      	push	{r7}
 8005646:	b085      	sub	sp, #20
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800564c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005650:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005654:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	4313      	orrs	r3, r2
 800565a:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800565c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005660:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4013      	ands	r3, r2
 8005666:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005668:	68fb      	ldr	r3, [r7, #12]
}
 800566a:	bf00      	nop
 800566c:	3714      	adds	r7, #20
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr

08005676 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_ADC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8005676:	b480      	push	{r7}
 8005678:	b085      	sub	sp, #20
 800567a:	af00      	add	r7, sp, #0
 800567c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800567e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005682:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005686:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	4313      	orrs	r3, r2
 800568c:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800568e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005692:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4013      	ands	r3, r2
 8005698:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800569a:	68fb      	ldr	r3, [r7, #12]
}
 800569c:	bf00      	nop
 800569e:	3714      	adds	r7, #20
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr

080056a8 <initLedColors>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void initLedColors() {
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b084      	sub	sp, #16
 80056ac:	af00      	add	r7, sp, #0
	int col=16;
 80056ae:	2310      	movs	r3, #16
 80056b0:	60bb      	str	r3, [r7, #8]
	int colBoost = 24;
 80056b2:	2318      	movs	r3, #24
 80056b4:	607b      	str	r3, [r7, #4]
	  for(int led=0; led<4; ++led) {
 80056b6:	2300      	movs	r3, #0
 80056b8:	60fb      	str	r3, [r7, #12]
 80056ba:	e02f      	b.n	800571c <initLedColors+0x74>
		  setLedColor(0+led, col, 0, 0);
 80056bc:	2300      	movs	r3, #0
 80056be:	2200      	movs	r2, #0
 80056c0:	68b9      	ldr	r1, [r7, #8]
 80056c2:	68f8      	ldr	r0, [r7, #12]
 80056c4:	f7ff ff2c 	bl	8005520 <setLedColor>
		  setLedColor(4+led, 0, col, 0);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	1d18      	adds	r0, r3, #4
 80056cc:	2300      	movs	r3, #0
 80056ce:	68ba      	ldr	r2, [r7, #8]
 80056d0:	2100      	movs	r1, #0
 80056d2:	f7ff ff25 	bl	8005520 <setLedColor>
		  setLedColor(8+led, 0, 0, colBoost);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f103 0008 	add.w	r0, r3, #8
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2200      	movs	r2, #0
 80056e0:	2100      	movs	r1, #0
 80056e2:	f7ff ff1d 	bl	8005520 <setLedColor>
		  setLedColor(12+led, col, 0, col);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	f103 000c 	add.w	r0, r3, #12
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	2200      	movs	r2, #0
 80056f0:	68b9      	ldr	r1, [r7, #8]
 80056f2:	f7ff ff15 	bl	8005520 <setLedColor>
		  setLedColor(16+led, 0, col, col);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f103 0010 	add.w	r0, r3, #16
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	68ba      	ldr	r2, [r7, #8]
 8005700:	2100      	movs	r1, #0
 8005702:	f7ff ff0d 	bl	8005520 <setLedColor>
		  setLedColor(20+led, col, col, 0);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	f103 0014 	add.w	r0, r3, #20
 800570c:	2300      	movs	r3, #0
 800570e:	68ba      	ldr	r2, [r7, #8]
 8005710:	68b9      	ldr	r1, [r7, #8]
 8005712:	f7ff ff05 	bl	8005520 <setLedColor>
	  for(int led=0; led<4; ++led) {
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	3301      	adds	r3, #1
 800571a:	60fb      	str	r3, [r7, #12]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2b03      	cmp	r3, #3
 8005720:	ddcc      	ble.n	80056bc <initLedColors+0x14>
	  }
}
 8005722:	bf00      	nop
 8005724:	3710      	adds	r7, #16
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}
	...

0800572c <printScore>:

void printScore() {
 800572c:	b580      	push	{r7, lr}
 800572e:	b084      	sub	sp, #16
 8005730:	af00      	add	r7, sp, #0
	char text[4] = {' ', ' ', ' ', ' '};
 8005732:	4b19      	ldr	r3, [pc, #100]	; (8005798 <printScore+0x6c>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	607b      	str	r3, [r7, #4]
	int left = scoreRed % 10;
 8005738:	4b18      	ldr	r3, [pc, #96]	; (800579c <printScore+0x70>)
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	4b18      	ldr	r3, [pc, #96]	; (80057a0 <printScore+0x74>)
 800573e:	fb83 1302 	smull	r1, r3, r3, r2
 8005742:	1099      	asrs	r1, r3, #2
 8005744:	17d3      	asrs	r3, r2, #31
 8005746:	1ac9      	subs	r1, r1, r3
 8005748:	460b      	mov	r3, r1
 800574a:	009b      	lsls	r3, r3, #2
 800574c:	440b      	add	r3, r1
 800574e:	005b      	lsls	r3, r3, #1
 8005750:	1ad3      	subs	r3, r2, r3
 8005752:	60fb      	str	r3, [r7, #12]
	int right = scoreYellow % 10;
 8005754:	4b13      	ldr	r3, [pc, #76]	; (80057a4 <printScore+0x78>)
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	4b11      	ldr	r3, [pc, #68]	; (80057a0 <printScore+0x74>)
 800575a:	fb83 1302 	smull	r1, r3, r3, r2
 800575e:	1099      	asrs	r1, r3, #2
 8005760:	17d3      	asrs	r3, r2, #31
 8005762:	1ac9      	subs	r1, r1, r3
 8005764:	460b      	mov	r3, r1
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	440b      	add	r3, r1
 800576a:	005b      	lsls	r3, r3, #1
 800576c:	1ad3      	subs	r3, r2, r3
 800576e:	60bb      	str	r3, [r7, #8]
	text[0] = '0' + left;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	b2db      	uxtb	r3, r3
 8005774:	3330      	adds	r3, #48	; 0x30
 8005776:	b2db      	uxtb	r3, r3
 8005778:	713b      	strb	r3, [r7, #4]
	text[3] = '0' + right;
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	b2db      	uxtb	r3, r3
 800577e:	3330      	adds	r3, #48	; 0x30
 8005780:	b2db      	uxtb	r3, r3
 8005782:	71fb      	strb	r3, [r7, #7]
	segments_print(&hi2c1, 0x70, text);
 8005784:	1d3b      	adds	r3, r7, #4
 8005786:	461a      	mov	r2, r3
 8005788:	2170      	movs	r1, #112	; 0x70
 800578a:	4807      	ldr	r0, [pc, #28]	; (80057a8 <printScore+0x7c>)
 800578c:	f000 fb40 	bl	8005e10 <segments_print>
}
 8005790:	bf00      	nop
 8005792:	3710      	adds	r7, #16
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}
 8005798:	0800647c 	.word	0x0800647c
 800579c:	200002b8 	.word	0x200002b8
 80057a0:	66666667 	.word	0x66666667
 80057a4:	200002bc 	.word	0x200002bc
 80057a8:	200002c8 	.word	0x200002c8

080057ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b086      	sub	sp, #24
 80057b0:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80057b2:	f7fa fe75 	bl	80004a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80057b6:	f000 f87d 	bl	80058b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80057ba:	f000 fa29 	bl	8005c10 <MX_GPIO_Init>
  MX_DMA_Init();
 80057be:	f000 fa15 	bl	8005bec <MX_DMA_Init>
  MX_USART1_UART_Init();
 80057c2:	f000 f99d 	bl	8005b00 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 80057c6:	f000 f9e9 	bl	8005b9c <MX_USB_PCD_Init>
  MX_I2C1_Init();
 80057ca:	f000 f91b 	bl	8005a04 <MX_I2C1_Init>
  MX_SPI1_Init();
 80057ce:	f000 f959 	bl	8005a84 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  segments_init(&hi2c1, 0x70);
 80057d2:	2170      	movs	r1, #112	; 0x70
 80057d4:	4831      	ldr	r0, [pc, #196]	; (800589c <main+0xf0>)
 80057d6:	f000 fa6a 	bl	8005cae <segments_init>
  printScore();
 80057da:	f7ff ffa7 	bl	800572c <printScore>

  resetLeds();
 80057de:	f7ff fef1 	bl	80055c4 <resetLeds>
  initLedColors();
 80057e2:	f7ff ff61 	bl	80056a8 <initLedColors>
  updateLeds(&hspi1);
 80057e6:	482e      	ldr	r0, [pc, #184]	; (80058a0 <main+0xf4>)
 80057e8:	f7ff ff02 	bl	80055f0 <updateLeds>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  int speed = 2;
 80057ec:	2302      	movs	r3, #2
 80057ee:	60bb      	str	r3, [r7, #8]

  int waitValue = 140/speed;
 80057f0:	228c      	movs	r2, #140	; 0x8c
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	fb92 f3f3 	sdiv	r3, r2, r3
 80057f8:	607b      	str	r3, [r7, #4]

  while (1)
  {
	  for(int i=0; i<speed; ++i) {
 80057fa:	2300      	movs	r3, #0
 80057fc:	617b      	str	r3, [r7, #20]
 80057fe:	e012      	b.n	8005826 <main+0x7a>
		  HAL_Delay(waitValue);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	4618      	mov	r0, r3
 8005804:	f7fa fed0 	bl	80005a8 <HAL_Delay>
		  for(int voice=0; voice<4; ++voice) {
 8005808:	2300      	movs	r3, #0
 800580a:	613b      	str	r3, [r7, #16]
 800580c:	e005      	b.n	800581a <main+0x6e>
			  leds_scrollNote(voice);
 800580e:	6938      	ldr	r0, [r7, #16]
 8005810:	f7ff fe5e 	bl	80054d0 <leds_scrollNote>
		  for(int voice=0; voice<4; ++voice) {
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	3301      	adds	r3, #1
 8005818:	613b      	str	r3, [r7, #16]
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	2b03      	cmp	r3, #3
 800581e:	ddf6      	ble.n	800580e <main+0x62>
	  for(int i=0; i<speed; ++i) {
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	3301      	adds	r3, #1
 8005824:	617b      	str	r3, [r7, #20]
 8005826:	697a      	ldr	r2, [r7, #20]
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	429a      	cmp	r2, r3
 800582c:	dbe8      	blt.n	8005800 <main+0x54>
		  }
	  }

	  for(int voice=0; voice<4; ++voice) {
 800582e:	2300      	movs	r3, #0
 8005830:	60fb      	str	r3, [r7, #12]
 8005832:	e00e      	b.n	8005852 <main+0xa6>
		  if (pattern[patternOffset + voice] > 0) {
 8005834:	4b1b      	ldr	r3, [pc, #108]	; (80058a4 <main+0xf8>)
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	4413      	add	r3, r2
 800583c:	4a1a      	ldr	r2, [pc, #104]	; (80058a8 <main+0xfc>)
 800583e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005842:	2b00      	cmp	r3, #0
 8005844:	dd02      	ble.n	800584c <main+0xa0>
			  leds_playNote(voice);
 8005846:	68f8      	ldr	r0, [r7, #12]
 8005848:	f7ff fe08 	bl	800545c <leds_playNote>
	  for(int voice=0; voice<4; ++voice) {
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	3301      	adds	r3, #1
 8005850:	60fb      	str	r3, [r7, #12]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2b03      	cmp	r3, #3
 8005856:	dded      	ble.n	8005834 <main+0x88>
		  }
	  }
	  patternOffset += 4;
 8005858:	4b12      	ldr	r3, [pc, #72]	; (80058a4 <main+0xf8>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	3304      	adds	r3, #4
 800585e:	4a11      	ldr	r2, [pc, #68]	; (80058a4 <main+0xf8>)
 8005860:	6013      	str	r3, [r2, #0]
	  if (patternOffset >= sizeof(pattern) / sizeof(int)) {
 8005862:	4b10      	ldr	r3, [pc, #64]	; (80058a4 <main+0xf8>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	2b4f      	cmp	r3, #79	; 0x4f
 8005868:	d902      	bls.n	8005870 <main+0xc4>
		  patternOffset = 0;
 800586a:	4b0e      	ldr	r3, [pc, #56]	; (80058a4 <main+0xf8>)
 800586c:	2200      	movs	r2, #0
 800586e:	601a      	str	r2, [r3, #0]
	  }
	  updateLeds(&hspi1);
 8005870:	480b      	ldr	r0, [pc, #44]	; (80058a0 <main+0xf4>)
 8005872:	f7ff febd 	bl	80055f0 <updateLeds>
		//rotateLeds();

	  scoreRed = ((scoreRed + 1) % 10);
 8005876:	4b0d      	ldr	r3, [pc, #52]	; (80058ac <main+0x100>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	1c59      	adds	r1, r3, #1
 800587c:	4b0c      	ldr	r3, [pc, #48]	; (80058b0 <main+0x104>)
 800587e:	fb83 2301 	smull	r2, r3, r3, r1
 8005882:	109a      	asrs	r2, r3, #2
 8005884:	17cb      	asrs	r3, r1, #31
 8005886:	1ad2      	subs	r2, r2, r3
 8005888:	4613      	mov	r3, r2
 800588a:	009b      	lsls	r3, r3, #2
 800588c:	4413      	add	r3, r2
 800588e:	005b      	lsls	r3, r3, #1
 8005890:	1aca      	subs	r2, r1, r3
 8005892:	4b06      	ldr	r3, [pc, #24]	; (80058ac <main+0x100>)
 8005894:	601a      	str	r2, [r3, #0]
	  printScore();
 8005896:	f7ff ff49 	bl	800572c <printScore>
	  for(int i=0; i<speed; ++i) {
 800589a:	e7ae      	b.n	80057fa <main+0x4e>
 800589c:	200002c8 	.word	0x200002c8
 80058a0:	200003a0 	.word	0x200003a0
 80058a4:	200002c0 	.word	0x200002c0
 80058a8:	20000028 	.word	0x20000028
 80058ac:	200002b8 	.word	0x200002b8
 80058b0:	66666667 	.word	0x66666667

080058b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b0ae      	sub	sp, #184	; 0xb8
 80058b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80058ba:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80058be:	2248      	movs	r2, #72	; 0x48
 80058c0:	2100      	movs	r1, #0
 80058c2:	4618      	mov	r0, r3
 80058c4:	f000 fda8 	bl	8006418 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80058c8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80058cc:	2200      	movs	r2, #0
 80058ce:	601a      	str	r2, [r3, #0]
 80058d0:	605a      	str	r2, [r3, #4]
 80058d2:	609a      	str	r2, [r3, #8]
 80058d4:	60da      	str	r2, [r3, #12]
 80058d6:	611a      	str	r2, [r3, #16]
 80058d8:	615a      	str	r2, [r3, #20]
 80058da:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80058dc:	1d3b      	adds	r3, r7, #4
 80058de:	2250      	movs	r2, #80	; 0x50
 80058e0:	2100      	movs	r1, #0
 80058e2:	4618      	mov	r0, r3
 80058e4:	f000 fd98 	bl	8006418 <memset>

  /** Macro to configure the PLL multiplication factor 
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 80058e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058f0:	68db      	ldr	r3, [r3, #12]
 80058f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058f6:	60d3      	str	r3, [r2, #12]
  /** Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 80058f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005900:	68db      	ldr	r3, [r3, #12]
 8005902:	f023 0303 	bic.w	r3, r3, #3
 8005906:	f043 0301 	orr.w	r3, r3, #1
 800590a:	60d3      	str	r3, [r2, #12]
  /** Configure LSE Drive Capability 
  */
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800590c:	2000      	movs	r0, #0
 800590e:	f7ff fe83 	bl	8005618 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005912:	4a3b      	ldr	r2, [pc, #236]	; (8005a00 <SystemClock_Config+0x14c>)
 8005914:	4b3a      	ldr	r3, [pc, #232]	; (8005a00 <SystemClock_Config+0x14c>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800591c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005920:	6013      	str	r3, [r2, #0]
 8005922:	4b37      	ldr	r3, [pc, #220]	; (8005a00 <SystemClock_Config+0x14c>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800592a:	603b      	str	r3, [r7, #0]
 800592c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 800592e:	2327      	movs	r3, #39	; 0x27
 8005930:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005932:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005936:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8005938:	2301      	movs	r3, #1
 800593a:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800593c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005940:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8005942:	2301      	movs	r3, #1
 8005944:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005948:	2340      	movs	r3, #64	; 0x40
 800594a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800594e:	2300      	movs	r3, #0
 8005950:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8005954:	2360      	movs	r3, #96	; 0x60
 8005956:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800595a:	2300      	movs	r3, #0
 800595c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005960:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005964:	4618      	mov	r0, r3
 8005966:	f7fc fc73 	bl	8002250 <HAL_RCC_OscConfig>
 800596a:	4603      	mov	r3, r0
 800596c:	2b00      	cmp	r3, #0
 800596e:	d001      	beq.n	8005974 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8005970:	f000 f996 	bl	8005ca0 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8005974:	236f      	movs	r3, #111	; 0x6f
 8005976:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8005978:	2302      	movs	r3, #2
 800597a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800597c:	2300      	movs	r3, #0
 800597e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005980:	2300      	movs	r3, #0
 8005982:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005984:	2300      	movs	r3, #0
 8005986:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8005988:	2300      	movs	r3, #0
 800598a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800598c:	2300      	movs	r3, #0
 800598e:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8005990:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005994:	2101      	movs	r1, #1
 8005996:	4618      	mov	r0, r3
 8005998:	f7fc ffb8 	bl	800290c <HAL_RCC_ClockConfig>
 800599c:	4603      	mov	r3, r0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d001      	beq.n	80059a6 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80059a2:	f000 f97d 	bl	8005ca0 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USART1
 80059a6:	f242 1305 	movw	r3, #8453	; 0x2105
 80059aa:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 80059ac:	2318      	movs	r3, #24
 80059ae:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 80059b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80059b4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 80059b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80059ba:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 80059bc:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80059c0:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 80059c2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80059c6:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80059c8:	2300      	movs	r3, #0
 80059ca:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80059cc:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80059d0:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80059d2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80059d6:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80059d8:	2300      	movs	r3, #0
 80059da:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80059dc:	2310      	movs	r3, #16
 80059de:	653b      	str	r3, [r7, #80]	; 0x50

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80059e0:	1d3b      	adds	r3, r7, #4
 80059e2:	4618      	mov	r0, r3
 80059e4:	f7fd fbdc 	bl	80031a0 <HAL_RCCEx_PeriphCLKConfig>
 80059e8:	4603      	mov	r3, r0
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d001      	beq.n	80059f2 <SystemClock_Config+0x13e>
  {
    Error_Handler();
 80059ee:	f000 f957 	bl	8005ca0 <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80059f2:	f7fd fd4a 	bl	800348a <HAL_RCCEx_EnableMSIPLLMode>
}
 80059f6:	bf00      	nop
 80059f8:	37b8      	adds	r7, #184	; 0xb8
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	bf00      	nop
 8005a00:	58000400 	.word	0x58000400

08005a04 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005a08:	4b1b      	ldr	r3, [pc, #108]	; (8005a78 <MX_I2C1_Init+0x74>)
 8005a0a:	4a1c      	ldr	r2, [pc, #112]	; (8005a7c <MX_I2C1_Init+0x78>)
 8005a0c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8005a0e:	4b1a      	ldr	r3, [pc, #104]	; (8005a78 <MX_I2C1_Init+0x74>)
 8005a10:	4a1b      	ldr	r2, [pc, #108]	; (8005a80 <MX_I2C1_Init+0x7c>)
 8005a12:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8005a14:	4b18      	ldr	r3, [pc, #96]	; (8005a78 <MX_I2C1_Init+0x74>)
 8005a16:	2200      	movs	r2, #0
 8005a18:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005a1a:	4b17      	ldr	r3, [pc, #92]	; (8005a78 <MX_I2C1_Init+0x74>)
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005a20:	4b15      	ldr	r3, [pc, #84]	; (8005a78 <MX_I2C1_Init+0x74>)
 8005a22:	2200      	movs	r2, #0
 8005a24:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8005a26:	4b14      	ldr	r3, [pc, #80]	; (8005a78 <MX_I2C1_Init+0x74>)
 8005a28:	2200      	movs	r2, #0
 8005a2a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005a2c:	4b12      	ldr	r3, [pc, #72]	; (8005a78 <MX_I2C1_Init+0x74>)
 8005a2e:	2200      	movs	r2, #0
 8005a30:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005a32:	4b11      	ldr	r3, [pc, #68]	; (8005a78 <MX_I2C1_Init+0x74>)
 8005a34:	2200      	movs	r2, #0
 8005a36:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005a38:	4b0f      	ldr	r3, [pc, #60]	; (8005a78 <MX_I2C1_Init+0x74>)
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005a3e:	480e      	ldr	r0, [pc, #56]	; (8005a78 <MX_I2C1_Init+0x74>)
 8005a40:	f7fb fadc 	bl	8000ffc <HAL_I2C_Init>
 8005a44:	4603      	mov	r3, r0
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d001      	beq.n	8005a4e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8005a4a:	f000 f929 	bl	8005ca0 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005a4e:	2100      	movs	r1, #0
 8005a50:	4809      	ldr	r0, [pc, #36]	; (8005a78 <MX_I2C1_Init+0x74>)
 8005a52:	f7fb fecf 	bl	80017f4 <HAL_I2CEx_ConfigAnalogFilter>
 8005a56:	4603      	mov	r3, r0
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d001      	beq.n	8005a60 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8005a5c:	f000 f920 	bl	8005ca0 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8005a60:	2100      	movs	r1, #0
 8005a62:	4805      	ldr	r0, [pc, #20]	; (8005a78 <MX_I2C1_Init+0x74>)
 8005a64:	f7fb ff11 	bl	800188a <HAL_I2CEx_ConfigDigitalFilter>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d001      	beq.n	8005a72 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8005a6e:	f000 f917 	bl	8005ca0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005a72:	bf00      	nop
 8005a74:	bd80      	pop	{r7, pc}
 8005a76:	bf00      	nop
 8005a78:	200002c8 	.word	0x200002c8
 8005a7c:	40005400 	.word	0x40005400
 8005a80:	00707cbb 	.word	0x00707cbb

08005a84 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8005a88:	4b1b      	ldr	r3, [pc, #108]	; (8005af8 <MX_SPI1_Init+0x74>)
 8005a8a:	4a1c      	ldr	r2, [pc, #112]	; (8005afc <MX_SPI1_Init+0x78>)
 8005a8c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005a8e:	4b1a      	ldr	r3, [pc, #104]	; (8005af8 <MX_SPI1_Init+0x74>)
 8005a90:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005a94:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005a96:	4b18      	ldr	r3, [pc, #96]	; (8005af8 <MX_SPI1_Init+0x74>)
 8005a98:	2200      	movs	r2, #0
 8005a9a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005a9c:	4b16      	ldr	r3, [pc, #88]	; (8005af8 <MX_SPI1_Init+0x74>)
 8005a9e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005aa2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005aa4:	4b14      	ldr	r3, [pc, #80]	; (8005af8 <MX_SPI1_Init+0x74>)
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8005aaa:	4b13      	ldr	r3, [pc, #76]	; (8005af8 <MX_SPI1_Init+0x74>)
 8005aac:	2201      	movs	r2, #1
 8005aae:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005ab0:	4b11      	ldr	r3, [pc, #68]	; (8005af8 <MX_SPI1_Init+0x74>)
 8005ab2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ab6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8005ab8:	4b0f      	ldr	r3, [pc, #60]	; (8005af8 <MX_SPI1_Init+0x74>)
 8005aba:	2210      	movs	r2, #16
 8005abc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005abe:	4b0e      	ldr	r3, [pc, #56]	; (8005af8 <MX_SPI1_Init+0x74>)
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005ac4:	4b0c      	ldr	r3, [pc, #48]	; (8005af8 <MX_SPI1_Init+0x74>)
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005aca:	4b0b      	ldr	r3, [pc, #44]	; (8005af8 <MX_SPI1_Init+0x74>)
 8005acc:	2200      	movs	r2, #0
 8005ace:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8005ad0:	4b09      	ldr	r3, [pc, #36]	; (8005af8 <MX_SPI1_Init+0x74>)
 8005ad2:	2207      	movs	r2, #7
 8005ad4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005ad6:	4b08      	ldr	r3, [pc, #32]	; (8005af8 <MX_SPI1_Init+0x74>)
 8005ad8:	2200      	movs	r2, #0
 8005ada:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8005adc:	4b06      	ldr	r3, [pc, #24]	; (8005af8 <MX_SPI1_Init+0x74>)
 8005ade:	2200      	movs	r2, #0
 8005ae0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005ae2:	4805      	ldr	r0, [pc, #20]	; (8005af8 <MX_SPI1_Init+0x74>)
 8005ae4:	f7fd fde8 	bl	80036b8 <HAL_SPI_Init>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d001      	beq.n	8005af2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8005aee:	f000 f8d7 	bl	8005ca0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8005af2:	bf00      	nop
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop
 8005af8:	200003a0 	.word	0x200003a0
 8005afc:	40013000 	.word	0x40013000

08005b00 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005b04:	4b23      	ldr	r3, [pc, #140]	; (8005b94 <MX_USART1_UART_Init+0x94>)
 8005b06:	4a24      	ldr	r2, [pc, #144]	; (8005b98 <MX_USART1_UART_Init+0x98>)
 8005b08:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005b0a:	4b22      	ldr	r3, [pc, #136]	; (8005b94 <MX_USART1_UART_Init+0x94>)
 8005b0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005b10:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_7B;
 8005b12:	4b20      	ldr	r3, [pc, #128]	; (8005b94 <MX_USART1_UART_Init+0x94>)
 8005b14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b18:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005b1a:	4b1e      	ldr	r3, [pc, #120]	; (8005b94 <MX_USART1_UART_Init+0x94>)
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005b20:	4b1c      	ldr	r3, [pc, #112]	; (8005b94 <MX_USART1_UART_Init+0x94>)
 8005b22:	2200      	movs	r2, #0
 8005b24:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005b26:	4b1b      	ldr	r3, [pc, #108]	; (8005b94 <MX_USART1_UART_Init+0x94>)
 8005b28:	220c      	movs	r2, #12
 8005b2a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005b2c:	4b19      	ldr	r3, [pc, #100]	; (8005b94 <MX_USART1_UART_Init+0x94>)
 8005b2e:	2200      	movs	r2, #0
 8005b30:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005b32:	4b18      	ldr	r3, [pc, #96]	; (8005b94 <MX_USART1_UART_Init+0x94>)
 8005b34:	2200      	movs	r2, #0
 8005b36:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005b38:	4b16      	ldr	r3, [pc, #88]	; (8005b94 <MX_USART1_UART_Init+0x94>)
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005b3e:	4b15      	ldr	r3, [pc, #84]	; (8005b94 <MX_USART1_UART_Init+0x94>)
 8005b40:	2200      	movs	r2, #0
 8005b42:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005b44:	4b13      	ldr	r3, [pc, #76]	; (8005b94 <MX_USART1_UART_Init+0x94>)
 8005b46:	2200      	movs	r2, #0
 8005b48:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005b4a:	4812      	ldr	r0, [pc, #72]	; (8005b94 <MX_USART1_UART_Init+0x94>)
 8005b4c:	f7fe f904 	bl	8003d58 <HAL_UART_Init>
 8005b50:	4603      	mov	r3, r0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d001      	beq.n	8005b5a <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8005b56:	f000 f8a3 	bl	8005ca0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005b5a:	2100      	movs	r1, #0
 8005b5c:	480d      	ldr	r0, [pc, #52]	; (8005b94 <MX_USART1_UART_Init+0x94>)
 8005b5e:	f7ff fb3e 	bl	80051de <HAL_UARTEx_SetTxFifoThreshold>
 8005b62:	4603      	mov	r3, r0
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d001      	beq.n	8005b6c <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8005b68:	f000 f89a 	bl	8005ca0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005b6c:	2100      	movs	r1, #0
 8005b6e:	4809      	ldr	r0, [pc, #36]	; (8005b94 <MX_USART1_UART_Init+0x94>)
 8005b70:	f7ff fb73 	bl	800525a <HAL_UARTEx_SetRxFifoThreshold>
 8005b74:	4603      	mov	r3, r0
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d001      	beq.n	8005b7e <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8005b7a:	f000 f891 	bl	8005ca0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8005b7e:	4805      	ldr	r0, [pc, #20]	; (8005b94 <MX_USART1_UART_Init+0x94>)
 8005b80:	f7ff faf4 	bl	800516c <HAL_UARTEx_DisableFifoMode>
 8005b84:	4603      	mov	r3, r0
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d001      	beq.n	8005b8e <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8005b8a:	f000 f889 	bl	8005ca0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005b8e:	bf00      	nop
 8005b90:	bd80      	pop	{r7, pc}
 8005b92:	bf00      	nop
 8005b94:	20000314 	.word	0x20000314
 8005b98:	40013800 	.word	0x40013800

08005b9c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8005ba0:	4b10      	ldr	r3, [pc, #64]	; (8005be4 <MX_USB_PCD_Init+0x48>)
 8005ba2:	4a11      	ldr	r2, [pc, #68]	; (8005be8 <MX_USB_PCD_Init+0x4c>)
 8005ba4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8005ba6:	4b0f      	ldr	r3, [pc, #60]	; (8005be4 <MX_USB_PCD_Init+0x48>)
 8005ba8:	2208      	movs	r2, #8
 8005baa:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8005bac:	4b0d      	ldr	r3, [pc, #52]	; (8005be4 <MX_USB_PCD_Init+0x48>)
 8005bae:	2202      	movs	r2, #2
 8005bb0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8005bb2:	4b0c      	ldr	r3, [pc, #48]	; (8005be4 <MX_USB_PCD_Init+0x48>)
 8005bb4:	2202      	movs	r2, #2
 8005bb6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8005bb8:	4b0a      	ldr	r3, [pc, #40]	; (8005be4 <MX_USB_PCD_Init+0x48>)
 8005bba:	2200      	movs	r2, #0
 8005bbc:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8005bbe:	4b09      	ldr	r3, [pc, #36]	; (8005be4 <MX_USB_PCD_Init+0x48>)
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8005bc4:	4b07      	ldr	r3, [pc, #28]	; (8005be4 <MX_USB_PCD_Init+0x48>)
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8005bca:	4b06      	ldr	r3, [pc, #24]	; (8005be4 <MX_USB_PCD_Init+0x48>)
 8005bcc:	2200      	movs	r2, #0
 8005bce:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8005bd0:	4804      	ldr	r0, [pc, #16]	; (8005be4 <MX_USB_PCD_Init+0x48>)
 8005bd2:	f7fb fea6 	bl	8001922 <HAL_PCD_Init>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d001      	beq.n	8005be0 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8005bdc:	f000 f860 	bl	8005ca0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8005be0:	bf00      	nop
 8005be2:	bd80      	pop	{r7, pc}
 8005be4:	20000404 	.word	0x20000404
 8005be8:	40006800 	.word	0x40006800

08005bec <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8005bf0:	2004      	movs	r0, #4
 8005bf2:	f7ff fd27 	bl	8005644 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005bf6:	2001      	movs	r0, #1
 8005bf8:	f7ff fd24 	bl	8005644 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	2100      	movs	r1, #0
 8005c00:	200b      	movs	r0, #11
 8005c02:	f7fa fdcc 	bl	800079e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8005c06:	200b      	movs	r0, #11
 8005c08:	f7fa fde3 	bl	80007d2 <HAL_NVIC_EnableIRQ>

}
 8005c0c:	bf00      	nop
 8005c0e:	bd80      	pop	{r7, pc}

08005c10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b086      	sub	sp, #24
 8005c14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c16:	1d3b      	adds	r3, r7, #4
 8005c18:	2200      	movs	r2, #0
 8005c1a:	601a      	str	r2, [r3, #0]
 8005c1c:	605a      	str	r2, [r3, #4]
 8005c1e:	609a      	str	r2, [r3, #8]
 8005c20:	60da      	str	r2, [r3, #12]
 8005c22:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005c24:	2004      	movs	r0, #4
 8005c26:	f7ff fd26 	bl	8005676 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c2a:	2002      	movs	r0, #2
 8005c2c:	f7ff fd23 	bl	8005676 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c30:	2001      	movs	r0, #1
 8005c32:	f7ff fd20 	bl	8005676 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005c36:	2008      	movs	r0, #8
 8005c38:	f7ff fd1d 	bl	8005676 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	2123      	movs	r1, #35	; 0x23
 8005c40:	4814      	ldr	r0, [pc, #80]	; (8005c94 <MX_GPIO_Init+0x84>)
 8005c42:	f7fb f9c3 	bl	8000fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8005c46:	2310      	movs	r3, #16
 8005c48:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8005c52:	1d3b      	adds	r3, r7, #4
 8005c54:	4619      	mov	r1, r3
 8005c56:	4810      	ldr	r0, [pc, #64]	; (8005c98 <MX_GPIO_Init+0x88>)
 8005c58:	f7fb f848 	bl	8000cec <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8005c5c:	2323      	movs	r3, #35	; 0x23
 8005c5e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005c60:	2301      	movs	r3, #1
 8005c62:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c64:	2300      	movs	r3, #0
 8005c66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c6c:	1d3b      	adds	r3, r7, #4
 8005c6e:	4619      	mov	r1, r3
 8005c70:	4808      	ldr	r0, [pc, #32]	; (8005c94 <MX_GPIO_Init+0x84>)
 8005c72:	f7fb f83b 	bl	8000cec <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8005c76:	2303      	movs	r3, #3
 8005c78:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005c82:	1d3b      	adds	r3, r7, #4
 8005c84:	4619      	mov	r1, r3
 8005c86:	4805      	ldr	r0, [pc, #20]	; (8005c9c <MX_GPIO_Init+0x8c>)
 8005c88:	f7fb f830 	bl	8000cec <HAL_GPIO_Init>

}
 8005c8c:	bf00      	nop
 8005c8e:	3718      	adds	r7, #24
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}
 8005c94:	48000400 	.word	0x48000400
 8005c98:	48000800 	.word	0x48000800
 8005c9c:	48000c00 	.word	0x48000c00

08005ca0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005ca4:	bf00      	nop
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr

08005cae <segments_init>:
uint8_t charBuffer[] = {0,0x5C, 1,0x5C, 2,0, 3,0x5C, 4,0x5C};

// private
void initChars();

int segments_init(I2C_HandleTypeDef * i2c, uint16_t deviceAddress) {
 8005cae:	b580      	push	{r7, lr}
 8005cb0:	b08a      	sub	sp, #40	; 0x28
 8005cb2:	af02      	add	r7, sp, #8
 8005cb4:	6078      	str	r0, [r7, #4]
 8005cb6:	460b      	mov	r3, r1
 8005cb8:	807b      	strh	r3, [r7, #2]

	initChars();
 8005cba:	f000 f863 	bl	8005d84 <initChars>

	deviceAddress <<= 1;
 8005cbe:	887b      	ldrh	r3, [r7, #2]
 8005cc0:	005b      	lsls	r3, r3, #1
 8005cc2:	807b      	strh	r3, [r7, #2]
	uint32_t DELAY = 500;
 8005cc4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8005cc8:	617b      	str	r3, [r7, #20]

	HAL_StatusTypeDef result = 0;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	77fb      	strb	r3, [r7, #31]
	for(int i=0; i<10; ++i) {
 8005cce:	2300      	movs	r3, #0
 8005cd0:	61bb      	str	r3, [r7, #24]
 8005cd2:	e010      	b.n	8005cf6 <segments_init+0x48>
	  result = HAL_I2C_IsDeviceReady(i2c, deviceAddress, 3, 200);
 8005cd4:	8879      	ldrh	r1, [r7, #2]
 8005cd6:	23c8      	movs	r3, #200	; 0xc8
 8005cd8:	2203      	movs	r2, #3
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f7fb fb10 	bl	8001300 <HAL_I2C_IsDeviceReady>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	77fb      	strb	r3, [r7, #31]
	  if (result == HAL_OK) {
 8005ce4:	7ffb      	ldrb	r3, [r7, #31]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d009      	beq.n	8005cfe <segments_init+0x50>
		  break;
	  }
	  HAL_Delay(DELAY);
 8005cea:	6978      	ldr	r0, [r7, #20]
 8005cec:	f7fa fc5c 	bl	80005a8 <HAL_Delay>
	for(int i=0; i<10; ++i) {
 8005cf0:	69bb      	ldr	r3, [r7, #24]
 8005cf2:	3301      	adds	r3, #1
 8005cf4:	61bb      	str	r3, [r7, #24]
 8005cf6:	69bb      	ldr	r3, [r7, #24]
 8005cf8:	2b09      	cmp	r3, #9
 8005cfa:	ddeb      	ble.n	8005cd4 <segments_init+0x26>
 8005cfc:	e000      	b.n	8005d00 <segments_init+0x52>
		  break;
 8005cfe:	bf00      	nop
	}

	if (result != HAL_OK) {
 8005d00:	7ffb      	ldrb	r3, [r7, #31]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d001      	beq.n	8005d0a <segments_init+0x5c>
	  return result;
 8005d06:	7ffb      	ldrb	r3, [r7, #31]
 8005d08:	e037      	b.n	8005d7a <segments_init+0xcc>
	}

	uint8_t sysOn[] = {0x20 | 1};	// writeCommand(SYSTEM_SETUP_REGISTER, SYSTEM_SETUP_ON);
 8005d0a:	2321      	movs	r3, #33	; 0x21
 8005d0c:	743b      	strb	r3, [r7, #16]
	result = HAL_I2C_Master_Transmit(i2c, deviceAddress, sysOn, 1, 100);
 8005d0e:	f107 0210 	add.w	r2, r7, #16
 8005d12:	8879      	ldrh	r1, [r7, #2]
 8005d14:	2364      	movs	r3, #100	; 0x64
 8005d16:	9300      	str	r3, [sp, #0]
 8005d18:	2301      	movs	r3, #1
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f7fb f9fc 	bl	8001118 <HAL_I2C_Master_Transmit>
 8005d20:	4603      	mov	r3, r0
 8005d22:	77fb      	strb	r3, [r7, #31]
	if (result != HAL_OK) {
 8005d24:	7ffb      	ldrb	r3, [r7, #31]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d001      	beq.n	8005d2e <segments_init+0x80>
	  return result;
 8005d2a:	7ffb      	ldrb	r3, [r7, #31]
 8005d2c:	e025      	b.n	8005d7a <segments_init+0xcc>
	}

	HAL_Delay(DELAY);
 8005d2e:	6978      	ldr	r0, [r7, #20]
 8005d30:	f7fa fc3a 	bl	80005a8 <HAL_Delay>
	uint8_t dispOn[] = {0x80 | 1 | 0}; // writeCommand(DISPLAY_SETUP_REGISTER, DISPLAY_SETUP_ON | DISPLAY_SETUP_BLINK_NONE);
 8005d34:	2381      	movs	r3, #129	; 0x81
 8005d36:	733b      	strb	r3, [r7, #12]
	result = HAL_I2C_Master_Transmit(i2c, deviceAddress, dispOn, 1, 100);
 8005d38:	f107 020c 	add.w	r2, r7, #12
 8005d3c:	8879      	ldrh	r1, [r7, #2]
 8005d3e:	2364      	movs	r3, #100	; 0x64
 8005d40:	9300      	str	r3, [sp, #0]
 8005d42:	2301      	movs	r3, #1
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f7fb f9e7 	bl	8001118 <HAL_I2C_Master_Transmit>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	77fb      	strb	r3, [r7, #31]
	if (result != HAL_OK) {
 8005d4e:	7ffb      	ldrb	r3, [r7, #31]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d001      	beq.n	8005d58 <segments_init+0xaa>
	  return result;
 8005d54:	7ffb      	ldrb	r3, [r7, #31]
 8005d56:	e010      	b.n	8005d7a <segments_init+0xcc>
	}

	HAL_Delay(DELAY);
 8005d58:	6978      	ldr	r0, [r7, #20]
 8005d5a:	f7fa fc25 	bl	80005a8 <HAL_Delay>
	uint8_t bright[] = {0xE0| 7};	// writeCommand(BRIGTHNESS_REGISTER, 7);
 8005d5e:	23e7      	movs	r3, #231	; 0xe7
 8005d60:	723b      	strb	r3, [r7, #8]
	result = HAL_I2C_Master_Transmit(i2c, deviceAddress, bright, 1, 100);
 8005d62:	f107 0208 	add.w	r2, r7, #8
 8005d66:	8879      	ldrh	r1, [r7, #2]
 8005d68:	2364      	movs	r3, #100	; 0x64
 8005d6a:	9300      	str	r3, [sp, #0]
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f7fb f9d2 	bl	8001118 <HAL_I2C_Master_Transmit>
 8005d74:	4603      	mov	r3, r0
 8005d76:	77fb      	strb	r3, [r7, #31]

	return result;
 8005d78:	7ffb      	ldrb	r3, [r7, #31]
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3720      	adds	r7, #32
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}
	...

08005d84 <initChars>:

void initChars() {
 8005d84:	b480      	push	{r7}
 8005d86:	b083      	sub	sp, #12
 8005d88:	af00      	add	r7, sp, #0
	for(int i=0; i<128; ++i) {
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	607b      	str	r3, [r7, #4]
 8005d8e:	e007      	b.n	8005da0 <initChars+0x1c>
		chars[i] = 0x40;
 8005d90:	4a1e      	ldr	r2, [pc, #120]	; (8005e0c <initChars+0x88>)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	4413      	add	r3, r2
 8005d96:	2240      	movs	r2, #64	; 0x40
 8005d98:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<128; ++i) {
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	3301      	adds	r3, #1
 8005d9e:	607b      	str	r3, [r7, #4]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2b7f      	cmp	r3, #127	; 0x7f
 8005da4:	ddf4      	ble.n	8005d90 <initChars+0xc>
	}
	chars[' '] = 0x00;
 8005da6:	4b19      	ldr	r3, [pc, #100]	; (8005e0c <initChars+0x88>)
 8005da8:	2200      	movs	r2, #0
 8005daa:	f883 2020 	strb.w	r2, [r3, #32]
	chars['0'] = 0x3F;
 8005dae:	4b17      	ldr	r3, [pc, #92]	; (8005e0c <initChars+0x88>)
 8005db0:	223f      	movs	r2, #63	; 0x3f
 8005db2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	chars['1'] = 0x06;
 8005db6:	4b15      	ldr	r3, [pc, #84]	; (8005e0c <initChars+0x88>)
 8005db8:	2206      	movs	r2, #6
 8005dba:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	chars['2'] = 0x5B;
 8005dbe:	4b13      	ldr	r3, [pc, #76]	; (8005e0c <initChars+0x88>)
 8005dc0:	225b      	movs	r2, #91	; 0x5b
 8005dc2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	chars['3'] = 0x4F;
 8005dc6:	4b11      	ldr	r3, [pc, #68]	; (8005e0c <initChars+0x88>)
 8005dc8:	224f      	movs	r2, #79	; 0x4f
 8005dca:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	chars['4'] = 0x66;
 8005dce:	4b0f      	ldr	r3, [pc, #60]	; (8005e0c <initChars+0x88>)
 8005dd0:	2266      	movs	r2, #102	; 0x66
 8005dd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	chars['5'] = 0x6D;
 8005dd6:	4b0d      	ldr	r3, [pc, #52]	; (8005e0c <initChars+0x88>)
 8005dd8:	226d      	movs	r2, #109	; 0x6d
 8005dda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	chars['6'] = 0x7D;
 8005dde:	4b0b      	ldr	r3, [pc, #44]	; (8005e0c <initChars+0x88>)
 8005de0:	227d      	movs	r2, #125	; 0x7d
 8005de2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	chars['7'] = 0x07;
 8005de6:	4b09      	ldr	r3, [pc, #36]	; (8005e0c <initChars+0x88>)
 8005de8:	2207      	movs	r2, #7
 8005dea:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	chars['8'] = 0x7F;
 8005dee:	4b07      	ldr	r3, [pc, #28]	; (8005e0c <initChars+0x88>)
 8005df0:	227f      	movs	r2, #127	; 0x7f
 8005df2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	chars['9'] = 0x6F;
 8005df6:	4b05      	ldr	r3, [pc, #20]	; (8005e0c <initChars+0x88>)
 8005df8:	226f      	movs	r2, #111	; 0x6f
 8005dfa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8005dfe:	bf00      	nop
 8005e00:	370c      	adds	r7, #12
 8005e02:	46bd      	mov	sp, r7
 8005e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e08:	4770      	bx	lr
 8005e0a:	bf00      	nop
 8005e0c:	200006d8 	.word	0x200006d8

08005e10 <segments_print>:

int segments_print(I2C_HandleTypeDef * i2c, uint16_t deviceAddress, char * text) {
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b088      	sub	sp, #32
 8005e14:	af02      	add	r7, sp, #8
 8005e16:	60f8      	str	r0, [r7, #12]
 8005e18:	460b      	mov	r3, r1
 8005e1a:	607a      	str	r2, [r7, #4]
 8005e1c:	817b      	strh	r3, [r7, #10]
	deviceAddress <<= 1;
 8005e1e:	897b      	ldrh	r3, [r7, #10]
 8005e20:	005b      	lsls	r3, r3, #1
 8005e22:	817b      	strh	r3, [r7, #10]
	for(size_t i=0; i<4; ++i) {
 8005e24:	2300      	movs	r3, #0
 8005e26:	617b      	str	r3, [r7, #20]
 8005e28:	e022      	b.n	8005e70 <segments_print+0x60>
		if (i < strlen(text)) {
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f7fa f9a8 	bl	8000180 <strlen>
 8005e30:	4602      	mov	r2, r0
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d918      	bls.n	8005e6a <segments_print+0x5a>
			uint8_t c = (uint8_t)text[i];
 8005e38:	687a      	ldr	r2, [r7, #4]
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	781b      	ldrb	r3, [r3, #0]
 8005e40:	74fb      	strb	r3, [r7, #19]
			if (i<2) {
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d808      	bhi.n	8005e5a <segments_print+0x4a>
				charBuffer[i*2 + 1] = chars[c];
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	005b      	lsls	r3, r3, #1
 8005e4c:	3301      	adds	r3, #1
 8005e4e:	7cfa      	ldrb	r2, [r7, #19]
 8005e50:	490f      	ldr	r1, [pc, #60]	; (8005e90 <segments_print+0x80>)
 8005e52:	5c89      	ldrb	r1, [r1, r2]
 8005e54:	4a0f      	ldr	r2, [pc, #60]	; (8005e94 <segments_print+0x84>)
 8005e56:	54d1      	strb	r1, [r2, r3]
 8005e58:	e007      	b.n	8005e6a <segments_print+0x5a>
			} else {
				charBuffer[i*2 + 3] = chars[c];	// skip middle : character
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	005b      	lsls	r3, r3, #1
 8005e5e:	3303      	adds	r3, #3
 8005e60:	7cfa      	ldrb	r2, [r7, #19]
 8005e62:	490b      	ldr	r1, [pc, #44]	; (8005e90 <segments_print+0x80>)
 8005e64:	5c89      	ldrb	r1, [r1, r2]
 8005e66:	4a0b      	ldr	r2, [pc, #44]	; (8005e94 <segments_print+0x84>)
 8005e68:	54d1      	strb	r1, [r2, r3]
	for(size_t i=0; i<4; ++i) {
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	3301      	adds	r3, #1
 8005e6e:	617b      	str	r3, [r7, #20]
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	2b03      	cmp	r3, #3
 8005e74:	d9d9      	bls.n	8005e2a <segments_print+0x1a>
			}
		}
	}
	return HAL_I2C_Master_Transmit(i2c, deviceAddress, charBuffer, 10, 100);
 8005e76:	8979      	ldrh	r1, [r7, #10]
 8005e78:	2364      	movs	r3, #100	; 0x64
 8005e7a:	9300      	str	r3, [sp, #0]
 8005e7c:	230a      	movs	r3, #10
 8005e7e:	4a05      	ldr	r2, [pc, #20]	; (8005e94 <segments_print+0x84>)
 8005e80:	68f8      	ldr	r0, [r7, #12]
 8005e82:	f7fb f949 	bl	8001118 <HAL_I2C_Master_Transmit>
 8005e86:	4603      	mov	r3, r0
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3718      	adds	r7, #24
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}
 8005e90:	200006d8 	.word	0x200006d8
 8005e94:	20000168 	.word	0x20000168

08005e98 <LL_AHB2_GRP1_EnableClock>:
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b085      	sub	sp, #20
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8005ea0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ea4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ea8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	4313      	orrs	r3, r2
 8005eae:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8005eb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005eb4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	4013      	ands	r3, r2
 8005eba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
}
 8005ebe:	bf00      	nop
 8005ec0:	3714      	adds	r7, #20
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr

08005eca <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_USB
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8005eca:	b480      	push	{r7}
 8005ecc:	b085      	sub	sp, #20
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8005ed2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ed6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005eda:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8005ee2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ee6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	4013      	ands	r3, r2
 8005eec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005eee:	68fb      	ldr	r3, [r7, #12]
}
 8005ef0:	bf00      	nop
 8005ef2:	3714      	adds	r7, #20
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efa:	4770      	bx	lr

08005efc <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b085      	sub	sp, #20
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8005f04:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f0c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	4313      	orrs	r3, r2
 8005f12:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8005f14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f18:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	4013      	ands	r3, r2
 8005f1e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005f20:	68fb      	ldr	r3, [r7, #12]
}
 8005f22:	bf00      	nop
 8005f24:	3714      	adds	r7, #20
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr

08005f2e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005f2e:	b480      	push	{r7}
 8005f30:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005f32:	bf00      	nop
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr

08005f3c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b088      	sub	sp, #32
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f44:	f107 030c 	add.w	r3, r7, #12
 8005f48:	2200      	movs	r2, #0
 8005f4a:	601a      	str	r2, [r3, #0]
 8005f4c:	605a      	str	r2, [r3, #4]
 8005f4e:	609a      	str	r2, [r3, #8]
 8005f50:	60da      	str	r2, [r3, #12]
 8005f52:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a0f      	ldr	r2, [pc, #60]	; (8005f98 <HAL_I2C_MspInit+0x5c>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d117      	bne.n	8005f8e <HAL_I2C_MspInit+0x52>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f5e:	2002      	movs	r0, #2
 8005f60:	f7ff ff9a 	bl	8005e98 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005f64:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005f68:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005f6a:	2312      	movs	r3, #18
 8005f6c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f72:	2300      	movs	r3, #0
 8005f74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005f76:	2304      	movs	r3, #4
 8005f78:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005f7a:	f107 030c 	add.w	r3, r7, #12
 8005f7e:	4619      	mov	r1, r3
 8005f80:	4806      	ldr	r0, [pc, #24]	; (8005f9c <HAL_I2C_MspInit+0x60>)
 8005f82:	f7fa feb3 	bl	8000cec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005f86:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8005f8a:	f7ff ff9e 	bl	8005eca <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005f8e:	bf00      	nop
 8005f90:	3720      	adds	r7, #32
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}
 8005f96:	bf00      	nop
 8005f98:	40005400 	.word	0x40005400
 8005f9c:	48000400 	.word	0x48000400

08005fa0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b088      	sub	sp, #32
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005fa8:	f107 030c 	add.w	r3, r7, #12
 8005fac:	2200      	movs	r2, #0
 8005fae:	601a      	str	r2, [r3, #0]
 8005fb0:	605a      	str	r2, [r3, #4]
 8005fb2:	609a      	str	r2, [r3, #8]
 8005fb4:	60da      	str	r2, [r3, #12]
 8005fb6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a24      	ldr	r2, [pc, #144]	; (8006050 <HAL_SPI_MspInit+0xb0>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d141      	bne.n	8006046 <HAL_SPI_MspInit+0xa6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005fc2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005fc6:	f7ff ff99 	bl	8005efc <LL_APB2_GRP1_EnableClock>
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005fca:	2001      	movs	r0, #1
 8005fcc:	f7ff ff64 	bl	8005e98 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration    
    PA1     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7;
 8005fd0:	2382      	movs	r3, #130	; 0x82
 8005fd2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fd4:	2302      	movs	r3, #2
 8005fd6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005fdc:	2303      	movs	r3, #3
 8005fde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005fe0:	2305      	movs	r3, #5
 8005fe2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005fe4:	f107 030c 	add.w	r3, r7, #12
 8005fe8:	4619      	mov	r1, r3
 8005fea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005fee:	f7fa fe7d 	bl	8000cec <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel1;
 8005ff2:	4b18      	ldr	r3, [pc, #96]	; (8006054 <HAL_SPI_MspInit+0xb4>)
 8005ff4:	4a18      	ldr	r2, [pc, #96]	; (8006058 <HAL_SPI_MspInit+0xb8>)
 8005ff6:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8005ff8:	4b16      	ldr	r3, [pc, #88]	; (8006054 <HAL_SPI_MspInit+0xb4>)
 8005ffa:	2207      	movs	r2, #7
 8005ffc:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005ffe:	4b15      	ldr	r3, [pc, #84]	; (8006054 <HAL_SPI_MspInit+0xb4>)
 8006000:	2210      	movs	r2, #16
 8006002:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006004:	4b13      	ldr	r3, [pc, #76]	; (8006054 <HAL_SPI_MspInit+0xb4>)
 8006006:	2200      	movs	r2, #0
 8006008:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800600a:	4b12      	ldr	r3, [pc, #72]	; (8006054 <HAL_SPI_MspInit+0xb4>)
 800600c:	2280      	movs	r2, #128	; 0x80
 800600e:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006010:	4b10      	ldr	r3, [pc, #64]	; (8006054 <HAL_SPI_MspInit+0xb4>)
 8006012:	2200      	movs	r2, #0
 8006014:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006016:	4b0f      	ldr	r3, [pc, #60]	; (8006054 <HAL_SPI_MspInit+0xb4>)
 8006018:	2200      	movs	r2, #0
 800601a:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800601c:	4b0d      	ldr	r3, [pc, #52]	; (8006054 <HAL_SPI_MspInit+0xb4>)
 800601e:	2200      	movs	r2, #0
 8006020:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006022:	4b0c      	ldr	r3, [pc, #48]	; (8006054 <HAL_SPI_MspInit+0xb4>)
 8006024:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8006028:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800602a:	480a      	ldr	r0, [pc, #40]	; (8006054 <HAL_SPI_MspInit+0xb4>)
 800602c:	f7fa fbec 	bl	8000808 <HAL_DMA_Init>
 8006030:	4603      	mov	r3, r0
 8006032:	2b00      	cmp	r3, #0
 8006034:	d001      	beq.n	800603a <HAL_SPI_MspInit+0x9a>
    {
      Error_Handler();
 8006036:	f7ff fe33 	bl	8005ca0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	4a05      	ldr	r2, [pc, #20]	; (8006054 <HAL_SPI_MspInit+0xb4>)
 800603e:	655a      	str	r2, [r3, #84]	; 0x54
 8006040:	4a04      	ldr	r2, [pc, #16]	; (8006054 <HAL_SPI_MspInit+0xb4>)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8006046:	bf00      	nop
 8006048:	3720      	adds	r7, #32
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}
 800604e:	bf00      	nop
 8006050:	40013000 	.word	0x40013000
 8006054:	20000678 	.word	0x20000678
 8006058:	40020008 	.word	0x40020008

0800605c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b088      	sub	sp, #32
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006064:	f107 030c 	add.w	r3, r7, #12
 8006068:	2200      	movs	r2, #0
 800606a:	601a      	str	r2, [r3, #0]
 800606c:	605a      	str	r2, [r3, #4]
 800606e:	609a      	str	r2, [r3, #8]
 8006070:	60da      	str	r2, [r3, #12]
 8006072:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a0e      	ldr	r2, [pc, #56]	; (80060b4 <HAL_UART_MspInit+0x58>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d116      	bne.n	80060ac <HAL_UART_MspInit+0x50>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800607e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8006082:	f7ff ff3b 	bl	8005efc <LL_APB2_GRP1_EnableClock>
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006086:	2002      	movs	r0, #2
 8006088:	f7ff ff06 	bl	8005e98 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800608c:	23c0      	movs	r3, #192	; 0xc0
 800608e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006090:	2302      	movs	r3, #2
 8006092:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006094:	2300      	movs	r3, #0
 8006096:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006098:	2300      	movs	r3, #0
 800609a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800609c:	2307      	movs	r3, #7
 800609e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80060a0:	f107 030c 	add.w	r3, r7, #12
 80060a4:	4619      	mov	r1, r3
 80060a6:	4804      	ldr	r0, [pc, #16]	; (80060b8 <HAL_UART_MspInit+0x5c>)
 80060a8:	f7fa fe20 	bl	8000cec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80060ac:	bf00      	nop
 80060ae:	3720      	adds	r7, #32
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}
 80060b4:	40013800 	.word	0x40013800
 80060b8:	48000400 	.word	0x48000400

080060bc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b088      	sub	sp, #32
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060c4:	f107 030c 	add.w	r3, r7, #12
 80060c8:	2200      	movs	r2, #0
 80060ca:	601a      	str	r2, [r3, #0]
 80060cc:	605a      	str	r2, [r3, #4]
 80060ce:	609a      	str	r2, [r3, #8]
 80060d0:	60da      	str	r2, [r3, #12]
 80060d2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a0f      	ldr	r2, [pc, #60]	; (8006118 <HAL_PCD_MspInit+0x5c>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d118      	bne.n	8006110 <HAL_PCD_MspInit+0x54>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80060de:	2001      	movs	r0, #1
 80060e0:	f7ff feda 	bl	8005e98 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration    
    PA11     ------> USB_DM
    PA12     ------> USB_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80060e4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80060e8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060ea:	2302      	movs	r3, #2
 80060ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060ee:	2300      	movs	r3, #0
 80060f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80060f2:	2300      	movs	r3, #0
 80060f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80060f6:	230a      	movs	r3, #10
 80060f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80060fa:	f107 030c 	add.w	r3, r7, #12
 80060fe:	4619      	mov	r1, r3
 8006100:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006104:	f7fa fdf2 	bl	8000cec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8006108:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800610c:	f7ff fedd 	bl	8005eca <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8006110:	bf00      	nop
 8006112:	3720      	adds	r7, #32
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}
 8006118:	40006800 	.word	0x40006800

0800611c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800611c:	b480      	push	{r7}
 800611e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006120:	bf00      	nop
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr

0800612a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800612a:	b480      	push	{r7}
 800612c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800612e:	e7fe      	b.n	800612e <HardFault_Handler+0x4>

08006130 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006130:	b480      	push	{r7}
 8006132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006134:	e7fe      	b.n	8006134 <MemManage_Handler+0x4>

08006136 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006136:	b480      	push	{r7}
 8006138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800613a:	e7fe      	b.n	800613a <BusFault_Handler+0x4>

0800613c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800613c:	b480      	push	{r7}
 800613e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006140:	e7fe      	b.n	8006140 <UsageFault_Handler+0x4>

08006142 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006142:	b480      	push	{r7}
 8006144:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006146:	bf00      	nop
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr

08006150 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006150:	b480      	push	{r7}
 8006152:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006154:	bf00      	nop
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr

0800615e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800615e:	b480      	push	{r7}
 8006160:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006162:	bf00      	nop
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr

0800616c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006170:	f7fa f9f0 	bl	8000554 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006174:	bf00      	nop
 8006176:	bd80      	pop	{r7, pc}

08006178 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800617c:	4802      	ldr	r0, [pc, #8]	; (8006188 <DMA1_Channel1_IRQHandler+0x10>)
 800617e:	f7fa fc66 	bl	8000a4e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8006182:	bf00      	nop
 8006184:	bd80      	pop	{r7, pc}
 8006186:	bf00      	nop
 8006188:	20000678 	.word	0x20000678

0800618c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800618c:	b480      	push	{r7}
 800618e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8006190:	4b26      	ldr	r3, [pc, #152]	; (800622c <SystemInit+0xa0>)
 8006192:	2200      	movs	r2, #0
 8006194:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8006196:	4a25      	ldr	r2, [pc, #148]	; (800622c <SystemInit+0xa0>)
 8006198:	4b24      	ldr	r3, [pc, #144]	; (800622c <SystemInit+0xa0>)
 800619a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800619e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80061a2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80061a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80061aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f043 0301 	orr.w	r3, r3, #1
 80061b4:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80061b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061ba:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80061be:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80061c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80061c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061c8:	681a      	ldr	r2, [r3, #0]
 80061ca:	4b19      	ldr	r3, [pc, #100]	; (8006230 <SystemInit+0xa4>)
 80061cc:	4013      	ands	r3, r2
 80061ce:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80061d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80061d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061dc:	f023 0305 	bic.w	r3, r3, #5
 80061e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80061e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80061e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80061f0:	f023 0301 	bic.w	r3, r3, #1
 80061f4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80061f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061fc:	4a0d      	ldr	r2, [pc, #52]	; (8006234 <SystemInit+0xa8>)
 80061fe:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8006200:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006204:	4a0b      	ldr	r2, [pc, #44]	; (8006234 <SystemInit+0xa8>)
 8006206:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006208:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800620c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006216:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8006218:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800621c:	2200      	movs	r2, #0
 800621e:	619a      	str	r2, [r3, #24]
}
 8006220:	bf00      	nop
 8006222:	46bd      	mov	sp, r7
 8006224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006228:	4770      	bx	lr
 800622a:	bf00      	nop
 800622c:	e000ed00 	.word	0xe000ed00
 8006230:	faf6fefb 	.word	0xfaf6fefb
 8006234:	22041000 	.word	0x22041000

08006238 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8006238:	b480      	push	{r7}
 800623a:	b087      	sub	sp, #28
 800623c:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 800623e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	091b      	lsrs	r3, r3, #4
 8006246:	f003 030f 	and.w	r3, r3, #15
 800624a:	4a47      	ldr	r2, [pc, #284]	; (8006368 <SystemCoreClockUpdate+0x130>)
 800624c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006250:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006252:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006256:	689b      	ldr	r3, [r3, #8]
 8006258:	f003 030c 	and.w	r3, r3, #12
 800625c:	2b0c      	cmp	r3, #12
 800625e:	d867      	bhi.n	8006330 <SystemCoreClockUpdate+0xf8>
 8006260:	a201      	add	r2, pc, #4	; (adr r2, 8006268 <SystemCoreClockUpdate+0x30>)
 8006262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006266:	bf00      	nop
 8006268:	0800629d 	.word	0x0800629d
 800626c:	08006331 	.word	0x08006331
 8006270:	08006331 	.word	0x08006331
 8006274:	08006331 	.word	0x08006331
 8006278:	080062a5 	.word	0x080062a5
 800627c:	08006331 	.word	0x08006331
 8006280:	08006331 	.word	0x08006331
 8006284:	08006331 	.word	0x08006331
 8006288:	080062ad 	.word	0x080062ad
 800628c:	08006331 	.word	0x08006331
 8006290:	08006331 	.word	0x08006331
 8006294:	08006331 	.word	0x08006331
 8006298:	080062b5 	.word	0x080062b5
  {
    case 0x00:   /* MSI used as system clock source */
      SystemCoreClock = msirange;
 800629c:	4a33      	ldr	r2, [pc, #204]	; (800636c <SystemCoreClockUpdate+0x134>)
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	6013      	str	r3, [r2, #0]
      break;
 80062a2:	e049      	b.n	8006338 <SystemCoreClockUpdate+0x100>

    case 0x04:  /* HSI used as system clock source */
      /* HSI used as system clock source */
        SystemCoreClock = HSI_VALUE;
 80062a4:	4b31      	ldr	r3, [pc, #196]	; (800636c <SystemCoreClockUpdate+0x134>)
 80062a6:	4a32      	ldr	r2, [pc, #200]	; (8006370 <SystemCoreClockUpdate+0x138>)
 80062a8:	601a      	str	r2, [r3, #0]
      break;
 80062aa:	e045      	b.n	8006338 <SystemCoreClockUpdate+0x100>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80062ac:	4b2f      	ldr	r3, [pc, #188]	; (800636c <SystemCoreClockUpdate+0x134>)
 80062ae:	4a31      	ldr	r2, [pc, #196]	; (8006374 <SystemCoreClockUpdate+0x13c>)
 80062b0:	601a      	str	r2, [r3, #0]
      break;
 80062b2:	e041      	b.n	8006338 <SystemCoreClockUpdate+0x100>

    case 0x0C: /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80062b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062b8:	68db      	ldr	r3, [r3, #12]
 80062ba:	f003 0303 	and.w	r3, r3, #3
 80062be:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 80062c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062c4:	68db      	ldr	r3, [r3, #12]
 80062c6:	091b      	lsrs	r3, r3, #4
 80062c8:	f003 0307 	and.w	r3, r3, #7
 80062cc:	3301      	adds	r3, #1
 80062ce:	60bb      	str	r3, [r7, #8]

      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2b02      	cmp	r3, #2
 80062d4:	d105      	bne.n	80062e2 <SystemCoreClockUpdate+0xaa>
      {
        pllvco = (HSI_VALUE / pllm);
 80062d6:	4a26      	ldr	r2, [pc, #152]	; (8006370 <SystemCoreClockUpdate+0x138>)
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	fbb2 f3f3 	udiv	r3, r2, r3
 80062de:	617b      	str	r3, [r7, #20]
 80062e0:	e00d      	b.n	80062fe <SystemCoreClockUpdate+0xc6>
      }
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2b03      	cmp	r3, #3
 80062e6:	d105      	bne.n	80062f4 <SystemCoreClockUpdate+0xbc>
      {
        pllvco = (HSE_VALUE / pllm);
 80062e8:	4a22      	ldr	r2, [pc, #136]	; (8006374 <SystemCoreClockUpdate+0x13c>)
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80062f0:	617b      	str	r3, [r7, #20]
 80062f2:	e004      	b.n	80062fe <SystemCoreClockUpdate+0xc6>
      }
      else /* MSI used as PLL clock source */
      {
        pllvco = (msirange / pllm);
 80062f4:	693a      	ldr	r2, [r7, #16]
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80062fc:	617b      	str	r3, [r7, #20]
      }
      
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80062fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	0a1b      	lsrs	r3, r3, #8
 8006306:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	fb02 f303 	mul.w	r3, r2, r3
 8006310:	617b      	str	r3, [r7, #20]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8006312:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006316:	68db      	ldr	r3, [r3, #12]
 8006318:	0f5b      	lsrs	r3, r3, #29
 800631a:	f003 0307 	and.w	r3, r3, #7
 800631e:	3301      	adds	r3, #1
 8006320:	607b      	str	r3, [r7, #4]
      
      SystemCoreClock = pllvco/pllr;
 8006322:	697a      	ldr	r2, [r7, #20]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	fbb2 f3f3 	udiv	r3, r2, r3
 800632a:	4a10      	ldr	r2, [pc, #64]	; (800636c <SystemCoreClockUpdate+0x134>)
 800632c:	6013      	str	r3, [r2, #0]
      break;
 800632e:	e003      	b.n	8006338 <SystemCoreClockUpdate+0x100>

    default:
      SystemCoreClock = msirange;
 8006330:	4a0e      	ldr	r2, [pc, #56]	; (800636c <SystemCoreClockUpdate+0x134>)
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	6013      	str	r3, [r2, #0]
      break;
 8006336:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8006338:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	091b      	lsrs	r3, r3, #4
 8006340:	f003 030f 	and.w	r3, r3, #15
 8006344:	4a0c      	ldr	r2, [pc, #48]	; (8006378 <SystemCoreClockUpdate+0x140>)
 8006346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800634a:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 800634c:	4b07      	ldr	r3, [pc, #28]	; (800636c <SystemCoreClockUpdate+0x134>)
 800634e:	681a      	ldr	r2, [r3, #0]
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	fbb2 f3f3 	udiv	r3, r2, r3
 8006356:	4a05      	ldr	r2, [pc, #20]	; (800636c <SystemCoreClockUpdate+0x134>)
 8006358:	6013      	str	r3, [r2, #0]

}
 800635a:	bf00      	nop
 800635c:	371c      	adds	r7, #28
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr
 8006366:	bf00      	nop
 8006368:	080064e0 	.word	0x080064e0
 800636c:	20000174 	.word	0x20000174
 8006370:	00f42400 	.word	0x00f42400
 8006374:	01e84800 	.word	0x01e84800
 8006378:	08006480 	.word	0x08006480

0800637c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800637c:	480d      	ldr	r0, [pc, #52]	; (80063b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800637e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006380:	480d      	ldr	r0, [pc, #52]	; (80063b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8006382:	490e      	ldr	r1, [pc, #56]	; (80063bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8006384:	4a0e      	ldr	r2, [pc, #56]	; (80063c0 <LoopForever+0xe>)
  movs r3, #0
 8006386:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8006388:	e002      	b.n	8006390 <LoopCopyDataInit>

0800638a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800638a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800638c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800638e:	3304      	adds	r3, #4

08006390 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006390:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006392:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006394:	d3f9      	bcc.n	800638a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006396:	4a0b      	ldr	r2, [pc, #44]	; (80063c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006398:	4c0b      	ldr	r4, [pc, #44]	; (80063c8 <LoopForever+0x16>)
  movs r3, #0
 800639a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800639c:	e001      	b.n	80063a2 <LoopFillZerobss>

0800639e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800639e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80063a0:	3204      	adds	r2, #4

080063a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80063a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80063a4:	d3fb      	bcc.n	800639e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80063a6:	f7ff fef1 	bl	800618c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80063aa:	f000 f811 	bl	80063d0 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 80063ae:	f7ff f9fd 	bl	80057ac <main>

080063b2 <LoopForever>:

LoopForever:
  b LoopForever
 80063b2:	e7fe      	b.n	80063b2 <LoopForever>
  ldr   r0, =_estack
 80063b4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80063b8:	20000004 	.word	0x20000004
  ldr r1, =_edata
 80063bc:	20000178 	.word	0x20000178
  ldr r2, =_sidata
 80063c0:	08006530 	.word	0x08006530
  ldr r2, =_sbss
 80063c4:	20000178 	.word	0x20000178
  ldr r4, =_ebss
 80063c8:	20000758 	.word	0x20000758

080063cc <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80063cc:	e7fe      	b.n	80063cc <ADC1_IRQHandler>
	...

080063d0 <__libc_init_array>:
 80063d0:	b570      	push	{r4, r5, r6, lr}
 80063d2:	4e0d      	ldr	r6, [pc, #52]	; (8006408 <__libc_init_array+0x38>)
 80063d4:	4c0d      	ldr	r4, [pc, #52]	; (800640c <__libc_init_array+0x3c>)
 80063d6:	1ba4      	subs	r4, r4, r6
 80063d8:	10a4      	asrs	r4, r4, #2
 80063da:	2500      	movs	r5, #0
 80063dc:	42a5      	cmp	r5, r4
 80063de:	d109      	bne.n	80063f4 <__libc_init_array+0x24>
 80063e0:	4e0b      	ldr	r6, [pc, #44]	; (8006410 <__libc_init_array+0x40>)
 80063e2:	4c0c      	ldr	r4, [pc, #48]	; (8006414 <__libc_init_array+0x44>)
 80063e4:	f000 f820 	bl	8006428 <_init>
 80063e8:	1ba4      	subs	r4, r4, r6
 80063ea:	10a4      	asrs	r4, r4, #2
 80063ec:	2500      	movs	r5, #0
 80063ee:	42a5      	cmp	r5, r4
 80063f0:	d105      	bne.n	80063fe <__libc_init_array+0x2e>
 80063f2:	bd70      	pop	{r4, r5, r6, pc}
 80063f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80063f8:	4798      	blx	r3
 80063fa:	3501      	adds	r5, #1
 80063fc:	e7ee      	b.n	80063dc <__libc_init_array+0xc>
 80063fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006402:	4798      	blx	r3
 8006404:	3501      	adds	r5, #1
 8006406:	e7f2      	b.n	80063ee <__libc_init_array+0x1e>
 8006408:	08006528 	.word	0x08006528
 800640c:	08006528 	.word	0x08006528
 8006410:	08006528 	.word	0x08006528
 8006414:	0800652c 	.word	0x0800652c

08006418 <memset>:
 8006418:	4402      	add	r2, r0
 800641a:	4603      	mov	r3, r0
 800641c:	4293      	cmp	r3, r2
 800641e:	d100      	bne.n	8006422 <memset+0xa>
 8006420:	4770      	bx	lr
 8006422:	f803 1b01 	strb.w	r1, [r3], #1
 8006426:	e7f9      	b.n	800641c <memset+0x4>

08006428 <_init>:
 8006428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800642a:	bf00      	nop
 800642c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800642e:	bc08      	pop	{r3}
 8006430:	469e      	mov	lr, r3
 8006432:	4770      	bx	lr

08006434 <_fini>:
 8006434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006436:	bf00      	nop
 8006438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800643a:	bc08      	pop	{r3}
 800643c:	469e      	mov	lr, r3
 800643e:	4770      	bx	lr
