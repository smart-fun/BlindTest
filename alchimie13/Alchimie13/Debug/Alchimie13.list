
Alchimie13.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035a4  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  080036e4  080036e4  000136e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080037b8  080037b8  000137b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080037c0  080037c0  000137c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080037c4  080037c4  000137c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000018  20000004  080037c8  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000005dc  2000001c  080037e0  0002001c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200005f8  080037e0  000205f8  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001d09c  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003cb2  00000000  00000000  0003d0e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000d32e  00000000  00000000  00040d9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001160  00000000  00000000  0004e0c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001c78  00000000  00000000  0004f228  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00009d0f  00000000  00000000  00050ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00007111  00000000  00000000  0005abaf  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00061cc0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000030c4  00000000  00000000  00061d3c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000001c 	.word	0x2000001c
 800015c:	00000000 	.word	0x00000000
 8000160:	080036cc 	.word	0x080036cc

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000020 	.word	0x20000020
 800017c:	080036cc 	.word	0x080036cc

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_uldivmod>:
 8000190:	b953      	cbnz	r3, 80001a8 <__aeabi_uldivmod+0x18>
 8000192:	b94a      	cbnz	r2, 80001a8 <__aeabi_uldivmod+0x18>
 8000194:	2900      	cmp	r1, #0
 8000196:	bf08      	it	eq
 8000198:	2800      	cmpeq	r0, #0
 800019a:	bf1c      	itt	ne
 800019c:	f04f 31ff 	movne.w	r1, #4294967295
 80001a0:	f04f 30ff 	movne.w	r0, #4294967295
 80001a4:	f000 b97a 	b.w	800049c <__aeabi_idiv0>
 80001a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001b0:	f000 f806 	bl	80001c0 <__udivmoddi4>
 80001b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001bc:	b004      	add	sp, #16
 80001be:	4770      	bx	lr

080001c0 <__udivmoddi4>:
 80001c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c4:	468c      	mov	ip, r1
 80001c6:	460d      	mov	r5, r1
 80001c8:	4604      	mov	r4, r0
 80001ca:	9e08      	ldr	r6, [sp, #32]
 80001cc:	2b00      	cmp	r3, #0
 80001ce:	d151      	bne.n	8000274 <__udivmoddi4+0xb4>
 80001d0:	428a      	cmp	r2, r1
 80001d2:	4617      	mov	r7, r2
 80001d4:	d96d      	bls.n	80002b2 <__udivmoddi4+0xf2>
 80001d6:	fab2 fe82 	clz	lr, r2
 80001da:	f1be 0f00 	cmp.w	lr, #0
 80001de:	d00b      	beq.n	80001f8 <__udivmoddi4+0x38>
 80001e0:	f1ce 0c20 	rsb	ip, lr, #32
 80001e4:	fa01 f50e 	lsl.w	r5, r1, lr
 80001e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80001ec:	fa02 f70e 	lsl.w	r7, r2, lr
 80001f0:	ea4c 0c05 	orr.w	ip, ip, r5
 80001f4:	fa00 f40e 	lsl.w	r4, r0, lr
 80001f8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80001fc:	0c25      	lsrs	r5, r4, #16
 80001fe:	fbbc f8fa 	udiv	r8, ip, sl
 8000202:	fa1f f987 	uxth.w	r9, r7
 8000206:	fb0a cc18 	mls	ip, sl, r8, ip
 800020a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800020e:	fb08 f309 	mul.w	r3, r8, r9
 8000212:	42ab      	cmp	r3, r5
 8000214:	d90a      	bls.n	800022c <__udivmoddi4+0x6c>
 8000216:	19ed      	adds	r5, r5, r7
 8000218:	f108 32ff 	add.w	r2, r8, #4294967295
 800021c:	f080 8123 	bcs.w	8000466 <__udivmoddi4+0x2a6>
 8000220:	42ab      	cmp	r3, r5
 8000222:	f240 8120 	bls.w	8000466 <__udivmoddi4+0x2a6>
 8000226:	f1a8 0802 	sub.w	r8, r8, #2
 800022a:	443d      	add	r5, r7
 800022c:	1aed      	subs	r5, r5, r3
 800022e:	b2a4      	uxth	r4, r4
 8000230:	fbb5 f0fa 	udiv	r0, r5, sl
 8000234:	fb0a 5510 	mls	r5, sl, r0, r5
 8000238:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800023c:	fb00 f909 	mul.w	r9, r0, r9
 8000240:	45a1      	cmp	r9, r4
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x98>
 8000244:	19e4      	adds	r4, r4, r7
 8000246:	f100 33ff 	add.w	r3, r0, #4294967295
 800024a:	f080 810a 	bcs.w	8000462 <__udivmoddi4+0x2a2>
 800024e:	45a1      	cmp	r9, r4
 8000250:	f240 8107 	bls.w	8000462 <__udivmoddi4+0x2a2>
 8000254:	3802      	subs	r0, #2
 8000256:	443c      	add	r4, r7
 8000258:	eba4 0409 	sub.w	r4, r4, r9
 800025c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000260:	2100      	movs	r1, #0
 8000262:	2e00      	cmp	r6, #0
 8000264:	d061      	beq.n	800032a <__udivmoddi4+0x16a>
 8000266:	fa24 f40e 	lsr.w	r4, r4, lr
 800026a:	2300      	movs	r3, #0
 800026c:	6034      	str	r4, [r6, #0]
 800026e:	6073      	str	r3, [r6, #4]
 8000270:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000274:	428b      	cmp	r3, r1
 8000276:	d907      	bls.n	8000288 <__udivmoddi4+0xc8>
 8000278:	2e00      	cmp	r6, #0
 800027a:	d054      	beq.n	8000326 <__udivmoddi4+0x166>
 800027c:	2100      	movs	r1, #0
 800027e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000282:	4608      	mov	r0, r1
 8000284:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000288:	fab3 f183 	clz	r1, r3
 800028c:	2900      	cmp	r1, #0
 800028e:	f040 808e 	bne.w	80003ae <__udivmoddi4+0x1ee>
 8000292:	42ab      	cmp	r3, r5
 8000294:	d302      	bcc.n	800029c <__udivmoddi4+0xdc>
 8000296:	4282      	cmp	r2, r0
 8000298:	f200 80fa 	bhi.w	8000490 <__udivmoddi4+0x2d0>
 800029c:	1a84      	subs	r4, r0, r2
 800029e:	eb65 0503 	sbc.w	r5, r5, r3
 80002a2:	2001      	movs	r0, #1
 80002a4:	46ac      	mov	ip, r5
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	d03f      	beq.n	800032a <__udivmoddi4+0x16a>
 80002aa:	e886 1010 	stmia.w	r6, {r4, ip}
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	b912      	cbnz	r2, 80002ba <__udivmoddi4+0xfa>
 80002b4:	2701      	movs	r7, #1
 80002b6:	fbb7 f7f2 	udiv	r7, r7, r2
 80002ba:	fab7 fe87 	clz	lr, r7
 80002be:	f1be 0f00 	cmp.w	lr, #0
 80002c2:	d134      	bne.n	800032e <__udivmoddi4+0x16e>
 80002c4:	1beb      	subs	r3, r5, r7
 80002c6:	0c3a      	lsrs	r2, r7, #16
 80002c8:	fa1f fc87 	uxth.w	ip, r7
 80002cc:	2101      	movs	r1, #1
 80002ce:	fbb3 f8f2 	udiv	r8, r3, r2
 80002d2:	0c25      	lsrs	r5, r4, #16
 80002d4:	fb02 3318 	mls	r3, r2, r8, r3
 80002d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80002dc:	fb0c f308 	mul.w	r3, ip, r8
 80002e0:	42ab      	cmp	r3, r5
 80002e2:	d907      	bls.n	80002f4 <__udivmoddi4+0x134>
 80002e4:	19ed      	adds	r5, r5, r7
 80002e6:	f108 30ff 	add.w	r0, r8, #4294967295
 80002ea:	d202      	bcs.n	80002f2 <__udivmoddi4+0x132>
 80002ec:	42ab      	cmp	r3, r5
 80002ee:	f200 80d1 	bhi.w	8000494 <__udivmoddi4+0x2d4>
 80002f2:	4680      	mov	r8, r0
 80002f4:	1aed      	subs	r5, r5, r3
 80002f6:	b2a3      	uxth	r3, r4
 80002f8:	fbb5 f0f2 	udiv	r0, r5, r2
 80002fc:	fb02 5510 	mls	r5, r2, r0, r5
 8000300:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000304:	fb0c fc00 	mul.w	ip, ip, r0
 8000308:	45a4      	cmp	ip, r4
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x15c>
 800030c:	19e4      	adds	r4, r4, r7
 800030e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x15a>
 8000314:	45a4      	cmp	ip, r4
 8000316:	f200 80b8 	bhi.w	800048a <__udivmoddi4+0x2ca>
 800031a:	4618      	mov	r0, r3
 800031c:	eba4 040c 	sub.w	r4, r4, ip
 8000320:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000324:	e79d      	b.n	8000262 <__udivmoddi4+0xa2>
 8000326:	4631      	mov	r1, r6
 8000328:	4630      	mov	r0, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	f1ce 0420 	rsb	r4, lr, #32
 8000332:	fa05 f30e 	lsl.w	r3, r5, lr
 8000336:	fa07 f70e 	lsl.w	r7, r7, lr
 800033a:	fa20 f804 	lsr.w	r8, r0, r4
 800033e:	0c3a      	lsrs	r2, r7, #16
 8000340:	fa25 f404 	lsr.w	r4, r5, r4
 8000344:	ea48 0803 	orr.w	r8, r8, r3
 8000348:	fbb4 f1f2 	udiv	r1, r4, r2
 800034c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000350:	fb02 4411 	mls	r4, r2, r1, r4
 8000354:	fa1f fc87 	uxth.w	ip, r7
 8000358:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800035c:	fb01 f30c 	mul.w	r3, r1, ip
 8000360:	42ab      	cmp	r3, r5
 8000362:	fa00 f40e 	lsl.w	r4, r0, lr
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x1bc>
 8000368:	19ed      	adds	r5, r5, r7
 800036a:	f101 30ff 	add.w	r0, r1, #4294967295
 800036e:	f080 808a 	bcs.w	8000486 <__udivmoddi4+0x2c6>
 8000372:	42ab      	cmp	r3, r5
 8000374:	f240 8087 	bls.w	8000486 <__udivmoddi4+0x2c6>
 8000378:	3902      	subs	r1, #2
 800037a:	443d      	add	r5, r7
 800037c:	1aeb      	subs	r3, r5, r3
 800037e:	fa1f f588 	uxth.w	r5, r8
 8000382:	fbb3 f0f2 	udiv	r0, r3, r2
 8000386:	fb02 3310 	mls	r3, r2, r0, r3
 800038a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800038e:	fb00 f30c 	mul.w	r3, r0, ip
 8000392:	42ab      	cmp	r3, r5
 8000394:	d907      	bls.n	80003a6 <__udivmoddi4+0x1e6>
 8000396:	19ed      	adds	r5, r5, r7
 8000398:	f100 38ff 	add.w	r8, r0, #4294967295
 800039c:	d26f      	bcs.n	800047e <__udivmoddi4+0x2be>
 800039e:	42ab      	cmp	r3, r5
 80003a0:	d96d      	bls.n	800047e <__udivmoddi4+0x2be>
 80003a2:	3802      	subs	r0, #2
 80003a4:	443d      	add	r5, r7
 80003a6:	1aeb      	subs	r3, r5, r3
 80003a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003ac:	e78f      	b.n	80002ce <__udivmoddi4+0x10e>
 80003ae:	f1c1 0720 	rsb	r7, r1, #32
 80003b2:	fa22 f807 	lsr.w	r8, r2, r7
 80003b6:	408b      	lsls	r3, r1
 80003b8:	fa05 f401 	lsl.w	r4, r5, r1
 80003bc:	ea48 0303 	orr.w	r3, r8, r3
 80003c0:	fa20 fe07 	lsr.w	lr, r0, r7
 80003c4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80003c8:	40fd      	lsrs	r5, r7
 80003ca:	ea4e 0e04 	orr.w	lr, lr, r4
 80003ce:	fbb5 f9fc 	udiv	r9, r5, ip
 80003d2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80003d6:	fb0c 5519 	mls	r5, ip, r9, r5
 80003da:	fa1f f883 	uxth.w	r8, r3
 80003de:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80003e2:	fb09 f408 	mul.w	r4, r9, r8
 80003e6:	42ac      	cmp	r4, r5
 80003e8:	fa02 f201 	lsl.w	r2, r2, r1
 80003ec:	fa00 fa01 	lsl.w	sl, r0, r1
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x244>
 80003f2:	18ed      	adds	r5, r5, r3
 80003f4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003f8:	d243      	bcs.n	8000482 <__udivmoddi4+0x2c2>
 80003fa:	42ac      	cmp	r4, r5
 80003fc:	d941      	bls.n	8000482 <__udivmoddi4+0x2c2>
 80003fe:	f1a9 0902 	sub.w	r9, r9, #2
 8000402:	441d      	add	r5, r3
 8000404:	1b2d      	subs	r5, r5, r4
 8000406:	fa1f fe8e 	uxth.w	lr, lr
 800040a:	fbb5 f0fc 	udiv	r0, r5, ip
 800040e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000412:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000416:	fb00 f808 	mul.w	r8, r0, r8
 800041a:	45a0      	cmp	r8, r4
 800041c:	d907      	bls.n	800042e <__udivmoddi4+0x26e>
 800041e:	18e4      	adds	r4, r4, r3
 8000420:	f100 35ff 	add.w	r5, r0, #4294967295
 8000424:	d229      	bcs.n	800047a <__udivmoddi4+0x2ba>
 8000426:	45a0      	cmp	r8, r4
 8000428:	d927      	bls.n	800047a <__udivmoddi4+0x2ba>
 800042a:	3802      	subs	r0, #2
 800042c:	441c      	add	r4, r3
 800042e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000432:	eba4 0408 	sub.w	r4, r4, r8
 8000436:	fba0 8902 	umull	r8, r9, r0, r2
 800043a:	454c      	cmp	r4, r9
 800043c:	46c6      	mov	lr, r8
 800043e:	464d      	mov	r5, r9
 8000440:	d315      	bcc.n	800046e <__udivmoddi4+0x2ae>
 8000442:	d012      	beq.n	800046a <__udivmoddi4+0x2aa>
 8000444:	b156      	cbz	r6, 800045c <__udivmoddi4+0x29c>
 8000446:	ebba 030e 	subs.w	r3, sl, lr
 800044a:	eb64 0405 	sbc.w	r4, r4, r5
 800044e:	fa04 f707 	lsl.w	r7, r4, r7
 8000452:	40cb      	lsrs	r3, r1
 8000454:	431f      	orrs	r7, r3
 8000456:	40cc      	lsrs	r4, r1
 8000458:	6037      	str	r7, [r6, #0]
 800045a:	6074      	str	r4, [r6, #4]
 800045c:	2100      	movs	r1, #0
 800045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000462:	4618      	mov	r0, r3
 8000464:	e6f8      	b.n	8000258 <__udivmoddi4+0x98>
 8000466:	4690      	mov	r8, r2
 8000468:	e6e0      	b.n	800022c <__udivmoddi4+0x6c>
 800046a:	45c2      	cmp	sl, r8
 800046c:	d2ea      	bcs.n	8000444 <__udivmoddi4+0x284>
 800046e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000472:	eb69 0503 	sbc.w	r5, r9, r3
 8000476:	3801      	subs	r0, #1
 8000478:	e7e4      	b.n	8000444 <__udivmoddi4+0x284>
 800047a:	4628      	mov	r0, r5
 800047c:	e7d7      	b.n	800042e <__udivmoddi4+0x26e>
 800047e:	4640      	mov	r0, r8
 8000480:	e791      	b.n	80003a6 <__udivmoddi4+0x1e6>
 8000482:	4681      	mov	r9, r0
 8000484:	e7be      	b.n	8000404 <__udivmoddi4+0x244>
 8000486:	4601      	mov	r1, r0
 8000488:	e778      	b.n	800037c <__udivmoddi4+0x1bc>
 800048a:	3802      	subs	r0, #2
 800048c:	443c      	add	r4, r7
 800048e:	e745      	b.n	800031c <__udivmoddi4+0x15c>
 8000490:	4608      	mov	r0, r1
 8000492:	e708      	b.n	80002a6 <__udivmoddi4+0xe6>
 8000494:	f1a8 0802 	sub.w	r8, r8, #2
 8000498:	443d      	add	r5, r7
 800049a:	e72b      	b.n	80002f4 <__udivmoddi4+0x134>

0800049c <__aeabi_idiv0>:
 800049c:	4770      	bx	lr
 800049e:	bf00      	nop

080004a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004a0:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 80004a2:	4c10      	ldr	r4, [pc, #64]	; (80004e4 <HAL_InitTick+0x44>)
 80004a4:	6823      	ldr	r3, [r4, #0]
{
 80004a6:	4605      	mov	r5, r0
  if (uwTickFreq != 0U)
 80004a8:	b90b      	cbnz	r3, 80004ae <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 80004aa:	2001      	movs	r0, #1
 80004ac:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U /uwTickFreq)) == 0U)
 80004ae:	f001 fa97 	bl	80019e0 <HAL_RCC_GetHCLKFreq>
 80004b2:	6822      	ldr	r2, [r4, #0]
 80004b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80004bc:	fbb0 f0f3 	udiv	r0, r0, r3
 80004c0:	f000 f8aa 	bl	8000618 <HAL_SYSTICK_Config>
 80004c4:	4604      	mov	r4, r0
 80004c6:	2800      	cmp	r0, #0
 80004c8:	d1ef      	bne.n	80004aa <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004ca:	2d0f      	cmp	r5, #15
 80004cc:	d8ed      	bhi.n	80004aa <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004ce:	4602      	mov	r2, r0
 80004d0:	4629      	mov	r1, r5
 80004d2:	f04f 30ff 	mov.w	r0, #4294967295
 80004d6:	f000 f85d 	bl	8000594 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80004da:	4b03      	ldr	r3, [pc, #12]	; (80004e8 <HAL_InitTick+0x48>)
 80004dc:	4620      	mov	r0, r4
 80004de:	601d      	str	r5, [r3, #0]
  }

  /* Return function status */
  return status;
}
 80004e0:	bd38      	pop	{r3, r4, r5, pc}
 80004e2:	bf00      	nop
 80004e4:	20000004 	.word	0x20000004
 80004e8:	20000008 	.word	0x20000008

080004ec <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004ec:	4a09      	ldr	r2, [pc, #36]	; (8000514 <HAL_Init+0x28>)
 80004ee:	6813      	ldr	r3, [r2, #0]
 80004f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 80004f4:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004f6:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004f8:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004fa:	f000 f839 	bl	8000570 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80004fe:	2000      	movs	r0, #0
 8000500:	f7ff ffce 	bl	80004a0 <HAL_InitTick>
 8000504:	4604      	mov	r4, r0
 8000506:	b918      	cbnz	r0, 8000510 <HAL_Init+0x24>
    HAL_MspInit();
 8000508:	f002 ff1a 	bl	8003340 <HAL_MspInit>
}
 800050c:	4620      	mov	r0, r4
 800050e:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8000510:	2401      	movs	r4, #1
 8000512:	e7fb      	b.n	800050c <HAL_Init+0x20>
 8000514:	58004000 	.word	0x58004000

08000518 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000518:	4a03      	ldr	r2, [pc, #12]	; (8000528 <HAL_IncTick+0x10>)
 800051a:	4904      	ldr	r1, [pc, #16]	; (800052c <HAL_IncTick+0x14>)
 800051c:	6813      	ldr	r3, [r2, #0]
 800051e:	6809      	ldr	r1, [r1, #0]
 8000520:	440b      	add	r3, r1
 8000522:	6013      	str	r3, [r2, #0]
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop
 8000528:	20000164 	.word	0x20000164
 800052c:	20000004 	.word	0x20000004

08000530 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000530:	4b01      	ldr	r3, [pc, #4]	; (8000538 <HAL_GetTick+0x8>)
 8000532:	6818      	ldr	r0, [r3, #0]
}
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	20000164 	.word	0x20000164

0800053c <HAL_GetTickPrio>:
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
  return uwTickPrio;
}
 800053c:	4b01      	ldr	r3, [pc, #4]	; (8000544 <HAL_GetTickPrio+0x8>)
 800053e:	6818      	ldr	r0, [r3, #0]
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	20000008 	.word	0x20000008

08000548 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8000548:	b538      	push	{r3, r4, r5, lr}
 800054a:	4604      	mov	r4, r0
    uint32_t tickstart = HAL_GetTick();
 800054c:	f7ff fff0 	bl	8000530 <HAL_GetTick>
    uint32_t wait = Delay;
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 8000550:	1c63      	adds	r3, r4, #1
    {
      wait += (uint32_t)(uwTickFreq);
 8000552:	bf1c      	itt	ne
 8000554:	4b05      	ldrne	r3, [pc, #20]	; (800056c <HAL_Delay+0x24>)
 8000556:	681b      	ldrne	r3, [r3, #0]
    uint32_t tickstart = HAL_GetTick();
 8000558:	4605      	mov	r5, r0
      wait += (uint32_t)(uwTickFreq);
 800055a:	bf18      	it	ne
 800055c:	18e4      	addne	r4, r4, r3
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 800055e:	f7ff ffe7 	bl	8000530 <HAL_GetTick>
 8000562:	1b40      	subs	r0, r0, r5
 8000564:	4284      	cmp	r4, r0
 8000566:	d8fa      	bhi.n	800055e <HAL_Delay+0x16>
    {
    }
  }
 8000568:	bd38      	pop	{r3, r4, r5, pc}
 800056a:	bf00      	nop
 800056c:	20000004 	.word	0x20000004

08000570 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000570:	4a07      	ldr	r2, [pc, #28]	; (8000590 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000572:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000574:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000578:	041b      	lsls	r3, r3, #16
 800057a:	0c1b      	lsrs	r3, r3, #16
 800057c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000580:	0200      	lsls	r0, r0, #8
 8000582:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000586:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800058a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800058c:	60d3      	str	r3, [r2, #12]
 800058e:	4770      	bx	lr
 8000590:	e000ed00 	.word	0xe000ed00

08000594 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000594:	4b17      	ldr	r3, [pc, #92]	; (80005f4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000596:	b530      	push	{r4, r5, lr}
 8000598:	68dc      	ldr	r4, [r3, #12]
 800059a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800059e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005a2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005a4:	2b04      	cmp	r3, #4
 80005a6:	bf28      	it	cs
 80005a8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005aa:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005ac:	f04f 0501 	mov.w	r5, #1
 80005b0:	fa05 f303 	lsl.w	r3, r5, r3
 80005b4:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005b8:	bf8c      	ite	hi
 80005ba:	3c03      	subhi	r4, #3
 80005bc:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005be:	4019      	ands	r1, r3
 80005c0:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005c2:	fa05 f404 	lsl.w	r4, r5, r4
 80005c6:	3c01      	subs	r4, #1
 80005c8:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 80005ca:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005cc:	ea42 0201 	orr.w	r2, r2, r1
 80005d0:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d4:	bfad      	iteet	ge
 80005d6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005da:	f000 000f 	andlt.w	r0, r0, #15
 80005de:	4b06      	ldrlt	r3, [pc, #24]	; (80005f8 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005e0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005e4:	bfb5      	itete	lt
 80005e6:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005e8:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ea:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ec:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	bf00      	nop
 80005f4:	e000ed00 	.word	0xe000ed00
 80005f8:	e000ed14 	.word	0xe000ed14

080005fc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80005fc:	2800      	cmp	r0, #0
 80005fe:	db08      	blt.n	8000612 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000600:	0942      	lsrs	r2, r0, #5
 8000602:	2301      	movs	r3, #1
 8000604:	f000 001f 	and.w	r0, r0, #31
 8000608:	fa03 f000 	lsl.w	r0, r3, r0
 800060c:	4b01      	ldr	r3, [pc, #4]	; (8000614 <HAL_NVIC_EnableIRQ+0x18>)
 800060e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000612:	4770      	bx	lr
 8000614:	e000e100 	.word	0xe000e100

08000618 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000618:	3801      	subs	r0, #1
 800061a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800061e:	d20a      	bcs.n	8000636 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000620:	4b06      	ldr	r3, [pc, #24]	; (800063c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000622:	4a07      	ldr	r2, [pc, #28]	; (8000640 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000624:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000626:	21f0      	movs	r1, #240	; 0xf0
 8000628:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800062c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800062e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000630:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000636:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	e000e010 	.word	0xe000e010
 8000640:	e000ed00 	.word	0xe000ed00

08000644 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000644:	b570      	push	{r4, r5, r6, lr}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000646:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 8000648:	6d05      	ldr	r5, [r0, #80]	; 0x50
 800064a:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800064c:	6d44      	ldr	r4, [r0, #84]	; 0x54
 800064e:	b114      	cbz	r4, 8000656 <DMA_SetConfig+0x12>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000650:	6d84      	ldr	r4, [r0, #88]	; 0x58
 8000652:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8000654:	6065      	str	r5, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000656:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8000658:	6c06      	ldr	r6, [r0, #64]	; 0x40
 800065a:	f004 051c 	and.w	r5, r4, #28
 800065e:	2401      	movs	r4, #1
 8000660:	40ac      	lsls	r4, r5
 8000662:	6074      	str	r4, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000664:	6804      	ldr	r4, [r0, #0]
 8000666:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000668:	6883      	ldr	r3, [r0, #8]
 800066a:	2b10      	cmp	r3, #16
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800066c:	bf0b      	itete	eq
 800066e:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8000670:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8000672:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8000674:	60e2      	strne	r2, [r4, #12]
 8000676:	bd70      	pop	{r4, r5, r6, pc}

08000678 <DMA_CalcDMAMUXChannelBaseAndMask>:
{
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8000678:	6803      	ldr	r3, [r0, #0]
 800067a:	4a10      	ldr	r2, [pc, #64]	; (80006bc <DMA_CalcDMAMUXChannelBaseAndMask+0x44>)
 800067c:	4293      	cmp	r3, r2
 800067e:	6c42      	ldr	r2, [r0, #68]	; 0x44
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8000680:	bf88      	it	hi
 8000682:	490f      	ldrhi	r1, [pc, #60]	; (80006c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x48>)
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8000684:	f022 0203 	bic.w	r2, r2, #3
 8000688:	bf9b      	ittet	ls
 800068a:	f102 4280 	addls.w	r2, r2, #1073741824	; 0x40000000
 800068e:	f502 3202 	addls.w	r2, r2, #133120	; 0x20800
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8000692:	1889      	addhi	r1, r1, r2
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8000694:	6482      	strls	r2, [r0, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8000696:	b2db      	uxtb	r3, r3
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8000698:	4a0a      	ldr	r2, [pc, #40]	; (80006c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x4c>)
 800069a:	64c2      	str	r2, [r0, #76]	; 0x4c
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800069c:	f1a3 0308 	sub.w	r3, r3, #8
 80006a0:	f04f 0214 	mov.w	r2, #20
 80006a4:	fbb3 f3f2 	udiv	r3, r3, r2
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 80006a8:	f04f 0201 	mov.w	r2, #1
 80006ac:	f003 031c 	and.w	r3, r3, #28
 80006b0:	fa02 f303 	lsl.w	r3, r2, r3
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80006b4:	bf88      	it	hi
 80006b6:	6481      	strhi	r1, [r0, #72]	; 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 80006b8:	6503      	str	r3, [r0, #80]	; 0x50
 80006ba:	4770      	bx	lr
 80006bc:	40020407 	.word	0x40020407
 80006c0:	4002081c 	.word	0x4002081c
 80006c4:	40020880 	.word	0x40020880

080006c8 <HAL_DMA_Init>:
{
 80006c8:	b510      	push	{r4, lr}
  if (hdma == NULL)
 80006ca:	4604      	mov	r4, r0
 80006cc:	2800      	cmp	r0, #0
 80006ce:	d05d      	beq.n	800078c <HAL_DMA_Init+0xc4>
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80006d0:	6801      	ldr	r1, [r0, #0]
 80006d2:	4b2f      	ldr	r3, [pc, #188]	; (8000790 <HAL_DMA_Init+0xc8>)
 80006d4:	4299      	cmp	r1, r3
 80006d6:	f04f 0014 	mov.w	r0, #20
 80006da:	d84a      	bhi.n	8000772 <HAL_DMA_Init+0xaa>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80006dc:	4a2d      	ldr	r2, [pc, #180]	; (8000794 <HAL_DMA_Init+0xcc>)
 80006de:	440a      	add	r2, r1
 80006e0:	fbb2 f2f0 	udiv	r2, r2, r0
 80006e4:	0092      	lsls	r2, r2, #2
 80006e6:	6462      	str	r2, [r4, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80006e8:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
    hdma->DmaBaseAddress = DMA2;
 80006ec:	6423      	str	r3, [r4, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 80006ee:	2302      	movs	r3, #2
 80006f0:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  tmp |=  hdma->Init.Direction        |
 80006f4:	68e0      	ldr	r0, [r4, #12]
 80006f6:	68a3      	ldr	r3, [r4, #8]
  tmp = hdma->Instance->CCR;
 80006f8:	680a      	ldr	r2, [r1, #0]
  tmp |=  hdma->Init.Direction        |
 80006fa:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80006fc:	6920      	ldr	r0, [r4, #16]
 80006fe:	4303      	orrs	r3, r0
 8000700:	6960      	ldr	r0, [r4, #20]
 8000702:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000704:	69a0      	ldr	r0, [r4, #24]
 8000706:	4303      	orrs	r3, r0
 8000708:	69e0      	ldr	r0, [r4, #28]
 800070a:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 800070c:	6a20      	ldr	r0, [r4, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800070e:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8000712:	f022 0270 	bic.w	r2, r2, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 8000716:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 8000718:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;
 800071a:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800071c:	4620      	mov	r0, r4
 800071e:	f7ff ffab 	bl	8000678 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000722:	68a3      	ldr	r3, [r4, #8]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000724:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000726:	6d20      	ldr	r0, [r4, #80]	; 0x50
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000728:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800072c:	bf04      	itt	eq
 800072e:	2300      	moveq	r3, #0
 8000730:	6063      	streq	r3, [r4, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000732:	6862      	ldr	r2, [r4, #4]
 8000734:	b2d3      	uxtb	r3, r2
 8000736:	600b      	str	r3, [r1, #0]
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000738:	3a01      	subs	r2, #1
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800073a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800073c:	2a03      	cmp	r2, #3
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800073e:	6048      	str	r0, [r1, #4]
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000740:	d81f      	bhi.n	8000782 <HAL_DMA_Init+0xba>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8000742:	4a15      	ldr	r2, [pc, #84]	; (8000798 <HAL_DMA_Init+0xd0>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8000744:	4815      	ldr	r0, [pc, #84]	; (800079c <HAL_DMA_Init+0xd4>)
 8000746:	65a0      	str	r0, [r4, #88]	; 0x58
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8000748:	441a      	add	r2, r3

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800074a:	3b01      	subs	r3, #1
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800074c:	0092      	lsls	r2, r2, #2
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800074e:	2101      	movs	r1, #1
 8000750:	f003 0303 	and.w	r3, r3, #3
 8000754:	fa01 f303 	lsl.w	r3, r1, r3
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8000758:	2100      	movs	r1, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800075a:	6562      	str	r2, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800075c:	65e3      	str	r3, [r4, #92]	; 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800075e:	6011      	str	r1, [r2, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000760:	6043      	str	r3, [r0, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000762:	2000      	movs	r0, #0
  hdma->State  = HAL_DMA_STATE_READY;
 8000764:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000766:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->Lock = HAL_UNLOCKED;
 8000768:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 800076c:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  return HAL_OK;
 8000770:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000772:	4b0b      	ldr	r3, [pc, #44]	; (80007a0 <HAL_DMA_Init+0xd8>)
 8000774:	440b      	add	r3, r1
 8000776:	fbb3 f3f0 	udiv	r3, r3, r0
 800077a:	009b      	lsls	r3, r3, #2
 800077c:	6463      	str	r3, [r4, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800077e:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <HAL_DMA_Init+0xdc>)
 8000780:	e7b4      	b.n	80006ec <HAL_DMA_Init+0x24>
    hdma->DMAmuxRequestGen = 0U;
 8000782:	2300      	movs	r3, #0
 8000784:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8000786:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8000788:	65e3      	str	r3, [r4, #92]	; 0x5c
 800078a:	e7ea      	b.n	8000762 <HAL_DMA_Init+0x9a>
    return HAL_ERROR;
 800078c:	2001      	movs	r0, #1
}
 800078e:	bd10      	pop	{r4, pc}
 8000790:	40020407 	.word	0x40020407
 8000794:	bffdfff8 	.word	0xbffdfff8
 8000798:	1000823f 	.word	0x1000823f
 800079c:	40020940 	.word	0x40020940
 80007a0:	bffdfbf8 	.word	0xbffdfbf8
 80007a4:	40020400 	.word	0x40020400

080007a8 <HAL_DMA_Start_IT>:
{
 80007a8:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 80007aa:	f890 5024 	ldrb.w	r5, [r0, #36]	; 0x24
 80007ae:	2d01      	cmp	r5, #1
{
 80007b0:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 80007b2:	d039      	beq.n	8000828 <HAL_DMA_Start_IT+0x80>
 80007b4:	2501      	movs	r5, #1
 80007b6:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
  if (HAL_DMA_STATE_READY == hdma->State)
 80007ba:	f890 5025 	ldrb.w	r5, [r0, #37]	; 0x25
 80007be:	2d01      	cmp	r5, #1
 80007c0:	f04f 0600 	mov.w	r6, #0
 80007c4:	f04f 0502 	mov.w	r5, #2
 80007c8:	d12c      	bne.n	8000824 <HAL_DMA_Start_IT+0x7c>
    hdma->State = HAL_DMA_STATE_BUSY;
 80007ca:	f880 5025 	strb.w	r5, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80007ce:	63c6      	str	r6, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 80007d0:	6806      	ldr	r6, [r0, #0]
 80007d2:	6835      	ldr	r5, [r6, #0]
 80007d4:	f025 0501 	bic.w	r5, r5, #1
 80007d8:	6035      	str	r5, [r6, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80007da:	f7ff ff33 	bl	8000644 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 80007de:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80007e0:	6803      	ldr	r3, [r0, #0]
 80007e2:	b1ba      	cbz	r2, 8000814 <HAL_DMA_Start_IT+0x6c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80007e4:	681a      	ldr	r2, [r3, #0]
 80007e6:	f042 020e 	orr.w	r2, r2, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80007ea:	601a      	str	r2, [r3, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80007ec:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80007ee:	6811      	ldr	r1, [r2, #0]
 80007f0:	03c9      	lsls	r1, r1, #15
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80007f2:	bf42      	ittt	mi
 80007f4:	6811      	ldrmi	r1, [r2, #0]
 80007f6:	f441 7180 	orrmi.w	r1, r1, #256	; 0x100
 80007fa:	6011      	strmi	r1, [r2, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 80007fc:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80007fe:	b11a      	cbz	r2, 8000808 <HAL_DMA_Start_IT+0x60>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8000800:	6811      	ldr	r1, [r2, #0]
 8000802:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8000806:	6011      	str	r1, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8000808:	681a      	ldr	r2, [r3, #0]
 800080a:	f042 0201 	orr.w	r2, r2, #1
 800080e:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000810:	2000      	movs	r0, #0
 8000812:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000814:	681a      	ldr	r2, [r3, #0]
 8000816:	f022 0204 	bic.w	r2, r2, #4
 800081a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800081c:	681a      	ldr	r2, [r3, #0]
 800081e:	f042 020a 	orr.w	r2, r2, #10
 8000822:	e7e2      	b.n	80007ea <HAL_DMA_Start_IT+0x42>
    __HAL_UNLOCK(hdma);
 8000824:	f880 6024 	strb.w	r6, [r0, #36]	; 0x24
  __HAL_LOCK(hdma);
 8000828:	2002      	movs	r0, #2
}
 800082a:	bd70      	pop	{r4, r5, r6, pc}

0800082c <HAL_DMA_IRQHandler>:
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800082c:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800082e:	6c42      	ldr	r2, [r0, #68]	; 0x44
  uint32_t source_it = hdma->Instance->CCR;
 8000830:	6803      	ldr	r3, [r0, #0]
{
 8000832:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000834:	f002 021c 	and.w	r2, r2, #28
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000838:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800083a:	681d      	ldr	r5, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800083c:	2404      	movs	r4, #4
 800083e:	4094      	lsls	r4, r2
 8000840:	4226      	tst	r6, r4
 8000842:	d00e      	beq.n	8000862 <HAL_DMA_IRQHandler+0x36>
 8000844:	f015 0f04 	tst.w	r5, #4
 8000848:	d00b      	beq.n	8000862 <HAL_DMA_IRQHandler+0x36>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800084a:	681a      	ldr	r2, [r3, #0]
 800084c:	0692      	lsls	r2, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800084e:	bf5e      	ittt	pl
 8000850:	681a      	ldrpl	r2, [r3, #0]
 8000852:	f022 0204 	bicpl.w	r2, r2, #4
 8000856:	601a      	strpl	r2, [r3, #0]
    if (hdma->XferHalfCpltCallback != NULL)
 8000858:	6b03      	ldr	r3, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 800085a:	604c      	str	r4, [r1, #4]
    if (hdma->XferErrorCallback != NULL)
 800085c:	b373      	cbz	r3, 80008bc <HAL_DMA_IRQHandler+0x90>
}
 800085e:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8000860:	4718      	bx	r3
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8000862:	2402      	movs	r4, #2
 8000864:	4094      	lsls	r4, r2
 8000866:	4226      	tst	r6, r4
 8000868:	d012      	beq.n	8000890 <HAL_DMA_IRQHandler+0x64>
 800086a:	f015 0f02 	tst.w	r5, #2
 800086e:	d00f      	beq.n	8000890 <HAL_DMA_IRQHandler+0x64>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000870:	681a      	ldr	r2, [r3, #0]
 8000872:	0695      	lsls	r5, r2, #26
 8000874:	d406      	bmi.n	8000884 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000876:	681a      	ldr	r2, [r3, #0]
 8000878:	f022 020a 	bic.w	r2, r2, #10
 800087c:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800087e:	2301      	movs	r3, #1
 8000880:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8000884:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8000886:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 8000888:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferCpltCallback != NULL)
 800088c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800088e:	e7e5      	b.n	800085c <HAL_DMA_IRQHandler+0x30>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 8000890:	2408      	movs	r4, #8
 8000892:	4094      	lsls	r4, r2
 8000894:	4234      	tst	r4, r6
 8000896:	d011      	beq.n	80008bc <HAL_DMA_IRQHandler+0x90>
 8000898:	072c      	lsls	r4, r5, #28
 800089a:	d50f      	bpl.n	80008bc <HAL_DMA_IRQHandler+0x90>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800089c:	681c      	ldr	r4, [r3, #0]
 800089e:	f024 040e 	bic.w	r4, r4, #14
 80008a2:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80008a4:	2301      	movs	r3, #1
 80008a6:	fa03 f202 	lsl.w	r2, r3, r2
 80008aa:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80008ac:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 80008ae:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80008b2:	2300      	movs	r3, #0
 80008b4:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 80008b8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80008ba:	e7cf      	b.n	800085c <HAL_DMA_IRQHandler+0x30>
}
 80008bc:	bc70      	pop	{r4, r5, r6}
 80008be:	4770      	bx	lr

080008c0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80008c4:	4a55      	ldr	r2, [pc, #340]	; (8000a1c <HAL_GPIO_Init+0x15c>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008c6:	f8d1 8000 	ldr.w	r8, [r1]
  uint32_t position = 0x00u;
 80008ca:	2300      	movs	r3, #0
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80008cc:	f04f 090f 	mov.w	r9, #15
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008d0:	fa38 f403 	lsrs.w	r4, r8, r3
 80008d4:	d101      	bne.n	80008da <HAL_GPIO_Init+0x1a>
      }
    }
    
    position++;
  }
}
 80008d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80008da:	2401      	movs	r4, #1
 80008dc:	fa04 fa03 	lsl.w	sl, r4, r3
    if (iocurrent != 0x00u)
 80008e0:	ea18 050a 	ands.w	r5, r8, sl
 80008e4:	f000 808f 	beq.w	8000a06 <HAL_GPIO_Init+0x146>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008e8:	684c      	ldr	r4, [r1, #4]
 80008ea:	f024 0b10 	bic.w	fp, r4, #16
 80008ee:	f1bb 0f02 	cmp.w	fp, #2
 80008f2:	d111      	bne.n	8000918 <HAL_GPIO_Init+0x58>
        temp = GPIOx->AFR[position >> 3u];
 80008f4:	08df      	lsrs	r7, r3, #3
 80008f6:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80008fa:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 80008fe:	6a3e      	ldr	r6, [r7, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000900:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000904:	fa09 fc0e 	lsl.w	ip, r9, lr
 8000908:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800090c:	690e      	ldr	r6, [r1, #16]
 800090e:	fa06 f60e 	lsl.w	r6, r6, lr
 8000912:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3u] = temp;
 8000916:	623e      	str	r6, [r7, #32]
 8000918:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800091c:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 800091e:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000920:	fa07 f70c 	lsl.w	r7, r7, ip
 8000924:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000926:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800092a:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800092c:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000930:	f10b 3bff 	add.w	fp, fp, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000934:	ea4e 0606 	orr.w	r6, lr, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000938:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 800093c:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800093e:	d811      	bhi.n	8000964 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->OSPEEDR;
 8000940:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000942:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000946:	68ce      	ldr	r6, [r1, #12]
 8000948:	fa06 fe0c 	lsl.w	lr, r6, ip
 800094c:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 8000950:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000952:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000954:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000958:	f3c4 1600 	ubfx	r6, r4, #4, #1
 800095c:	409e      	lsls	r6, r3
 800095e:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 8000962:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8000964:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000966:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000968:	688e      	ldr	r6, [r1, #8]
 800096a:	fa06 f60c 	lsl.w	r6, r6, ip
 800096e:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000970:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 8000972:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000974:	d547      	bpl.n	8000a06 <HAL_GPIO_Init+0x146>
 8000976:	f023 0703 	bic.w	r7, r3, #3
 800097a:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800097e:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000982:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2u];
 8000986:	68be      	ldr	r6, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000988:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800098c:	fa09 fc0e 	lsl.w	ip, r9, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000990:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000994:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000998:	d037      	beq.n	8000a0a <HAL_GPIO_Init+0x14a>
 800099a:	4e21      	ldr	r6, [pc, #132]	; (8000a20 <HAL_GPIO_Init+0x160>)
 800099c:	42b0      	cmp	r0, r6
 800099e:	d036      	beq.n	8000a0e <HAL_GPIO_Init+0x14e>
 80009a0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80009a4:	42b0      	cmp	r0, r6
 80009a6:	d034      	beq.n	8000a12 <HAL_GPIO_Init+0x152>
 80009a8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80009ac:	42b0      	cmp	r0, r6
 80009ae:	d032      	beq.n	8000a16 <HAL_GPIO_Init+0x156>
 80009b0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80009b4:	42b0      	cmp	r0, r6
 80009b6:	bf14      	ite	ne
 80009b8:	2607      	movne	r6, #7
 80009ba:	2604      	moveq	r6, #4
 80009bc:	fa06 f60e 	lsl.w	r6, r6, lr
 80009c0:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 80009c4:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR1;
 80009c6:	f8d2 6080 	ldr.w	r6, [r2, #128]	; 0x80
        temp &= ~(iocurrent);
 80009ca:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80009cc:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~(iocurrent);
 80009d0:	bf0c      	ite	eq
 80009d2:	403e      	andeq	r6, r7
          temp |= iocurrent;
 80009d4:	432e      	orrne	r6, r5
        EXTI->IMR1 = temp;
 80009d6:	f8c2 6080 	str.w	r6, [r2, #128]	; 0x80
        temp = EXTI->EMR1;
 80009da:	f8d2 6084 	ldr.w	r6, [r2, #132]	; 0x84
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80009de:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~(iocurrent);
 80009e2:	bf0c      	ite	eq
 80009e4:	403e      	andeq	r6, r7
          temp |= iocurrent;
 80009e6:	432e      	orrne	r6, r5
        EXTI->EMR1 = temp;
 80009e8:	f8c2 6084 	str.w	r6, [r2, #132]	; 0x84
        temp = EXTI->RTSR1;
 80009ec:	6816      	ldr	r6, [r2, #0]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80009ee:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~(iocurrent);
 80009f2:	bf0c      	ite	eq
 80009f4:	403e      	andeq	r6, r7
          temp |= iocurrent;
 80009f6:	432e      	orrne	r6, r5
        EXTI->RTSR1 = temp;
 80009f8:	6016      	str	r6, [r2, #0]
        temp = EXTI->FTSR1;
 80009fa:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80009fc:	02a4      	lsls	r4, r4, #10
        temp &= ~(iocurrent);
 80009fe:	bf54      	ite	pl
 8000a00:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8000a02:	432e      	orrmi	r6, r5
        EXTI->FTSR1 = temp;
 8000a04:	6056      	str	r6, [r2, #4]
    position++;
 8000a06:	3301      	adds	r3, #1
 8000a08:	e762      	b.n	80008d0 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a0a:	2600      	movs	r6, #0
 8000a0c:	e7d6      	b.n	80009bc <HAL_GPIO_Init+0xfc>
 8000a0e:	2601      	movs	r6, #1
 8000a10:	e7d4      	b.n	80009bc <HAL_GPIO_Init+0xfc>
 8000a12:	2602      	movs	r6, #2
 8000a14:	e7d2      	b.n	80009bc <HAL_GPIO_Init+0xfc>
 8000a16:	2603      	movs	r6, #3
 8000a18:	e7d0      	b.n	80009bc <HAL_GPIO_Init+0xfc>
 8000a1a:	bf00      	nop
 8000a1c:	58000800 	.word	0x58000800
 8000a20:	48000400 	.word	0x48000400

08000a24 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000a24:	b10a      	cbz	r2, 8000a2a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000a26:	6181      	str	r1, [r0, #24]
 8000a28:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000a2a:	6281      	str	r1, [r0, #40]	; 0x28
 8000a2c:	4770      	bx	lr

08000a2e <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8000a2e:	6803      	ldr	r3, [r0, #0]
 8000a30:	699a      	ldr	r2, [r3, #24]
 8000a32:	0791      	lsls	r1, r2, #30
  {
    hi2c->Instance->TXDR = 0x00U;
 8000a34:	bf44      	itt	mi
 8000a36:	2200      	movmi	r2, #0
 8000a38:	629a      	strmi	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000a3a:	699a      	ldr	r2, [r3, #24]
 8000a3c:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8000a3e:	bf5e      	ittt	pl
 8000a40:	699a      	ldrpl	r2, [r3, #24]
 8000a42:	f042 0201 	orrpl.w	r2, r2, #1
 8000a46:	619a      	strpl	r2, [r3, #24]
 8000a48:	4770      	bx	lr

08000a4a <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8000a4a:	b530      	push	{r4, r5, lr}
 8000a4c:	9c03      	ldr	r4, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8000a4e:	6805      	ldr	r5, [r0, #0]
 8000a50:	4323      	orrs	r3, r4
 8000a52:	0d64      	lsrs	r4, r4, #21
 8000a54:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8000a58:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 8000a5c:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8000a60:	6868      	ldr	r0, [r5, #4]
 8000a62:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8000a66:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8000a6a:	4319      	orrs	r1, r3
 8000a6c:	f044 0403 	orr.w	r4, r4, #3
 8000a70:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000a74:	ea20 0404 	bic.w	r4, r0, r4
 8000a78:	4321      	orrs	r1, r4
 8000a7a:	6069      	str	r1, [r5, #4]
 8000a7c:	bd30      	pop	{r4, r5, pc}

08000a7e <I2C_WaitOnFlagUntilTimeout>:
{
 8000a7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a82:	9f06      	ldr	r7, [sp, #24]
 8000a84:	4604      	mov	r4, r0
 8000a86:	4688      	mov	r8, r1
 8000a88:	4616      	mov	r6, r2
 8000a8a:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000a8c:	6822      	ldr	r2, [r4, #0]
 8000a8e:	6993      	ldr	r3, [r2, #24]
 8000a90:	ea38 0303 	bics.w	r3, r8, r3
 8000a94:	bf0c      	ite	eq
 8000a96:	2301      	moveq	r3, #1
 8000a98:	2300      	movne	r3, #0
 8000a9a:	42b3      	cmp	r3, r6
 8000a9c:	d002      	beq.n	8000aa4 <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8000a9e:	2000      	movs	r0, #0
}
 8000aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8000aa4:	1c6b      	adds	r3, r5, #1
 8000aa6:	d0f2      	beq.n	8000a8e <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000aa8:	f7ff fd42 	bl	8000530 <HAL_GetTick>
 8000aac:	1bc0      	subs	r0, r0, r7
 8000aae:	4285      	cmp	r5, r0
 8000ab0:	d301      	bcc.n	8000ab6 <I2C_WaitOnFlagUntilTimeout+0x38>
 8000ab2:	2d00      	cmp	r5, #0
 8000ab4:	d1ea      	bne.n	8000a8c <I2C_WaitOnFlagUntilTimeout+0xe>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000ab6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000ab8:	f043 0320 	orr.w	r3, r3, #32
 8000abc:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000abe:	2320      	movs	r3, #32
 8000ac0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8000aca:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8000ace:	2001      	movs	r0, #1
 8000ad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000ad4 <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000ad4:	6803      	ldr	r3, [r0, #0]
{
 8000ad6:	b570      	push	{r4, r5, r6, lr}
 8000ad8:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000ada:	6998      	ldr	r0, [r3, #24]
 8000adc:	f010 0010 	ands.w	r0, r0, #16
{
 8000ae0:	460d      	mov	r5, r1
 8000ae2:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000ae4:	d116      	bne.n	8000b14 <I2C_IsAcknowledgeFailed+0x40>
 8000ae6:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 8000ae8:	1c69      	adds	r1, r5, #1
 8000aea:	d014      	beq.n	8000b16 <I2C_IsAcknowledgeFailed+0x42>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000aec:	f7ff fd20 	bl	8000530 <HAL_GetTick>
 8000af0:	1b80      	subs	r0, r0, r6
 8000af2:	4285      	cmp	r5, r0
 8000af4:	d300      	bcc.n	8000af8 <I2C_IsAcknowledgeFailed+0x24>
 8000af6:	b96d      	cbnz	r5, 8000b14 <I2C_IsAcknowledgeFailed+0x40>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000af8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000afa:	f043 0320 	orr.w	r3, r3, #32
 8000afe:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000b00:	2320      	movs	r3, #32
 8000b02:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000b06:	2300      	movs	r3, #0
 8000b08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8000b0c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 8000b10:	2001      	movs	r0, #1
}
 8000b12:	bd70      	pop	{r4, r5, r6, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000b14:	6823      	ldr	r3, [r4, #0]
 8000b16:	6999      	ldr	r1, [r3, #24]
 8000b18:	068a      	lsls	r2, r1, #26
 8000b1a:	d5e5      	bpl.n	8000ae8 <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000b1c:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000b1e:	2520      	movs	r5, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000b20:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8000b22:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000b24:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8000b26:	f7ff ff82 	bl	8000a2e <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8000b2a:	6822      	ldr	r2, [r4, #0]
 8000b2c:	6853      	ldr	r3, [r2, #4]
 8000b2e:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8000b32:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8000b36:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8000b3a:	f023 0301 	bic.w	r3, r3, #1
 8000b3e:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8000b40:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000b42:	f043 0304 	orr.w	r3, r3, #4
 8000b46:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8000b48:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
 8000b4c:	e7db      	b.n	8000b06 <I2C_IsAcknowledgeFailed+0x32>

08000b4e <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8000b4e:	b570      	push	{r4, r5, r6, lr}
 8000b50:	4604      	mov	r4, r0
 8000b52:	460d      	mov	r5, r1
 8000b54:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8000b56:	6823      	ldr	r3, [r4, #0]
 8000b58:	699b      	ldr	r3, [r3, #24]
 8000b5a:	079b      	lsls	r3, r3, #30
 8000b5c:	d501      	bpl.n	8000b62 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8000b5e:	2000      	movs	r0, #0
 8000b60:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000b62:	4632      	mov	r2, r6
 8000b64:	4629      	mov	r1, r5
 8000b66:	4620      	mov	r0, r4
 8000b68:	f7ff ffb4 	bl	8000ad4 <I2C_IsAcknowledgeFailed>
 8000b6c:	b9a0      	cbnz	r0, 8000b98 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8000b6e:	1c6a      	adds	r2, r5, #1
 8000b70:	d0f1      	beq.n	8000b56 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000b72:	f7ff fcdd 	bl	8000530 <HAL_GetTick>
 8000b76:	1b80      	subs	r0, r0, r6
 8000b78:	4285      	cmp	r5, r0
 8000b7a:	d301      	bcc.n	8000b80 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8000b7c:	2d00      	cmp	r5, #0
 8000b7e:	d1ea      	bne.n	8000b56 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000b80:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000b82:	f043 0320 	orr.w	r3, r3, #32
 8000b86:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000b88:	2320      	movs	r3, #32
 8000b8a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8000b94:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8000b98:	2001      	movs	r0, #1
}
 8000b9a:	bd70      	pop	{r4, r5, r6, pc}

08000b9c <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8000b9c:	b570      	push	{r4, r5, r6, lr}
 8000b9e:	4604      	mov	r4, r0
 8000ba0:	460d      	mov	r5, r1
 8000ba2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000ba4:	6823      	ldr	r3, [r4, #0]
 8000ba6:	699b      	ldr	r3, [r3, #24]
 8000ba8:	069b      	lsls	r3, r3, #26
 8000baa:	d501      	bpl.n	8000bb0 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8000bac:	2000      	movs	r0, #0
 8000bae:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000bb0:	4632      	mov	r2, r6
 8000bb2:	4629      	mov	r1, r5
 8000bb4:	4620      	mov	r0, r4
 8000bb6:	f7ff ff8d 	bl	8000ad4 <I2C_IsAcknowledgeFailed>
 8000bba:	b990      	cbnz	r0, 8000be2 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000bbc:	f7ff fcb8 	bl	8000530 <HAL_GetTick>
 8000bc0:	1b80      	subs	r0, r0, r6
 8000bc2:	4285      	cmp	r5, r0
 8000bc4:	d301      	bcc.n	8000bca <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8000bc6:	2d00      	cmp	r5, #0
 8000bc8:	d1ec      	bne.n	8000ba4 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000bca:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000bcc:	f043 0320 	orr.w	r3, r3, #32
 8000bd0:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000bd2:	2320      	movs	r3, #32
 8000bd4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8000bde:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8000be2:	2001      	movs	r0, #1
}
 8000be4:	bd70      	pop	{r4, r5, r6, pc}

08000be6 <HAL_I2C_Init>:
{
 8000be6:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8000be8:	4604      	mov	r4, r0
 8000bea:	2800      	cmp	r0, #0
 8000bec:	d04a      	beq.n	8000c84 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000bee:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000bf2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000bf6:	b91b      	cbnz	r3, 8000c00 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8000bf8:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8000bfc:	f002 fba2 	bl	8003344 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000c00:	2324      	movs	r3, #36	; 0x24
 8000c02:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8000c06:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000c08:	68e1      	ldr	r1, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	f022 0201 	bic.w	r2, r2, #1
 8000c10:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000c12:	6862      	ldr	r2, [r4, #4]
 8000c14:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000c18:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000c1a:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000c1c:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000c1e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000c22:	609a      	str	r2, [r3, #8]
 8000c24:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000c26:	d124      	bne.n	8000c72 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000c28:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000c2c:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000c2e:	685a      	ldr	r2, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000c30:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000c32:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8000c36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000c3a:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000c3c:	68da      	ldr	r2, [r3, #12]
 8000c3e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000c42:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000c44:	6922      	ldr	r2, [r4, #16]
 8000c46:	430a      	orrs	r2, r1
 8000c48:	69a1      	ldr	r1, [r4, #24]
 8000c4a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000c4e:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000c50:	6a21      	ldr	r1, [r4, #32]
 8000c52:	69e2      	ldr	r2, [r4, #28]
 8000c54:	430a      	orrs	r2, r1
 8000c56:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8000c58:	681a      	ldr	r2, [r3, #0]
 8000c5a:	f042 0201 	orr.w	r2, r2, #1
 8000c5e:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000c60:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8000c62:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000c64:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000c66:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000c6a:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000c6c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 8000c70:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000c72:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000c76:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000c78:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000c7a:	bf04      	itt	eq
 8000c7c:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8000c80:	605a      	streq	r2, [r3, #4]
 8000c82:	e7d4      	b.n	8000c2e <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8000c84:	2001      	movs	r0, #1
}
 8000c86:	bd10      	pop	{r4, pc}

08000c88 <HAL_I2C_Master_Transmit>:
{
 8000c88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8000c8c:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000c8e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000c92:	2b20      	cmp	r3, #32
{
 8000c94:	4604      	mov	r4, r0
 8000c96:	460e      	mov	r6, r1
 8000c98:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000c9a:	f040 8084 	bne.w	8000da6 <HAL_I2C_Master_Transmit+0x11e>
    __HAL_LOCK(hi2c);
 8000c9e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	d07f      	beq.n	8000da6 <HAL_I2C_Master_Transmit+0x11e>
 8000ca6:	2701      	movs	r7, #1
 8000ca8:	f880 7040 	strb.w	r7, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8000cac:	f7ff fc40 	bl	8000530 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000cb0:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8000cb2:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000cb4:	9000      	str	r0, [sp, #0]
 8000cb6:	463a      	mov	r2, r7
 8000cb8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cbc:	4620      	mov	r0, r4
 8000cbe:	f7ff fede 	bl	8000a7e <I2C_WaitOnFlagUntilTimeout>
 8000cc2:	b118      	cbz	r0, 8000ccc <HAL_I2C_Master_Transmit+0x44>
      return HAL_ERROR;
 8000cc4:	2001      	movs	r0, #1
}
 8000cc6:	b003      	add	sp, #12
 8000cc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000ccc:	2321      	movs	r3, #33	; 0x21
 8000cce:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000cd2:	2310      	movs	r3, #16
 8000cd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000cd8:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8000cda:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000cde:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 8000ce0:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000ce4:	b29b      	uxth	r3, r3
 8000ce6:	2bff      	cmp	r3, #255	; 0xff
    hi2c->XferISR   = NULL;
 8000ce8:	6360      	str	r0, [r4, #52]	; 0x34
 8000cea:	4b30      	ldr	r3, [pc, #192]	; (8000dac <HAL_I2C_Master_Transmit+0x124>)
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000cec:	d926      	bls.n	8000d3c <HAL_I2C_Master_Transmit+0xb4>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000cee:	22ff      	movs	r2, #255	; 0xff
 8000cf0:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8000cf2:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000cf4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000cf8:	4631      	mov	r1, r6
 8000cfa:	4620      	mov	r0, r4
 8000cfc:	f7ff fea5 	bl	8000a4a <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8000d00:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000d02:	990a      	ldr	r1, [sp, #40]	; 0x28
    while (hi2c->XferCount > 0U)
 8000d04:	b29b      	uxth	r3, r3
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000d06:	462a      	mov	r2, r5
 8000d08:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8000d0a:	b9fb      	cbnz	r3, 8000d4c <HAL_I2C_Master_Transmit+0xc4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000d0c:	f7ff ff46 	bl	8000b9c <I2C_WaitOnSTOPFlagUntilTimeout>
 8000d10:	2800      	cmp	r0, #0
 8000d12:	d1d7      	bne.n	8000cc4 <HAL_I2C_Master_Transmit+0x3c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000d14:	6823      	ldr	r3, [r4, #0]
 8000d16:	2120      	movs	r1, #32
 8000d18:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8000d1a:	685a      	ldr	r2, [r3, #4]
 8000d1c:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8000d20:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8000d24:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8000d28:	f022 0201 	bic.w	r2, r2, #1
 8000d2c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8000d2e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000d32:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000d36:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8000d3a:	e7c4      	b.n	8000cc6 <HAL_I2C_Master_Transmit+0x3e>
      hi2c->XferSize = hi2c->XferCount;
 8000d3c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8000d3e:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8000d40:	b292      	uxth	r2, r2
 8000d42:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000d44:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000d48:	b2d2      	uxtb	r2, r2
 8000d4a:	e7d5      	b.n	8000cf8 <HAL_I2C_Master_Transmit+0x70>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000d4c:	f7ff feff 	bl	8000b4e <I2C_WaitOnTXISFlagUntilTimeout>
 8000d50:	2800      	cmp	r0, #0
 8000d52:	d1b7      	bne.n	8000cc4 <HAL_I2C_Master_Transmit+0x3c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000d54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000d56:	6822      	ldr	r2, [r4, #0]
 8000d58:	f813 1b01 	ldrb.w	r1, [r3], #1
 8000d5c:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8000d5e:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8000d60:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000d62:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8000d64:	3b01      	subs	r3, #1
 8000d66:	b29b      	uxth	r3, r3
 8000d68:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000d6a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000d6c:	3a01      	subs	r2, #1
 8000d6e:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000d70:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8000d72:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d0c3      	beq.n	8000d00 <HAL_I2C_Master_Transmit+0x78>
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	d1c1      	bne.n	8000d00 <HAL_I2C_Master_Transmit+0x78>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000d7c:	9500      	str	r5, [sp, #0]
 8000d7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000d80:	2180      	movs	r1, #128	; 0x80
 8000d82:	4620      	mov	r0, r4
 8000d84:	f7ff fe7b 	bl	8000a7e <I2C_WaitOnFlagUntilTimeout>
 8000d88:	2800      	cmp	r0, #0
 8000d8a:	d19b      	bne.n	8000cc4 <HAL_I2C_Master_Transmit+0x3c>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000d8c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000d8e:	b29b      	uxth	r3, r3
 8000d90:	2bff      	cmp	r3, #255	; 0xff
 8000d92:	d903      	bls.n	8000d9c <HAL_I2C_Master_Transmit+0x114>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000d94:	22ff      	movs	r2, #255	; 0xff
 8000d96:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000d98:	9000      	str	r0, [sp, #0]
 8000d9a:	e7ab      	b.n	8000cf4 <HAL_I2C_Master_Transmit+0x6c>
          hi2c->XferSize = hi2c->XferCount;
 8000d9c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000d9e:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8000da0:	b292      	uxth	r2, r2
 8000da2:	8522      	strh	r2, [r4, #40]	; 0x28
 8000da4:	e7ce      	b.n	8000d44 <HAL_I2C_Master_Transmit+0xbc>
    return HAL_BUSY;
 8000da6:	2002      	movs	r0, #2
 8000da8:	e78d      	b.n	8000cc6 <HAL_I2C_Master_Transmit+0x3e>
 8000daa:	bf00      	nop
 8000dac:	80002000 	.word	0x80002000

08000db0 <HAL_I2C_IsDeviceReady>:
{
 8000db0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000db4:	461d      	mov	r5, r3
  __IO uint32_t I2C_Trials = 0UL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000dba:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000dbe:	2b20      	cmp	r3, #32
{
 8000dc0:	4604      	mov	r4, r0
 8000dc2:	4690      	mov	r8, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000dc4:	d17d      	bne.n	8000ec2 <HAL_I2C_IsDeviceReady+0x112>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8000dc6:	6803      	ldr	r3, [r0, #0]
 8000dc8:	699b      	ldr	r3, [r3, #24]
 8000dca:	f413 4300 	ands.w	r3, r3, #32768	; 0x8000
 8000dce:	d178      	bne.n	8000ec2 <HAL_I2C_IsDeviceReady+0x112>
    __HAL_LOCK(hi2c);
 8000dd0:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8000dd4:	2a01      	cmp	r2, #1
 8000dd6:	d074      	beq.n	8000ec2 <HAL_I2C_IsDeviceReady+0x112>
 8000dd8:	2201      	movs	r2, #1
 8000dda:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
 8000dde:	f3c1 0609 	ubfx	r6, r1, #0, #10
    hi2c->State = HAL_I2C_STATE_BUSY;
 8000de2:	2224      	movs	r2, #36	; 0x24
 8000de4:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8000de8:	f446 5920 	orr.w	r9, r6, #10240	; 0x2800
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000dec:	6443      	str	r3, [r0, #68]	; 0x44
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8000dee:	68e3      	ldr	r3, [r4, #12]
 8000df0:	6822      	ldr	r2, [r4, #0]
 8000df2:	2b01      	cmp	r3, #1
 8000df4:	bf06      	itte	eq
 8000df6:	f046 7300 	orreq.w	r3, r6, #33554432	; 0x2000000
 8000dfa:	f443 5300 	orreq.w	r3, r3, #8192	; 0x2000
 8000dfe:	464b      	movne	r3, r9
 8000e00:	6053      	str	r3, [r2, #4]
      tickstart = HAL_GetTick();
 8000e02:	f7ff fb95 	bl	8000530 <HAL_GetTick>
 8000e06:	4607      	mov	r7, r0
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8000e08:	6823      	ldr	r3, [r4, #0]
 8000e0a:	699a      	ldr	r2, [r3, #24]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8000e0c:	699b      	ldr	r3, [r3, #24]
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8000e0e:	f3c2 1240 	ubfx	r2, r2, #5, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8000e12:	f3c3 1300 	ubfx	r3, r3, #4, #1
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8000e16:	b902      	cbnz	r2, 8000e1a <HAL_I2C_IsDeviceReady+0x6a>
 8000e18:	b16b      	cbz	r3, 8000e36 <HAL_I2C_IsDeviceReady+0x86>
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8000e1a:	6823      	ldr	r3, [r4, #0]
 8000e1c:	699a      	ldr	r2, [r3, #24]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8000e1e:	9700      	str	r7, [sp, #0]
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8000e20:	f012 0210 	ands.w	r2, r2, #16
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8000e24:	462b      	mov	r3, r5
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8000e26:	d124      	bne.n	8000e72 <HAL_I2C_IsDeviceReady+0xc2>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8000e28:	2120      	movs	r1, #32
 8000e2a:	4620      	mov	r0, r4
 8000e2c:	f7ff fe27 	bl	8000a7e <I2C_WaitOnFlagUntilTimeout>
 8000e30:	b1a8      	cbz	r0, 8000e5e <HAL_I2C_IsDeviceReady+0xae>
    return HAL_ERROR;
 8000e32:	2001      	movs	r0, #1
 8000e34:	e01a      	b.n	8000e6c <HAL_I2C_IsDeviceReady+0xbc>
        if (Timeout != HAL_MAX_DELAY)
 8000e36:	1c6b      	adds	r3, r5, #1
 8000e38:	d0e6      	beq.n	8000e08 <HAL_I2C_IsDeviceReady+0x58>
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8000e3a:	f7ff fb79 	bl	8000530 <HAL_GetTick>
 8000e3e:	1bc0      	subs	r0, r0, r7
 8000e40:	4285      	cmp	r5, r0
 8000e42:	d301      	bcc.n	8000e48 <HAL_I2C_IsDeviceReady+0x98>
 8000e44:	2d00      	cmp	r5, #0
 8000e46:	d1df      	bne.n	8000e08 <HAL_I2C_IsDeviceReady+0x58>
    hi2c->State = HAL_I2C_STATE_READY;
 8000e48:	2320      	movs	r3, #32
 8000e4a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000e4e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000e50:	f043 0320 	orr.w	r3, r3, #32
 8000e54:	6463      	str	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 8000e56:	2300      	movs	r3, #0
 8000e58:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8000e5c:	e7e9      	b.n	8000e32 <HAL_I2C_IsDeviceReady+0x82>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000e5e:	6822      	ldr	r2, [r4, #0]
 8000e60:	2320      	movs	r3, #32
 8000e62:	61d3      	str	r3, [r2, #28]
        hi2c->State = HAL_I2C_STATE_READY;
 8000e64:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        __HAL_UNLOCK(hi2c);
 8000e68:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 8000e6c:	b004      	add	sp, #16
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8000e72:	2200      	movs	r2, #0
 8000e74:	2120      	movs	r1, #32
 8000e76:	4620      	mov	r0, r4
 8000e78:	f7ff fe01 	bl	8000a7e <I2C_WaitOnFlagUntilTimeout>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	2800      	cmp	r0, #0
 8000e80:	d1d7      	bne.n	8000e32 <HAL_I2C_IsDeviceReady+0x82>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000e82:	6823      	ldr	r3, [r4, #0]
 8000e84:	2110      	movs	r1, #16
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000e86:	f04f 0a20 	mov.w	sl, #32
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000e8a:	61d9      	str	r1, [r3, #28]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000e8c:	f8c3 a01c 	str.w	sl, [r3, #28]
      if (I2C_Trials == Trials)
 8000e90:	9903      	ldr	r1, [sp, #12]
 8000e92:	4541      	cmp	r1, r8
 8000e94:	d10e      	bne.n	8000eb4 <HAL_I2C_IsDeviceReady+0x104>
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8000e96:	6859      	ldr	r1, [r3, #4]
 8000e98:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8000e9c:	6059      	str	r1, [r3, #4]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8000e9e:	4620      	mov	r0, r4
 8000ea0:	9700      	str	r7, [sp, #0]
 8000ea2:	462b      	mov	r3, r5
 8000ea4:	4651      	mov	r1, sl
 8000ea6:	f7ff fdea 	bl	8000a7e <I2C_WaitOnFlagUntilTimeout>
 8000eaa:	2800      	cmp	r0, #0
 8000eac:	d1c1      	bne.n	8000e32 <HAL_I2C_IsDeviceReady+0x82>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000eae:	6823      	ldr	r3, [r4, #0]
 8000eb0:	f8c3 a01c 	str.w	sl, [r3, #28]
      I2C_Trials++;
 8000eb4:	9b03      	ldr	r3, [sp, #12]
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	9303      	str	r3, [sp, #12]
    while (I2C_Trials < Trials);
 8000eba:	9b03      	ldr	r3, [sp, #12]
 8000ebc:	4598      	cmp	r8, r3
 8000ebe:	d896      	bhi.n	8000dee <HAL_I2C_IsDeviceReady+0x3e>
 8000ec0:	e7c2      	b.n	8000e48 <HAL_I2C_IsDeviceReady+0x98>
    return HAL_BUSY;
 8000ec2:	2002      	movs	r0, #2
 8000ec4:	e7d2      	b.n	8000e6c <HAL_I2C_IsDeviceReady+0xbc>

08000ec6 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000ec6:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8000eca:	b2d2      	uxtb	r2, r2
 8000ecc:	2a20      	cmp	r2, #32
{
 8000ece:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000ed0:	d11d      	bne.n	8000f0e <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000ed2:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d019      	beq.n	8000f0e <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000eda:	2324      	movs	r3, #36	; 0x24
 8000edc:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000ee0:	6803      	ldr	r3, [r0, #0]
 8000ee2:	681c      	ldr	r4, [r3, #0]
 8000ee4:	f024 0401 	bic.w	r4, r4, #1
 8000ee8:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000eea:	681c      	ldr	r4, [r3, #0]
 8000eec:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8000ef0:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8000ef2:	681c      	ldr	r4, [r3, #0]
 8000ef4:	4321      	orrs	r1, r4
 8000ef6:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000ef8:	6819      	ldr	r1, [r3, #0]
 8000efa:	f041 0101 	orr.w	r1, r1, #1
 8000efe:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000f00:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000f02:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000f06:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8000f0e:	2002      	movs	r0, #2
  }
}
 8000f10:	bd10      	pop	{r4, pc}

08000f12 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000f12:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f14:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8000f18:	b2e4      	uxtb	r4, r4
 8000f1a:	2c20      	cmp	r4, #32
 8000f1c:	d11c      	bne.n	8000f58 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000f1e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	d018      	beq.n	8000f58 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000f26:	2324      	movs	r3, #36	; 0x24
 8000f28:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000f2c:	6803      	ldr	r3, [r0, #0]
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	f022 0201 	bic.w	r2, r2, #1
 8000f34:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8000f36:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8000f38:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8000f3c:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8000f40:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	f042 0201 	orr.w	r2, r2, #1
 8000f48:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000f4a:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000f4c:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000f50:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8000f54:	4618      	mov	r0, r3
 8000f56:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8000f58:	2002      	movs	r0, #2
  }
}
 8000f5a:	bd10      	pop	{r4, pc}

08000f5c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000f5c:	b570      	push	{r4, r5, r6, lr}
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000f5e:	4604      	mov	r4, r0
{
 8000f60:	b086      	sub	sp, #24
  if (hpcd == NULL)
 8000f62:	2800      	cmp	r0, #0
 8000f64:	d057      	beq.n	8001016 <HAL_PCD_Init+0xba>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000f66:	f890 3229 	ldrb.w	r3, [r0, #553]	; 0x229
 8000f6a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000f6e:	b91b      	cbnz	r3, 8000f78 <HAL_PCD_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000f70:	f880 2228 	strb.w	r2, [r0, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000f74:	f002 fa8c 	bl	8003490 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000f7e:	6820      	ldr	r0, [r4, #0]
 8000f80:	f001 fedf 	bl	8002d42 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f84:	2200      	movs	r2, #0
 8000f86:	6860      	ldr	r0, [r4, #4]
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000f88:	2601      	movs	r6, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000f8a:	4615      	mov	r5, r2
 8000f8c:	b2d3      	uxtb	r3, r2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f8e:	4298      	cmp	r0, r3
 8000f90:	f102 0201 	add.w	r2, r2, #1
 8000f94:	d820      	bhi.n	8000fd8 <HAL_PCD_Init+0x7c>
 8000f96:	2200      	movs	r2, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000f98:	4611      	mov	r1, r2
 8000f9a:	b2d3      	uxtb	r3, r2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f9c:	4298      	cmp	r0, r3
 8000f9e:	f102 0201 	add.w	r2, r2, #1
 8000fa2:	d828      	bhi.n	8000ff6 <HAL_PCD_Init+0x9a>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8000fa4:	f104 0610 	add.w	r6, r4, #16
 8000fa8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000faa:	466d      	mov	r5, sp
 8000fac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fae:	6833      	ldr	r3, [r6, #0]
 8000fb0:	602b      	str	r3, [r5, #0]
 8000fb2:	1d23      	adds	r3, r4, #4
 8000fb4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fb6:	6820      	ldr	r0, [r4, #0]
 8000fb8:	f001 fecd 	bl	8002d56 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8000fbc:	2500      	movs	r5, #0
  hpcd->State = HAL_PCD_STATE_READY;
 8000fbe:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 8000fc0:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000fc4:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000fc8:	69e3      	ldr	r3, [r4, #28]
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d102      	bne.n	8000fd4 <HAL_PCD_Init+0x78>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000fce:	4620      	mov	r0, r4
 8000fd0:	f000 f824 	bl	800101c <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 8000fd4:	4628      	mov	r0, r5
 8000fd6:	e01f      	b.n	8001018 <HAL_PCD_Init+0xbc>
    hpcd->IN_ep[i].is_in = 1U;
 8000fd8:	eb04 1143 	add.w	r1, r4, r3, lsl #5
    hpcd->IN_ep[i].num = i;
 8000fdc:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000fe0:	86cb      	strh	r3, [r1, #54]	; 0x36
    hpcd->IN_ep[i].xfer_len = 0U;
 8000fe2:	3302      	adds	r3, #2
 8000fe4:	015b      	lsls	r3, r3, #5
    hpcd->IN_ep[i].is_in = 1U;
 8000fe6:	f881 6029 	strb.w	r6, [r1, #41]	; 0x29
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000fea:	f881 502b 	strb.w	r5, [r1, #43]	; 0x2b
    hpcd->IN_ep[i].maxpacket = 0U;
 8000fee:	638d      	str	r5, [r1, #56]	; 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000ff0:	63cd      	str	r5, [r1, #60]	; 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 8000ff2:	50e5      	str	r5, [r4, r3]
 8000ff4:	e7ca      	b.n	8000f8c <HAL_PCD_Init+0x30>
    hpcd->OUT_ep[i].is_in = 0U;
 8000ff6:	eb04 1543 	add.w	r5, r4, r3, lsl #5
    hpcd->OUT_ep[i].num = i;
 8000ffa:	f885 3128 	strb.w	r3, [r5, #296]	; 0x128
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000ffe:	330a      	adds	r3, #10
 8001000:	015b      	lsls	r3, r3, #5
    hpcd->OUT_ep[i].is_in = 0U;
 8001002:	f885 1129 	strb.w	r1, [r5, #297]	; 0x129
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001006:	f885 112b 	strb.w	r1, [r5, #299]	; 0x12b
    hpcd->OUT_ep[i].maxpacket = 0U;
 800100a:	f8c5 1138 	str.w	r1, [r5, #312]	; 0x138
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800100e:	f8c5 113c 	str.w	r1, [r5, #316]	; 0x13c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001012:	50e1      	str	r1, [r4, r3]
 8001014:	e7c1      	b.n	8000f9a <HAL_PCD_Init+0x3e>
    return HAL_ERROR;
 8001016:	2001      	movs	r0, #1
}
 8001018:	b006      	add	sp, #24
 800101a:	bd70      	pop	{r4, r5, r6, pc}

0800101c <HAL_PCDEx_ActivateLPM>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{

  USB_TypeDef *USBx = hpcd->Instance;
 800101c:	6802      	ldr	r2, [r0, #0]
{
 800101e:	4603      	mov	r3, r0
  hpcd->lpm_active = 1U;
 8001020:	2101      	movs	r1, #1
 8001022:	f8c0 1268 	str.w	r1, [r0, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 8001026:	2000      	movs	r0, #0
 8001028:	f883 0260 	strb.w	r0, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800102c:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
 8001030:	b29b      	uxth	r3, r3
 8001032:	430b      	orrs	r3, r1
 8001034:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001038:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
 800103c:	b29b      	uxth	r3, r3
 800103e:	f043 0302 	orr.w	r3, r3, #2
 8001042:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 8001046:	4770      	bx	lr

08001048 <HAL_PWR_EnableBkUpAccess>:
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001048:	4a02      	ldr	r2, [pc, #8]	; (8001054 <HAL_PWR_EnableBkUpAccess+0xc>)
 800104a:	6813      	ldr	r3, [r2, #0]
 800104c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001050:	6013      	str	r3, [r2, #0]
 8001052:	4770      	bx	lr
 8001054:	58000400 	.word	0x58000400

08001058 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001058:	4b02      	ldr	r3, [pc, #8]	; (8001064 <HAL_PWREx_GetVoltageRange+0xc>)
 800105a:	6818      	ldr	r0, [r3, #0]
}
 800105c:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	58000400 	.word	0x58000400

08001068 <LL_RCC_HSE_IsReady>:
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001068:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800106c:	6818      	ldr	r0, [r3, #0]
}
 800106e:	f3c0 4040 	ubfx	r0, r0, #17, #1
 8001072:	4770      	bx	lr

08001074 <LL_RCC_HSI_IsReady>:
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001074:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001078:	6818      	ldr	r0, [r3, #0]
}
 800107a:	f3c0 2080 	ubfx	r0, r0, #10, #1
 800107e:	4770      	bx	lr

08001080 <LL_RCC_LSI1_IsReady>:
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8001080:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001084:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
}
 8001088:	f3c0 0040 	ubfx	r0, r0, #1, #1
 800108c:	4770      	bx	lr

0800108e <LL_RCC_MSI_IsReady>:
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800108e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001092:	6818      	ldr	r0, [r3, #0]
}
 8001094:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8001098:	4770      	bx	lr

0800109a <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800109a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800109e:	6813      	ldr	r3, [r2, #0]
 80010a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80010a4:	4318      	orrs	r0, r3
 80010a6:	6010      	str	r0, [r2, #0]
 80010a8:	4770      	bx	lr

080010aa <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80010aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010ae:	6818      	ldr	r0, [r3, #0]
 80010b0:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
  if (msiRange > LL_RCC_MSIRANGE_11)
  {
    msiRange = LL_RCC_MSIRANGE_11;
  }
  return msiRange;
}
 80010b4:	28b0      	cmp	r0, #176	; 0xb0
 80010b6:	bf28      	it	cs
 80010b8:	20b0      	movcs	r0, #176	; 0xb0
 80010ba:	4770      	bx	lr

080010bc <LL_RCC_MSI_SetCalibTrimming>:
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80010bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010c0:	6853      	ldr	r3, [r2, #4]
 80010c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80010c6:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 80010ca:	6050      	str	r0, [r2, #4]
 80010cc:	4770      	bx	lr

080010ce <LL_RCC_PLL_IsReady>:
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80010ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010d2:	6818      	ldr	r0, [r3, #0]
}
 80010d4:	f3c0 6040 	ubfx	r0, r0, #25, #1
 80010d8:	4770      	bx	lr
	...

080010dc <RCC_SetFlashLatencyFromMSIRange>:

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80010dc:	28b0      	cmp	r0, #176	; 0xb0
 80010de:	4b32      	ldr	r3, [pc, #200]	; (80011a8 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80010e0:	4a32      	ldr	r2, [pc, #200]	; (80011ac <RCC_SetFlashLatencyFromMSIRange+0xd0>)
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80010e2:	bf98      	it	ls
 80010e4:	0900      	lsrls	r0, r0, #4
{
 80010e6:	b5f0      	push	{r4, r5, r6, r7, lr}
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80010e8:	bf8c      	ite	hi
 80010ea:	6add      	ldrhi	r5, [r3, #44]	; 0x2c
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80010ec:	f853 5020 	ldrls.w	r5, [r3, r0, lsl #2]
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80010f0:	4c2f      	ldr	r4, [pc, #188]	; (80011b0 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80010f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
{
 80010f6:	b08d      	sub	sp, #52	; 0x34
 80010f8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80010fc:	f003 030f 	and.w	r3, r3, #15
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8001100:	ae04      	add	r6, sp, #16
  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8001102:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001106:	fbb5 f5f3 	udiv	r5, r5, r3
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800110a:	4b2a      	ldr	r3, [pc, #168]	; (80011b4 <RCC_SetFlashLatencyFromMSIRange+0xd8>)
 800110c:	fbb5 f5f3 	udiv	r5, r5, r3
 8001110:	f7ff ffa2 	bl	8001058 <HAL_PWREx_GetVoltageRange>
 8001114:	4607      	mov	r7, r0
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8001116:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800111a:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800111e:	f104 0210 	add.w	r2, r4, #16
 8001122:	ca07      	ldmia	r2, {r0, r1, r2}
 8001124:	ab01      	add	r3, sp, #4
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8001126:	341c      	adds	r4, #28
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8001128:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800112c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001130:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8001134:	ac0c      	add	r4, sp, #48	; 0x30
 8001136:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800113a:	d11f      	bne.n	800117c <RCC_SetFlashLatencyFromMSIRange+0xa0>
 800113c:	2300      	movs	r3, #0
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800113e:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
 8001142:	4295      	cmp	r5, r2
 8001144:	d815      	bhi.n	8001172 <RCC_SetFlashLatencyFromMSIRange+0x96>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
      {
        latency = FLASH_LATENCY_RANGE[index];
 8001146:	aa0c      	add	r2, sp, #48	; 0x30
 8001148:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800114c:	f853 4c10 	ldr.w	r4, [r3, #-16]
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8001150:	4d19      	ldr	r5, [pc, #100]	; (80011b8 <RCC_SetFlashLatencyFromMSIRange+0xdc>)
 8001152:	682b      	ldr	r3, [r5, #0]
 8001154:	f023 0307 	bic.w	r3, r3, #7
 8001158:	4323      	orrs	r3, r4
 800115a:	602b      	str	r3, [r5, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800115c:	f7ff f9e8 	bl	8000530 <HAL_GetTick>
 8001160:	4606      	mov	r6, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8001162:	682b      	ldr	r3, [r5, #0]
 8001164:	f003 0307 	and.w	r3, r3, #7
 8001168:	429c      	cmp	r4, r3
 800116a:	d116      	bne.n	800119a <RCC_SetFlashLatencyFromMSIRange+0xbe>
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 800116c:	2000      	movs	r0, #0
}
 800116e:	b00d      	add	sp, #52	; 0x34
 8001170:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8001172:	3301      	adds	r3, #1
 8001174:	2b04      	cmp	r3, #4
 8001176:	d1e2      	bne.n	800113e <RCC_SetFlashLatencyFromMSIRange+0x62>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8001178:	2400      	movs	r4, #0
 800117a:	e7e9      	b.n	8001150 <RCC_SetFlashLatencyFromMSIRange+0x74>
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800117c:	9b01      	ldr	r3, [sp, #4]
 800117e:	429d      	cmp	r5, r3
 8001180:	d907      	bls.n	8001192 <RCC_SetFlashLatencyFromMSIRange+0xb6>
 8001182:	9b02      	ldr	r3, [sp, #8]
 8001184:	429d      	cmp	r5, r3
 8001186:	d906      	bls.n	8001196 <RCC_SetFlashLatencyFromMSIRange+0xba>
 8001188:	9b03      	ldr	r3, [sp, #12]
 800118a:	429d      	cmp	r5, r3
 800118c:	d8f4      	bhi.n	8001178 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800118e:	2302      	movs	r3, #2
 8001190:	e7d9      	b.n	8001146 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8001192:	2300      	movs	r3, #0
 8001194:	e7d7      	b.n	8001146 <RCC_SetFlashLatencyFromMSIRange+0x6a>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8001196:	2301      	movs	r3, #1
 8001198:	e7d5      	b.n	8001146 <RCC_SetFlashLatencyFromMSIRange+0x6a>
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800119a:	f7ff f9c9 	bl	8000530 <HAL_GetTick>
 800119e:	1b80      	subs	r0, r0, r6
 80011a0:	2802      	cmp	r0, #2
 80011a2:	d9de      	bls.n	8001162 <RCC_SetFlashLatencyFromMSIRange+0x86>
      return HAL_TIMEOUT;
 80011a4:	2003      	movs	r0, #3
 80011a6:	e7e2      	b.n	800116e <RCC_SetFlashLatencyFromMSIRange+0x92>
 80011a8:	08003778 	.word	0x08003778
 80011ac:	08003718 	.word	0x08003718
 80011b0:	080036e4 	.word	0x080036e4
 80011b4:	000f4240 	.word	0x000f4240
 80011b8:	58004000 	.word	0x58004000

080011bc <HAL_RCC_OscConfig>:
{
 80011bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (RCC_OscInitStruct == NULL)
 80011be:	4604      	mov	r4, r0
 80011c0:	b908      	cbnz	r0, 80011c6 <HAL_RCC_OscConfig+0xa>
        return HAL_ERROR;
 80011c2:	2001      	movs	r0, #1
 80011c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80011c6:	6803      	ldr	r3, [r0, #0]
 80011c8:	069d      	lsls	r5, r3, #26
 80011ca:	d52a      	bpl.n	8001222 <HAL_RCC_OscConfig+0x66>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80011cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011d0:	6893      	ldr	r3, [r2, #8]
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80011d2:	68d2      	ldr	r2, [r2, #12]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80011d4:	f013 030c 	ands.w	r3, r3, #12
 80011d8:	d005      	beq.n	80011e6 <HAL_RCC_OscConfig+0x2a>
 80011da:	2b0c      	cmp	r3, #12
 80011dc:	d146      	bne.n	800126c <HAL_RCC_OscConfig+0xb0>
 80011de:	f002 0303 	and.w	r3, r2, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d142      	bne.n	800126c <HAL_RCC_OscConfig+0xb0>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011e6:	f7ff ff52 	bl	800108e <LL_RCC_MSI_IsReady>
 80011ea:	b110      	cbz	r0, 80011f2 <HAL_RCC_OscConfig+0x36>
 80011ec:	69e3      	ldr	r3, [r4, #28]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d0e7      	beq.n	80011c2 <HAL_RCC_OscConfig+0x6>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80011f2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80011f4:	f7ff ff59 	bl	80010aa <LL_RCC_MSI_GetRange>
 80011f8:	4282      	cmp	r2, r0
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80011fa:	6a60      	ldr	r0, [r4, #36]	; 0x24
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80011fc:	d92b      	bls.n	8001256 <HAL_RCC_OscConfig+0x9a>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80011fe:	f7ff ff6d 	bl	80010dc <RCC_SetFlashLatencyFromMSIRange>
 8001202:	2800      	cmp	r0, #0
 8001204:	d1dd      	bne.n	80011c2 <HAL_RCC_OscConfig+0x6>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001206:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001208:	f7ff ff47 	bl	800109a <LL_RCC_MSI_SetRange>
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800120c:	6a20      	ldr	r0, [r4, #32]
 800120e:	f7ff ff55 	bl	80010bc <LL_RCC_MSI_SetCalibTrimming>
        SystemCoreClockUpdate();
 8001212:	f002 f9af 	bl	8003574 <SystemCoreClockUpdate>
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001216:	4bb8      	ldr	r3, [pc, #736]	; (80014f8 <HAL_RCC_OscConfig+0x33c>)
 8001218:	6818      	ldr	r0, [r3, #0]
 800121a:	f7ff f941 	bl	80004a0 <HAL_InitTick>
 800121e:	2800      	cmp	r0, #0
 8001220:	d1cf      	bne.n	80011c2 <HAL_RCC_OscConfig+0x6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001222:	6823      	ldr	r3, [r4, #0]
 8001224:	07d8      	lsls	r0, r3, #31
 8001226:	d44e      	bmi.n	80012c6 <HAL_RCC_OscConfig+0x10a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001228:	6823      	ldr	r3, [r4, #0]
 800122a:	0799      	lsls	r1, r3, #30
 800122c:	f100 8098 	bmi.w	8001360 <HAL_RCC_OscConfig+0x1a4>
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001230:	6823      	ldr	r3, [r4, #0]
 8001232:	f013 0f18 	tst.w	r3, #24
 8001236:	f040 80d9 	bne.w	80013ec <HAL_RCC_OscConfig+0x230>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800123a:	6823      	ldr	r3, [r4, #0]
 800123c:	075a      	lsls	r2, r3, #29
 800123e:	f100 8168 	bmi.w	8001512 <HAL_RCC_OscConfig+0x356>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001242:	6823      	ldr	r3, [r4, #0]
 8001244:	065a      	lsls	r2, r3, #25
 8001246:	f100 81ba 	bmi.w	80015be <HAL_RCC_OscConfig+0x402>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800124a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800124c:	2800      	cmp	r0, #0
 800124e:	f040 81e2 	bne.w	8001616 <HAL_RCC_OscConfig+0x45a>
  return HAL_OK;
 8001252:	2000      	movs	r0, #0
 8001254:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001256:	f7ff ff20 	bl	800109a <LL_RCC_MSI_SetRange>
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800125a:	6a20      	ldr	r0, [r4, #32]
 800125c:	f7ff ff2e 	bl	80010bc <LL_RCC_MSI_SetCalibTrimming>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001260:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001262:	f7ff ff3b 	bl	80010dc <RCC_SetFlashLatencyFromMSIRange>
 8001266:	2800      	cmp	r0, #0
 8001268:	d0d3      	beq.n	8001212 <HAL_RCC_OscConfig+0x56>
 800126a:	e7aa      	b.n	80011c2 <HAL_RCC_OscConfig+0x6>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800126c:	69e2      	ldr	r2, [r4, #28]
 800126e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001272:	b1ba      	cbz	r2, 80012a4 <HAL_RCC_OscConfig+0xe8>
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	f042 0201 	orr.w	r2, r2, #1
 800127a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800127c:	f7ff f958 	bl	8000530 <HAL_GetTick>
 8001280:	4605      	mov	r5, r0
        while (LL_RCC_MSI_IsReady() == 0U)
 8001282:	f7ff ff04 	bl	800108e <LL_RCC_MSI_IsReady>
 8001286:	b130      	cbz	r0, 8001296 <HAL_RCC_OscConfig+0xda>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001288:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800128a:	f7ff ff06 	bl	800109a <LL_RCC_MSI_SetRange>
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800128e:	6a20      	ldr	r0, [r4, #32]
 8001290:	f7ff ff14 	bl	80010bc <LL_RCC_MSI_SetCalibTrimming>
 8001294:	e7c5      	b.n	8001222 <HAL_RCC_OscConfig+0x66>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001296:	f7ff f94b 	bl	8000530 <HAL_GetTick>
 800129a:	1b40      	subs	r0, r0, r5
 800129c:	2802      	cmp	r0, #2
 800129e:	d9f0      	bls.n	8001282 <HAL_RCC_OscConfig+0xc6>
            return HAL_TIMEOUT;
 80012a0:	2003      	movs	r0, #3
 80012a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	f022 0201 	bic.w	r2, r2, #1
 80012aa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80012ac:	f7ff f940 	bl	8000530 <HAL_GetTick>
 80012b0:	4605      	mov	r5, r0
        while (LL_RCC_MSI_IsReady() != 0U)
 80012b2:	f7ff feec 	bl	800108e <LL_RCC_MSI_IsReady>
 80012b6:	2800      	cmp	r0, #0
 80012b8:	d0b3      	beq.n	8001222 <HAL_RCC_OscConfig+0x66>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012ba:	f7ff f939 	bl	8000530 <HAL_GetTick>
 80012be:	1b40      	subs	r0, r0, r5
 80012c0:	2802      	cmp	r0, #2
 80012c2:	d9f6      	bls.n	80012b2 <HAL_RCC_OscConfig+0xf6>
 80012c4:	e7ec      	b.n	80012a0 <HAL_RCC_OscConfig+0xe4>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80012c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80012ca:	6893      	ldr	r3, [r2, #8]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80012cc:	68d2      	ldr	r2, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80012ce:	f003 030c 	and.w	r3, r3, #12
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80012d2:	2b08      	cmp	r3, #8
 80012d4:	d005      	beq.n	80012e2 <HAL_RCC_OscConfig+0x126>
 80012d6:	2b0c      	cmp	r3, #12
 80012d8:	d10b      	bne.n	80012f2 <HAL_RCC_OscConfig+0x136>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80012da:	f002 0303 	and.w	r3, r2, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80012de:	2b03      	cmp	r3, #3
 80012e0:	d107      	bne.n	80012f2 <HAL_RCC_OscConfig+0x136>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012e2:	f7ff fec1 	bl	8001068 <LL_RCC_HSE_IsReady>
 80012e6:	2800      	cmp	r0, #0
 80012e8:	d09e      	beq.n	8001228 <HAL_RCC_OscConfig+0x6c>
 80012ea:	6863      	ldr	r3, [r4, #4]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d19b      	bne.n	8001228 <HAL_RCC_OscConfig+0x6c>
 80012f0:	e767      	b.n	80011c2 <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012f2:	6862      	ldr	r2, [r4, #4]
 80012f4:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80012f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012fc:	d110      	bne.n	8001320 <HAL_RCC_OscConfig+0x164>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001304:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001306:	f7ff f913 	bl	8000530 <HAL_GetTick>
 800130a:	4605      	mov	r5, r0
        while (LL_RCC_HSE_IsReady() == 0U)
 800130c:	f7ff feac 	bl	8001068 <LL_RCC_HSE_IsReady>
 8001310:	2800      	cmp	r0, #0
 8001312:	d189      	bne.n	8001228 <HAL_RCC_OscConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001314:	f7ff f90c 	bl	8000530 <HAL_GetTick>
 8001318:	1b40      	subs	r0, r0, r5
 800131a:	2864      	cmp	r0, #100	; 0x64
 800131c:	d9f6      	bls.n	800130c <HAL_RCC_OscConfig+0x150>
 800131e:	e7bf      	b.n	80012a0 <HAL_RCC_OscConfig+0xe4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001320:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8001324:	d104      	bne.n	8001330 <HAL_RCC_OscConfig+0x174>
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	e7e6      	b.n	80012fe <HAL_RCC_OscConfig+0x142>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001330:	6819      	ldr	r1, [r3, #0]
 8001332:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8001336:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001338:	6819      	ldr	r1, [r3, #0]
 800133a:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800133e:	6019      	str	r1, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001340:	2a00      	cmp	r2, #0
 8001342:	d1e0      	bne.n	8001306 <HAL_RCC_OscConfig+0x14a>
        tickstart = HAL_GetTick();
 8001344:	f7ff f8f4 	bl	8000530 <HAL_GetTick>
 8001348:	4605      	mov	r5, r0
        while (LL_RCC_HSE_IsReady() != 0U)
 800134a:	f7ff fe8d 	bl	8001068 <LL_RCC_HSE_IsReady>
 800134e:	2800      	cmp	r0, #0
 8001350:	f43f af6a 	beq.w	8001228 <HAL_RCC_OscConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001354:	f7ff f8ec 	bl	8000530 <HAL_GetTick>
 8001358:	1b40      	subs	r0, r0, r5
 800135a:	2864      	cmp	r0, #100	; 0x64
 800135c:	d9f5      	bls.n	800134a <HAL_RCC_OscConfig+0x18e>
 800135e:	e79f      	b.n	80012a0 <HAL_RCC_OscConfig+0xe4>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001360:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001364:	6893      	ldr	r3, [r2, #8]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001366:	68d2      	ldr	r2, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001368:	f003 030c 	and.w	r3, r3, #12
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800136c:	2b04      	cmp	r3, #4
 800136e:	d005      	beq.n	800137c <HAL_RCC_OscConfig+0x1c0>
 8001370:	2b0c      	cmp	r3, #12
 8001372:	d114      	bne.n	800139e <HAL_RCC_OscConfig+0x1e2>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001374:	f002 0303 	and.w	r3, r2, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8001378:	2b02      	cmp	r3, #2
 800137a:	d110      	bne.n	800139e <HAL_RCC_OscConfig+0x1e2>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800137c:	f7ff fe7a 	bl	8001074 <LL_RCC_HSI_IsReady>
 8001380:	b118      	cbz	r0, 800138a <HAL_RCC_OscConfig+0x1ce>
 8001382:	68e3      	ldr	r3, [r4, #12]
 8001384:	2b00      	cmp	r3, #0
 8001386:	f43f af1c 	beq.w	80011c2 <HAL_RCC_OscConfig+0x6>
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800138a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800138e:	6921      	ldr	r1, [r4, #16]
 8001390:	6853      	ldr	r3, [r2, #4]
 8001392:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8001396:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800139a:	6053      	str	r3, [r2, #4]
 800139c:	e748      	b.n	8001230 <HAL_RCC_OscConfig+0x74>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800139e:	68e2      	ldr	r2, [r4, #12]
 80013a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013a4:	b182      	cbz	r2, 80013c8 <HAL_RCC_OscConfig+0x20c>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80013ac:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80013ae:	f7ff f8bf 	bl	8000530 <HAL_GetTick>
 80013b2:	4605      	mov	r5, r0
        while (LL_RCC_HSI_IsReady() == 0U)
 80013b4:	f7ff fe5e 	bl	8001074 <LL_RCC_HSI_IsReady>
 80013b8:	2800      	cmp	r0, #0
 80013ba:	d1e6      	bne.n	800138a <HAL_RCC_OscConfig+0x1ce>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013bc:	f7ff f8b8 	bl	8000530 <HAL_GetTick>
 80013c0:	1b40      	subs	r0, r0, r5
 80013c2:	2802      	cmp	r0, #2
 80013c4:	d9f6      	bls.n	80013b4 <HAL_RCC_OscConfig+0x1f8>
 80013c6:	e76b      	b.n	80012a0 <HAL_RCC_OscConfig+0xe4>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013ce:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80013d0:	f7ff f8ae 	bl	8000530 <HAL_GetTick>
 80013d4:	4605      	mov	r5, r0
        while (LL_RCC_HSI_IsReady() != 0U)
 80013d6:	f7ff fe4d 	bl	8001074 <LL_RCC_HSI_IsReady>
 80013da:	2800      	cmp	r0, #0
 80013dc:	f43f af28 	beq.w	8001230 <HAL_RCC_OscConfig+0x74>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013e0:	f7ff f8a6 	bl	8000530 <HAL_GetTick>
 80013e4:	1b40      	subs	r0, r0, r5
 80013e6:	2802      	cmp	r0, #2
 80013e8:	d9f5      	bls.n	80013d6 <HAL_RCC_OscConfig+0x21a>
 80013ea:	e759      	b.n	80012a0 <HAL_RCC_OscConfig+0xe4>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013ec:	6962      	ldr	r2, [r4, #20]
 80013ee:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 80013f2:	2a00      	cmp	r2, #0
 80013f4:	d06b      	beq.n	80014ce <HAL_RCC_OscConfig+0x312>
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80013f6:	06db      	lsls	r3, r3, #27
 80013f8:	d543      	bpl.n	8001482 <HAL_RCC_OscConfig+0x2c6>
        if (LL_RCC_LSI1_IsReady() == 0U)
 80013fa:	f7ff fe41 	bl	8001080 <LL_RCC_LSI1_IsReady>
 80013fe:	b310      	cbz	r0, 8001446 <HAL_RCC_OscConfig+0x28a>
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001400:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8001404:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001408:	f043 0304 	orr.w	r3, r3, #4
 800140c:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
        tickstart = HAL_GetTick();
 8001410:	f7ff f88e 	bl	8000530 <HAL_GetTick>
 8001414:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001416:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800141a:	071f      	lsls	r7, r3, #28
 800141c:	f140 817d 	bpl.w	800171a <HAL_RCC_OscConfig+0x55e>
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8001420:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001424:	69a2      	ldr	r2, [r4, #24]
 8001426:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800142a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800142e:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001432:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001436:	f023 0301 	bic.w	r3, r3, #1
 800143a:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
        tickstart = HAL_GetTick();
 800143e:	f7ff f877 	bl	8000530 <HAL_GetTick>
 8001442:	4605      	mov	r5, r0
        while (LL_RCC_LSI1_IsReady() != 0U)
 8001444:	e018      	b.n	8001478 <HAL_RCC_OscConfig+0x2bc>
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001446:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800144a:	f043 0301 	orr.w	r3, r3, #1
 800144e:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
          tickstart = HAL_GetTick();
 8001452:	f7ff f86d 	bl	8000530 <HAL_GetTick>
 8001456:	4605      	mov	r5, r0
          while (LL_RCC_LSI1_IsReady() == 0U)
 8001458:	f7ff fe12 	bl	8001080 <LL_RCC_LSI1_IsReady>
 800145c:	2800      	cmp	r0, #0
 800145e:	d1cf      	bne.n	8001400 <HAL_RCC_OscConfig+0x244>
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001460:	f7ff f866 	bl	8000530 <HAL_GetTick>
 8001464:	1b40      	subs	r0, r0, r5
 8001466:	2802      	cmp	r0, #2
 8001468:	d9f6      	bls.n	8001458 <HAL_RCC_OscConfig+0x29c>
 800146a:	e719      	b.n	80012a0 <HAL_RCC_OscConfig+0xe4>
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800146c:	f7ff f860 	bl	8000530 <HAL_GetTick>
 8001470:	1b40      	subs	r0, r0, r5
 8001472:	2802      	cmp	r0, #2
 8001474:	f63f af14 	bhi.w	80012a0 <HAL_RCC_OscConfig+0xe4>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8001478:	f7ff fe02 	bl	8001080 <LL_RCC_LSI1_IsReady>
 800147c:	2800      	cmp	r0, #0
 800147e:	d1f5      	bne.n	800146c <HAL_RCC_OscConfig+0x2b0>
 8001480:	e6db      	b.n	800123a <HAL_RCC_OscConfig+0x7e>
 8001482:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001486:	f043 0301 	orr.w	r3, r3, #1
 800148a:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
        tickstart = HAL_GetTick();
 800148e:	f7ff f84f 	bl	8000530 <HAL_GetTick>
 8001492:	4606      	mov	r6, r0
        while (LL_RCC_LSI1_IsReady() == 0U)
 8001494:	f7ff fdf4 	bl	8001080 <LL_RCC_LSI1_IsReady>
 8001498:	b198      	cbz	r0, 80014c2 <HAL_RCC_OscConfig+0x306>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800149a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800149e:	461d      	mov	r5, r3
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80014a0:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80014a4:	f022 0204 	bic.w	r2, r2, #4
 80014a8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80014ac:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80014b0:	0718      	lsls	r0, r3, #28
 80014b2:	f57f aec2 	bpl.w	800123a <HAL_RCC_OscConfig+0x7e>
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80014b6:	f7ff f83b 	bl	8000530 <HAL_GetTick>
 80014ba:	1b80      	subs	r0, r0, r6
 80014bc:	2803      	cmp	r0, #3
 80014be:	d9f5      	bls.n	80014ac <HAL_RCC_OscConfig+0x2f0>
 80014c0:	e6ee      	b.n	80012a0 <HAL_RCC_OscConfig+0xe4>
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80014c2:	f7ff f835 	bl	8000530 <HAL_GetTick>
 80014c6:	1b80      	subs	r0, r0, r6
 80014c8:	2802      	cmp	r0, #2
 80014ca:	d9e3      	bls.n	8001494 <HAL_RCC_OscConfig+0x2d8>
 80014cc:	e6e8      	b.n	80012a0 <HAL_RCC_OscConfig+0xe4>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80014ce:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80014d2:	f023 0304 	bic.w	r3, r3, #4
 80014d6:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 80014da:	f7ff f829 	bl	8000530 <HAL_GetTick>
 80014de:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80014e0:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80014e4:	0719      	lsls	r1, r3, #28
 80014e6:	f140 811f 	bpl.w	8001728 <HAL_RCC_OscConfig+0x56c>
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80014ea:	f7ff f821 	bl	8000530 <HAL_GetTick>
 80014ee:	1b80      	subs	r0, r0, r6
 80014f0:	2803      	cmp	r0, #3
 80014f2:	d9f5      	bls.n	80014e0 <HAL_RCC_OscConfig+0x324>
 80014f4:	e6d4      	b.n	80012a0 <HAL_RCC_OscConfig+0xe4>
 80014f6:	bf00      	nop
 80014f8:	20000008 	.word	0x20000008
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80014fc:	f7ff f818 	bl	8000530 <HAL_GetTick>
 8001500:	1b40      	subs	r0, r0, r5
 8001502:	2802      	cmp	r0, #2
 8001504:	f63f aecc 	bhi.w	80012a0 <HAL_RCC_OscConfig+0xe4>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8001508:	f7ff fdba 	bl	8001080 <LL_RCC_LSI1_IsReady>
 800150c:	2800      	cmp	r0, #0
 800150e:	d1f5      	bne.n	80014fc <HAL_RCC_OscConfig+0x340>
 8001510:	e693      	b.n	800123a <HAL_RCC_OscConfig+0x7e>
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001512:	4d8b      	ldr	r5, [pc, #556]	; (8001740 <HAL_RCC_OscConfig+0x584>)
 8001514:	682b      	ldr	r3, [r5, #0]
 8001516:	05db      	lsls	r3, r3, #23
 8001518:	d51c      	bpl.n	8001554 <HAL_RCC_OscConfig+0x398>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800151a:	68a3      	ldr	r3, [r4, #8]
 800151c:	2b01      	cmp	r3, #1
 800151e:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8001522:	d125      	bne.n	8001570 <HAL_RCC_OscConfig+0x3b4>
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001524:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8001528:	f043 0301 	orr.w	r3, r3, #1
 800152c:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
      tickstart = HAL_GetTick();
 8001530:	f7fe fffe 	bl	8000530 <HAL_GetTick>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001534:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 8001538:	4606      	mov	r6, r0
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800153a:	f241 3588 	movw	r5, #5000	; 0x1388
 800153e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001542:	0798      	lsls	r0, r3, #30
 8001544:	f53f ae7d 	bmi.w	8001242 <HAL_RCC_OscConfig+0x86>
 8001548:	f7fe fff2 	bl	8000530 <HAL_GetTick>
 800154c:	1b80      	subs	r0, r0, r6
 800154e:	42a8      	cmp	r0, r5
 8001550:	d9f5      	bls.n	800153e <HAL_RCC_OscConfig+0x382>
 8001552:	e6a5      	b.n	80012a0 <HAL_RCC_OscConfig+0xe4>
      HAL_PWR_EnableBkUpAccess();
 8001554:	f7ff fd78 	bl	8001048 <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 8001558:	f7fe ffea 	bl	8000530 <HAL_GetTick>
 800155c:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800155e:	682b      	ldr	r3, [r5, #0]
 8001560:	05df      	lsls	r7, r3, #23
 8001562:	d4da      	bmi.n	800151a <HAL_RCC_OscConfig+0x35e>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001564:	f7fe ffe4 	bl	8000530 <HAL_GetTick>
 8001568:	1b80      	subs	r0, r0, r6
 800156a:	2802      	cmp	r0, #2
 800156c:	d9f7      	bls.n	800155e <HAL_RCC_OscConfig+0x3a2>
 800156e:	e697      	b.n	80012a0 <HAL_RCC_OscConfig+0xe4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001570:	2b05      	cmp	r3, #5
 8001572:	d106      	bne.n	8001582 <HAL_RCC_OscConfig+0x3c6>
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001574:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8001578:	f043 0304 	orr.w	r3, r3, #4
 800157c:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
 8001580:	e7d0      	b.n	8001524 <HAL_RCC_OscConfig+0x368>
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001582:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 8001586:	f022 0201 	bic.w	r2, r2, #1
 800158a:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800158e:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 8001592:	f022 0204 	bic.w	r2, r2, #4
 8001596:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800159a:	2b00      	cmp	r3, #0
 800159c:	d1c8      	bne.n	8001530 <HAL_RCC_OscConfig+0x374>
      tickstart = HAL_GetTick();
 800159e:	f7fe ffc7 	bl	8000530 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015a2:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80015a6:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80015a8:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 80015ac:	0799      	lsls	r1, r3, #30
 80015ae:	f57f ae48 	bpl.w	8001242 <HAL_RCC_OscConfig+0x86>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015b2:	f7fe ffbd 	bl	8000530 <HAL_GetTick>
 80015b6:	1bc0      	subs	r0, r0, r7
 80015b8:	42b0      	cmp	r0, r6
 80015ba:	d9f5      	bls.n	80015a8 <HAL_RCC_OscConfig+0x3ec>
 80015bc:	e670      	b.n	80012a0 <HAL_RCC_OscConfig+0xe4>
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80015be:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80015c0:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 80015c4:	b19b      	cbz	r3, 80015ee <HAL_RCC_OscConfig+0x432>
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80015c6:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80015ca:	f043 0301 	orr.w	r3, r3, #1
 80015ce:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 80015d2:	f7fe ffad 	bl	8000530 <HAL_GetTick>
 80015d6:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80015d8:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80015dc:	079a      	lsls	r2, r3, #30
 80015de:	f53f ae34 	bmi.w	800124a <HAL_RCC_OscConfig+0x8e>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80015e2:	f7fe ffa5 	bl	8000530 <HAL_GetTick>
 80015e6:	1b80      	subs	r0, r0, r6
 80015e8:	2802      	cmp	r0, #2
 80015ea:	d9f5      	bls.n	80015d8 <HAL_RCC_OscConfig+0x41c>
 80015ec:	e658      	b.n	80012a0 <HAL_RCC_OscConfig+0xe4>
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80015ee:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80015f2:	f023 0301 	bic.w	r3, r3, #1
 80015f6:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 80015fa:	f7fe ff99 	bl	8000530 <HAL_GetTick>
 80015fe:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8001600:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8001604:	079b      	lsls	r3, r3, #30
 8001606:	f57f ae20 	bpl.w	800124a <HAL_RCC_OscConfig+0x8e>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800160a:	f7fe ff91 	bl	8000530 <HAL_GetTick>
 800160e:	1b80      	subs	r0, r0, r6
 8001610:	2802      	cmp	r0, #2
 8001612:	d9f5      	bls.n	8001600 <HAL_RCC_OscConfig+0x444>
 8001614:	e644      	b.n	80012a0 <HAL_RCC_OscConfig+0xe4>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001616:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800161a:	689a      	ldr	r2, [r3, #8]
 800161c:	f002 020c 	and.w	r2, r2, #12
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001620:	2a0c      	cmp	r2, #12
 8001622:	d052      	beq.n	80016ca <HAL_RCC_OscConfig+0x50e>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001624:	681a      	ldr	r2, [r3, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001626:	2802      	cmp	r0, #2
 8001628:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800162c:	601a      	str	r2, [r3, #0]
 800162e:	d134      	bne.n	800169a <HAL_RCC_OscConfig+0x4de>
        tickstart = HAL_GetTick();
 8001630:	f7fe ff7e 	bl	8000530 <HAL_GetTick>
 8001634:	4605      	mov	r5, r0
        while (LL_RCC_PLL_IsReady() != 0U)
 8001636:	f7ff fd4a 	bl	80010ce <LL_RCC_PLL_IsReady>
 800163a:	bb40      	cbnz	r0, 800168e <HAL_RCC_OscConfig+0x4d2>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800163c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001640:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001642:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001644:	68d0      	ldr	r0, [r2, #12]
 8001646:	430b      	orrs	r3, r1
 8001648:	493e      	ldr	r1, [pc, #248]	; (8001744 <HAL_RCC_OscConfig+0x588>)
 800164a:	4001      	ands	r1, r0
 800164c:	430b      	orrs	r3, r1
 800164e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001650:	430b      	orrs	r3, r1
 8001652:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001654:	430b      	orrs	r3, r1
 8001656:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001658:	430b      	orrs	r3, r1
 800165a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800165c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001660:	60d3      	str	r3, [r2, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001662:	6813      	ldr	r3, [r2, #0]
 8001664:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001668:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800166a:	68d3      	ldr	r3, [r2, #12]
 800166c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001670:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8001672:	f7fe ff5d 	bl	8000530 <HAL_GetTick>
 8001676:	4604      	mov	r4, r0
        while (LL_RCC_PLL_IsReady() == 0U)
 8001678:	f7ff fd29 	bl	80010ce <LL_RCC_PLL_IsReady>
 800167c:	2800      	cmp	r0, #0
 800167e:	f47f ade8 	bne.w	8001252 <HAL_RCC_OscConfig+0x96>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001682:	f7fe ff55 	bl	8000530 <HAL_GetTick>
 8001686:	1b00      	subs	r0, r0, r4
 8001688:	2802      	cmp	r0, #2
 800168a:	d9f5      	bls.n	8001678 <HAL_RCC_OscConfig+0x4bc>
 800168c:	e608      	b.n	80012a0 <HAL_RCC_OscConfig+0xe4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800168e:	f7fe ff4f 	bl	8000530 <HAL_GetTick>
 8001692:	1b40      	subs	r0, r0, r5
 8001694:	2802      	cmp	r0, #2
 8001696:	d9ce      	bls.n	8001636 <HAL_RCC_OscConfig+0x47a>
 8001698:	e602      	b.n	80012a0 <HAL_RCC_OscConfig+0xe4>
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800169a:	68da      	ldr	r2, [r3, #12]
 800169c:	f022 0203 	bic.w	r2, r2, #3
 80016a0:	60da      	str	r2, [r3, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 80016a2:	68da      	ldr	r2, [r3, #12]
 80016a4:	f022 5288 	bic.w	r2, r2, #285212672	; 0x11000000
 80016a8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80016ac:	60da      	str	r2, [r3, #12]
        tickstart = HAL_GetTick();
 80016ae:	f7fe ff3f 	bl	8000530 <HAL_GetTick>
 80016b2:	4604      	mov	r4, r0
        while (LL_RCC_PLL_IsReady() != 0U)
 80016b4:	f7ff fd0b 	bl	80010ce <LL_RCC_PLL_IsReady>
 80016b8:	2800      	cmp	r0, #0
 80016ba:	f43f adca 	beq.w	8001252 <HAL_RCC_OscConfig+0x96>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016be:	f7fe ff37 	bl	8000530 <HAL_GetTick>
 80016c2:	1b00      	subs	r0, r0, r4
 80016c4:	2802      	cmp	r0, #2
 80016c6:	d9f5      	bls.n	80016b4 <HAL_RCC_OscConfig+0x4f8>
 80016c8:	e5ea      	b.n	80012a0 <HAL_RCC_OscConfig+0xe4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016ca:	2801      	cmp	r0, #1
 80016cc:	d036      	beq.n	800173c <HAL_RCC_OscConfig+0x580>
        uint32_t pllcfgr = RCC->PLLCFGR;
 80016ce:	68d8      	ldr	r0, [r3, #12]
        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016d0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80016d2:	f000 0203 	and.w	r2, r0, #3
 80016d6:	429a      	cmp	r2, r3
 80016d8:	f47f ad73 	bne.w	80011c2 <HAL_RCC_OscConfig+0x6>
 80016dc:	6b62      	ldr	r2, [r4, #52]	; 0x34
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80016de:	f000 0370 	and.w	r3, r0, #112	; 0x70
        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016e2:	4293      	cmp	r3, r2
 80016e4:	f47f ad6d 	bne.w	80011c2 <HAL_RCC_OscConfig+0x6>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80016e8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80016ea:	f3c0 2306 	ubfx	r3, r0, #8, #7
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80016ee:	4293      	cmp	r3, r2
 80016f0:	f47f ad67 	bne.w	80011c2 <HAL_RCC_OscConfig+0x6>
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80016f4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80016f6:	f400 1378 	and.w	r3, r0, #4063232	; 0x3e0000
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80016fa:	4293      	cmp	r3, r2
 80016fc:	f47f ad61 	bne.w	80011c2 <HAL_RCC_OscConfig+0x6>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001700:	6c22      	ldr	r2, [r4, #64]	; 0x40
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001702:	f000 6360 	and.w	r3, r0, #234881024	; 0xe000000
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001706:	4293      	cmp	r3, r2
 8001708:	f47f ad5b 	bne.w	80011c2 <HAL_RCC_OscConfig+0x6>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800170c:	6c63      	ldr	r3, [r4, #68]	; 0x44
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800170e:	f000 4060 	and.w	r0, r0, #3758096384	; 0xe0000000
    return HAL_ERROR;
 8001712:	1ac0      	subs	r0, r0, r3
 8001714:	bf18      	it	ne
 8001716:	2001      	movne	r0, #1
 8001718:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800171a:	f7fe ff09 	bl	8000530 <HAL_GetTick>
 800171e:	1b80      	subs	r0, r0, r6
 8001720:	2803      	cmp	r0, #3
 8001722:	f67f ae78 	bls.w	8001416 <HAL_RCC_OscConfig+0x25a>
 8001726:	e5bb      	b.n	80012a0 <HAL_RCC_OscConfig+0xe4>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001728:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800172c:	f023 0301 	bic.w	r3, r3, #1
 8001730:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001734:	f7fe fefc 	bl	8000530 <HAL_GetTick>
 8001738:	4605      	mov	r5, r0
      while (LL_RCC_LSI1_IsReady() != 0U)
 800173a:	e6e5      	b.n	8001508 <HAL_RCC_OscConfig+0x34c>
}
 800173c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800173e:	bf00      	nop
 8001740:	58000400 	.word	0x58000400
 8001744:	11c1808c 	.word	0x11c1808c

08001748 <HAL_RCC_ClockConfig>:
{
 8001748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800174c:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800174e:	4604      	mov	r4, r0
 8001750:	b910      	cbnz	r0, 8001758 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001752:	2001      	movs	r0, #1
 8001754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001758:	4e79      	ldr	r6, [pc, #484]	; (8001940 <HAL_RCC_ClockConfig+0x1f8>)
 800175a:	6833      	ldr	r3, [r6, #0]
 800175c:	f003 0307 	and.w	r3, r3, #7
 8001760:	428b      	cmp	r3, r1
 8001762:	d372      	bcc.n	800184a <HAL_RCC_ClockConfig+0x102>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001764:	6823      	ldr	r3, [r4, #0]
 8001766:	0799      	lsls	r1, r3, #30
 8001768:	d50e      	bpl.n	8001788 <HAL_RCC_ClockConfig+0x40>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800176a:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 800176e:	68a2      	ldr	r2, [r4, #8]
 8001770:	68b3      	ldr	r3, [r6, #8]
 8001772:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001776:	4313      	orrs	r3, r2
 8001778:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800177a:	f7fe fed9 	bl	8000530 <HAL_GetTick>
 800177e:	4607      	mov	r7, r0
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001780:	68b3      	ldr	r3, [r6, #8]
 8001782:	03db      	lsls	r3, r3, #15
 8001784:	f140 80b8 	bpl.w	80018f8 <HAL_RCC_ClockConfig+0x1b0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8001788:	6823      	ldr	r3, [r4, #0]
 800178a:	069a      	lsls	r2, r3, #26
 800178c:	d511      	bpl.n	80017b2 <HAL_RCC_ClockConfig+0x6a>
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800178e:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8001792:	6962      	ldr	r2, [r4, #20]
 8001794:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 8001798:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800179c:	4313      	orrs	r3, r2
 800179e:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
    tickstart = HAL_GetTick();
 80017a2:	f7fe fec5 	bl	8000530 <HAL_GetTick>
 80017a6:	4607      	mov	r7, r0
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80017a8:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 80017ac:	0399      	lsls	r1, r3, #14
 80017ae:	f140 80aa 	bpl.w	8001906 <HAL_RCC_ClockConfig+0x1be>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80017b2:	6823      	ldr	r3, [r4, #0]
 80017b4:	0658      	lsls	r0, r3, #25
 80017b6:	d512      	bpl.n	80017de <HAL_RCC_ClockConfig+0x96>
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80017b8:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 80017bc:	69a2      	ldr	r2, [r4, #24]
 80017be:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 80017c2:	f023 030f 	bic.w	r3, r3, #15
 80017c6:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
 80017ca:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
    tickstart = HAL_GetTick();
 80017ce:	f7fe feaf 	bl	8000530 <HAL_GetTick>
 80017d2:	4607      	mov	r7, r0
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80017d4:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 80017d8:	03db      	lsls	r3, r3, #15
 80017da:	f140 809b 	bpl.w	8001914 <HAL_RCC_ClockConfig+0x1cc>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017de:	6823      	ldr	r3, [r4, #0]
 80017e0:	075a      	lsls	r2, r3, #29
 80017e2:	d50e      	bpl.n	8001802 <HAL_RCC_ClockConfig+0xba>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80017e4:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 80017e8:	68e2      	ldr	r2, [r4, #12]
 80017ea:	68b3      	ldr	r3, [r6, #8]
 80017ec:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80017f0:	4313      	orrs	r3, r2
 80017f2:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80017f4:	f7fe fe9c 	bl	8000530 <HAL_GetTick>
 80017f8:	4607      	mov	r7, r0
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80017fa:	68b3      	ldr	r3, [r6, #8]
 80017fc:	0399      	lsls	r1, r3, #14
 80017fe:	f140 8090 	bpl.w	8001922 <HAL_RCC_ClockConfig+0x1da>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001802:	6823      	ldr	r3, [r4, #0]
 8001804:	0718      	lsls	r0, r3, #28
 8001806:	d50f      	bpl.n	8001828 <HAL_RCC_ClockConfig+0xe0>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001808:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800180c:	6922      	ldr	r2, [r4, #16]
 800180e:	68b3      	ldr	r3, [r6, #8]
 8001810:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001814:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001818:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800181a:	f7fe fe89 	bl	8000530 <HAL_GetTick>
 800181e:	4607      	mov	r7, r0
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001820:	68b3      	ldr	r3, [r6, #8]
 8001822:	035b      	lsls	r3, r3, #13
 8001824:	f140 8084 	bpl.w	8001930 <HAL_RCC_ClockConfig+0x1e8>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001828:	6823      	ldr	r3, [r4, #0]
 800182a:	07da      	lsls	r2, r3, #31
 800182c:	d423      	bmi.n	8001876 <HAL_RCC_ClockConfig+0x12e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800182e:	4c44      	ldr	r4, [pc, #272]	; (8001940 <HAL_RCC_ClockConfig+0x1f8>)
 8001830:	6823      	ldr	r3, [r4, #0]
 8001832:	f003 0307 	and.w	r3, r3, #7
 8001836:	429d      	cmp	r5, r3
 8001838:	d34b      	bcc.n	80018d2 <HAL_RCC_ClockConfig+0x18a>
  SystemCoreClockUpdate();
 800183a:	f001 fe9b 	bl	8003574 <SystemCoreClockUpdate>
  return HAL_InitTick(HAL_GetTickPrio());
 800183e:	f7fe fe7d 	bl	800053c <HAL_GetTickPrio>
}
 8001842:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return HAL_InitTick(HAL_GetTickPrio());
 8001846:	f7fe be2b 	b.w	80004a0 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800184a:	6833      	ldr	r3, [r6, #0]
 800184c:	f023 0307 	bic.w	r3, r3, #7
 8001850:	430b      	orrs	r3, r1
 8001852:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001854:	f7fe fe6c 	bl	8000530 <HAL_GetTick>
 8001858:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800185a:	6833      	ldr	r3, [r6, #0]
 800185c:	f003 0307 	and.w	r3, r3, #7
 8001860:	429d      	cmp	r5, r3
 8001862:	f43f af7f 	beq.w	8001764 <HAL_RCC_ClockConfig+0x1c>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001866:	f7fe fe63 	bl	8000530 <HAL_GetTick>
 800186a:	1bc0      	subs	r0, r0, r7
 800186c:	2802      	cmp	r0, #2
 800186e:	d9f4      	bls.n	800185a <HAL_RCC_ClockConfig+0x112>
        return HAL_TIMEOUT;
 8001870:	2003      	movs	r0, #3
 8001872:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001876:	6863      	ldr	r3, [r4, #4]
 8001878:	2b02      	cmp	r3, #2
 800187a:	d11e      	bne.n	80018ba <HAL_RCC_ClockConfig+0x172>
      if (LL_RCC_HSE_IsReady() == 0U)
 800187c:	f7ff fbf4 	bl	8001068 <LL_RCC_HSE_IsReady>
      if (LL_RCC_HSI_IsReady() == 0U)
 8001880:	2800      	cmp	r0, #0
 8001882:	f43f af66 	beq.w	8001752 <HAL_RCC_ClockConfig+0xa>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001886:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 800188a:	6862      	ldr	r2, [r4, #4]
 800188c:	68b3      	ldr	r3, [r6, #8]
 800188e:	f023 0303 	bic.w	r3, r3, #3
 8001892:	4313      	orrs	r3, r2
 8001894:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001896:	f7fe fe4b 	bl	8000530 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800189a:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800189e:	4607      	mov	r7, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80018a0:	68b3      	ldr	r3, [r6, #8]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018a2:	6862      	ldr	r2, [r4, #4]
 80018a4:	f003 030c 	and.w	r3, r3, #12
 80018a8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80018ac:	d0bf      	beq.n	800182e <HAL_RCC_ClockConfig+0xe6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018ae:	f7fe fe3f 	bl	8000530 <HAL_GetTick>
 80018b2:	1bc0      	subs	r0, r0, r7
 80018b4:	4540      	cmp	r0, r8
 80018b6:	d9f3      	bls.n	80018a0 <HAL_RCC_ClockConfig+0x158>
 80018b8:	e7da      	b.n	8001870 <HAL_RCC_ClockConfig+0x128>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018ba:	2b03      	cmp	r3, #3
 80018bc:	d102      	bne.n	80018c4 <HAL_RCC_ClockConfig+0x17c>
      if (LL_RCC_PLL_IsReady() == 0U)
 80018be:	f7ff fc06 	bl	80010ce <LL_RCC_PLL_IsReady>
 80018c2:	e7dd      	b.n	8001880 <HAL_RCC_ClockConfig+0x138>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80018c4:	b913      	cbnz	r3, 80018cc <HAL_RCC_ClockConfig+0x184>
      if (LL_RCC_MSI_IsReady() == 0U)
 80018c6:	f7ff fbe2 	bl	800108e <LL_RCC_MSI_IsReady>
 80018ca:	e7d9      	b.n	8001880 <HAL_RCC_ClockConfig+0x138>
      if (LL_RCC_HSI_IsReady() == 0U)
 80018cc:	f7ff fbd2 	bl	8001074 <LL_RCC_HSI_IsReady>
 80018d0:	e7d6      	b.n	8001880 <HAL_RCC_ClockConfig+0x138>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018d2:	6823      	ldr	r3, [r4, #0]
 80018d4:	f023 0307 	bic.w	r3, r3, #7
 80018d8:	432b      	orrs	r3, r5
 80018da:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80018dc:	f7fe fe28 	bl	8000530 <HAL_GetTick>
 80018e0:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018e2:	6823      	ldr	r3, [r4, #0]
 80018e4:	f003 0307 	and.w	r3, r3, #7
 80018e8:	429d      	cmp	r5, r3
 80018ea:	d0a6      	beq.n	800183a <HAL_RCC_ClockConfig+0xf2>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80018ec:	f7fe fe20 	bl	8000530 <HAL_GetTick>
 80018f0:	1b80      	subs	r0, r0, r6
 80018f2:	2802      	cmp	r0, #2
 80018f4:	d9f5      	bls.n	80018e2 <HAL_RCC_ClockConfig+0x19a>
 80018f6:	e7bb      	b.n	8001870 <HAL_RCC_ClockConfig+0x128>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80018f8:	f7fe fe1a 	bl	8000530 <HAL_GetTick>
 80018fc:	1bc0      	subs	r0, r0, r7
 80018fe:	2802      	cmp	r0, #2
 8001900:	f67f af3e 	bls.w	8001780 <HAL_RCC_ClockConfig+0x38>
 8001904:	e7b4      	b.n	8001870 <HAL_RCC_ClockConfig+0x128>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001906:	f7fe fe13 	bl	8000530 <HAL_GetTick>
 800190a:	1bc0      	subs	r0, r0, r7
 800190c:	2802      	cmp	r0, #2
 800190e:	f67f af4b 	bls.w	80017a8 <HAL_RCC_ClockConfig+0x60>
 8001912:	e7ad      	b.n	8001870 <HAL_RCC_ClockConfig+0x128>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001914:	f7fe fe0c 	bl	8000530 <HAL_GetTick>
 8001918:	1bc0      	subs	r0, r0, r7
 800191a:	2802      	cmp	r0, #2
 800191c:	f67f af5a 	bls.w	80017d4 <HAL_RCC_ClockConfig+0x8c>
 8001920:	e7a6      	b.n	8001870 <HAL_RCC_ClockConfig+0x128>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001922:	f7fe fe05 	bl	8000530 <HAL_GetTick>
 8001926:	1bc0      	subs	r0, r0, r7
 8001928:	2802      	cmp	r0, #2
 800192a:	f67f af66 	bls.w	80017fa <HAL_RCC_ClockConfig+0xb2>
 800192e:	e79f      	b.n	8001870 <HAL_RCC_ClockConfig+0x128>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001930:	f7fe fdfe 	bl	8000530 <HAL_GetTick>
 8001934:	1bc0      	subs	r0, r0, r7
 8001936:	2802      	cmp	r0, #2
 8001938:	f67f af72 	bls.w	8001820 <HAL_RCC_ClockConfig+0xd8>
 800193c:	e798      	b.n	8001870 <HAL_RCC_ClockConfig+0x128>
 800193e:	bf00      	nop
 8001940:	58004000 	.word	0x58004000

08001944 <HAL_RCC_GetSysClockFreq>:
 8001944:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
{
 8001948:	b508      	push	{r3, lr}
 800194a:	6893      	ldr	r3, [r2, #8]
  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800194c:	f013 030c 	ands.w	r3, r3, #12
 8001950:	d107      	bne.n	8001962 <HAL_RCC_GetSysClockFreq+0x1e>
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8001952:	f7ff fbaa 	bl	80010aa <LL_RCC_MSI_GetRange>
 8001956:	4b1f      	ldr	r3, [pc, #124]	; (80019d4 <HAL_RCC_GetSysClockFreq+0x90>)
 8001958:	f3c0 1003 	ubfx	r0, r0, #4, #4
 800195c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001960:	bd08      	pop	{r3, pc}
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001962:	2b04      	cmp	r3, #4
 8001964:	d033      	beq.n	80019ce <HAL_RCC_GetSysClockFreq+0x8a>
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001966:	2b08      	cmp	r3, #8
 8001968:	d107      	bne.n	800197a <HAL_RCC_GetSysClockFreq+0x36>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800196a:	6813      	ldr	r3, [r2, #0]
      sysclockfreq = HSE_VALUE;
 800196c:	481a      	ldr	r0, [pc, #104]	; (80019d8 <HAL_RCC_GetSysClockFreq+0x94>)
 800196e:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8001972:	4b1a      	ldr	r3, [pc, #104]	; (80019dc <HAL_RCC_GetSysClockFreq+0x98>)
 8001974:	bf08      	it	eq
 8001976:	4618      	moveq	r0, r3
 8001978:	bd08      	pop	{r3, pc}
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800197a:	68d3      	ldr	r3, [r2, #12]
 800197c:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8001980:	2b02      	cmp	r3, #2
 8001982:	d022      	beq.n	80019ca <HAL_RCC_GetSysClockFreq+0x86>
 8001984:	2b03      	cmp	r3, #3
 8001986:	d118      	bne.n	80019ba <HAL_RCC_GetSysClockFreq+0x76>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001988:	6813      	ldr	r3, [r2, #0]
          pllinputfreq = HSE_VALUE;
 800198a:	4814      	ldr	r0, [pc, #80]	; (80019dc <HAL_RCC_GetSysClockFreq+0x98>)
 800198c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8001990:	4b11      	ldr	r3, [pc, #68]	; (80019d8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001992:	bf08      	it	eq
 8001994:	4603      	moveq	r3, r0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001996:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800199a:	68d0      	ldr	r0, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800199c:	68d1      	ldr	r1, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800199e:	68d2      	ldr	r2, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80019a0:	f3c0 2006 	ubfx	r0, r0, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 80019a4:	4358      	muls	r0, r3
 80019a6:	f3c1 1302 	ubfx	r3, r1, #4, #3
 80019aa:	3301      	adds	r3, #1
 80019ac:	fbb0 f0f3 	udiv	r0, r0, r3
 80019b0:	0f53      	lsrs	r3, r2, #29
 80019b2:	3301      	adds	r3, #1
 80019b4:	fbb0 f0f3 	udiv	r0, r0, r3
 80019b8:	bd08      	pop	{r3, pc}
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80019ba:	f7ff fb76 	bl	80010aa <LL_RCC_MSI_GetRange>
 80019be:	4b05      	ldr	r3, [pc, #20]	; (80019d4 <HAL_RCC_GetSysClockFreq+0x90>)
 80019c0:	f3c0 1003 	ubfx	r0, r0, #4, #4
 80019c4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80019c8:	e7e5      	b.n	8001996 <HAL_RCC_GetSysClockFreq+0x52>
        pllinputfreq = HSI_VALUE;
 80019ca:	4b03      	ldr	r3, [pc, #12]	; (80019d8 <HAL_RCC_GetSysClockFreq+0x94>)
 80019cc:	e7e3      	b.n	8001996 <HAL_RCC_GetSysClockFreq+0x52>
    sysclockfreq = HSI_VALUE;
 80019ce:	4802      	ldr	r0, [pc, #8]	; (80019d8 <HAL_RCC_GetSysClockFreq+0x94>)
}
 80019d0:	bd08      	pop	{r3, pc}
 80019d2:	bf00      	nop
 80019d4:	08003778 	.word	0x08003778
 80019d8:	00f42400 	.word	0x00f42400
 80019dc:	01e84800 	.word	0x01e84800

080019e0 <HAL_RCC_GetHCLKFreq>:
{
 80019e0:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80019e2:	f7ff ffaf 	bl	8001944 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80019e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019ea:	4a04      	ldr	r2, [pc, #16]	; (80019fc <HAL_RCC_GetHCLKFreq+0x1c>)
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80019f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80019f6:	fbb0 f0f3 	udiv	r0, r0, r3
 80019fa:	bd08      	pop	{r3, pc}
 80019fc:	08003718 	.word	0x08003718

08001a00 <HAL_RCC_GetPCLK1Freq>:
{
 8001a00:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001a02:	f7ff ffed 	bl	80019e0 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001a06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a0a:	4a05      	ldr	r2, [pc, #20]	; (8001a20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001a12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a16:	f003 031f 	and.w	r3, r3, #31
}
 8001a1a:	40d8      	lsrs	r0, r3
 8001a1c:	bd08      	pop	{r3, pc}
 8001a1e:	bf00      	nop
 8001a20:	08003758 	.word	0x08003758

08001a24 <HAL_RCC_GetPCLK2Freq>:
{
 8001a24:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8001a26:	f7ff ffdb 	bl	80019e0 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001a2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a2e:	4a05      	ldr	r2, [pc, #20]	; (8001a44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001a36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a3a:	f003 031f 	and.w	r3, r3, #31
}
 8001a3e:	40d8      	lsrs	r0, r3
 8001a40:	bd08      	pop	{r3, pc}
 8001a42:	bf00      	nop
 8001a44:	08003758 	.word	0x08003758

08001a48 <LL_RCC_LSE_IsReady>:
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001a48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a4c:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
}
 8001a50:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8001a54:	4770      	bx	lr

08001a56 <LL_RCC_SetI2CClockSource>:
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8001a56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a5a:	0902      	lsrs	r2, r0, #4
 8001a5c:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001a60:	f402 227f 	and.w	r2, r2, #1044480	; 0xff000
 8001a64:	0100      	lsls	r0, r0, #4
 8001a66:	ea23 0302 	bic.w	r3, r3, r2
 8001a6a:	f400 207f 	and.w	r0, r0, #1044480	; 0xff000
 8001a6e:	4318      	orrs	r0, r3
 8001a70:	f8c1 0088 	str.w	r0, [r1, #136]	; 0x88
 8001a74:	4770      	bx	lr

08001a76 <LL_RCC_PLLSAI1_Enable>:
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8001a76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a7a:	6813      	ldr	r3, [r2, #0]
 8001a7c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001a80:	6013      	str	r3, [r2, #0]
 8001a82:	4770      	bx	lr

08001a84 <LL_RCC_PLLSAI1_Disable>:
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8001a84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a88:	6813      	ldr	r3, [r2, #0]
 8001a8a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001a8e:	6013      	str	r3, [r2, #0]
 8001a90:	4770      	bx	lr

08001a92 <LL_RCC_PLLSAI1_IsReady>:
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8001a92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a96:	6818      	ldr	r0, [r3, #0]
}
 8001a98:	f3c0 60c0 	ubfx	r0, r0, #27, #1
 8001a9c:	4770      	bx	lr

08001a9e <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001aa0:	6805      	ldr	r5, [r0, #0]
 8001aa2:	f015 0540 	ands.w	r5, r5, #64	; 0x40
{
 8001aa6:	4604      	mov	r4, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001aa8:	d043      	beq.n	8001b32 <HAL_RCCEx_PeriphCLKConfig+0x94>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8001aaa:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001aac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ab0:	d015      	beq.n	8001ade <HAL_RCCEx_PeriphCLKConfig+0x40>
 8001ab2:	d802      	bhi.n	8001aba <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8001ab4:	b1d3      	cbz	r3, 8001aec <HAL_RCCEx_PeriphCLKConfig+0x4e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8001ab6:	2501      	movs	r5, #1
 8001ab8:	e03b      	b.n	8001b32 <HAL_RCCEx_PeriphCLKConfig+0x94>
    switch (PeriphClkInit->Sai1ClockSelection)
 8001aba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001abe:	d002      	beq.n	8001ac6 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8001ac0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001ac4:	d1f7      	bne.n	8001ab6 <HAL_RCCEx_PeriphCLKConfig+0x18>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8001ac6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001aca:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001acc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001ad0:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001ad4:	430b      	orrs	r3, r1
 8001ad6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001ada:	2500      	movs	r5, #0
 8001adc:	e029      	b.n	8001b32 <HAL_RCCEx_PeriphCLKConfig+0x94>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8001ade:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ae2:	68d3      	ldr	r3, [r2, #12]
 8001ae4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ae8:	60d3      	str	r3, [r2, #12]
        break;
 8001aea:	e7ec      	b.n	8001ac6 <HAL_RCCEx_PeriphCLKConfig+0x28>
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8001aec:	f7ff ffca 	bl	8001a84 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001af0:	f7fe fd1e 	bl	8000530 <HAL_GetTick>
 8001af4:	4605      	mov	r5, r0

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8001af6:	f7ff ffcc 	bl	8001a92 <LL_RCC_PLLSAI1_IsReady>
 8001afa:	b9a0      	cbnz	r0, 8001b26 <HAL_RCCEx_PeriphCLKConfig+0x88>
  }

  if (status == HAL_OK)
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8001afc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b00:	6861      	ldr	r1, [r4, #4]
 8001b02:	6913      	ldr	r3, [r2, #16]
 8001b04:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001b08:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001b0c:	6113      	str	r3, [r2, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8001b0e:	6913      	ldr	r3, [r2, #16]
 8001b10:	68a1      	ldr	r1, [r4, #8]
 8001b12:	f423 1378 	bic.w	r3, r3, #4063232	; 0x3e0000
 8001b16:	430b      	orrs	r3, r1
 8001b18:	6113      	str	r3, [r2, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8001b1a:	f7ff ffac 	bl	8001a76 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b1e:	f7fe fd07 	bl	8000530 <HAL_GetTick>
 8001b22:	4605      	mov	r5, r0
 8001b24:	e0cd      	b.n	8001cc2 <HAL_RCCEx_PeriphCLKConfig+0x224>
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001b26:	f7fe fd03 	bl	8000530 <HAL_GetTick>
 8001b2a:	1b40      	subs	r0, r0, r5
 8001b2c:	2802      	cmp	r0, #2
 8001b2e:	d9e2      	bls.n	8001af6 <HAL_RCCEx_PeriphCLKConfig+0x58>
      status = HAL_TIMEOUT;
 8001b30:	2503      	movs	r5, #3
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001b32:	6823      	ldr	r3, [r4, #0]
 8001b34:	051a      	lsls	r2, r3, #20
 8001b36:	d515      	bpl.n	8001b64 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8001b38:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8001b3c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b3e:	f8d6 7090 	ldr.w	r7, [r6, #144]	; 0x90
 8001b42:	f407 7740 	and.w	r7, r7, #768	; 0x300
 8001b46:	42bb      	cmp	r3, r7
 8001b48:	d00c      	beq.n	8001b64 <HAL_RCCEx_PeriphCLKConfig+0xc6>
      HAL_PWR_EnableBkUpAccess();
 8001b4a:	f7ff fa7d 	bl	8001048 <HAL_PWR_EnableBkUpAccess>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8001b4e:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8001b52:	2f00      	cmp	r7, #0
 8001b54:	f040 80c0 	bne.w	8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x23a>
 8001b58:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001b5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001b64:	6823      	ldr	r3, [r4, #0]
 8001b66:	07df      	lsls	r7, r3, #31
 8001b68:	d509      	bpl.n	8001b7e <HAL_RCCEx_PeriphCLKConfig+0xe0>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8001b6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b6e:	69a0      	ldr	r0, [r4, #24]
 8001b70:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001b74:	f022 0203 	bic.w	r2, r2, #3
 8001b78:	4302      	orrs	r2, r0
 8001b7a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001b7e:	079e      	lsls	r6, r3, #30
 8001b80:	d509      	bpl.n	8001b96 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8001b82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b86:	69e0      	ldr	r0, [r4, #28]
 8001b88:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001b8c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001b90:	4302      	orrs	r2, r0
 8001b92:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001b96:	06d8      	lsls	r0, r3, #27
 8001b98:	d50c      	bpl.n	8001bb4 <HAL_RCCEx_PeriphCLKConfig+0x116>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001b9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8001b9c:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8001ba0:	0c31      	lsrs	r1, r6, #16
 8001ba2:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8001ba6:	0409      	lsls	r1, r1, #16
 8001ba8:	ea22 0201 	bic.w	r2, r2, r1
 8001bac:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8001bb0:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001bb4:	0699      	lsls	r1, r3, #26
 8001bb6:	d50c      	bpl.n	8001bd2 <HAL_RCCEx_PeriphCLKConfig+0x134>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001bb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001bba:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8001bbe:	0c31      	lsrs	r1, r6, #16
 8001bc0:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8001bc4:	0409      	lsls	r1, r1, #16
 8001bc6:	ea22 0201 	bic.w	r2, r2, r1
 8001bca:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8001bce:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001bd2:	075a      	lsls	r2, r3, #29
 8001bd4:	d502      	bpl.n	8001bdc <HAL_RCCEx_PeriphCLKConfig+0x13e>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001bd6:	6a20      	ldr	r0, [r4, #32]
 8001bd8:	f7ff ff3d 	bl	8001a56 <LL_RCC_SetI2CClockSource>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001bdc:	6823      	ldr	r3, [r4, #0]
 8001bde:	071b      	lsls	r3, r3, #28
 8001be0:	d502      	bpl.n	8001be8 <HAL_RCCEx_PeriphCLKConfig+0x14a>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001be2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001be4:	f7ff ff37 	bl	8001a56 <LL_RCC_SetI2CClockSource>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001be8:	6823      	ldr	r3, [r4, #0]
 8001bea:	05df      	lsls	r7, r3, #23
 8001bec:	d511      	bpl.n	8001c12 <HAL_RCCEx_PeriphCLKConfig+0x174>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8001bee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001bf2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001bf4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001bf8:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001bfc:	430b      	orrs	r3, r1
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001bfe:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
 8001c02:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001c06:	f040 8090 	bne.w	8001d2a <HAL_RCCEx_PeriphCLKConfig+0x28c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8001c0a:	68d3      	ldr	r3, [r2, #12]
 8001c0c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c10:	60d3      	str	r3, [r2, #12]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001c12:	6823      	ldr	r3, [r4, #0]
 8001c14:	059e      	lsls	r6, r3, #22
 8001c16:	d51a      	bpl.n	8001c4e <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001c18:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001c1a:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8001c1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c22:	d003      	beq.n	8001c2c <HAL_RCCEx_PeriphCLKConfig+0x18e>
 8001c24:	f032 4180 	bics.w	r1, r2, #1073741824	; 0x40000000
 8001c28:	f040 80b7 	bne.w	8001d9a <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8001c2c:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8001c30:	f021 4140 	bic.w	r1, r1, #3221225472	; 0xc0000000
 8001c34:	4311      	orrs	r1, r2
    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001c36:	f1b2 5fc0 	cmp.w	r2, #402653184	; 0x18000000
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8001c3a:	bf08      	it	eq
 8001c3c:	f04f 42b0 	moveq.w	r2, #1476395008	; 0x58000000
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8001c40:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
 8001c44:	bf02      	ittt	eq
 8001c46:	68d3      	ldreq	r3, [r2, #12]
 8001c48:	f043 7380 	orreq.w	r3, r3, #16777216	; 0x1000000
 8001c4c:	60d3      	streq	r3, [r2, #12]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001c4e:	6823      	ldr	r3, [r4, #0]
 8001c50:	0558      	lsls	r0, r3, #21
 8001c52:	d511      	bpl.n	8001c78 <HAL_RCCEx_PeriphCLKConfig+0x1da>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8001c54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001c58:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001c5a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001c5e:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001c62:	430b      	orrs	r3, r1
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8001c64:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8001c68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001c6c:	f040 80a3 	bne.w	8001db6 <HAL_RCCEx_PeriphCLKConfig+0x318>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8001c70:	68d3      	ldr	r3, [r2, #12]
 8001c72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c76:	60d3      	str	r3, [r2, #12]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8001c78:	6822      	ldr	r2, [r4, #0]
 8001c7a:	04d1      	lsls	r1, r2, #19
 8001c7c:	d509      	bpl.n	8001c92 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8001c7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c82:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8001c84:	f8d1 3094 	ldr.w	r3, [r1, #148]	; 0x94
 8001c88:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001c8c:	4303      	orrs	r3, r0
 8001c8e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8001c92:	0493      	lsls	r3, r2, #18
 8001c94:	d50d      	bpl.n	8001cb2 <HAL_RCCEx_PeriphCLKConfig+0x214>
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8001c96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c9a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8001c9c:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001c9e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001ca2:	430b      	orrs	r3, r1
 8001ca4:	6253      	str	r3, [r2, #36]	; 0x24
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8001ca6:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001ca8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8001caa:	f023 0303 	bic.w	r3, r3, #3
 8001cae:	430b      	orrs	r3, r1
 8001cb0:	6253      	str	r3, [r2, #36]	; 0x24
}
 8001cb2:	4628      	mov	r0, r5
 8001cb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001cb6:	f7fe fc3b 	bl	8000530 <HAL_GetTick>
 8001cba:	1b40      	subs	r0, r0, r5
 8001cbc:	2802      	cmp	r0, #2
 8001cbe:	f63f af37 	bhi.w	8001b30 <HAL_RCCEx_PeriphCLKConfig+0x92>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8001cc2:	f7ff fee6 	bl	8001a92 <LL_RCC_PLLSAI1_IsReady>
 8001cc6:	2801      	cmp	r0, #1
 8001cc8:	d1f5      	bne.n	8001cb6 <HAL_RCCEx_PeriphCLKConfig+0x218>
    }

    if (status == HAL_OK)
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8001cca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cce:	6961      	ldr	r1, [r4, #20]
 8001cd0:	6913      	ldr	r3, [r2, #16]
 8001cd2:	430b      	orrs	r3, r1
 8001cd4:	6113      	str	r3, [r2, #16]
 8001cd6:	e6f6      	b.n	8001ac6 <HAL_RCCEx_PeriphCLKConfig+0x28>
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8001cd8:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8001cdc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001ce0:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8001ce4:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8001ce8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001cec:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8001cf0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001cf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001cf6:	4313      	orrs	r3, r2
        LL_RCC_WriteReg(BDCR, bdcr);
 8001cf8:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8001cfc:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8001d00:	07db      	lsls	r3, r3, #31
 8001d02:	f57f af2f 	bpl.w	8001b64 <HAL_RCCEx_PeriphCLKConfig+0xc6>
          tickstart = HAL_GetTick();
 8001d06:	f7fe fc13 	bl	8000530 <HAL_GetTick>
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d0a:	f241 3688 	movw	r6, #5000	; 0x1388
          tickstart = HAL_GetTick();
 8001d0e:	4607      	mov	r7, r0
          while (LL_RCC_LSE_IsReady() != 1U)
 8001d10:	e004      	b.n	8001d1c <HAL_RCCEx_PeriphCLKConfig+0x27e>
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d12:	f7fe fc0d 	bl	8000530 <HAL_GetTick>
 8001d16:	1bc0      	subs	r0, r0, r7
 8001d18:	42b0      	cmp	r0, r6
 8001d1a:	d804      	bhi.n	8001d26 <HAL_RCCEx_PeriphCLKConfig+0x288>
          while (LL_RCC_LSE_IsReady() != 1U)
 8001d1c:	f7ff fe94 	bl	8001a48 <LL_RCC_LSE_IsReady>
 8001d20:	2801      	cmp	r0, #1
 8001d22:	d1f6      	bne.n	8001d12 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8001d24:	e71e      	b.n	8001b64 <HAL_RCCEx_PeriphCLKConfig+0xc6>
              ret = HAL_TIMEOUT;
 8001d26:	2503      	movs	r5, #3
 8001d28:	e71c      	b.n	8001b64 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001d2a:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8001d2e:	f47f af70 	bne.w	8001c12 <HAL_RCCEx_PeriphCLKConfig+0x174>
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8001d32:	f7ff fea7 	bl	8001a84 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001d36:	f7fe fbfb 	bl	8000530 <HAL_GetTick>
 8001d3a:	4606      	mov	r6, r0

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8001d3c:	f7ff fea9 	bl	8001a92 <LL_RCC_PLLSAI1_IsReady>
 8001d40:	b9a0      	cbnz	r0, 8001d6c <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  }

  if (status == HAL_OK)
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8001d42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d46:	6861      	ldr	r1, [r4, #4]
 8001d48:	6913      	ldr	r3, [r2, #16]
 8001d4a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001d4e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001d52:	6113      	str	r3, [r2, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8001d54:	6913      	ldr	r3, [r2, #16]
 8001d56:	68e1      	ldr	r1, [r4, #12]
 8001d58:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 8001d5c:	430b      	orrs	r3, r1
 8001d5e:	6113      	str	r3, [r2, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8001d60:	f7ff fe89 	bl	8001a76 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d64:	f7fe fbe4 	bl	8000530 <HAL_GetTick>
 8001d68:	4606      	mov	r6, r0
 8001d6a:	e00b      	b.n	8001d84 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001d6c:	f7fe fbe0 	bl	8000530 <HAL_GetTick>
 8001d70:	1b80      	subs	r0, r0, r6
 8001d72:	2802      	cmp	r0, #2
 8001d74:	d9e2      	bls.n	8001d3c <HAL_RCCEx_PeriphCLKConfig+0x29e>
              ret = HAL_TIMEOUT;
 8001d76:	2503      	movs	r5, #3
 8001d78:	e74b      	b.n	8001c12 <HAL_RCCEx_PeriphCLKConfig+0x174>

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001d7a:	f7fe fbd9 	bl	8000530 <HAL_GetTick>
 8001d7e:	1b80      	subs	r0, r0, r6
 8001d80:	2802      	cmp	r0, #2
 8001d82:	d8f8      	bhi.n	8001d76 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8001d84:	f7ff fe85 	bl	8001a92 <LL_RCC_PLLSAI1_IsReady>
 8001d88:	2801      	cmp	r0, #1
 8001d8a:	d1f6      	bne.n	8001d7a <HAL_RCCEx_PeriphCLKConfig+0x2dc>
    }

    if (status == HAL_OK)
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8001d8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d90:	6961      	ldr	r1, [r4, #20]
 8001d92:	6913      	ldr	r3, [r2, #16]
 8001d94:	430b      	orrs	r3, r1
 8001d96:	6113      	str	r3, [r2, #16]
 8001d98:	e73b      	b.n	8001c12 <HAL_RCCEx_PeriphCLKConfig+0x174>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8001d9a:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8001d9e:	f021 4140 	bic.w	r1, r1, #3221225472	; 0xc0000000
 8001da2:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8001da6:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001daa:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 8001dae:	f020 6040 	bic.w	r0, r0, #201326592	; 0xc000000
 8001db2:	4301      	orrs	r1, r0
 8001db4:	e73f      	b.n	8001c36 <HAL_RCCEx_PeriphCLKConfig+0x198>
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001db6:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 8001dba:	f47f af5d 	bne.w	8001c78 <HAL_RCCEx_PeriphCLKConfig+0x1da>
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8001dbe:	f7ff fe61 	bl	8001a84 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001dc2:	f7fe fbb5 	bl	8000530 <HAL_GetTick>
 8001dc6:	4606      	mov	r6, r0

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8001dc8:	f7ff fe63 	bl	8001a92 <LL_RCC_PLLSAI1_IsReady>
 8001dcc:	b9a0      	cbnz	r0, 8001df8 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  }

  if (status == HAL_OK)
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8001dce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001dd2:	6861      	ldr	r1, [r4, #4]
 8001dd4:	6913      	ldr	r3, [r2, #16]
 8001dd6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001dda:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001dde:	6113      	str	r3, [r2, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8001de0:	6913      	ldr	r3, [r2, #16]
 8001de2:	6921      	ldr	r1, [r4, #16]
 8001de4:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8001de8:	430b      	orrs	r3, r1
 8001dea:	6113      	str	r3, [r2, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8001dec:	f7ff fe43 	bl	8001a76 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001df0:	f7fe fb9e 	bl	8000530 <HAL_GetTick>
 8001df4:	4606      	mov	r6, r0
 8001df6:	e00b      	b.n	8001e10 <HAL_RCCEx_PeriphCLKConfig+0x372>
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001df8:	f7fe fb9a 	bl	8000530 <HAL_GetTick>
 8001dfc:	1b80      	subs	r0, r0, r6
 8001dfe:	2802      	cmp	r0, #2
 8001e00:	d9e2      	bls.n	8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x32a>
              ret = HAL_TIMEOUT;
 8001e02:	2503      	movs	r5, #3
 8001e04:	e738      	b.n	8001c78 <HAL_RCCEx_PeriphCLKConfig+0x1da>

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001e06:	f7fe fb93 	bl	8000530 <HAL_GetTick>
 8001e0a:	1b80      	subs	r0, r0, r6
 8001e0c:	2802      	cmp	r0, #2
 8001e0e:	d8f8      	bhi.n	8001e02 <HAL_RCCEx_PeriphCLKConfig+0x364>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8001e10:	f7ff fe3f 	bl	8001a92 <LL_RCC_PLLSAI1_IsReady>
 8001e14:	2801      	cmp	r0, #1
 8001e16:	d1f6      	bne.n	8001e06 <HAL_RCCEx_PeriphCLKConfig+0x368>
    }

    if (status == HAL_OK)
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8001e18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e1c:	6961      	ldr	r1, [r4, #20]
 8001e1e:	6913      	ldr	r3, [r2, #16]
 8001e20:	430b      	orrs	r3, r1
 8001e22:	6113      	str	r3, [r2, #16]
 8001e24:	e728      	b.n	8001c78 <HAL_RCCEx_PeriphCLKConfig+0x1da>

08001e26 <HAL_RCCEx_EnableMSIPLLMode>:
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8001e26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e2a:	6813      	ldr	r3, [r2, #0]
 8001e2c:	f043 0304 	orr.w	r3, r3, #4
 8001e30:	6013      	str	r3, [r2, #0]
 8001e32:	4770      	bx	lr

08001e34 <SPI_WaitFifoStateUntilTimeout.part.1>:
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001e34:	6803      	ldr	r3, [r0, #0]
 8001e36:	685a      	ldr	r2, [r3, #4]
 8001e38:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001e3c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e3e:	6842      	ldr	r2, [r0, #4]
 8001e40:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8001e44:	d10a      	bne.n	8001e5c <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
 8001e46:	6882      	ldr	r2, [r0, #8]
 8001e48:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001e4c:	d002      	beq.n	8001e54 <SPI_WaitFifoStateUntilTimeout.part.1+0x20>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001e4e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8001e52:	d103      	bne.n	8001e5c <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e5a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001e5c:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8001e5e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001e62:	d107      	bne.n	8001e74 <SPI_WaitFifoStateUntilTimeout.part.1+0x40>
        {
          SPI_RESET_CRC(hspi);
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e6a:	601a      	str	r2, [r3, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e72:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001e74:	2301      	movs	r3, #1
 8001e76:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
      }
    }
  }

  return HAL_OK;
}
 8001e80:	2003      	movs	r0, #3
 8001e82:	4770      	bx	lr

08001e84 <SPI_WaitFlagStateUntilTimeout.constprop.10>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8001e84:	b570      	push	{r4, r5, r6, lr}
 8001e86:	4604      	mov	r4, r0
 8001e88:	460d      	mov	r5, r1
 8001e8a:	4616      	mov	r6, r2
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001e8c:	6823      	ldr	r3, [r4, #0]
 8001e8e:	6898      	ldr	r0, [r3, #8]
 8001e90:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001e94:	d100      	bne.n	8001e98 <SPI_WaitFlagStateUntilTimeout.constprop.10+0x14>
}
 8001e96:	bd70      	pop	{r4, r5, r6, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001e98:	1c6a      	adds	r2, r5, #1
 8001e9a:	d0f8      	beq.n	8001e8e <SPI_WaitFlagStateUntilTimeout.constprop.10+0xa>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001e9c:	f7fe fb48 	bl	8000530 <HAL_GetTick>
 8001ea0:	1b80      	subs	r0, r0, r6
 8001ea2:	4285      	cmp	r5, r0
 8001ea4:	d8f2      	bhi.n	8001e8c <SPI_WaitFlagStateUntilTimeout.constprop.10+0x8>
 8001ea6:	4620      	mov	r0, r4
}
 8001ea8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001eac:	f7ff bfc2 	b.w	8001e34 <SPI_WaitFifoStateUntilTimeout.part.1>

08001eb0 <SPI_WaitFifoStateUntilTimeout.constprop.11>:
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8001eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eb2:	4605      	mov	r5, r0
 8001eb4:	460c      	mov	r4, r1
 8001eb6:	4616      	mov	r6, r2
 8001eb8:	461f      	mov	r7, r3
  while ((hspi->Instance->SR & Fifo) != State)
 8001eba:	6829      	ldr	r1, [r5, #0]
 8001ebc:	6888      	ldr	r0, [r1, #8]
 8001ebe:	4020      	ands	r0, r4
 8001ec0:	d100      	bne.n	8001ec4 <SPI_WaitFifoStateUntilTimeout.constprop.11+0x14>
}
 8001ec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8001ec4:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8001ec8:	bf08      	it	eq
 8001eca:	7b0b      	ldrbeq	r3, [r1, #12]
    if (Timeout != HAL_MAX_DELAY)
 8001ecc:	1c73      	adds	r3, r6, #1
 8001ece:	d0f5      	beq.n	8001ebc <SPI_WaitFifoStateUntilTimeout.constprop.11+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001ed0:	f7fe fb2e 	bl	8000530 <HAL_GetTick>
 8001ed4:	1bc0      	subs	r0, r0, r7
 8001ed6:	4286      	cmp	r6, r0
 8001ed8:	d8ef      	bhi.n	8001eba <SPI_WaitFifoStateUntilTimeout.constprop.11+0xa>
 8001eda:	4628      	mov	r0, r5
}
 8001edc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8001ee0:	f7ff bfa8 	b.w	8001e34 <SPI_WaitFifoStateUntilTimeout.part.1>

08001ee4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001ee4:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001ee6:	4613      	mov	r3, r2
{
 8001ee8:	460d      	mov	r5, r1
 8001eea:	4616      	mov	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001eec:	460a      	mov	r2, r1
 8001eee:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
{
 8001ef2:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001ef4:	f7ff ffdc 	bl	8001eb0 <SPI_WaitFifoStateUntilTimeout.constprop.11>
 8001ef8:	b128      	cbz	r0, 8001f06 <SPI_EndRxTxTransaction+0x22>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001efa:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001efc:	f043 0320 	orr.w	r3, r3, #32
 8001f00:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 8001f02:	2003      	movs	r0, #3
 8001f04:	e00f      	b.n	8001f26 <SPI_EndRxTxTransaction+0x42>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001f06:	4632      	mov	r2, r6
 8001f08:	4629      	mov	r1, r5
 8001f0a:	4620      	mov	r0, r4
 8001f0c:	f7ff ffba 	bl	8001e84 <SPI_WaitFlagStateUntilTimeout.constprop.10>
 8001f10:	2800      	cmp	r0, #0
 8001f12:	d1f2      	bne.n	8001efa <SPI_EndRxTxTransaction+0x16>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001f14:	4633      	mov	r3, r6
 8001f16:	462a      	mov	r2, r5
 8001f18:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001f1c:	4620      	mov	r0, r4
 8001f1e:	f7ff ffc7 	bl	8001eb0 <SPI_WaitFifoStateUntilTimeout.constprop.11>
 8001f22:	2800      	cmp	r0, #0
 8001f24:	d1e9      	bne.n	8001efa <SPI_EndRxTxTransaction+0x16>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8001f26:	bd70      	pop	{r4, r5, r6, pc}

08001f28 <HAL_SPI_Init>:
{
 8001f28:	b570      	push	{r4, r5, r6, lr}
  if (hspi == NULL)
 8001f2a:	4604      	mov	r4, r0
 8001f2c:	2800      	cmp	r0, #0
 8001f2e:	d04a      	beq.n	8001fc6 <HAL_SPI_Init+0x9e>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f30:	2300      	movs	r3, #0
 8001f32:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001f34:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8001f38:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001f3c:	b91b      	cbnz	r3, 8001f46 <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8001f3e:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8001f42:	f001 fa2f 	bl	80033a4 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8001f46:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8001f48:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001f4a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8001f4e:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001f50:	68e2      	ldr	r2, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 8001f52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001f56:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8001f5a:	600b      	str	r3, [r1, #0]
 8001f5c:	f04f 0300 	mov.w	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001f60:	d92e      	bls.n	8001fc0 <HAL_SPI_Init+0x98>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001f62:	4618      	mov	r0, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001f64:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f68:	bf18      	it	ne
 8001f6a:	62a3      	strne	r3, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8001f6c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001f6e:	b92b      	cbnz	r3, 8001f7c <HAL_SPI_Init+0x54>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001f70:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8001f74:	bf8c      	ite	hi
 8001f76:	2302      	movhi	r3, #2
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8001f78:	2301      	movls	r3, #1
 8001f7a:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8001f7c:	68a6      	ldr	r6, [r4, #8]
 8001f7e:	6863      	ldr	r3, [r4, #4]
 8001f80:	69a5      	ldr	r5, [r4, #24]
 8001f82:	4333      	orrs	r3, r6
 8001f84:	6926      	ldr	r6, [r4, #16]
 8001f86:	4333      	orrs	r3, r6
 8001f88:	6966      	ldr	r6, [r4, #20]
 8001f8a:	4333      	orrs	r3, r6
 8001f8c:	69e6      	ldr	r6, [r4, #28]
 8001f8e:	4333      	orrs	r3, r6
 8001f90:	6a26      	ldr	r6, [r4, #32]
 8001f92:	4333      	orrs	r3, r6
 8001f94:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001f96:	4333      	orrs	r3, r6
 8001f98:	f405 7600 	and.w	r6, r5, #512	; 0x200
 8001f9c:	4333      	orrs	r3, r6
 8001f9e:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001fa0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001fa2:	431a      	orrs	r2, r3
 8001fa4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001fa6:	0c2d      	lsrs	r5, r5, #16
 8001fa8:	431a      	orrs	r2, r3
 8001faa:	f005 0504 	and.w	r5, r5, #4
 8001fae:	432a      	orrs	r2, r5
 8001fb0:	4302      	orrs	r2, r0
  hspi->State     = HAL_SPI_STATE_READY;
 8001fb2:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001fb4:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001fb6:	604a      	str	r2, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001fb8:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001fba:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  return HAL_OK;
 8001fbe:	bd70      	pop	{r4, r5, r6, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001fc0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001fc4:	e7d0      	b.n	8001f68 <HAL_SPI_Init+0x40>
    return HAL_ERROR;
 8001fc6:	2001      	movs	r0, #1
}
 8001fc8:	bd70      	pop	{r4, r5, r6, pc}
	...

08001fcc <HAL_SPI_Transmit_DMA>:
  __HAL_LOCK(hspi);
 8001fcc:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8001fd0:	2b01      	cmp	r3, #1
{
 8001fd2:	b510      	push	{r4, lr}
 8001fd4:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8001fd6:	d070      	beq.n	80020ba <HAL_SPI_Transmit_DMA+0xee>
 8001fd8:	2301      	movs	r3, #1
 8001fda:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  if (hspi->State != HAL_SPI_STATE_READY)
 8001fde:	f890 005d 	ldrb.w	r0, [r0, #93]	; 0x5d
 8001fe2:	b2c0      	uxtb	r0, r0
 8001fe4:	4298      	cmp	r0, r3
 8001fe6:	d166      	bne.n	80020b6 <HAL_SPI_Transmit_DMA+0xea>
  if ((pData == NULL) || (Size == 0U))
 8001fe8:	2900      	cmp	r1, #0
 8001fea:	d047      	beq.n	800207c <HAL_SPI_Transmit_DMA+0xb0>
 8001fec:	2a00      	cmp	r2, #0
 8001fee:	d045      	beq.n	800207c <HAL_SPI_Transmit_DMA+0xb0>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001ffa:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxXferCount = Size;
 8001ffc:	87e2      	strh	r2, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001ffe:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxXferCount = 0U;
 8002000:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->RxISR       = NULL;
 8002004:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 8002006:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800200a:	68a3      	ldr	r3, [r4, #8]
  hspi->TxXferSize  = Size;
 800200c:	87a2      	strh	r2, [r4, #60]	; 0x3c
 800200e:	6822      	ldr	r2, [r4, #0]
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8002010:	6d60      	ldr	r0, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002012:	63a1      	str	r1, [r4, #56]	; 0x38
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002014:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    SPI_1LINE_TX(hspi);
 8002018:	bf02      	ittt	eq
 800201a:	6813      	ldreq	r3, [r2, #0]
 800201c:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
 8002020:	6013      	streq	r3, [r2, #0]
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8002022:	4b27      	ldr	r3, [pc, #156]	; (80020c0 <HAL_SPI_Transmit_DMA+0xf4>)
 8002024:	6303      	str	r3, [r0, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8002026:	4b27      	ldr	r3, [pc, #156]	; (80020c4 <HAL_SPI_Transmit_DMA+0xf8>)
 8002028:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800202a:	4b27      	ldr	r3, [pc, #156]	; (80020c8 <HAL_SPI_Transmit_DMA+0xfc>)
 800202c:	6343      	str	r3, [r0, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback = NULL;
 800202e:	2300      	movs	r3, #0
 8002030:	6383      	str	r3, [r0, #56]	; 0x38
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8002032:	6853      	ldr	r3, [r2, #4]
 8002034:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002038:	6053      	str	r3, [r2, #4]
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800203a:	68e3      	ldr	r3, [r4, #12]
 800203c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002040:	d80f      	bhi.n	8002062 <HAL_SPI_Transmit_DMA+0x96>
 8002042:	6983      	ldr	r3, [r0, #24]
 8002044:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002048:	d10b      	bne.n	8002062 <HAL_SPI_Transmit_DMA+0x96>
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800204a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800204c:	f013 0f01 	tst.w	r3, #1
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8002050:	6853      	ldr	r3, [r2, #4]
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8002052:	d117      	bne.n	8002084 <HAL_SPI_Transmit_DMA+0xb8>
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8002054:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002058:	6053      	str	r3, [r2, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800205a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800205c:	f3c3 034e 	ubfx	r3, r3, #1, #15
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8002060:	87e3      	strh	r3, [r4, #62]	; 0x3e
                                 hspi->TxXferCount))
 8002062:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002064:	320c      	adds	r2, #12
 8002066:	b29b      	uxth	r3, r3
 8002068:	f7fe fb9e 	bl	80007a8 <HAL_DMA_Start_IT>
 800206c:	b190      	cbz	r0, 8002094 <HAL_SPI_Transmit_DMA+0xc8>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800206e:	6e23      	ldr	r3, [r4, #96]	; 0x60
    hspi->State = HAL_SPI_STATE_READY;
 8002070:	2001      	movs	r0, #1
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002072:	f043 0310 	orr.w	r3, r3, #16
 8002076:	6623      	str	r3, [r4, #96]	; 0x60
    hspi->State = HAL_SPI_STATE_READY;
 8002078:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800207c:	2300      	movs	r3, #0
 800207e:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  return errorcode;
 8002082:	bd10      	pop	{r4, pc}
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8002084:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002088:	6053      	str	r3, [r2, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800208a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800208c:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8002090:	3301      	adds	r3, #1
 8002092:	e7e5      	b.n	8002060 <HAL_SPI_Transmit_DMA+0x94>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002094:	6823      	ldr	r3, [r4, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 800209a:	bf5e      	ittt	pl
 800209c:	681a      	ldrpl	r2, [r3, #0]
 800209e:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 80020a2:	601a      	strpl	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80020a4:	685a      	ldr	r2, [r3, #4]
 80020a6:	f042 0220 	orr.w	r2, r2, #32
 80020aa:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80020ac:	685a      	ldr	r2, [r3, #4]
 80020ae:	f042 0202 	orr.w	r2, r2, #2
 80020b2:	605a      	str	r2, [r3, #4]
 80020b4:	e7e2      	b.n	800207c <HAL_SPI_Transmit_DMA+0xb0>
    errorcode = HAL_BUSY;
 80020b6:	2002      	movs	r0, #2
 80020b8:	e7e0      	b.n	800207c <HAL_SPI_Transmit_DMA+0xb0>
  __HAL_LOCK(hspi);
 80020ba:	2002      	movs	r0, #2
}
 80020bc:	bd10      	pop	{r4, pc}
 80020be:	bf00      	nop
 80020c0:	080020d1 	.word	0x080020d1
 80020c4:	080020ff 	.word	0x080020ff
 80020c8:	080020dd 	.word	0x080020dd

080020cc <HAL_SPI_TxCpltCallback>:
 80020cc:	4770      	bx	lr

080020ce <HAL_SPI_TxHalfCpltCallback>:
 80020ce:	4770      	bx	lr

080020d0 <SPI_DMAHalfTransmitCplt>:
{
 80020d0:	b508      	push	{r3, lr}
  HAL_SPI_TxHalfCpltCallback(hspi);
 80020d2:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80020d4:	f7ff fffb 	bl	80020ce <HAL_SPI_TxHalfCpltCallback>
 80020d8:	bd08      	pop	{r3, pc}

080020da <HAL_SPI_ErrorCallback>:
 80020da:	4770      	bx	lr

080020dc <SPI_DMAError>:
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80020dc:	6a80      	ldr	r0, [r0, #40]	; 0x28
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80020de:	6802      	ldr	r2, [r0, #0]
{
 80020e0:	b508      	push	{r3, lr}
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80020e2:	6853      	ldr	r3, [r2, #4]
 80020e4:	f023 0303 	bic.w	r3, r3, #3
 80020e8:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80020ea:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80020ec:	f043 0310 	orr.w	r3, r3, #16
 80020f0:	6603      	str	r3, [r0, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80020f2:	2301      	movs	r3, #1
 80020f4:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  HAL_SPI_ErrorCallback(hspi);
 80020f8:	f7ff ffef 	bl	80020da <HAL_SPI_ErrorCallback>
 80020fc:	bd08      	pop	{r3, pc}

080020fe <SPI_DMATransmitCplt>:
{
 80020fe:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002100:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002102:	6a84      	ldr	r4, [r0, #40]	; 0x28
  tickstart = HAL_GetTick();
 8002104:	f7fe fa14 	bl	8000530 <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8002108:	682b      	ldr	r3, [r5, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	069b      	lsls	r3, r3, #26
  tickstart = HAL_GetTick();
 800210e:	4602      	mov	r2, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8002110:	d426      	bmi.n	8002160 <SPI_DMATransmitCplt+0x62>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002112:	6823      	ldr	r3, [r4, #0]
 8002114:	6859      	ldr	r1, [r3, #4]
 8002116:	f021 0120 	bic.w	r1, r1, #32
 800211a:	6059      	str	r1, [r3, #4]
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800211c:	6859      	ldr	r1, [r3, #4]
 800211e:	f021 0102 	bic.w	r1, r1, #2
 8002122:	6059      	str	r1, [r3, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002124:	4620      	mov	r0, r4
 8002126:	2164      	movs	r1, #100	; 0x64
 8002128:	f7ff fedc 	bl	8001ee4 <SPI_EndRxTxTransaction>
 800212c:	b118      	cbz	r0, 8002136 <SPI_DMATransmitCplt+0x38>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800212e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002130:	f043 0320 	orr.w	r3, r3, #32
 8002134:	6623      	str	r3, [r4, #96]	; 0x60
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002136:	68a3      	ldr	r3, [r4, #8]
 8002138:	b933      	cbnz	r3, 8002148 <SPI_DMATransmitCplt+0x4a>
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800213a:	9301      	str	r3, [sp, #4]
 800213c:	6823      	ldr	r3, [r4, #0]
 800213e:	68da      	ldr	r2, [r3, #12]
 8002140:	9201      	str	r2, [sp, #4]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	9301      	str	r3, [sp, #4]
 8002146:	9b01      	ldr	r3, [sp, #4]
    hspi->TxXferCount = 0U;
 8002148:	2300      	movs	r3, #0
 800214a:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800214c:	2301      	movs	r3, #1
 800214e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002152:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002154:	b123      	cbz	r3, 8002160 <SPI_DMATransmitCplt+0x62>
      HAL_SPI_ErrorCallback(hspi);
 8002156:	4620      	mov	r0, r4
 8002158:	f7ff ffbf 	bl	80020da <HAL_SPI_ErrorCallback>
}
 800215c:	b003      	add	sp, #12
 800215e:	bd30      	pop	{r4, r5, pc}
  HAL_SPI_TxCpltCallback(hspi);
 8002160:	4620      	mov	r0, r4
 8002162:	f7ff ffb3 	bl	80020cc <HAL_SPI_TxCpltCallback>
 8002166:	e7f9      	b.n	800215c <SPI_DMATransmitCplt+0x5e>

08002168 <UART_SetConfig>:

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(LPUART1)
  if (UART_INSTANCE_LOWPOWER(huart))
 8002168:	6802      	ldr	r2, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800216a:	69c1      	ldr	r1, [r0, #28]
 800216c:	6883      	ldr	r3, [r0, #8]
{
 800216e:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8002172:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002174:	6900      	ldr	r0, [r0, #16]
  tmpreg |= (uint32_t)huart->FifoMode;
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002176:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002178:	4303      	orrs	r3, r0
 800217a:	6960      	ldr	r0, [r4, #20]
 800217c:	4303      	orrs	r3, r0
  tmpreg |= (uint32_t)huart->FifoMode;
 800217e:	6e60      	ldr	r0, [r4, #100]	; 0x64
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002180:	430b      	orrs	r3, r1
  tmpreg |= (uint32_t)huart->FifoMode;
 8002182:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002184:	48ac      	ldr	r0, [pc, #688]	; (8002438 <UART_SetConfig+0x2d0>)
 8002186:	4028      	ands	r0, r5
 8002188:	4303      	orrs	r3, r0
 800218a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800218c:	6853      	ldr	r3, [r2, #4]
 800218e:	68e0      	ldr	r0, [r4, #12]
 8002190:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002194:	4303      	orrs	r3, r0
 8002196:	6053      	str	r3, [r2, #4]
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002198:	4ba8      	ldr	r3, [pc, #672]	; (800243c <UART_SetConfig+0x2d4>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800219a:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800219c:	429a      	cmp	r2, r3
  {
    tmpreg |= huart->Init.OneBitSampling;
 800219e:	bf1c      	itt	ne
 80021a0:	6a23      	ldrne	r3, [r4, #32]
 80021a2:	4318      	orrne	r0, r3
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80021a4:	6893      	ldr	r3, [r2, #8]
 80021a6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80021aa:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80021ae:	4303      	orrs	r3, r0
 80021b0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80021b2:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 80021b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80021b6:	f020 000f 	bic.w	r0, r0, #15
 80021ba:	4318      	orrs	r0, r3
 80021bc:	62d0      	str	r0, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80021be:	48a0      	ldr	r0, [pc, #640]	; (8002440 <UART_SetConfig+0x2d8>)
 80021c0:	4282      	cmp	r2, r0
 80021c2:	d11a      	bne.n	80021fa <UART_SetConfig+0x92>
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80021c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021c8:	489e      	ldr	r0, [pc, #632]	; (8002444 <UART_SetConfig+0x2dc>)
 80021ca:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80021ce:	f002 0203 	and.w	r2, r2, #3
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80021d2:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80021d6:	5c82      	ldrb	r2, [r0, r2]
 80021d8:	f102 32ff 	add.w	r2, r2, #4294967295
 80021dc:	f000 8220 	beq.w	8002620 <UART_SetConfig+0x4b8>
      ret = HAL_ERROR;
    }
  }
  else
  {
    switch (clocksource)
 80021e0:	2a07      	cmp	r2, #7
 80021e2:	f200 83e7 	bhi.w	80029b4 <UART_SetConfig+0x84c>
 80021e6:	e8df f012 	tbh	[pc, r2, lsl #1]
 80021ea:	0327      	.short	0x0327
 80021ec:	03e50349 	.word	0x03e50349
 80021f0:	03e5038c 	.word	0x03e5038c
 80021f4:	03e503e5 	.word	0x03e503e5
 80021f8:	03a5      	.short	0x03a5
  UART_GETCLOCKSOURCE(huart, clocksource);
 80021fa:	4890      	ldr	r0, [pc, #576]	; (800243c <UART_SetConfig+0x2d4>)
 80021fc:	4282      	cmp	r2, r0
 80021fe:	f040 83d5 	bne.w	80029ac <UART_SetConfig+0x844>
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8002202:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002206:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800220a:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 800220e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8002212:	f000 8094 	beq.w	800233e <UART_SetConfig+0x1d6>
 8002216:	d80c      	bhi.n	8002232 <UART_SetConfig+0xca>
 8002218:	b3ca      	cbz	r2, 800228e <UART_SetConfig+0x126>
        ret = HAL_ERROR;
 800221a:	2201      	movs	r2, #1
      ret = HAL_ERROR;
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800221c:	2301      	movs	r3, #1
 800221e:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8002222:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002226:	2300      	movs	r3, #0
 8002228:	66e3      	str	r3, [r4, #108]	; 0x6c
  huart->TxISR = NULL;
 800222a:	6723      	str	r3, [r4, #112]	; 0x70

  return ret;
}
 800222c:	4610      	mov	r0, r2
 800222e:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002232:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8002236:	d064      	beq.n	8002302 <UART_SetConfig+0x19a>
 8002238:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 800223c:	d1ed      	bne.n	800221a <UART_SetConfig+0xb2>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800223e:	2b00      	cmp	r3, #0
 8002240:	f000 80e1 	beq.w	8002406 <UART_SetConfig+0x29e>
 8002244:	2b01      	cmp	r3, #1
 8002246:	f000 80e1 	beq.w	800240c <UART_SetConfig+0x2a4>
 800224a:	2b02      	cmp	r3, #2
 800224c:	f000 80e1 	beq.w	8002412 <UART_SetConfig+0x2aa>
 8002250:	2b03      	cmp	r3, #3
 8002252:	f000 80e1 	beq.w	8002418 <UART_SetConfig+0x2b0>
 8002256:	2b04      	cmp	r3, #4
 8002258:	f000 80e1 	beq.w	800241e <UART_SetConfig+0x2b6>
 800225c:	2b05      	cmp	r3, #5
 800225e:	f000 80e1 	beq.w	8002424 <UART_SetConfig+0x2bc>
 8002262:	2b06      	cmp	r3, #6
 8002264:	f000 80e1 	beq.w	800242a <UART_SetConfig+0x2c2>
 8002268:	2b07      	cmp	r3, #7
 800226a:	f000 80e1 	beq.w	8002430 <UART_SetConfig+0x2c8>
 800226e:	2b08      	cmp	r3, #8
 8002270:	f000 8100 	beq.w	8002474 <UART_SetConfig+0x30c>
 8002274:	2b09      	cmp	r3, #9
 8002276:	f000 8100 	beq.w	800247a <UART_SetConfig+0x312>
 800227a:	2b0a      	cmp	r3, #10
 800227c:	f000 8100 	beq.w	8002480 <UART_SetConfig+0x318>
 8002280:	2b0b      	cmp	r3, #11
 8002282:	bf14      	ite	ne
 8002284:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 8002288:	2080      	moveq	r0, #128	; 0x80
 800228a:	2308      	movs	r3, #8
 800228c:	e093      	b.n	80023b6 <UART_SetConfig+0x24e>
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800228e:	f7ff fbb7 	bl	8001a00 <HAL_RCC_GetPCLK1Freq>
 8002292:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002294:	b1fb      	cbz	r3, 80022d6 <UART_SetConfig+0x16e>
 8002296:	2b01      	cmp	r3, #1
 8002298:	d01f      	beq.n	80022da <UART_SetConfig+0x172>
 800229a:	2b02      	cmp	r3, #2
 800229c:	d01f      	beq.n	80022de <UART_SetConfig+0x176>
 800229e:	2b03      	cmp	r3, #3
 80022a0:	d01f      	beq.n	80022e2 <UART_SetConfig+0x17a>
 80022a2:	2b04      	cmp	r3, #4
 80022a4:	d01f      	beq.n	80022e6 <UART_SetConfig+0x17e>
 80022a6:	2b05      	cmp	r3, #5
 80022a8:	d01f      	beq.n	80022ea <UART_SetConfig+0x182>
 80022aa:	2b06      	cmp	r3, #6
 80022ac:	d01f      	beq.n	80022ee <UART_SetConfig+0x186>
 80022ae:	2b07      	cmp	r3, #7
 80022b0:	d01f      	beq.n	80022f2 <UART_SetConfig+0x18a>
 80022b2:	2b08      	cmp	r3, #8
 80022b4:	d01f      	beq.n	80022f6 <UART_SetConfig+0x18e>
 80022b6:	2b09      	cmp	r3, #9
 80022b8:	d01f      	beq.n	80022fa <UART_SetConfig+0x192>
 80022ba:	2b0a      	cmp	r3, #10
 80022bc:	d01f      	beq.n	80022fe <UART_SetConfig+0x196>
 80022be:	2b0b      	cmp	r3, #11
 80022c0:	bf14      	ite	ne
 80022c2:	2301      	movne	r3, #1
 80022c4:	f44f 7380 	moveq.w	r3, #256	; 0x100
 80022c8:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 80022cc:	2300      	movs	r3, #0
    if (lpuart_ker_ck_pres != 0U)
 80022ce:	2800      	cmp	r0, #0
 80022d0:	d171      	bne.n	80023b6 <UART_SetConfig+0x24e>
 80022d2:	4602      	mov	r2, r0
 80022d4:	e7a2      	b.n	800221c <UART_SetConfig+0xb4>
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80022d6:	2301      	movs	r3, #1
 80022d8:	e7f6      	b.n	80022c8 <UART_SetConfig+0x160>
 80022da:	2302      	movs	r3, #2
 80022dc:	e7f4      	b.n	80022c8 <UART_SetConfig+0x160>
 80022de:	2304      	movs	r3, #4
 80022e0:	e7f2      	b.n	80022c8 <UART_SetConfig+0x160>
 80022e2:	2306      	movs	r3, #6
 80022e4:	e7f0      	b.n	80022c8 <UART_SetConfig+0x160>
 80022e6:	2308      	movs	r3, #8
 80022e8:	e7ee      	b.n	80022c8 <UART_SetConfig+0x160>
 80022ea:	230a      	movs	r3, #10
 80022ec:	e7ec      	b.n	80022c8 <UART_SetConfig+0x160>
 80022ee:	230c      	movs	r3, #12
 80022f0:	e7ea      	b.n	80022c8 <UART_SetConfig+0x160>
 80022f2:	2310      	movs	r3, #16
 80022f4:	e7e8      	b.n	80022c8 <UART_SetConfig+0x160>
 80022f6:	2320      	movs	r3, #32
 80022f8:	e7e6      	b.n	80022c8 <UART_SetConfig+0x160>
 80022fa:	2340      	movs	r3, #64	; 0x40
 80022fc:	e7e4      	b.n	80022c8 <UART_SetConfig+0x160>
 80022fe:	2380      	movs	r3, #128	; 0x80
 8002300:	e7e2      	b.n	80022c8 <UART_SetConfig+0x160>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002302:	2b00      	cmp	r3, #0
 8002304:	d052      	beq.n	80023ac <UART_SetConfig+0x244>
 8002306:	2b01      	cmp	r3, #1
 8002308:	d052      	beq.n	80023b0 <UART_SetConfig+0x248>
 800230a:	2b02      	cmp	r3, #2
 800230c:	d052      	beq.n	80023b4 <UART_SetConfig+0x24c>
 800230e:	2b03      	cmp	r3, #3
 8002310:	d069      	beq.n	80023e6 <UART_SetConfig+0x27e>
 8002312:	2b04      	cmp	r3, #4
 8002314:	d069      	beq.n	80023ea <UART_SetConfig+0x282>
 8002316:	2b05      	cmp	r3, #5
 8002318:	d069      	beq.n	80023ee <UART_SetConfig+0x286>
 800231a:	2b06      	cmp	r3, #6
 800231c:	d069      	beq.n	80023f2 <UART_SetConfig+0x28a>
 800231e:	2b07      	cmp	r3, #7
 8002320:	d069      	beq.n	80023f6 <UART_SetConfig+0x28e>
 8002322:	2b08      	cmp	r3, #8
 8002324:	d069      	beq.n	80023fa <UART_SetConfig+0x292>
 8002326:	2b09      	cmp	r3, #9
 8002328:	d069      	beq.n	80023fe <UART_SetConfig+0x296>
 800232a:	2b0a      	cmp	r3, #10
 800232c:	d069      	beq.n	8002402 <UART_SetConfig+0x29a>
 800232e:	4846      	ldr	r0, [pc, #280]	; (8002448 <UART_SetConfig+0x2e0>)
 8002330:	f24f 4224 	movw	r2, #62500	; 0xf424
 8002334:	2b0b      	cmp	r3, #11
 8002336:	bf08      	it	eq
 8002338:	4610      	moveq	r0, r2
 800233a:	2302      	movs	r3, #2
 800233c:	e03b      	b.n	80023b6 <UART_SetConfig+0x24e>
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800233e:	f7ff fb01 	bl	8001944 <HAL_RCC_GetSysClockFreq>
 8002342:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002344:	b1e3      	cbz	r3, 8002380 <UART_SetConfig+0x218>
 8002346:	2b01      	cmp	r3, #1
 8002348:	d01c      	beq.n	8002384 <UART_SetConfig+0x21c>
 800234a:	2b02      	cmp	r3, #2
 800234c:	d01c      	beq.n	8002388 <UART_SetConfig+0x220>
 800234e:	2b03      	cmp	r3, #3
 8002350:	d01c      	beq.n	800238c <UART_SetConfig+0x224>
 8002352:	2b04      	cmp	r3, #4
 8002354:	d01c      	beq.n	8002390 <UART_SetConfig+0x228>
 8002356:	2b05      	cmp	r3, #5
 8002358:	d01c      	beq.n	8002394 <UART_SetConfig+0x22c>
 800235a:	2b06      	cmp	r3, #6
 800235c:	d01c      	beq.n	8002398 <UART_SetConfig+0x230>
 800235e:	2b07      	cmp	r3, #7
 8002360:	d01c      	beq.n	800239c <UART_SetConfig+0x234>
 8002362:	2b08      	cmp	r3, #8
 8002364:	d01c      	beq.n	80023a0 <UART_SetConfig+0x238>
 8002366:	2b09      	cmp	r3, #9
 8002368:	d01c      	beq.n	80023a4 <UART_SetConfig+0x23c>
 800236a:	2b0a      	cmp	r3, #10
 800236c:	d01c      	beq.n	80023a8 <UART_SetConfig+0x240>
 800236e:	2b0b      	cmp	r3, #11
 8002370:	bf14      	ite	ne
 8002372:	2301      	movne	r3, #1
 8002374:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8002378:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 800237c:	2304      	movs	r3, #4
 800237e:	e7a6      	b.n	80022ce <UART_SetConfig+0x166>
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002380:	2301      	movs	r3, #1
 8002382:	e7f9      	b.n	8002378 <UART_SetConfig+0x210>
 8002384:	2302      	movs	r3, #2
 8002386:	e7f7      	b.n	8002378 <UART_SetConfig+0x210>
 8002388:	2304      	movs	r3, #4
 800238a:	e7f5      	b.n	8002378 <UART_SetConfig+0x210>
 800238c:	2306      	movs	r3, #6
 800238e:	e7f3      	b.n	8002378 <UART_SetConfig+0x210>
 8002390:	2308      	movs	r3, #8
 8002392:	e7f1      	b.n	8002378 <UART_SetConfig+0x210>
 8002394:	230a      	movs	r3, #10
 8002396:	e7ef      	b.n	8002378 <UART_SetConfig+0x210>
 8002398:	230c      	movs	r3, #12
 800239a:	e7ed      	b.n	8002378 <UART_SetConfig+0x210>
 800239c:	2310      	movs	r3, #16
 800239e:	e7eb      	b.n	8002378 <UART_SetConfig+0x210>
 80023a0:	2320      	movs	r3, #32
 80023a2:	e7e9      	b.n	8002378 <UART_SetConfig+0x210>
 80023a4:	2340      	movs	r3, #64	; 0x40
 80023a6:	e7e7      	b.n	8002378 <UART_SetConfig+0x210>
 80023a8:	2380      	movs	r3, #128	; 0x80
 80023aa:	e7e5      	b.n	8002378 <UART_SetConfig+0x210>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80023ac:	4826      	ldr	r0, [pc, #152]	; (8002448 <UART_SetConfig+0x2e0>)
 80023ae:	e7c4      	b.n	800233a <UART_SetConfig+0x1d2>
 80023b0:	4826      	ldr	r0, [pc, #152]	; (800244c <UART_SetConfig+0x2e4>)
 80023b2:	e7c2      	b.n	800233a <UART_SetConfig+0x1d2>
 80023b4:	4826      	ldr	r0, [pc, #152]	; (8002450 <UART_SetConfig+0x2e8>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80023b6:	6862      	ldr	r2, [r4, #4]
 80023b8:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 80023bc:	4281      	cmp	r1, r0
 80023be:	f63f af2c 	bhi.w	800221a <UART_SetConfig+0xb2>
 80023c2:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 80023c6:	f63f af28 	bhi.w	800221a <UART_SetConfig+0xb2>
        switch (clocksource)
 80023ca:	2b08      	cmp	r3, #8
 80023cc:	f200 8125 	bhi.w	800261a <UART_SetConfig+0x4b2>
 80023d0:	e8df f013 	tbh	[pc, r3, lsl #1]
 80023d4:	01230059 	.word	0x01230059
 80023d8:	01230095 	.word	0x01230095
 80023dc:	012300d1 	.word	0x012300d1
 80023e0:	01230123 	.word	0x01230123
 80023e4:	00ea      	.short	0x00ea
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80023e6:	481b      	ldr	r0, [pc, #108]	; (8002454 <UART_SetConfig+0x2ec>)
 80023e8:	e7a7      	b.n	800233a <UART_SetConfig+0x1d2>
 80023ea:	481b      	ldr	r0, [pc, #108]	; (8002458 <UART_SetConfig+0x2f0>)
 80023ec:	e7a5      	b.n	800233a <UART_SetConfig+0x1d2>
 80023ee:	481b      	ldr	r0, [pc, #108]	; (800245c <UART_SetConfig+0x2f4>)
 80023f0:	e7a3      	b.n	800233a <UART_SetConfig+0x1d2>
 80023f2:	481b      	ldr	r0, [pc, #108]	; (8002460 <UART_SetConfig+0x2f8>)
 80023f4:	e7a1      	b.n	800233a <UART_SetConfig+0x1d2>
 80023f6:	481b      	ldr	r0, [pc, #108]	; (8002464 <UART_SetConfig+0x2fc>)
 80023f8:	e79f      	b.n	800233a <UART_SetConfig+0x1d2>
 80023fa:	481b      	ldr	r0, [pc, #108]	; (8002468 <UART_SetConfig+0x300>)
 80023fc:	e79d      	b.n	800233a <UART_SetConfig+0x1d2>
 80023fe:	481b      	ldr	r0, [pc, #108]	; (800246c <UART_SetConfig+0x304>)
 8002400:	e79b      	b.n	800233a <UART_SetConfig+0x1d2>
 8002402:	481b      	ldr	r0, [pc, #108]	; (8002470 <UART_SetConfig+0x308>)
 8002404:	e799      	b.n	800233a <UART_SetConfig+0x1d2>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002406:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800240a:	e73e      	b.n	800228a <UART_SetConfig+0x122>
 800240c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002410:	e73b      	b.n	800228a <UART_SetConfig+0x122>
 8002412:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002416:	e738      	b.n	800228a <UART_SetConfig+0x122>
 8002418:	f241 5055 	movw	r0, #5461	; 0x1555
 800241c:	e735      	b.n	800228a <UART_SetConfig+0x122>
 800241e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002422:	e732      	b.n	800228a <UART_SetConfig+0x122>
 8002424:	f640 40cc 	movw	r0, #3276	; 0xccc
 8002428:	e72f      	b.n	800228a <UART_SetConfig+0x122>
 800242a:	f640 20aa 	movw	r0, #2730	; 0xaaa
 800242e:	e72c      	b.n	800228a <UART_SetConfig+0x122>
 8002430:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002434:	e729      	b.n	800228a <UART_SetConfig+0x122>
 8002436:	bf00      	nop
 8002438:	cfff69f3 	.word	0xcfff69f3
 800243c:	40008000 	.word	0x40008000
 8002440:	40013800 	.word	0x40013800
 8002444:	08003714 	.word	0x08003714
 8002448:	00f42400 	.word	0x00f42400
 800244c:	007a1200 	.word	0x007a1200
 8002450:	003d0900 	.word	0x003d0900
 8002454:	0028b0aa 	.word	0x0028b0aa
 8002458:	001e8480 	.word	0x001e8480
 800245c:	00186a00 	.word	0x00186a00
 8002460:	00145855 	.word	0x00145855
 8002464:	000f4240 	.word	0x000f4240
 8002468:	0007a120 	.word	0x0007a120
 800246c:	0003d090 	.word	0x0003d090
 8002470:	0001e848 	.word	0x0001e848
 8002474:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002478:	e79d      	b.n	80023b6 <UART_SetConfig+0x24e>
 800247a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800247e:	e704      	b.n	800228a <UART_SetConfig+0x122>
 8002480:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002484:	e701      	b.n	800228a <UART_SetConfig+0x122>
            pclk = HAL_RCC_GetPCLK1Freq();
 8002486:	f7ff fabb 	bl	8001a00 <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800248a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800248c:	2b00      	cmp	r3, #0
 800248e:	f000 8089 	beq.w	80025a4 <UART_SetConfig+0x43c>
 8002492:	2b01      	cmp	r3, #1
 8002494:	d072      	beq.n	800257c <UART_SetConfig+0x414>
 8002496:	2b02      	cmp	r3, #2
 8002498:	d072      	beq.n	8002580 <UART_SetConfig+0x418>
 800249a:	2b03      	cmp	r3, #3
 800249c:	d072      	beq.n	8002584 <UART_SetConfig+0x41c>
 800249e:	2b04      	cmp	r3, #4
 80024a0:	d072      	beq.n	8002588 <UART_SetConfig+0x420>
 80024a2:	2b05      	cmp	r3, #5
 80024a4:	d072      	beq.n	800258c <UART_SetConfig+0x424>
 80024a6:	2b06      	cmp	r3, #6
 80024a8:	d072      	beq.n	8002590 <UART_SetConfig+0x428>
 80024aa:	2b07      	cmp	r3, #7
 80024ac:	d072      	beq.n	8002594 <UART_SetConfig+0x42c>
 80024ae:	2b08      	cmp	r3, #8
 80024b0:	d072      	beq.n	8002598 <UART_SetConfig+0x430>
 80024b2:	2b09      	cmp	r3, #9
 80024b4:	d072      	beq.n	800259c <UART_SetConfig+0x434>
 80024b6:	2b0a      	cmp	r3, #10
 80024b8:	d072      	beq.n	80025a0 <UART_SetConfig+0x438>
 80024ba:	2b0b      	cmp	r3, #11
 80024bc:	d172      	bne.n	80025a4 <UART_SetConfig+0x43c>
 80024be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024c2:	2300      	movs	r3, #0
 80024c4:	2100      	movs	r1, #0
 80024c6:	f7fd fe63 	bl	8000190 <__aeabi_uldivmod>
 80024ca:	6865      	ldr	r5, [r4, #4]
 80024cc:	020f      	lsls	r7, r1, #8
 80024ce:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 80024d2:	0206      	lsls	r6, r0, #8
 80024d4:	0868      	lsrs	r0, r5, #1
 80024d6:	eb16 0b00 	adds.w	fp, r6, r0
 80024da:	f147 0c00 	adc.w	ip, r7, #0
 80024de:	462a      	mov	r2, r5
 80024e0:	2300      	movs	r3, #0
 80024e2:	4658      	mov	r0, fp
 80024e4:	4661      	mov	r1, ip
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80024e6:	f7fd fe53 	bl	8000190 <__aeabi_uldivmod>
            break;
 80024ea:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80024ec:	4b9a      	ldr	r3, [pc, #616]	; (8002758 <UART_SetConfig+0x5f0>)
 80024ee:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 80024f2:	4299      	cmp	r1, r3
 80024f4:	f63f ae91 	bhi.w	800221a <UART_SetConfig+0xb2>
          huart->Instance->BRR = usartdiv;
 80024f8:	6823      	ldr	r3, [r4, #0]
 80024fa:	60d8      	str	r0, [r3, #12]
 80024fc:	e68e      	b.n	800221c <UART_SetConfig+0xb4>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80024fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002500:	2b00      	cmp	r3, #0
 8002502:	d036      	beq.n	8002572 <UART_SetConfig+0x40a>
 8002504:	2b01      	cmp	r3, #1
 8002506:	d016      	beq.n	8002536 <UART_SetConfig+0x3ce>
 8002508:	2b02      	cmp	r3, #2
 800250a:	d016      	beq.n	800253a <UART_SetConfig+0x3d2>
 800250c:	2b03      	cmp	r3, #3
 800250e:	d016      	beq.n	800253e <UART_SetConfig+0x3d6>
 8002510:	2b04      	cmp	r3, #4
 8002512:	d01e      	beq.n	8002552 <UART_SetConfig+0x3ea>
 8002514:	2b05      	cmp	r3, #5
 8002516:	d01e      	beq.n	8002556 <UART_SetConfig+0x3ee>
 8002518:	2b06      	cmp	r3, #6
 800251a:	d01e      	beq.n	800255a <UART_SetConfig+0x3f2>
 800251c:	2b07      	cmp	r3, #7
 800251e:	d020      	beq.n	8002562 <UART_SetConfig+0x3fa>
 8002520:	2b08      	cmp	r3, #8
 8002522:	d020      	beq.n	8002566 <UART_SetConfig+0x3fe>
 8002524:	2b09      	cmp	r3, #9
 8002526:	d020      	beq.n	800256a <UART_SetConfig+0x402>
 8002528:	2b0a      	cmp	r3, #10
 800252a:	d020      	beq.n	800256e <UART_SetConfig+0x406>
 800252c:	2b0b      	cmp	r3, #11
 800252e:	d120      	bne.n	8002572 <UART_SetConfig+0x40a>
 8002530:	488a      	ldr	r0, [pc, #552]	; (800275c <UART_SetConfig+0x5f4>)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002532:	2100      	movs	r1, #0
 8002534:	e006      	b.n	8002544 <UART_SetConfig+0x3dc>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002536:	488a      	ldr	r0, [pc, #552]	; (8002760 <UART_SetConfig+0x5f8>)
 8002538:	e7fb      	b.n	8002532 <UART_SetConfig+0x3ca>
 800253a:	488a      	ldr	r0, [pc, #552]	; (8002764 <UART_SetConfig+0x5fc>)
 800253c:	e7f9      	b.n	8002532 <UART_SetConfig+0x3ca>
 800253e:	a182      	add	r1, pc, #520	; (adr r1, 8002748 <UART_SetConfig+0x5e0>)
 8002540:	e9d1 0100 	ldrd	r0, r1, [r1]
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002544:	0855      	lsrs	r5, r2, #1
 8002546:	1940      	adds	r0, r0, r5
 8002548:	f04f 0300 	mov.w	r3, #0
 800254c:	f141 0100 	adc.w	r1, r1, #0
 8002550:	e7c9      	b.n	80024e6 <UART_SetConfig+0x37e>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002552:	4885      	ldr	r0, [pc, #532]	; (8002768 <UART_SetConfig+0x600>)
 8002554:	e7ed      	b.n	8002532 <UART_SetConfig+0x3ca>
 8002556:	4885      	ldr	r0, [pc, #532]	; (800276c <UART_SetConfig+0x604>)
 8002558:	e7eb      	b.n	8002532 <UART_SetConfig+0x3ca>
 800255a:	a17d      	add	r1, pc, #500	; (adr r1, 8002750 <UART_SetConfig+0x5e8>)
 800255c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002560:	e7f0      	b.n	8002544 <UART_SetConfig+0x3dc>
 8002562:	4883      	ldr	r0, [pc, #524]	; (8002770 <UART_SetConfig+0x608>)
 8002564:	e7e5      	b.n	8002532 <UART_SetConfig+0x3ca>
 8002566:	4883      	ldr	r0, [pc, #524]	; (8002774 <UART_SetConfig+0x60c>)
 8002568:	e7e3      	b.n	8002532 <UART_SetConfig+0x3ca>
 800256a:	4883      	ldr	r0, [pc, #524]	; (8002778 <UART_SetConfig+0x610>)
 800256c:	e7e1      	b.n	8002532 <UART_SetConfig+0x3ca>
 800256e:	4883      	ldr	r0, [pc, #524]	; (800277c <UART_SetConfig+0x614>)
 8002570:	e7df      	b.n	8002532 <UART_SetConfig+0x3ca>
 8002572:	4883      	ldr	r0, [pc, #524]	; (8002780 <UART_SetConfig+0x618>)
 8002574:	e7dd      	b.n	8002532 <UART_SetConfig+0x3ca>
            pclk = HAL_RCC_GetSysClockFreq();
 8002576:	f7ff f9e5 	bl	8001944 <HAL_RCC_GetSysClockFreq>
 800257a:	e786      	b.n	800248a <UART_SetConfig+0x322>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800257c:	2202      	movs	r2, #2
 800257e:	e7a0      	b.n	80024c2 <UART_SetConfig+0x35a>
 8002580:	2204      	movs	r2, #4
 8002582:	e79e      	b.n	80024c2 <UART_SetConfig+0x35a>
 8002584:	2206      	movs	r2, #6
 8002586:	e79c      	b.n	80024c2 <UART_SetConfig+0x35a>
 8002588:	2208      	movs	r2, #8
 800258a:	e79a      	b.n	80024c2 <UART_SetConfig+0x35a>
 800258c:	220a      	movs	r2, #10
 800258e:	e798      	b.n	80024c2 <UART_SetConfig+0x35a>
 8002590:	220c      	movs	r2, #12
 8002592:	e796      	b.n	80024c2 <UART_SetConfig+0x35a>
 8002594:	2210      	movs	r2, #16
 8002596:	e794      	b.n	80024c2 <UART_SetConfig+0x35a>
 8002598:	2220      	movs	r2, #32
 800259a:	e792      	b.n	80024c2 <UART_SetConfig+0x35a>
 800259c:	2240      	movs	r2, #64	; 0x40
 800259e:	e790      	b.n	80024c2 <UART_SetConfig+0x35a>
 80025a0:	2280      	movs	r2, #128	; 0x80
 80025a2:	e78e      	b.n	80024c2 <UART_SetConfig+0x35a>
 80025a4:	2201      	movs	r2, #1
 80025a6:	e78c      	b.n	80024c2 <UART_SetConfig+0x35a>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80025a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80025aa:	b39b      	cbz	r3, 8002614 <UART_SetConfig+0x4ac>
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d016      	beq.n	80025de <UART_SetConfig+0x476>
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d017      	beq.n	80025e4 <UART_SetConfig+0x47c>
 80025b4:	2b03      	cmp	r3, #3
 80025b6:	d018      	beq.n	80025ea <UART_SetConfig+0x482>
 80025b8:	2b04      	cmp	r3, #4
 80025ba:	d018      	beq.n	80025ee <UART_SetConfig+0x486>
 80025bc:	2b05      	cmp	r3, #5
 80025be:	d019      	beq.n	80025f4 <UART_SetConfig+0x48c>
 80025c0:	2b06      	cmp	r3, #6
 80025c2:	d019      	beq.n	80025f8 <UART_SetConfig+0x490>
 80025c4:	2b07      	cmp	r3, #7
 80025c6:	d019      	beq.n	80025fc <UART_SetConfig+0x494>
 80025c8:	2b08      	cmp	r3, #8
 80025ca:	d01a      	beq.n	8002602 <UART_SetConfig+0x49a>
 80025cc:	2b09      	cmp	r3, #9
 80025ce:	d01b      	beq.n	8002608 <UART_SetConfig+0x4a0>
 80025d0:	2b0a      	cmp	r3, #10
 80025d2:	d01c      	beq.n	800260e <UART_SetConfig+0x4a6>
 80025d4:	2b0b      	cmp	r3, #11
 80025d6:	d11d      	bne.n	8002614 <UART_SetConfig+0x4ac>
 80025d8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80025dc:	e7a9      	b.n	8002532 <UART_SetConfig+0x3ca>
 80025de:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80025e2:	e7a6      	b.n	8002532 <UART_SetConfig+0x3ca>
 80025e4:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80025e8:	e7a3      	b.n	8002532 <UART_SetConfig+0x3ca>
 80025ea:	4866      	ldr	r0, [pc, #408]	; (8002784 <UART_SetConfig+0x61c>)
 80025ec:	e7a1      	b.n	8002532 <UART_SetConfig+0x3ca>
 80025ee:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80025f2:	e79e      	b.n	8002532 <UART_SetConfig+0x3ca>
 80025f4:	4864      	ldr	r0, [pc, #400]	; (8002788 <UART_SetConfig+0x620>)
 80025f6:	e79c      	b.n	8002532 <UART_SetConfig+0x3ca>
 80025f8:	4864      	ldr	r0, [pc, #400]	; (800278c <UART_SetConfig+0x624>)
 80025fa:	e79a      	b.n	8002532 <UART_SetConfig+0x3ca>
 80025fc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002600:	e797      	b.n	8002532 <UART_SetConfig+0x3ca>
 8002602:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002606:	e794      	b.n	8002532 <UART_SetConfig+0x3ca>
 8002608:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800260c:	e791      	b.n	8002532 <UART_SetConfig+0x3ca>
 800260e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8002612:	e78e      	b.n	8002532 <UART_SetConfig+0x3ca>
 8002614:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002618:	e78b      	b.n	8002532 <UART_SetConfig+0x3ca>
            ret = HAL_ERROR;
 800261a:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 800261c:	2000      	movs	r0, #0
 800261e:	e765      	b.n	80024ec <UART_SetConfig+0x384>
    switch (clocksource)
 8002620:	2a07      	cmp	r2, #7
 8002622:	f200 8106 	bhi.w	8002832 <UART_SetConfig+0x6ca>
 8002626:	e8df f012 	tbh	[pc, r2, lsl #1]
 800262a:	0008      	.short	0x0008
 800262c:	0104003f 	.word	0x0104003f
 8002630:	01040076 	.word	0x01040076
 8002634:	01040104 	.word	0x01040104
 8002638:	00c7      	.short	0x00c7
        pclk = HAL_RCC_GetPCLK2Freq();
 800263a:	f7ff f9f3 	bl	8001a24 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800263e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002640:	2900      	cmp	r1, #0
 8002642:	d06b      	beq.n	800271c <UART_SetConfig+0x5b4>
 8002644:	2901      	cmp	r1, #1
 8002646:	d06b      	beq.n	8002720 <UART_SetConfig+0x5b8>
 8002648:	2902      	cmp	r1, #2
 800264a:	d06b      	beq.n	8002724 <UART_SetConfig+0x5bc>
 800264c:	2903      	cmp	r1, #3
 800264e:	d06b      	beq.n	8002728 <UART_SetConfig+0x5c0>
 8002650:	2904      	cmp	r1, #4
 8002652:	d06b      	beq.n	800272c <UART_SetConfig+0x5c4>
 8002654:	2905      	cmp	r1, #5
 8002656:	d06b      	beq.n	8002730 <UART_SetConfig+0x5c8>
 8002658:	2906      	cmp	r1, #6
 800265a:	d06b      	beq.n	8002734 <UART_SetConfig+0x5cc>
 800265c:	2907      	cmp	r1, #7
 800265e:	d06b      	beq.n	8002738 <UART_SetConfig+0x5d0>
 8002660:	2908      	cmp	r1, #8
 8002662:	d06b      	beq.n	800273c <UART_SetConfig+0x5d4>
 8002664:	2909      	cmp	r1, #9
 8002666:	d06b      	beq.n	8002740 <UART_SetConfig+0x5d8>
 8002668:	290a      	cmp	r1, #10
 800266a:	d06b      	beq.n	8002744 <UART_SetConfig+0x5dc>
 800266c:	290b      	cmp	r1, #11
 800266e:	bf14      	ite	ne
 8002670:	2201      	movne	r2, #1
 8002672:	f44f 7280 	moveq.w	r2, #256	; 0x100
 8002676:	6861      	ldr	r1, [r4, #4]
 8002678:	fbb0 f2f2 	udiv	r2, r0, r2
 800267c:	084b      	lsrs	r3, r1, #1
 800267e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8002682:	fbb3 f3f1 	udiv	r3, r3, r1
 8002686:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002688:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800268a:	f1a3 0010 	sub.w	r0, r3, #16
 800268e:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8002692:	4288      	cmp	r0, r1
 8002694:	f63f adc1 	bhi.w	800221a <UART_SetConfig+0xb2>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002698:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 800269c:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800269e:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 80026a2:	430b      	orrs	r3, r1
 80026a4:	60c3      	str	r3, [r0, #12]
 80026a6:	e5b9      	b.n	800221c <UART_SetConfig+0xb4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80026a8:	b1fb      	cbz	r3, 80026ea <UART_SetConfig+0x582>
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d01f      	beq.n	80026ee <UART_SetConfig+0x586>
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d01f      	beq.n	80026f2 <UART_SetConfig+0x58a>
 80026b2:	2b03      	cmp	r3, #3
 80026b4:	d01f      	beq.n	80026f6 <UART_SetConfig+0x58e>
 80026b6:	2b04      	cmp	r3, #4
 80026b8:	d01f      	beq.n	80026fa <UART_SetConfig+0x592>
 80026ba:	2b05      	cmp	r3, #5
 80026bc:	d01f      	beq.n	80026fe <UART_SetConfig+0x596>
 80026be:	2b06      	cmp	r3, #6
 80026c0:	d01f      	beq.n	8002702 <UART_SetConfig+0x59a>
 80026c2:	2b07      	cmp	r3, #7
 80026c4:	d01f      	beq.n	8002706 <UART_SetConfig+0x59e>
 80026c6:	2b08      	cmp	r3, #8
 80026c8:	d01f      	beq.n	800270a <UART_SetConfig+0x5a2>
 80026ca:	2b09      	cmp	r3, #9
 80026cc:	d01f      	beq.n	800270e <UART_SetConfig+0x5a6>
 80026ce:	2b0a      	cmp	r3, #10
 80026d0:	d01f      	beq.n	8002712 <UART_SetConfig+0x5aa>
 80026d2:	492f      	ldr	r1, [pc, #188]	; (8002790 <UART_SetConfig+0x628>)
 80026d4:	4a29      	ldr	r2, [pc, #164]	; (800277c <UART_SetConfig+0x614>)
 80026d6:	2b0b      	cmp	r3, #11
 80026d8:	bf14      	ite	ne
 80026da:	4613      	movne	r3, r2
 80026dc:	460b      	moveq	r3, r1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80026de:	6862      	ldr	r2, [r4, #4]
 80026e0:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80026e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80026e8:	e7cd      	b.n	8002686 <UART_SetConfig+0x51e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80026ea:	4b24      	ldr	r3, [pc, #144]	; (800277c <UART_SetConfig+0x614>)
 80026ec:	e7f7      	b.n	80026de <UART_SetConfig+0x576>
 80026ee:	4b1b      	ldr	r3, [pc, #108]	; (800275c <UART_SetConfig+0x5f4>)
 80026f0:	e7f5      	b.n	80026de <UART_SetConfig+0x576>
 80026f2:	4b28      	ldr	r3, [pc, #160]	; (8002794 <UART_SetConfig+0x62c>)
 80026f4:	e7f3      	b.n	80026de <UART_SetConfig+0x576>
 80026f6:	4b28      	ldr	r3, [pc, #160]	; (8002798 <UART_SetConfig+0x630>)
 80026f8:	e7f1      	b.n	80026de <UART_SetConfig+0x576>
 80026fa:	4b28      	ldr	r3, [pc, #160]	; (800279c <UART_SetConfig+0x634>)
 80026fc:	e7ef      	b.n	80026de <UART_SetConfig+0x576>
 80026fe:	4b28      	ldr	r3, [pc, #160]	; (80027a0 <UART_SetConfig+0x638>)
 8002700:	e7ed      	b.n	80026de <UART_SetConfig+0x576>
 8002702:	4b28      	ldr	r3, [pc, #160]	; (80027a4 <UART_SetConfig+0x63c>)
 8002704:	e7eb      	b.n	80026de <UART_SetConfig+0x576>
 8002706:	4b28      	ldr	r3, [pc, #160]	; (80027a8 <UART_SetConfig+0x640>)
 8002708:	e7e9      	b.n	80026de <UART_SetConfig+0x576>
 800270a:	4b28      	ldr	r3, [pc, #160]	; (80027ac <UART_SetConfig+0x644>)
 800270c:	e7e7      	b.n	80026de <UART_SetConfig+0x576>
 800270e:	4b28      	ldr	r3, [pc, #160]	; (80027b0 <UART_SetConfig+0x648>)
 8002710:	e7e5      	b.n	80026de <UART_SetConfig+0x576>
 8002712:	4b28      	ldr	r3, [pc, #160]	; (80027b4 <UART_SetConfig+0x64c>)
 8002714:	e7e3      	b.n	80026de <UART_SetConfig+0x576>
        pclk = HAL_RCC_GetSysClockFreq();
 8002716:	f7ff f915 	bl	8001944 <HAL_RCC_GetSysClockFreq>
 800271a:	e790      	b.n	800263e <UART_SetConfig+0x4d6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800271c:	2201      	movs	r2, #1
 800271e:	e7aa      	b.n	8002676 <UART_SetConfig+0x50e>
 8002720:	2202      	movs	r2, #2
 8002722:	e7a8      	b.n	8002676 <UART_SetConfig+0x50e>
 8002724:	2204      	movs	r2, #4
 8002726:	e7a6      	b.n	8002676 <UART_SetConfig+0x50e>
 8002728:	2206      	movs	r2, #6
 800272a:	e7a4      	b.n	8002676 <UART_SetConfig+0x50e>
 800272c:	2208      	movs	r2, #8
 800272e:	e7a2      	b.n	8002676 <UART_SetConfig+0x50e>
 8002730:	220a      	movs	r2, #10
 8002732:	e7a0      	b.n	8002676 <UART_SetConfig+0x50e>
 8002734:	220c      	movs	r2, #12
 8002736:	e79e      	b.n	8002676 <UART_SetConfig+0x50e>
 8002738:	2210      	movs	r2, #16
 800273a:	e79c      	b.n	8002676 <UART_SetConfig+0x50e>
 800273c:	2220      	movs	r2, #32
 800273e:	e79a      	b.n	8002676 <UART_SetConfig+0x50e>
 8002740:	2240      	movs	r2, #64	; 0x40
 8002742:	e798      	b.n	8002676 <UART_SetConfig+0x50e>
 8002744:	2280      	movs	r2, #128	; 0x80
 8002746:	e796      	b.n	8002676 <UART_SetConfig+0x50e>
 8002748:	28b0aa00 	.word	0x28b0aa00
 800274c:	00000000 	.word	0x00000000
 8002750:	14585500 	.word	0x14585500
 8002754:	00000000 	.word	0x00000000
 8002758:	000ffcff 	.word	0x000ffcff
 800275c:	00f42400 	.word	0x00f42400
 8002760:	7a120000 	.word	0x7a120000
 8002764:	3d090000 	.word	0x3d090000
 8002768:	1e848000 	.word	0x1e848000
 800276c:	186a0000 	.word	0x186a0000
 8002770:	0f424000 	.word	0x0f424000
 8002774:	07a12000 	.word	0x07a12000
 8002778:	03d09000 	.word	0x03d09000
 800277c:	01e84800 	.word	0x01e84800
 8002780:	f4240000 	.word	0xf4240000
 8002784:	00155500 	.word	0x00155500
 8002788:	000ccc00 	.word	0x000ccc00
 800278c:	000aaa00 	.word	0x000aaa00
 8002790:	0001e848 	.word	0x0001e848
 8002794:	007a1200 	.word	0x007a1200
 8002798:	00516154 	.word	0x00516154
 800279c:	003d0900 	.word	0x003d0900
 80027a0:	0030d400 	.word	0x0030d400
 80027a4:	0028b0aa 	.word	0x0028b0aa
 80027a8:	001e8480 	.word	0x001e8480
 80027ac:	000f4240 	.word	0x000f4240
 80027b0:	0007a120 	.word	0x0007a120
 80027b4:	0003d090 	.word	0x0003d090
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80027b8:	b1d3      	cbz	r3, 80027f0 <UART_SetConfig+0x688>
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d01b      	beq.n	80027f6 <UART_SetConfig+0x68e>
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d01c      	beq.n	80027fc <UART_SetConfig+0x694>
 80027c2:	2b03      	cmp	r3, #3
 80027c4:	d01d      	beq.n	8002802 <UART_SetConfig+0x69a>
 80027c6:	2b04      	cmp	r3, #4
 80027c8:	d01e      	beq.n	8002808 <UART_SetConfig+0x6a0>
 80027ca:	2b05      	cmp	r3, #5
 80027cc:	d01f      	beq.n	800280e <UART_SetConfig+0x6a6>
 80027ce:	2b06      	cmp	r3, #6
 80027d0:	d020      	beq.n	8002814 <UART_SetConfig+0x6ac>
 80027d2:	2b07      	cmp	r3, #7
 80027d4:	d021      	beq.n	800281a <UART_SetConfig+0x6b2>
 80027d6:	2b08      	cmp	r3, #8
 80027d8:	d022      	beq.n	8002820 <UART_SetConfig+0x6b8>
 80027da:	2b09      	cmp	r3, #9
 80027dc:	d023      	beq.n	8002826 <UART_SetConfig+0x6be>
 80027de:	2b0a      	cmp	r3, #10
 80027e0:	d024      	beq.n	800282c <UART_SetConfig+0x6c4>
 80027e2:	2b0b      	cmp	r3, #11
 80027e4:	bf14      	ite	ne
 80027e6:	f44f 3380 	movne.w	r3, #65536	; 0x10000
 80027ea:	f44f 7380 	moveq.w	r3, #256	; 0x100
 80027ee:	e776      	b.n	80026de <UART_SetConfig+0x576>
 80027f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027f4:	e773      	b.n	80026de <UART_SetConfig+0x576>
 80027f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027fa:	e770      	b.n	80026de <UART_SetConfig+0x576>
 80027fc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002800:	e76d      	b.n	80026de <UART_SetConfig+0x576>
 8002802:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8002806:	e76a      	b.n	80026de <UART_SetConfig+0x576>
 8002808:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800280c:	e767      	b.n	80026de <UART_SetConfig+0x576>
 800280e:	f641 1398 	movw	r3, #6552	; 0x1998
 8002812:	e764      	b.n	80026de <UART_SetConfig+0x576>
 8002814:	f241 5354 	movw	r3, #5460	; 0x1554
 8002818:	e761      	b.n	80026de <UART_SetConfig+0x576>
 800281a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800281e:	e75e      	b.n	80026de <UART_SetConfig+0x576>
 8002820:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002824:	e75b      	b.n	80026de <UART_SetConfig+0x576>
 8002826:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800282a:	e758      	b.n	80026de <UART_SetConfig+0x576>
 800282c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002830:	e755      	b.n	80026de <UART_SetConfig+0x576>
        ret = HAL_ERROR;
 8002832:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8002834:	2300      	movs	r3, #0
 8002836:	e728      	b.n	800268a <UART_SetConfig+0x522>
        pclk = HAL_RCC_GetPCLK2Freq();
 8002838:	f7ff f8f4 	bl	8001a24 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800283c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800283e:	2b00      	cmp	r3, #0
 8002840:	d062      	beq.n	8002908 <UART_SetConfig+0x7a0>
 8002842:	2b01      	cmp	r3, #1
 8002844:	d062      	beq.n	800290c <UART_SetConfig+0x7a4>
 8002846:	2b02      	cmp	r3, #2
 8002848:	d062      	beq.n	8002910 <UART_SetConfig+0x7a8>
 800284a:	2b03      	cmp	r3, #3
 800284c:	d062      	beq.n	8002914 <UART_SetConfig+0x7ac>
 800284e:	2b04      	cmp	r3, #4
 8002850:	d062      	beq.n	8002918 <UART_SetConfig+0x7b0>
 8002852:	2b05      	cmp	r3, #5
 8002854:	d062      	beq.n	800291c <UART_SetConfig+0x7b4>
 8002856:	2b06      	cmp	r3, #6
 8002858:	d062      	beq.n	8002920 <UART_SetConfig+0x7b8>
 800285a:	2b07      	cmp	r3, #7
 800285c:	d062      	beq.n	8002924 <UART_SetConfig+0x7bc>
 800285e:	2b08      	cmp	r3, #8
 8002860:	d062      	beq.n	8002928 <UART_SetConfig+0x7c0>
 8002862:	2b09      	cmp	r3, #9
 8002864:	d062      	beq.n	800292c <UART_SetConfig+0x7c4>
 8002866:	2b0a      	cmp	r3, #10
 8002868:	d062      	beq.n	8002930 <UART_SetConfig+0x7c8>
 800286a:	2b0b      	cmp	r3, #11
 800286c:	bf14      	ite	ne
 800286e:	2301      	movne	r3, #1
 8002870:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8002874:	6862      	ldr	r2, [r4, #4]
 8002876:	fbb0 f3f3 	udiv	r3, r0, r3
 800287a:	e01c      	b.n	80028b6 <UART_SetConfig+0x74e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800287c:	b35b      	cbz	r3, 80028d6 <UART_SetConfig+0x76e>
 800287e:	2b01      	cmp	r3, #1
 8002880:	d02b      	beq.n	80028da <UART_SetConfig+0x772>
 8002882:	2b02      	cmp	r3, #2
 8002884:	d02b      	beq.n	80028de <UART_SetConfig+0x776>
 8002886:	2b03      	cmp	r3, #3
 8002888:	d02b      	beq.n	80028e2 <UART_SetConfig+0x77a>
 800288a:	2b04      	cmp	r3, #4
 800288c:	d02b      	beq.n	80028e6 <UART_SetConfig+0x77e>
 800288e:	2b05      	cmp	r3, #5
 8002890:	d02b      	beq.n	80028ea <UART_SetConfig+0x782>
 8002892:	2b06      	cmp	r3, #6
 8002894:	d02b      	beq.n	80028ee <UART_SetConfig+0x786>
 8002896:	2b07      	cmp	r3, #7
 8002898:	d02b      	beq.n	80028f2 <UART_SetConfig+0x78a>
 800289a:	2b08      	cmp	r3, #8
 800289c:	d02b      	beq.n	80028f6 <UART_SetConfig+0x78e>
 800289e:	2b09      	cmp	r3, #9
 80028a0:	d02b      	beq.n	80028fa <UART_SetConfig+0x792>
 80028a2:	2b0a      	cmp	r3, #10
 80028a4:	d02b      	beq.n	80028fe <UART_SetConfig+0x796>
 80028a6:	4a45      	ldr	r2, [pc, #276]	; (80029bc <UART_SetConfig+0x854>)
 80028a8:	f24f 4124 	movw	r1, #62500	; 0xf424
 80028ac:	2b0b      	cmp	r3, #11
 80028ae:	bf14      	ite	ne
 80028b0:	4613      	movne	r3, r2
 80028b2:	460b      	moveq	r3, r1
 80028b4:	6862      	ldr	r2, [r4, #4]
 80028b6:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80028ba:	fbb3 f3f2 	udiv	r3, r3, r2
  HAL_StatusTypeDef ret               = HAL_OK;
 80028be:	2200      	movs	r2, #0
 80028c0:	b29b      	uxth	r3, r3
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80028c2:	f1a3 0010 	sub.w	r0, r3, #16
 80028c6:	f64f 71ef 	movw	r1, #65519	; 0xffef
 80028ca:	4288      	cmp	r0, r1
 80028cc:	f63f aca5 	bhi.w	800221a <UART_SetConfig+0xb2>
      huart->Instance->BRR = usartdiv;
 80028d0:	6821      	ldr	r1, [r4, #0]
 80028d2:	60cb      	str	r3, [r1, #12]
 80028d4:	e4a2      	b.n	800221c <UART_SetConfig+0xb4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80028d6:	4b39      	ldr	r3, [pc, #228]	; (80029bc <UART_SetConfig+0x854>)
 80028d8:	e7ec      	b.n	80028b4 <UART_SetConfig+0x74c>
 80028da:	4b39      	ldr	r3, [pc, #228]	; (80029c0 <UART_SetConfig+0x858>)
 80028dc:	e7ea      	b.n	80028b4 <UART_SetConfig+0x74c>
 80028de:	4b39      	ldr	r3, [pc, #228]	; (80029c4 <UART_SetConfig+0x85c>)
 80028e0:	e7e8      	b.n	80028b4 <UART_SetConfig+0x74c>
 80028e2:	4b39      	ldr	r3, [pc, #228]	; (80029c8 <UART_SetConfig+0x860>)
 80028e4:	e7e6      	b.n	80028b4 <UART_SetConfig+0x74c>
 80028e6:	4b39      	ldr	r3, [pc, #228]	; (80029cc <UART_SetConfig+0x864>)
 80028e8:	e7e4      	b.n	80028b4 <UART_SetConfig+0x74c>
 80028ea:	4b39      	ldr	r3, [pc, #228]	; (80029d0 <UART_SetConfig+0x868>)
 80028ec:	e7e2      	b.n	80028b4 <UART_SetConfig+0x74c>
 80028ee:	4b39      	ldr	r3, [pc, #228]	; (80029d4 <UART_SetConfig+0x86c>)
 80028f0:	e7e0      	b.n	80028b4 <UART_SetConfig+0x74c>
 80028f2:	4b39      	ldr	r3, [pc, #228]	; (80029d8 <UART_SetConfig+0x870>)
 80028f4:	e7de      	b.n	80028b4 <UART_SetConfig+0x74c>
 80028f6:	4b39      	ldr	r3, [pc, #228]	; (80029dc <UART_SetConfig+0x874>)
 80028f8:	e7dc      	b.n	80028b4 <UART_SetConfig+0x74c>
 80028fa:	4b39      	ldr	r3, [pc, #228]	; (80029e0 <UART_SetConfig+0x878>)
 80028fc:	e7da      	b.n	80028b4 <UART_SetConfig+0x74c>
 80028fe:	4b39      	ldr	r3, [pc, #228]	; (80029e4 <UART_SetConfig+0x87c>)
 8002900:	e7d8      	b.n	80028b4 <UART_SetConfig+0x74c>
        pclk = HAL_RCC_GetSysClockFreq();
 8002902:	f7ff f81f 	bl	8001944 <HAL_RCC_GetSysClockFreq>
 8002906:	e799      	b.n	800283c <UART_SetConfig+0x6d4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002908:	2301      	movs	r3, #1
 800290a:	e7b3      	b.n	8002874 <UART_SetConfig+0x70c>
 800290c:	2302      	movs	r3, #2
 800290e:	e7b1      	b.n	8002874 <UART_SetConfig+0x70c>
 8002910:	2304      	movs	r3, #4
 8002912:	e7af      	b.n	8002874 <UART_SetConfig+0x70c>
 8002914:	2306      	movs	r3, #6
 8002916:	e7ad      	b.n	8002874 <UART_SetConfig+0x70c>
 8002918:	2308      	movs	r3, #8
 800291a:	e7ab      	b.n	8002874 <UART_SetConfig+0x70c>
 800291c:	230a      	movs	r3, #10
 800291e:	e7a9      	b.n	8002874 <UART_SetConfig+0x70c>
 8002920:	230c      	movs	r3, #12
 8002922:	e7a7      	b.n	8002874 <UART_SetConfig+0x70c>
 8002924:	2310      	movs	r3, #16
 8002926:	e7a5      	b.n	8002874 <UART_SetConfig+0x70c>
 8002928:	2320      	movs	r3, #32
 800292a:	e7a3      	b.n	8002874 <UART_SetConfig+0x70c>
 800292c:	2340      	movs	r3, #64	; 0x40
 800292e:	e7a1      	b.n	8002874 <UART_SetConfig+0x70c>
 8002930:	2380      	movs	r3, #128	; 0x80
 8002932:	e79f      	b.n	8002874 <UART_SetConfig+0x70c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002934:	b1cb      	cbz	r3, 800296a <UART_SetConfig+0x802>
 8002936:	2b01      	cmp	r3, #1
 8002938:	d01a      	beq.n	8002970 <UART_SetConfig+0x808>
 800293a:	2b02      	cmp	r3, #2
 800293c:	d01b      	beq.n	8002976 <UART_SetConfig+0x80e>
 800293e:	2b03      	cmp	r3, #3
 8002940:	d01c      	beq.n	800297c <UART_SetConfig+0x814>
 8002942:	2b04      	cmp	r3, #4
 8002944:	d01d      	beq.n	8002982 <UART_SetConfig+0x81a>
 8002946:	2b05      	cmp	r3, #5
 8002948:	d01e      	beq.n	8002988 <UART_SetConfig+0x820>
 800294a:	2b06      	cmp	r3, #6
 800294c:	d01f      	beq.n	800298e <UART_SetConfig+0x826>
 800294e:	2b07      	cmp	r3, #7
 8002950:	d020      	beq.n	8002994 <UART_SetConfig+0x82c>
 8002952:	2b08      	cmp	r3, #8
 8002954:	d021      	beq.n	800299a <UART_SetConfig+0x832>
 8002956:	2b09      	cmp	r3, #9
 8002958:	d022      	beq.n	80029a0 <UART_SetConfig+0x838>
 800295a:	2b0a      	cmp	r3, #10
 800295c:	d023      	beq.n	80029a6 <UART_SetConfig+0x83e>
 800295e:	2b0b      	cmp	r3, #11
 8002960:	bf14      	ite	ne
 8002962:	f44f 4300 	movne.w	r3, #32768	; 0x8000
 8002966:	2380      	moveq	r3, #128	; 0x80
 8002968:	e7a4      	b.n	80028b4 <UART_SetConfig+0x74c>
 800296a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800296e:	e7a1      	b.n	80028b4 <UART_SetConfig+0x74c>
 8002970:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002974:	e79e      	b.n	80028b4 <UART_SetConfig+0x74c>
 8002976:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800297a:	e79b      	b.n	80028b4 <UART_SetConfig+0x74c>
 800297c:	f241 5355 	movw	r3, #5461	; 0x1555
 8002980:	e798      	b.n	80028b4 <UART_SetConfig+0x74c>
 8002982:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002986:	e795      	b.n	80028b4 <UART_SetConfig+0x74c>
 8002988:	f640 43cc 	movw	r3, #3276	; 0xccc
 800298c:	e792      	b.n	80028b4 <UART_SetConfig+0x74c>
 800298e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8002992:	e78f      	b.n	80028b4 <UART_SetConfig+0x74c>
 8002994:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002998:	e78c      	b.n	80028b4 <UART_SetConfig+0x74c>
 800299a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800299e:	e789      	b.n	80028b4 <UART_SetConfig+0x74c>
 80029a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029a4:	e786      	b.n	80028b4 <UART_SetConfig+0x74c>
 80029a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029aa:	e783      	b.n	80028b4 <UART_SetConfig+0x74c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029ac:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80029b0:	f43f af3f 	beq.w	8002832 <UART_SetConfig+0x6ca>
        ret = HAL_ERROR;
 80029b4:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 80029b6:	2300      	movs	r3, #0
 80029b8:	e783      	b.n	80028c2 <UART_SetConfig+0x75a>
 80029ba:	bf00      	nop
 80029bc:	00f42400 	.word	0x00f42400
 80029c0:	007a1200 	.word	0x007a1200
 80029c4:	003d0900 	.word	0x003d0900
 80029c8:	0028b0aa 	.word	0x0028b0aa
 80029cc:	001e8480 	.word	0x001e8480
 80029d0:	00186a00 	.word	0x00186a00
 80029d4:	00145855 	.word	0x00145855
 80029d8:	000f4240 	.word	0x000f4240
 80029dc:	0007a120 	.word	0x0007a120
 80029e0:	0003d090 	.word	0x0003d090
 80029e4:	0001e848 	.word	0x0001e848

080029e8 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80029e8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80029ea:	07da      	lsls	r2, r3, #31
{
 80029ec:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80029ee:	d506      	bpl.n	80029fe <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80029f0:	6801      	ldr	r1, [r0, #0]
 80029f2:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80029f4:	684a      	ldr	r2, [r1, #4]
 80029f6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80029fa:	4322      	orrs	r2, r4
 80029fc:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80029fe:	079c      	lsls	r4, r3, #30
 8002a00:	d506      	bpl.n	8002a10 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002a02:	6801      	ldr	r1, [r0, #0]
 8002a04:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002a06:	684a      	ldr	r2, [r1, #4]
 8002a08:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002a0c:	4322      	orrs	r2, r4
 8002a0e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002a10:	0759      	lsls	r1, r3, #29
 8002a12:	d506      	bpl.n	8002a22 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002a14:	6801      	ldr	r1, [r0, #0]
 8002a16:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002a18:	684a      	ldr	r2, [r1, #4]
 8002a1a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a1e:	4322      	orrs	r2, r4
 8002a20:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002a22:	071a      	lsls	r2, r3, #28
 8002a24:	d506      	bpl.n	8002a34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002a26:	6801      	ldr	r1, [r0, #0]
 8002a28:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002a2a:	684a      	ldr	r2, [r1, #4]
 8002a2c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a30:	4322      	orrs	r2, r4
 8002a32:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002a34:	06dc      	lsls	r4, r3, #27
 8002a36:	d506      	bpl.n	8002a46 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002a38:	6801      	ldr	r1, [r0, #0]
 8002a3a:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002a3c:	688a      	ldr	r2, [r1, #8]
 8002a3e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002a42:	4322      	orrs	r2, r4
 8002a44:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002a46:	0699      	lsls	r1, r3, #26
 8002a48:	d506      	bpl.n	8002a58 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002a4a:	6801      	ldr	r1, [r0, #0]
 8002a4c:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002a4e:	688a      	ldr	r2, [r1, #8]
 8002a50:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a54:	4322      	orrs	r2, r4
 8002a56:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002a58:	065a      	lsls	r2, r3, #25
 8002a5a:	d50f      	bpl.n	8002a7c <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002a5c:	6801      	ldr	r1, [r0, #0]
 8002a5e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002a60:	684a      	ldr	r2, [r1, #4]
 8002a62:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002a66:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002a68:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002a6c:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002a6e:	d105      	bne.n	8002a7c <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002a70:	684a      	ldr	r2, [r1, #4]
 8002a72:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8002a74:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8002a78:	4322      	orrs	r2, r4
 8002a7a:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002a7c:	061b      	lsls	r3, r3, #24
 8002a7e:	d506      	bpl.n	8002a8e <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002a80:	6802      	ldr	r2, [r0, #0]
 8002a82:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8002a84:	6853      	ldr	r3, [r2, #4]
 8002a86:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002a8a:	430b      	orrs	r3, r1
 8002a8c:	6053      	str	r3, [r2, #4]
 8002a8e:	bd10      	pop	{r4, pc}

08002a90 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002a90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a94:	9d06      	ldr	r5, [sp, #24]
 8002a96:	4604      	mov	r4, r0
 8002a98:	460f      	mov	r7, r1
 8002a9a:	4616      	mov	r6, r2
 8002a9c:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a9e:	6821      	ldr	r1, [r4, #0]
 8002aa0:	69ca      	ldr	r2, [r1, #28]
 8002aa2:	ea37 0302 	bics.w	r3, r7, r2
 8002aa6:	bf0c      	ite	eq
 8002aa8:	2201      	moveq	r2, #1
 8002aaa:	2200      	movne	r2, #0
 8002aac:	42b2      	cmp	r2, r6
 8002aae:	d002      	beq.n	8002ab6 <UART_WaitOnFlagUntilTimeout+0x26>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8002ab0:	2000      	movs	r0, #0
}
 8002ab2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8002ab6:	1c68      	adds	r0, r5, #1
 8002ab8:	d0f2      	beq.n	8002aa0 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aba:	f7fd fd39 	bl	8000530 <HAL_GetTick>
 8002abe:	eba0 0008 	sub.w	r0, r0, r8
 8002ac2:	4285      	cmp	r5, r0
 8002ac4:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8002ac6:	6803      	ldr	r3, [r0, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ac8:	d300      	bcc.n	8002acc <UART_WaitOnFlagUntilTimeout+0x3c>
 8002aca:	b98d      	cbnz	r5, 8002af0 <UART_WaitOnFlagUntilTimeout+0x60>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8002acc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002ad0:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ad2:	6883      	ldr	r3, [r0, #8]
 8002ad4:	f023 0301 	bic.w	r3, r3, #1
 8002ad8:	6083      	str	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 8002ada:	2320      	movs	r3, #32
 8002adc:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8002ae0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          __HAL_UNLOCK(huart);
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
          return HAL_TIMEOUT;
 8002aea:	2003      	movs	r0, #3
 8002aec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002af0:	075a      	lsls	r2, r3, #29
 8002af2:	d5d4      	bpl.n	8002a9e <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002af4:	69c3      	ldr	r3, [r0, #28]
 8002af6:	051b      	lsls	r3, r3, #20
 8002af8:	d5d1      	bpl.n	8002a9e <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002afa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002afe:	6203      	str	r3, [r0, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8002b00:	6803      	ldr	r3, [r0, #0]
 8002b02:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002b06:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b08:	6883      	ldr	r3, [r0, #8]
 8002b0a:	f023 0301 	bic.w	r3, r3, #1
 8002b0e:	6083      	str	r3, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 8002b10:	2320      	movs	r3, #32
 8002b12:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8002b16:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002b1a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8002b1e:	e7e1      	b.n	8002ae4 <UART_WaitOnFlagUntilTimeout+0x54>

08002b20 <UART_CheckIdleState>:
{
 8002b20:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002b22:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b24:	2600      	movs	r6, #0
 8002b26:	f8c0 6088 	str.w	r6, [r0, #136]	; 0x88
  tickstart = HAL_GetTick();
 8002b2a:	f7fd fd01 	bl	8000530 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002b2e:	6823      	ldr	r3, [r4, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8002b34:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002b36:	d417      	bmi.n	8002b68 <UART_CheckIdleState+0x48>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002b38:	6823      	ldr	r3, [r4, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	075b      	lsls	r3, r3, #29
 8002b3e:	d50a      	bpl.n	8002b56 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002b44:	9300      	str	r3, [sp, #0]
 8002b46:	2200      	movs	r2, #0
 8002b48:	462b      	mov	r3, r5
 8002b4a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002b4e:	4620      	mov	r0, r4
 8002b50:	f7ff ff9e 	bl	8002a90 <UART_WaitOnFlagUntilTimeout>
 8002b54:	b9a0      	cbnz	r0, 8002b80 <UART_CheckIdleState+0x60>
  huart->gState = HAL_UART_STATE_READY;
 8002b56:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8002b58:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002b5a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UNLOCK(huart);
 8002b5e:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002b62:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  return HAL_OK;
 8002b66:	e00c      	b.n	8002b82 <UART_CheckIdleState+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002b6c:	9300      	str	r3, [sp, #0]
 8002b6e:	4632      	mov	r2, r6
 8002b70:	4603      	mov	r3, r0
 8002b72:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002b76:	4620      	mov	r0, r4
 8002b78:	f7ff ff8a 	bl	8002a90 <UART_WaitOnFlagUntilTimeout>
 8002b7c:	2800      	cmp	r0, #0
 8002b7e:	d0db      	beq.n	8002b38 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 8002b80:	2003      	movs	r0, #3
}
 8002b82:	b002      	add	sp, #8
 8002b84:	bd70      	pop	{r4, r5, r6, pc}

08002b86 <HAL_UART_Init>:
{
 8002b86:	b510      	push	{r4, lr}
  if (huart == NULL)
 8002b88:	4604      	mov	r4, r0
 8002b8a:	b350      	cbz	r0, 8002be2 <HAL_UART_Init+0x5c>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002b8c:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8002b90:	b91b      	cbnz	r3, 8002b9a <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 8002b92:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    HAL_UART_MspInit(huart);
 8002b96:	f000 fc4d 	bl	8003434 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8002b9a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002b9c:	2324      	movs	r3, #36	; 0x24
 8002b9e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UART_DISABLE(huart);
 8002ba2:	6813      	ldr	r3, [r2, #0]
 8002ba4:	f023 0301 	bic.w	r3, r3, #1
 8002ba8:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002baa:	4620      	mov	r0, r4
 8002bac:	f7ff fadc 	bl	8002168 <UART_SetConfig>
 8002bb0:	2801      	cmp	r0, #1
 8002bb2:	d016      	beq.n	8002be2 <HAL_UART_Init+0x5c>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002bb4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002bb6:	b113      	cbz	r3, 8002bbe <HAL_UART_Init+0x38>
    UART_AdvFeatureConfig(huart);
 8002bb8:	4620      	mov	r0, r4
 8002bba:	f7ff ff15 	bl	80029e8 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bbe:	6823      	ldr	r3, [r4, #0]
 8002bc0:	685a      	ldr	r2, [r3, #4]
 8002bc2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002bc6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bc8:	689a      	ldr	r2, [r3, #8]
 8002bca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002bce:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8002bd6:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8002bd8:	601a      	str	r2, [r3, #0]
}
 8002bda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8002bde:	f7ff bf9f 	b.w	8002b20 <UART_CheckIdleState>
}
 8002be2:	2001      	movs	r0, #1
 8002be4:	bd10      	pop	{r4, pc}

08002be6 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002be6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8002be8:	2203      	movs	r2, #3
 8002bea:	f88d 2003 	strb.w	r2, [sp, #3]
 8002bee:	2207      	movs	r2, #7
 8002bf0:	f88d 2004 	strb.w	r2, [sp, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f88d 2006 	strb.w	r2, [sp, #6]
 8002bfa:	f88d 2007 	strb.w	r2, [sp, #7]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8002bfe:	2208      	movs	r2, #8
 8002c00:	f88d 2008 	strb.w	r2, [sp, #8]
 8002c04:	f88d 200c 	strb.w	r2, [sp, #12]

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002c08:	6e42      	ldr	r2, [r0, #100]	; 0x64
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8002c0a:	2301      	movs	r3, #1
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8002c0c:	2104      	movs	r1, #4
 8002c0e:	2402      	movs	r4, #2
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8002c10:	f88d 3000 	strb.w	r3, [sp]
 8002c14:	f88d 3001 	strb.w	r3, [sp, #1]
 8002c18:	f88d 3002 	strb.w	r3, [sp, #2]
 8002c1c:	f88d 3005 	strb.w	r3, [sp, #5]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8002c20:	f88d 1009 	strb.w	r1, [sp, #9]
 8002c24:	f88d 400a 	strb.w	r4, [sp, #10]
 8002c28:	f88d 100b 	strb.w	r1, [sp, #11]
 8002c2c:	f88d 300d 	strb.w	r3, [sp, #13]
 8002c30:	f88d 300e 	strb.w	r3, [sp, #14]
 8002c34:	f88d 300f 	strb.w	r3, [sp, #15]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002c38:	b92a      	cbnz	r2, 8002c46 <UARTEx_SetNbDataToProcess+0x60>
  {
    huart->NbTxDataToProcess = 1U;
 8002c3a:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8002c3e:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 8002c42:	b004      	add	sp, #16
 8002c44:	bd10      	pop	{r4, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002c46:	6802      	ldr	r2, [r0, #0]
 8002c48:	6893      	ldr	r3, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002c4a:	6891      	ldr	r1, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8002c4c:	aa04      	add	r2, sp, #16
 8002c4e:	eb02 7151 	add.w	r1, r2, r1, lsr #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8002c52:	f3c3 6342 	ubfx	r3, r3, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8002c56:	f811 2c10 	ldrb.w	r2, [r1, #-16]
 8002c5a:	f811 1c08 	ldrb.w	r1, [r1, #-8]
 8002c5e:	00d2      	lsls	r2, r2, #3
 8002c60:	fb92 f2f1 	sdiv	r2, r2, r1
 8002c64:	f8a0 206a 	strh.w	r2, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8002c68:	aa04      	add	r2, sp, #16
 8002c6a:	4413      	add	r3, r2
 8002c6c:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8002c70:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8002c74:	00d2      	lsls	r2, r2, #3
 8002c76:	fb92 f3f3 	sdiv	r3, r2, r3
 8002c7a:	e7e0      	b.n	8002c3e <UARTEx_SetNbDataToProcess+0x58>

08002c7c <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 8002c7c:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d014      	beq.n	8002cae <HAL_UARTEx_DisableFifoMode+0x32>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002c84:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002c86:	2324      	movs	r3, #36	; 0x24
 8002c88:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002c8c:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8002c8e:	6813      	ldr	r3, [r2, #0]
 8002c90:	f023 0301 	bic.w	r3, r3, #1
 8002c94:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002c96:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002c9e:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8002ca0:	2220      	movs	r2, #32
 8002ca2:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  __HAL_UNLOCK(huart);
 8002ca6:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  return HAL_OK;
 8002caa:	4618      	mov	r0, r3
 8002cac:	4770      	bx	lr
  __HAL_LOCK(huart);
 8002cae:	2002      	movs	r0, #2
}
 8002cb0:	4770      	bx	lr

08002cb2 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8002cb2:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8002cb4:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8002cb8:	2b01      	cmp	r3, #1
{
 8002cba:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8002cbc:	d01b      	beq.n	8002cf6 <HAL_UARTEx_SetTxFifoThreshold+0x44>
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_BUSY;
 8002cc4:	2324      	movs	r3, #36	; 0x24
 8002cc6:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002cca:	6803      	ldr	r3, [r0, #0]
 8002ccc:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	f022 0201 	bic.w	r2, r2, #1
 8002cd4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002cd6:	689a      	ldr	r2, [r3, #8]
 8002cd8:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8002cdc:	4311      	orrs	r1, r2
 8002cde:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 8002ce0:	f7ff ff81 	bl	8002be6 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002ce4:	6803      	ldr	r3, [r0, #0]
 8002ce6:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8002ce8:	2320      	movs	r3, #32
 8002cea:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  __HAL_UNLOCK(huart);
 8002cee:	2000      	movs	r0, #0
 8002cf0:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  return HAL_OK;
 8002cf4:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8002cf6:	2002      	movs	r0, #2
}
 8002cf8:	bd38      	pop	{r3, r4, r5, pc}

08002cfa <HAL_UARTEx_SetRxFifoThreshold>:
{
 8002cfa:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8002cfc:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8002d00:	2b01      	cmp	r3, #1
{
 8002d02:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8002d04:	d01b      	beq.n	8002d3e <HAL_UARTEx_SetRxFifoThreshold+0x44>
 8002d06:	2301      	movs	r3, #1
 8002d08:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_BUSY;
 8002d0c:	2324      	movs	r3, #36	; 0x24
 8002d0e:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002d12:	6803      	ldr	r3, [r0, #0]
 8002d14:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	f022 0201 	bic.w	r2, r2, #1
 8002d1c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002d1e:	689a      	ldr	r2, [r3, #8]
 8002d20:	f022 6260 	bic.w	r2, r2, #234881024	; 0xe000000
 8002d24:	4311      	orrs	r1, r2
 8002d26:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 8002d28:	f7ff ff5d 	bl	8002be6 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002d2c:	6803      	ldr	r3, [r0, #0]
 8002d2e:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8002d30:	2320      	movs	r3, #32
 8002d32:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  __HAL_UNLOCK(huart);
 8002d36:	2000      	movs	r0, #0
 8002d38:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  return HAL_OK;
 8002d3c:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8002d3e:	2002      	movs	r0, #2
}
 8002d40:	bd38      	pop	{r3, r4, r5, pc}

08002d42 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8002d42:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8002d46:	f423 537e 	bic.w	r3, r3, #16256	; 0x3f80
 8002d4a:	045b      	lsls	r3, r3, #17
 8002d4c:	0c5b      	lsrs	r3, r3, #17
 8002d4e:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 8002d52:	2000      	movs	r0, #0
 8002d54:	4770      	bx	lr

08002d56 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002d56:	b084      	sub	sp, #16
 8002d58:	b510      	push	{r4, lr}
 8002d5a:	ac03      	add	r4, sp, #12
 8002d5c:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8002d60:	2200      	movs	r2, #0
  USBx->CNTR = USB_CNTR_FRES;
 8002d62:	2301      	movs	r3, #1
 8002d64:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->CNTR = 0;
 8002d68:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8002d6c:	f8a0 2044 	strh.w	r2, [r0, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002d70:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
  USBx->CNTR |= winterruptmask;
 8002d74:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);

  return HAL_OK;
}
 8002d78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBx->CNTR |= winterruptmask;
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 8002d82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d86:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
}
 8002d8a:	b004      	add	sp, #16
 8002d8c:	4610      	mov	r0, r2
 8002d8e:	4770      	bx	lr

08002d90 <setLedColor>:

#include "leds.h"

static uint8_t led_data[2 + (NUM_LEDS * 12)];

void setLedColor(int led, int red, int green, int blue) {
 8002d90:	b570      	push	{r4, r5, r6, lr}
	int offset = 2 + (led * 12);

	int color = (green << 16) + (red << 8) + blue;
 8002d92:	0209      	lsls	r1, r1, #8
	int offset = 2 + (led * 12);
 8002d94:	240c      	movs	r4, #12
	int color = (green << 16) + (red << 8) + blue;
 8002d96:	eb01 4202 	add.w	r2, r1, r2, lsl #16
	int offset = 2 + (led * 12);
 8002d9a:	4360      	muls	r0, r4
			// set high quartet part
			byte = (value == 0) ? 0x80 : 0xC0;
		} else {
			// add low quartet part, and set buffer
			byte += (value == 0) ? 0x08 : 0x0C;
			led_data[offset++] = byte;
 8002d9c:	4e0e      	ldr	r6, [pc, #56]	; (8002dd8 <setLedColor+0x48>)
	int color = (green << 16) + (red << 8) + blue;
 8002d9e:	4413      	add	r3, r2
	int offset = 2 + (led * 12);
 8002da0:	3002      	adds	r0, #2
	int color = (green << 16) + (red << 8) + blue;
 8002da2:	2118      	movs	r1, #24
	uint8_t byte = 0;
 8002da4:	2200      	movs	r2, #0
	int highQuartet = 1;
 8002da6:	2401      	movs	r4, #1
		int value = (color >> 23) & 1;	// 0 or 1
 8002da8:	f3c3 55c0 	ubfx	r5, r3, #23, #1
		if (highQuartet) {
 8002dac:	b154      	cbz	r4, 8002dc4 <setLedColor+0x34>
			byte = (value == 0) ? 0x80 : 0xC0;
 8002dae:	2d00      	cmp	r5, #0
 8002db0:	bf0c      	ite	eq
 8002db2:	2280      	moveq	r2, #128	; 0x80
 8002db4:	22c0      	movne	r2, #192	; 0xc0
	for(int bit= 0; bit<24; ++bit) {
 8002db6:	3901      	subs	r1, #1
		}
		highQuartet = 1 - highQuartet;	// invert true/false
 8002db8:	f1c4 0401 	rsb	r4, r4, #1

		color = color << 1;
 8002dbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
	for(int bit= 0; bit<24; ++bit) {
 8002dc0:	d1f2      	bne.n	8002da8 <setLedColor+0x18>
	}
}
 8002dc2:	bd70      	pop	{r4, r5, r6, pc}
			byte += (value == 0) ? 0x08 : 0x0C;
 8002dc4:	2d00      	cmp	r5, #0
 8002dc6:	bf0c      	ite	eq
 8002dc8:	2508      	moveq	r5, #8
 8002dca:	250c      	movne	r5, #12
 8002dcc:	442a      	add	r2, r5
 8002dce:	b2d2      	uxtb	r2, r2
			led_data[offset++] = byte;
 8002dd0:	5432      	strb	r2, [r6, r0]
 8002dd2:	3001      	adds	r0, #1
 8002dd4:	e7ef      	b.n	8002db6 <setLedColor+0x26>
 8002dd6:	bf00      	nop
 8002dd8:	20000038 	.word	0x20000038

08002ddc <resetLeds>:
	for(int led=0; led<NUM_LEDS; ++ led) {
		setLedColor(led, red, green, blue);
	}
}

void resetLeds() {
 8002ddc:	b510      	push	{r4, lr}
	for(int i=0; i<NUM_LEDS; ++i) {
 8002dde:	2400      	movs	r4, #0
		setLedColor(i, 0,0,0);
 8002de0:	2300      	movs	r3, #0
 8002de2:	4620      	mov	r0, r4
 8002de4:	461a      	mov	r2, r3
 8002de6:	4619      	mov	r1, r3
	for(int i=0; i<NUM_LEDS; ++i) {
 8002de8:	3401      	adds	r4, #1
		setLedColor(i, 0,0,0);
 8002dea:	f7ff ffd1 	bl	8002d90 <setLedColor>
	for(int i=0; i<NUM_LEDS; ++i) {
 8002dee:	2c18      	cmp	r4, #24
 8002df0:	d1f6      	bne.n	8002de0 <resetLeds+0x4>
	}
}
 8002df2:	bd10      	pop	{r4, pc}

08002df4 <updateLeds>:

void updateLeds(SPI_HandleTypeDef * spi) {
 8002df4:	b508      	push	{r3, lr}
	HAL_SPI_Transmit_DMA(spi, led_data, sizeof(led_data));
 8002df6:	f44f 7291 	mov.w	r2, #290	; 0x122
 8002dfa:	4904      	ldr	r1, [pc, #16]	; (8002e0c <updateLeds+0x18>)
 8002dfc:	f7ff f8e6 	bl	8001fcc <HAL_SPI_Transmit_DMA>
	HAL_Delay(1);
 8002e00:	2001      	movs	r0, #1
}
 8002e02:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_Delay(1);
 8002e06:	f7fd bb9f 	b.w	8000548 <HAL_Delay>
 8002e0a:	bf00      	nop
 8002e0c:	20000038 	.word	0x20000038

08002e10 <rotateLeds>:

void rotateLeds() {
 8002e10:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t tmp[12];

	// save 1st led values
	uint8_t * src = led_data + 2;
	for(int i=0; i<12; ++i) {
		tmp[i] = *src;
 8002e12:	4a13      	ldr	r2, [pc, #76]	; (8002e60 <rotateLeds+0x50>)
void rotateLeds() {
 8002e14:	b085      	sub	sp, #20
	for(int i=0; i<12; ++i) {
 8002e16:	2300      	movs	r3, #0
		tmp[i] = *src;
 8002e18:	ac01      	add	r4, sp, #4
 8002e1a:	4611      	mov	r1, r2
 8002e1c:	18d0      	adds	r0, r2, r3
 8002e1e:	7880      	ldrb	r0, [r0, #2]
 8002e20:	5518      	strb	r0, [r3, r4]
	for(int i=0; i<12; ++i) {
 8002e22:	3301      	adds	r3, #1
 8002e24:	2b0c      	cmp	r3, #12
 8002e26:	d1f9      	bne.n	8002e1c <rotateLeds+0xc>
 8002e28:	1c5a      	adds	r2, r3, #1
 8002e2a:	f103 000d 	add.w	r0, r3, #13
 8002e2e:	440a      	add	r2, r1
 8002e30:	4408      	add	r0, r1
	}

	// scroll all leds to previous one
	for(int led=0; led<NUM_LEDS-1; ++led) {
		for(int byte=0; byte<12; ++byte) {
			led_data[2 + (led*12) + byte] = led_data[2 + ((led+1)*12) + byte];
 8002e32:	f1a3 050c 	sub.w	r5, r3, #12
 8002e36:	f812 7f01 	ldrb.w	r7, [r2, #1]!
 8002e3a:	1ad6      	subs	r6, r2, r3
		for(int byte=0; byte<12; ++byte) {
 8002e3c:	4282      	cmp	r2, r0
			led_data[2 + (led*12) + byte] = led_data[2 + ((led+1)*12) + byte];
 8002e3e:	5577      	strb	r7, [r6, r5]
		for(int byte=0; byte<12; ++byte) {
 8002e40:	d1f9      	bne.n	8002e36 <rotateLeds+0x26>
 8002e42:	330c      	adds	r3, #12
	for(int led=0; led<NUM_LEDS-1; ++led) {
 8002e44:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 8002e48:	d1ee      	bne.n	8002e28 <rotateLeds+0x18>
 8002e4a:	2300      	movs	r3, #0
	}

	// copy save led to last led
	uint8_t * dst = led_data + 2 + ((NUM_LEDS-1) * 12);
	for(int i=0; i<12; ++i) {
		*dst = tmp[i];
 8002e4c:	18ca      	adds	r2, r1, r3
 8002e4e:	5ce0      	ldrb	r0, [r4, r3]
 8002e50:	f882 0116 	strb.w	r0, [r2, #278]	; 0x116
	for(int i=0; i<12; ++i) {
 8002e54:	3301      	adds	r3, #1
 8002e56:	2b0c      	cmp	r3, #12
 8002e58:	d1f8      	bne.n	8002e4c <rotateLeds+0x3c>
		++dst;
	}

}
 8002e5a:	b005      	add	sp, #20
 8002e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	20000038 	.word	0x20000038

08002e64 <LL_AHB2_GRP1_EnableClock>:
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002e64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
{
 8002e68:	b082      	sub	sp, #8
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002e6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002e6c:	4302      	orrs	r2, r0
 8002e6e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e72:	4018      	ands	r0, r3
 8002e74:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 8002e76:	9b01      	ldr	r3, [sp, #4]
}
 8002e78:	b002      	add	sp, #8
 8002e7a:	4770      	bx	lr

08002e7c <initLedColors>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void initLedColors() {
 8002e7c:	b510      	push	{r4, lr}
	int col=16;
	int colBoost = 24;
	  for(int led=0; led<4; ++led) {
 8002e7e:	2400      	movs	r4, #0
		  setLedColor(0+led, col, 0, 0);
 8002e80:	2300      	movs	r3, #0
 8002e82:	461a      	mov	r2, r3
 8002e84:	4620      	mov	r0, r4
 8002e86:	2110      	movs	r1, #16
 8002e88:	f7ff ff82 	bl	8002d90 <setLedColor>
		  setLedColor(4+led, 0, col, 0);
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	4619      	mov	r1, r3
 8002e90:	1d20      	adds	r0, r4, #4
 8002e92:	2210      	movs	r2, #16
 8002e94:	f7ff ff7c 	bl	8002d90 <setLedColor>
		  setLedColor(8+led, 0, 0, colBoost);
 8002e98:	2200      	movs	r2, #0
 8002e9a:	4611      	mov	r1, r2
 8002e9c:	f104 0008 	add.w	r0, r4, #8
 8002ea0:	2318      	movs	r3, #24
 8002ea2:	f7ff ff75 	bl	8002d90 <setLedColor>
		  setLedColor(12+led, col, 0, col);
 8002ea6:	2310      	movs	r3, #16
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	f104 000c 	add.w	r0, r4, #12
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f7ff ff6e 	bl	8002d90 <setLedColor>
		  setLedColor(16+led, 0, col, col);
 8002eb4:	2310      	movs	r3, #16
 8002eb6:	18e0      	adds	r0, r4, r3
 8002eb8:	461a      	mov	r2, r3
 8002eba:	2100      	movs	r1, #0
 8002ebc:	f7ff ff68 	bl	8002d90 <setLedColor>
		  setLedColor(20+led, col, col, 0);
 8002ec0:	2210      	movs	r2, #16
 8002ec2:	f104 0014 	add.w	r0, r4, #20
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	4611      	mov	r1, r2
	  for(int led=0; led<4; ++led) {
 8002eca:	3401      	adds	r4, #1
		  setLedColor(20+led, col, col, 0);
 8002ecc:	f7ff ff60 	bl	8002d90 <setLedColor>
	  for(int led=0; led<4; ++led) {
 8002ed0:	2c04      	cmp	r4, #4
 8002ed2:	d1d5      	bne.n	8002e80 <initLedColors+0x4>
	  }
}
 8002ed4:	bd10      	pop	{r4, pc}
	...

08002ed8 <printScore>:

void printScore() {
	char text[4] = {' ', ' ', ' ', ' '};
 8002ed8:	4b0f      	ldr	r3, [pc, #60]	; (8002f18 <printScore+0x40>)
void printScore() {
 8002eda:	b507      	push	{r0, r1, r2, lr}
	char text[4] = {' ', ' ', ' ', ' '};
 8002edc:	6818      	ldr	r0, [r3, #0]
	int left = scoreRed % 10;
	int right = scoreYellow % 10;
 8002ede:	4b0f      	ldr	r3, [pc, #60]	; (8002f1c <printScore+0x44>)
	char text[4] = {' ', ' ', ' ', ' '};
 8002ee0:	9001      	str	r0, [sp, #4]
	int right = scoreYellow % 10;
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	210a      	movs	r1, #10
 8002ee6:	fb92 f3f1 	sdiv	r3, r2, r1
 8002eea:	fb01 2313 	mls	r3, r1, r3, r2
	int left = scoreRed % 10;
 8002eee:	4a0c      	ldr	r2, [pc, #48]	; (8002f20 <printScore+0x48>)
 8002ef0:	6810      	ldr	r0, [r2, #0]
 8002ef2:	fb90 f2f1 	sdiv	r2, r0, r1
 8002ef6:	fb01 0212 	mls	r2, r1, r2, r0
	text[0] = '0' + left;
 8002efa:	3230      	adds	r2, #48	; 0x30
 8002efc:	f88d 2004 	strb.w	r2, [sp, #4]
	text[3] = '0' + right;
 8002f00:	3330      	adds	r3, #48	; 0x30
	segments_print(&hi2c1, 0x70, text);
 8002f02:	aa01      	add	r2, sp, #4
 8002f04:	2170      	movs	r1, #112	; 0x70
 8002f06:	4807      	ldr	r0, [pc, #28]	; (8002f24 <printScore+0x4c>)
	text[3] = '0' + right;
 8002f08:	f88d 3007 	strb.w	r3, [sp, #7]
	segments_print(&hi2c1, 0x70, text);
 8002f0c:	f000 f9e2 	bl	80032d4 <segments_print>
}
 8002f10:	b003      	add	sp, #12
 8002f12:	f85d fb04 	ldr.w	pc, [sp], #4
 8002f16:	bf00      	nop
 8002f18:	08003710 	.word	0x08003710
 8002f1c:	20000160 	.word	0x20000160
 8002f20:	2000015c 	.word	0x2000015c
 8002f24:	20000168 	.word	0x20000168

08002f28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f28:	b530      	push	{r4, r5, lr}
 8002f2a:	b0af      	sub	sp, #188	; 0xbc
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f2c:	2248      	movs	r2, #72	; 0x48
 8002f2e:	2100      	movs	r1, #0
 8002f30:	a808      	add	r0, sp, #32
 8002f32:	f000 fbc3 	bl	80036bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f36:	221c      	movs	r2, #28
 8002f38:	2100      	movs	r1, #0
 8002f3a:	a801      	add	r0, sp, #4
 8002f3c:	f000 fbbe 	bl	80036bc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f40:	2100      	movs	r1, #0
 8002f42:	2250      	movs	r2, #80	; 0x50
 8002f44:	a81a      	add	r0, sp, #104	; 0x68
 8002f46:	f000 fbb9 	bl	80036bc <memset>

  /** Macro to configure the PLL multiplication factor 
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8002f4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002f4e:	2501      	movs	r5, #1
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8002f50:	68da      	ldr	r2, [r3, #12]
 8002f52:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002f56:	60da      	str	r2, [r3, #12]
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8002f58:	68da      	ldr	r2, [r3, #12]
 8002f5a:	f022 0203 	bic.w	r2, r2, #3
 8002f5e:	f042 0201 	orr.w	r2, r2, #1
 8002f62:	60da      	str	r2, [r3, #12]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8002f64:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002f68:	f022 0218 	bic.w	r2, r2, #24
 8002f6c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f70:	4a26      	ldr	r2, [pc, #152]	; (800300c <SystemClock_Config+0xe4>)
 8002f72:	6813      	ldr	r3, [r2, #0]
 8002f74:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f78:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f7c:	6013      	str	r3, [r2, #0]
 8002f7e:	6813      	ldr	r3, [r2, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002f80:	950a      	str	r5, [sp, #40]	; 0x28
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f82:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f86:	9300      	str	r3, [sp, #0]
 8002f88:	9b00      	ldr	r3, [sp, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002f8a:	950f      	str	r5, [sp, #60]	; 0x3c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8002f8c:	2327      	movs	r3, #39	; 0x27
 8002f8e:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002f90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f94:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002f96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f9a:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002f9c:	2340      	movs	r3, #64	; 0x40
 8002f9e:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002fa0:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002fa2:	2360      	movs	r3, #96	; 0x60
 8002fa4:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002fa6:	f7fe f909 	bl	80011bc <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8002faa:	236f      	movs	r3, #111	; 0x6f
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002fac:	2400      	movs	r4, #0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002fae:	4629      	mov	r1, r5
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8002fb0:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002fb2:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8002fb4:	2302      	movs	r3, #2
 8002fb6:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002fb8:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002fba:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002fbc:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8002fbe:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8002fc0:	9407      	str	r4, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002fc2:	f7fe fbc1 	bl	8001748 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USART1
 8002fc6:	f242 1305 	movw	r3, #8453	; 0x2105
 8002fca:	931a      	str	r3, [sp, #104]	; 0x68
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8002fcc:	2318      	movs	r3, #24
 8002fce:	931b      	str	r3, [sp, #108]	; 0x6c
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8002fd0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fd4:	931c      	str	r3, [sp, #112]	; 0x70
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8002fd6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fda:	931d      	str	r3, [sp, #116]	; 0x74
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8002fdc:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002fe0:	931e      	str	r3, [sp, #120]	; 0x78
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8002fe2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002fe6:	931f      	str	r3, [sp, #124]	; 0x7c
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002fe8:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002fec:	9322      	str	r3, [sp, #136]	; 0x88
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8002fee:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002ff2:	9327      	str	r3, [sp, #156]	; 0x9c
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ff4:	a81a      	add	r0, sp, #104	; 0x68
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8002ff6:	2310      	movs	r3, #16
 8002ff8:	932d      	str	r3, [sp, #180]	; 0xb4
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002ffa:	9420      	str	r4, [sp, #128]	; 0x80
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8002ffc:	942c      	str	r4, [sp, #176]	; 0xb0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ffe:	f7fe fd4e 	bl	8001a9e <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8003002:	f7fe ff10 	bl	8001e26 <HAL_RCCEx_EnableMSIPLLMode>
}
 8003006:	b02f      	add	sp, #188	; 0xbc
 8003008:	bd30      	pop	{r4, r5, pc}
 800300a:	bf00      	nop
 800300c:	58000400 	.word	0x58000400

08003010 <main>:
{
 8003010:	b5bf      	push	{r0, r1, r2, r3, r4, r5, r7, lr}
  HAL_Init();
 8003012:	f7fd fa6b 	bl	80004ec <HAL_Init>
  SystemClock_Config();
 8003016:	f7ff ff87 	bl	8002f28 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800301a:	2214      	movs	r2, #20
 800301c:	2100      	movs	r1, #0
 800301e:	a801      	add	r0, sp, #4
 8003020:	f000 fb4c 	bl	80036bc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003024:	2004      	movs	r0, #4
 8003026:	f7ff ff1d 	bl	8002e64 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800302a:	2002      	movs	r0, #2
 800302c:	f7ff ff1a 	bl	8002e64 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003030:	2001      	movs	r0, #1
 8003032:	f7ff ff17 	bl	8002e64 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003036:	2008      	movs	r0, #8
 8003038:	f7ff ff14 	bl	8002e64 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 800303c:	2200      	movs	r2, #0
 800303e:	2123      	movs	r1, #35	; 0x23
 8003040:	485d      	ldr	r0, [pc, #372]	; (80031b8 <main+0x1a8>)
  huart1.Instance = USART1;
 8003042:	4d5e      	ldr	r5, [pc, #376]	; (80031bc <main+0x1ac>)
  hi2c1.Instance = I2C1;
 8003044:	4e5e      	ldr	r6, [pc, #376]	; (80031c0 <main+0x1b0>)

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003046:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8003048:	f7fd fcec 	bl	8000a24 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 800304c:	f04f 0810 	mov.w	r8, #16
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003050:	a901      	add	r1, sp, #4
 8003052:	485c      	ldr	r0, [pc, #368]	; (80031c4 <main+0x1b4>)
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003054:	9402      	str	r4, [sp, #8]

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003056:	2701      	movs	r7, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003058:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Pin = B1_Pin;
 800305a:	f8cd 8004 	str.w	r8, [sp, #4]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800305e:	f7fd fc2f 	bl	80008c0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8003062:	2323      	movs	r3, #35	; 0x23
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003064:	a901      	add	r1, sp, #4
 8003066:	4854      	ldr	r0, [pc, #336]	; (80031b8 <main+0x1a8>)
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8003068:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800306a:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800306c:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800306e:	9702      	str	r7, [sp, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003070:	f7fd fc26 	bl	80008c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8003074:	2303      	movs	r3, #3
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003076:	a901      	add	r1, sp, #4
 8003078:	4853      	ldr	r0, [pc, #332]	; (80031c8 <main+0x1b8>)
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 800307a:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800307c:	9402      	str	r4, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800307e:	9403      	str	r4, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003080:	f7fd fc1e 	bl	80008c0 <HAL_GPIO_Init>
  SET_BIT(RCC->AHB1ENR, Periphs);
 8003084:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003088:	4621      	mov	r1, r4
 800308a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800308c:	f042 0204 	orr.w	r2, r2, #4
 8003090:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8003092:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003094:	f002 0204 	and.w	r2, r2, #4
 8003098:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 800309a:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800309c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800309e:	433a      	orrs	r2, r7
 80030a0:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80030a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030a4:	403b      	ands	r3, r7
 80030a6:	4622      	mov	r2, r4
 80030a8:	9300      	str	r3, [sp, #0]
 80030aa:	200b      	movs	r0, #11
  (void)tmpreg;
 80030ac:	9b00      	ldr	r3, [sp, #0]
 80030ae:	f7fd fa71 	bl	8000594 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80030b2:	200b      	movs	r0, #11
 80030b4:	f7fd faa2 	bl	80005fc <HAL_NVIC_EnableIRQ>
  huart1.Init.WordLength = UART_WORDLENGTH_7B;
 80030b8:	4944      	ldr	r1, [pc, #272]	; (80031cc <main+0x1bc>)
  huart1.Init.StopBits = UART_STOPBITS_1;
 80030ba:	60ec      	str	r4, [r5, #12]
  huart1.Init.WordLength = UART_WORDLENGTH_7B;
 80030bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80030c0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80030c4:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80030c8:	4628      	mov	r0, r5
  huart1.Init.Mode = UART_MODE_TX_RX;
 80030ca:	230c      	movs	r3, #12
 80030cc:	616b      	str	r3, [r5, #20]
  huart1.Init.Parity = UART_PARITY_NONE;
 80030ce:	612c      	str	r4, [r5, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030d0:	61ac      	str	r4, [r5, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80030d2:	61ec      	str	r4, [r5, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80030d4:	622c      	str	r4, [r5, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80030d6:	626c      	str	r4, [r5, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80030d8:	62ac      	str	r4, [r5, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80030da:	f7ff fd54 	bl	8002b86 <HAL_UART_Init>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80030de:	4621      	mov	r1, r4
 80030e0:	4628      	mov	r0, r5
 80030e2:	f7ff fde6 	bl	8002cb2 <HAL_UARTEx_SetTxFifoThreshold>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80030e6:	4621      	mov	r1, r4
 80030e8:	4628      	mov	r0, r5
 80030ea:	f7ff fe06 	bl	8002cfa <HAL_UARTEx_SetRxFifoThreshold>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80030ee:	4628      	mov	r0, r5
 80030f0:	f7ff fdc4 	bl	8002c7c <HAL_UARTEx_DisableFifoMode>
  hpcd_USB_FS.Instance = USB;
 80030f4:	4836      	ldr	r0, [pc, #216]	; (80031d0 <main+0x1c0>)
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80030f6:	4b37      	ldr	r3, [pc, #220]	; (80031d4 <main+0x1c4>)
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80030f8:	6144      	str	r4, [r0, #20]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80030fa:	f04f 0e08 	mov.w	lr, #8
 80030fe:	e880 4008 	stmia.w	r0, {r3, lr}
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8003102:	2302      	movs	r3, #2
 8003104:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003106:	6103      	str	r3, [r0, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8003108:	6184      	str	r4, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800310a:	61c4      	str	r4, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800310c:	6204      	str	r4, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800310e:	f7fd ff25 	bl	8000f5c <HAL_PCD_Init>
  hi2c1.Init.Timing = 0x00707CBB;
 8003112:	f8df c0d4 	ldr.w	ip, [pc, #212]	; 80031e8 <main+0x1d8>
 8003116:	4b30      	ldr	r3, [pc, #192]	; (80031d8 <main+0x1c8>)
  hi2c1.Init.OwnAddress1 = 0;
 8003118:	60b4      	str	r4, [r6, #8]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800311a:	4630      	mov	r0, r6
  hi2c1.Init.Timing = 0x00707CBB;
 800311c:	e886 1008 	stmia.w	r6, {r3, ip}
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003120:	6134      	str	r4, [r6, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003122:	6174      	str	r4, [r6, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003124:	61b4      	str	r4, [r6, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003126:	61f4      	str	r4, [r6, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003128:	6234      	str	r4, [r6, #32]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800312a:	60f7      	str	r7, [r6, #12]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800312c:	f7fd fd5b 	bl	8000be6 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003130:	4621      	mov	r1, r4
 8003132:	4630      	mov	r0, r6
 8003134:	f7fd fec7 	bl	8000ec6 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003138:	4621      	mov	r1, r4
 800313a:	4630      	mov	r0, r6
 800313c:	f7fd fee9 	bl	8000f12 <HAL_I2CEx_ConfigDigitalFilter>
  hspi1.Instance = SPI1;
 8003140:	4d26      	ldr	r5, [pc, #152]	; (80031dc <main+0x1cc>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003142:	4a27      	ldr	r2, [pc, #156]	; (80031e0 <main+0x1d0>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003144:	60ac      	str	r4, [r5, #8]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003146:	f44f 7382 	mov.w	r3, #260	; 0x104
 800314a:	e885 000c 	stmia.w	r5, {r2, r3}
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800314e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003152:	60eb      	str	r3, [r5, #12]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003154:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003158:	61ab      	str	r3, [r5, #24]
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800315a:	4628      	mov	r0, r5
  hspi1.Init.CRCPolynomial = 7;
 800315c:	2307      	movs	r3, #7
 800315e:	62eb      	str	r3, [r5, #44]	; 0x2c
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003160:	612c      	str	r4, [r5, #16]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003162:	622c      	str	r4, [r5, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003164:	626c      	str	r4, [r5, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003166:	62ac      	str	r4, [r5, #40]	; 0x28
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003168:	632c      	str	r4, [r5, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800316a:	636c      	str	r4, [r5, #52]	; 0x34
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800316c:	616f      	str	r7, [r5, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800316e:	f8c5 801c 	str.w	r8, [r5, #28]
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003172:	f7fe fed9 	bl	8001f28 <HAL_SPI_Init>
  segments_init(&hi2c1, 0x70);
 8003176:	2170      	movs	r1, #112	; 0x70
 8003178:	4630      	mov	r0, r6
 800317a:	f000 f865 	bl	8003248 <segments_init>
  printScore();
 800317e:	f7ff feab 	bl	8002ed8 <printScore>
  resetLeds();
 8003182:	f7ff fe2b 	bl	8002ddc <resetLeds>
  initLedColors();
 8003186:	f7ff fe79 	bl	8002e7c <initLedColors>
  updateLeds(&hspi1);
 800318a:	4628      	mov	r0, r5
 800318c:	f7ff fe32 	bl	8002df4 <updateLeds>
	  scoreRed = ((scoreRed + 1) % 10);
 8003190:	4c14      	ldr	r4, [pc, #80]	; (80031e4 <main+0x1d4>)
 8003192:	260a      	movs	r6, #10
 8003194:	6823      	ldr	r3, [r4, #0]
 8003196:	3301      	adds	r3, #1
	  HAL_Delay(56);
 8003198:	2038      	movs	r0, #56	; 0x38
	  scoreRed = ((scoreRed + 1) % 10);
 800319a:	fb93 f2f6 	sdiv	r2, r3, r6
 800319e:	fb06 3312 	mls	r3, r6, r2, r3
 80031a2:	6023      	str	r3, [r4, #0]
	  HAL_Delay(56);
 80031a4:	f7fd f9d0 	bl	8000548 <HAL_Delay>
	  printScore();
 80031a8:	f7ff fe96 	bl	8002ed8 <printScore>
		rotateLeds();
 80031ac:	f7ff fe30 	bl	8002e10 <rotateLeds>
		updateLeds(&hspi1);
 80031b0:	4628      	mov	r0, r5
 80031b2:	f7ff fe1f 	bl	8002df4 <updateLeds>
 80031b6:	e7ed      	b.n	8003194 <main+0x184>
 80031b8:	48000400 	.word	0x48000400
 80031bc:	200001b4 	.word	0x200001b4
 80031c0:	20000168 	.word	0x20000168
 80031c4:	48000800 	.word	0x48000800
 80031c8:	48000c00 	.word	0x48000c00
 80031cc:	40013800 	.word	0x40013800
 80031d0:	200002a4 	.word	0x200002a4
 80031d4:	40006800 	.word	0x40006800
 80031d8:	40005400 	.word	0x40005400
 80031dc:	20000240 	.word	0x20000240
 80031e0:	40013000 	.word	0x40013000
 80031e4:	2000015c 	.word	0x2000015c
 80031e8:	00707cbb 	.word	0x00707cbb

080031ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80031ec:	4770      	bx	lr
	...

080031f0 <initChars>:
	return result;
}

void initChars() {
	for(int i=0; i<128; ++i) {
		chars[i] = 0x40;
 80031f0:	4b14      	ldr	r3, [pc, #80]	; (8003244 <initChars+0x54>)
	for(int i=0; i<128; ++i) {
 80031f2:	2200      	movs	r2, #0
		chars[i] = 0x40;
 80031f4:	2140      	movs	r1, #64	; 0x40
 80031f6:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<128; ++i) {
 80031f8:	3201      	adds	r2, #1
 80031fa:	2a80      	cmp	r2, #128	; 0x80
 80031fc:	d1fb      	bne.n	80031f6 <initChars+0x6>
	}
	chars[' '] = 0x00;
 80031fe:	2200      	movs	r2, #0
 8003200:	f883 2020 	strb.w	r2, [r3, #32]
	chars['0'] = 0x3F;
 8003204:	223f      	movs	r2, #63	; 0x3f
 8003206:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	chars['1'] = 0x06;
 800320a:	2206      	movs	r2, #6
 800320c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	chars['2'] = 0x5B;
 8003210:	225b      	movs	r2, #91	; 0x5b
 8003212:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	chars['3'] = 0x4F;
 8003216:	224f      	movs	r2, #79	; 0x4f
 8003218:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	chars['4'] = 0x66;
 800321c:	2266      	movs	r2, #102	; 0x66
 800321e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	chars['5'] = 0x6D;
 8003222:	226d      	movs	r2, #109	; 0x6d
 8003224:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	chars['6'] = 0x7D;
 8003228:	227d      	movs	r2, #125	; 0x7d
 800322a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	chars['7'] = 0x07;
 800322e:	2207      	movs	r2, #7
 8003230:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	chars['8'] = 0x7F;
 8003234:	227f      	movs	r2, #127	; 0x7f
 8003236:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	chars['9'] = 0x6F;
 800323a:	226f      	movs	r2, #111	; 0x6f
 800323c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	20000578 	.word	0x20000578

08003248 <segments_init>:
int segments_init(I2C_HandleTypeDef * i2c, uint16_t deviceAddress) {
 8003248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800324a:	b087      	sub	sp, #28
 800324c:	460d      	mov	r5, r1
 800324e:	4606      	mov	r6, r0
	initChars();
 8003250:	f7ff ffce 	bl	80031f0 <initChars>
	deviceAddress <<= 1;
 8003254:	006d      	lsls	r5, r5, #1
 8003256:	b2ad      	uxth	r5, r5
 8003258:	270a      	movs	r7, #10
	  result = HAL_I2C_IsDeviceReady(i2c, deviceAddress, 3, 200);
 800325a:	23c8      	movs	r3, #200	; 0xc8
 800325c:	2203      	movs	r2, #3
 800325e:	4629      	mov	r1, r5
 8003260:	4630      	mov	r0, r6
 8003262:	f7fd fda5 	bl	8000db0 <HAL_I2C_IsDeviceReady>
	  if (result == HAL_OK) {
 8003266:	4604      	mov	r4, r0
 8003268:	b140      	cbz	r0, 800327c <segments_init+0x34>
	  HAL_Delay(DELAY);
 800326a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800326e:	f7fd f96b 	bl	8000548 <HAL_Delay>
	for(int i=0; i<10; ++i) {
 8003272:	3f01      	subs	r7, #1
 8003274:	d1f1      	bne.n	800325a <segments_init+0x12>
	  return result;
 8003276:	4620      	mov	r0, r4
}
 8003278:	b007      	add	sp, #28
 800327a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t sysOn[] = {0x20 | 1};	// writeCommand(SYSTEM_SETUP_REGISTER, SYSTEM_SETUP_ON);
 800327c:	aa06      	add	r2, sp, #24
 800327e:	2321      	movs	r3, #33	; 0x21
	result = HAL_I2C_Master_Transmit(i2c, deviceAddress, sysOn, 1, 100);
 8003280:	2464      	movs	r4, #100	; 0x64
	uint8_t sysOn[] = {0x20 | 1};	// writeCommand(SYSTEM_SETUP_REGISTER, SYSTEM_SETUP_ON);
 8003282:	f802 3d0c 	strb.w	r3, [r2, #-12]!
	result = HAL_I2C_Master_Transmit(i2c, deviceAddress, sysOn, 1, 100);
 8003286:	4629      	mov	r1, r5
 8003288:	9400      	str	r4, [sp, #0]
 800328a:	2301      	movs	r3, #1
 800328c:	4630      	mov	r0, r6
 800328e:	f7fd fcfb 	bl	8000c88 <HAL_I2C_Master_Transmit>
	if (result != HAL_OK) {
 8003292:	2800      	cmp	r0, #0
 8003294:	d1f0      	bne.n	8003278 <segments_init+0x30>
	HAL_Delay(DELAY);
 8003296:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800329a:	f7fd f955 	bl	8000548 <HAL_Delay>
	uint8_t dispOn[] = {0x80 | 1 | 0}; // writeCommand(DISPLAY_SETUP_REGISTER, DISPLAY_SETUP_ON | DISPLAY_SETUP_BLINK_NONE);
 800329e:	aa06      	add	r2, sp, #24
 80032a0:	2381      	movs	r3, #129	; 0x81
 80032a2:	f802 3d08 	strb.w	r3, [r2, #-8]!
	result = HAL_I2C_Master_Transmit(i2c, deviceAddress, dispOn, 1, 100);
 80032a6:	4629      	mov	r1, r5
 80032a8:	9400      	str	r4, [sp, #0]
 80032aa:	2301      	movs	r3, #1
 80032ac:	4630      	mov	r0, r6
 80032ae:	f7fd fceb 	bl	8000c88 <HAL_I2C_Master_Transmit>
	if (result != HAL_OK) {
 80032b2:	2800      	cmp	r0, #0
 80032b4:	d1e0      	bne.n	8003278 <segments_init+0x30>
	HAL_Delay(DELAY);
 80032b6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80032ba:	f7fd f945 	bl	8000548 <HAL_Delay>
	uint8_t bright[] = {0xE0| 7};	// writeCommand(BRIGTHNESS_REGISTER, 7);
 80032be:	aa06      	add	r2, sp, #24
 80032c0:	23e7      	movs	r3, #231	; 0xe7
 80032c2:	f802 3d04 	strb.w	r3, [r2, #-4]!
	result = HAL_I2C_Master_Transmit(i2c, deviceAddress, bright, 1, 100);
 80032c6:	4629      	mov	r1, r5
 80032c8:	9400      	str	r4, [sp, #0]
 80032ca:	2301      	movs	r3, #1
 80032cc:	4630      	mov	r0, r6
 80032ce:	f7fd fcdb 	bl	8000c88 <HAL_I2C_Master_Transmit>
	return result;
 80032d2:	e7d1      	b.n	8003278 <segments_init+0x30>

080032d4 <segments_print>:
}

int segments_print(I2C_HandleTypeDef * i2c, uint16_t deviceAddress, char * text) {
 80032d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	deviceAddress <<= 1;
 80032d8:	0049      	lsls	r1, r1, #1
 80032da:	4d11      	ldr	r5, [pc, #68]	; (8003320 <segments_print+0x4c>)
 80032dc:	f8df 8044 	ldr.w	r8, [pc, #68]	; 8003324 <segments_print+0x50>
int segments_print(I2C_HandleTypeDef * i2c, uint16_t deviceAddress, char * text) {
 80032e0:	4681      	mov	r9, r0
 80032e2:	4617      	mov	r7, r2
	deviceAddress <<= 1;
 80032e4:	b28e      	uxth	r6, r1
	for(size_t i=0; i<4; ++i) {
 80032e6:	2400      	movs	r4, #0
		if (i < strlen(text)) {
 80032e8:	4638      	mov	r0, r7
 80032ea:	f7fc ff49 	bl	8000180 <strlen>
 80032ee:	42a0      	cmp	r0, r4
 80032f0:	d906      	bls.n	8003300 <segments_print+0x2c>
			uint8_t c = (uint8_t)text[i];
 80032f2:	5d3b      	ldrb	r3, [r7, r4]
			if (i<2) {
 80032f4:	2c01      	cmp	r4, #1
				charBuffer[i*2 + 1] = chars[c];
 80032f6:	f818 3003 	ldrb.w	r3, [r8, r3]
 80032fa:	bf94      	ite	ls
 80032fc:	706b      	strbls	r3, [r5, #1]
			} else {
				charBuffer[i*2 + 3] = chars[c];	// skip middle : character
 80032fe:	70eb      	strbhi	r3, [r5, #3]
	for(size_t i=0; i<4; ++i) {
 8003300:	3401      	adds	r4, #1
 8003302:	2c04      	cmp	r4, #4
 8003304:	f105 0502 	add.w	r5, r5, #2
 8003308:	d1ee      	bne.n	80032e8 <segments_print+0x14>
			}
		}
	}
	return HAL_I2C_Master_Transmit(i2c, deviceAddress, charBuffer, 10, 100);
 800330a:	2364      	movs	r3, #100	; 0x64
 800330c:	9300      	str	r3, [sp, #0]
 800330e:	4a04      	ldr	r2, [pc, #16]	; (8003320 <segments_print+0x4c>)
 8003310:	230a      	movs	r3, #10
 8003312:	4631      	mov	r1, r6
 8003314:	4648      	mov	r0, r9
 8003316:	f7fd fcb7 	bl	8000c88 <HAL_I2C_Master_Transmit>
}
 800331a:	b003      	add	sp, #12
 800331c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003320:	2000000c 	.word	0x2000000c
 8003324:	20000578 	.word	0x20000578

08003328 <LL_AHB2_GRP1_EnableClock>:
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003328:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
{
 800332c:	b082      	sub	sp, #8
  SET_BIT(RCC->AHB2ENR, Periphs);
 800332e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003330:	4302      	orrs	r2, r0
 8003332:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003336:	4018      	ands	r0, r3
 8003338:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 800333a:	9b01      	ldr	r3, [sp, #4]
}
 800333c:	b002      	add	sp, #8
 800333e:	4770      	bx	lr

08003340 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003340:	4770      	bx	lr
	...

08003344 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003344:	b510      	push	{r4, lr}
 8003346:	4604      	mov	r4, r0
 8003348:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800334a:	2214      	movs	r2, #20
 800334c:	2100      	movs	r1, #0
 800334e:	a801      	add	r0, sp, #4
 8003350:	f000 f9b4 	bl	80036bc <memset>
  if(hi2c->Instance==I2C1)
 8003354:	6822      	ldr	r2, [r4, #0]
 8003356:	4b11      	ldr	r3, [pc, #68]	; (800339c <HAL_I2C_MspInit+0x58>)
 8003358:	429a      	cmp	r2, r3
 800335a:	d11d      	bne.n	8003398 <HAL_I2C_MspInit+0x54>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800335c:	2002      	movs	r0, #2
 800335e:	f7ff ffe3 	bl	8003328 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003362:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003366:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003368:	2312      	movs	r3, #18
 800336a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800336c:	2301      	movs	r3, #1
 800336e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003370:	2300      	movs	r3, #0
 8003372:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003374:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003376:	eb0d 0103 	add.w	r1, sp, r3
 800337a:	4809      	ldr	r0, [pc, #36]	; (80033a0 <HAL_I2C_MspInit+0x5c>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800337c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800337e:	f7fd fa9f 	bl	80008c0 <HAL_GPIO_Init>
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003382:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003386:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003388:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800338c:	659a      	str	r2, [r3, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800338e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003390:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003394:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8003396:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003398:	b006      	add	sp, #24
 800339a:	bd10      	pop	{r4, pc}
 800339c:	40005400 	.word	0x40005400
 80033a0:	48000400 	.word	0x48000400

080033a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80033a4:	b570      	push	{r4, r5, r6, lr}
 80033a6:	4606      	mov	r6, r0
 80033a8:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033aa:	2214      	movs	r2, #20
 80033ac:	2100      	movs	r1, #0
 80033ae:	a801      	add	r0, sp, #4
 80033b0:	f000 f984 	bl	80036bc <memset>
  if(hspi->Instance==SPI1)
 80033b4:	6832      	ldr	r2, [r6, #0]
 80033b6:	4b1c      	ldr	r3, [pc, #112]	; (8003428 <HAL_SPI_MspInit+0x84>)
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d133      	bne.n	8003424 <HAL_SPI_MspInit+0x80>
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80033bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033c0:	2001      	movs	r0, #1
 80033c2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel1;
 80033c4:	4c19      	ldr	r4, [pc, #100]	; (800342c <HAL_SPI_MspInit+0x88>)
 80033c6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80033ca:	661a      	str	r2, [r3, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80033cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033d2:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80033d4:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033d6:	f7ff ffa7 	bl	8003328 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7;
 80033da:	2382      	movs	r3, #130	; 0x82
 80033dc:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033de:	2302      	movs	r3, #2
 80033e0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033e2:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033e4:	2500      	movs	r5, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033e6:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033e8:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80033ea:	2305      	movs	r3, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80033f0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033f2:	9503      	str	r5, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033f4:	f7fd fa64 	bl	80008c0 <HAL_GPIO_Init>
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80033f8:	490d      	ldr	r1, [pc, #52]	; (8003430 <HAL_SPI_MspInit+0x8c>)
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80033fa:	60e5      	str	r5, [r4, #12]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80033fc:	2310      	movs	r3, #16
 80033fe:	2207      	movs	r2, #7
 8003400:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003404:	2380      	movs	r3, #128	; 0x80
 8003406:	6123      	str	r3, [r4, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003408:	4620      	mov	r0, r4
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800340a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800340e:	6165      	str	r5, [r4, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003410:	61a5      	str	r5, [r4, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8003412:	61e5      	str	r5, [r4, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003414:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003416:	f7fd f957 	bl	80006c8 <HAL_DMA_Init>
 800341a:	b108      	cbz	r0, 8003420 <HAL_SPI_MspInit+0x7c>
    {
      Error_Handler();
 800341c:	f7ff fee6 	bl	80031ec <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8003420:	6574      	str	r4, [r6, #84]	; 0x54
 8003422:	62a6      	str	r6, [r4, #40]	; 0x28
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003424:	b006      	add	sp, #24
 8003426:	bd70      	pop	{r4, r5, r6, pc}
 8003428:	40013000 	.word	0x40013000
 800342c:	20000518 	.word	0x20000518
 8003430:	40020008 	.word	0x40020008

08003434 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003434:	b510      	push	{r4, lr}
 8003436:	4604      	mov	r4, r0
 8003438:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800343a:	2214      	movs	r2, #20
 800343c:	2100      	movs	r1, #0
 800343e:	a801      	add	r0, sp, #4
 8003440:	f000 f93c 	bl	80036bc <memset>
  if(huart->Instance==USART1)
 8003444:	6822      	ldr	r2, [r4, #0]
 8003446:	4b10      	ldr	r3, [pc, #64]	; (8003488 <HAL_UART_MspInit+0x54>)
 8003448:	429a      	cmp	r2, r3
 800344a:	d11a      	bne.n	8003482 <HAL_UART_MspInit+0x4e>
  SET_BIT(RCC->APB2ENR, Periphs);
 800344c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003450:	2002      	movs	r0, #2
 8003452:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003454:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003458:	661a      	str	r2, [r3, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800345a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800345c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003460:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8003462:	9b00      	ldr	r3, [sp, #0]
 8003464:	f7ff ff60 	bl	8003328 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8003468:	23c0      	movs	r3, #192	; 0xc0
 800346a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800346c:	2302      	movs	r3, #2
 800346e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003470:	2300      	movs	r3, #0
 8003472:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003474:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003476:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003478:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800347a:	4804      	ldr	r0, [pc, #16]	; (800348c <HAL_UART_MspInit+0x58>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800347c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800347e:	f7fd fa1f 	bl	80008c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003482:	b006      	add	sp, #24
 8003484:	bd10      	pop	{r4, pc}
 8003486:	bf00      	nop
 8003488:	40013800 	.word	0x40013800
 800348c:	48000400 	.word	0x48000400

08003490 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003490:	b510      	push	{r4, lr}
 8003492:	4604      	mov	r4, r0
 8003494:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003496:	2214      	movs	r2, #20
 8003498:	2100      	movs	r1, #0
 800349a:	a801      	add	r0, sp, #4
 800349c:	f000 f90e 	bl	80036bc <memset>
  if(hpcd->Instance==USB)
 80034a0:	6822      	ldr	r2, [r4, #0]
 80034a2:	4b11      	ldr	r3, [pc, #68]	; (80034e8 <HAL_PCD_MspInit+0x58>)
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d11c      	bne.n	80034e2 <HAL_PCD_MspInit+0x52>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034a8:	2001      	movs	r0, #1
 80034aa:	f7ff ff3d 	bl	8003328 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration    
    PA11     ------> USB_DM
    PA12     ------> USB_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80034ae:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80034b2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034b4:	2302      	movs	r3, #2
 80034b6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b8:	2300      	movs	r3, #0
 80034ba:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034bc:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034be:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80034c0:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80034c6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034c8:	f7fd f9fa 	bl	80008c0 <HAL_GPIO_Init>
  SET_BIT(RCC->APB1ENR1, Periphs);
 80034cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034d0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80034d2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80034d6:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80034d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034da:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80034de:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80034e0:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80034e2:	b006      	add	sp, #24
 80034e4:	bd10      	pop	{r4, pc}
 80034e6:	bf00      	nop
 80034e8:	40006800 	.word	0x40006800

080034ec <NMI_Handler>:
 80034ec:	4770      	bx	lr

080034ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034ee:	e7fe      	b.n	80034ee <HardFault_Handler>

080034f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80034f0:	e7fe      	b.n	80034f0 <MemManage_Handler>

080034f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80034f2:	e7fe      	b.n	80034f2 <BusFault_Handler>

080034f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80034f4:	e7fe      	b.n	80034f4 <UsageFault_Handler>

080034f6 <SVC_Handler>:
 80034f6:	4770      	bx	lr

080034f8 <DebugMon_Handler>:
 80034f8:	4770      	bx	lr

080034fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80034fa:	4770      	bx	lr

080034fc <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80034fc:	f7fd b80c 	b.w	8000518 <HAL_IncTick>

08003500 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8003500:	4801      	ldr	r0, [pc, #4]	; (8003508 <DMA1_Channel1_IRQHandler+0x8>)
 8003502:	f7fd b993 	b.w	800082c <HAL_DMA_IRQHandler>
 8003506:	bf00      	nop
 8003508:	20000518 	.word	0x20000518

0800350c <SystemInit>:
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 800350c:	4b17      	ldr	r3, [pc, #92]	; (800356c <SystemInit+0x60>)
 800350e:	2100      	movs	r1, #0
 8003510:	6099      	str	r1, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8003512:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003516:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800351a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800351e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8003522:	f46f 7c82 	mvn.w	ip, #260	; 0x104
  RCC->CR |= RCC_CR_MSION;
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	f042 0201 	orr.w	r2, r2, #1
 800352c:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00070000U;
 800352e:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8003532:	609a      	str	r2, [r3, #8]
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8003534:	6818      	ldr	r0, [r3, #0]
 8003536:	f1a2 62a2 	sub.w	r2, r2, #84934656	; 0x5100000
 800353a:	4462      	add	r2, ip
 800353c:	4002      	ands	r2, r0
 800353e:	601a      	str	r2, [r3, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8003540:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8003544:	f022 0205 	bic.w	r2, r2, #5
 8003548:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800354c:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8003550:	f022 0201 	bic.w	r2, r2, #1
 8003554:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8003558:	4a05      	ldr	r2, [pc, #20]	; (8003570 <SystemInit+0x64>)
 800355a:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800355c:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003564:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003566:	6199      	str	r1, [r3, #24]
 8003568:	4770      	bx	lr
 800356a:	bf00      	nop
 800356c:	e000ed00 	.word	0xe000ed00
 8003570:	22041000 	.word	0x22041000

08003574 <SystemCoreClockUpdate>:
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 8003574:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003578:	4924      	ldr	r1, [pc, #144]	; (800360c <SystemCoreClockUpdate+0x98>)
 800357a:	6813      	ldr	r3, [r2, #0]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800357c:	6890      	ldr	r0, [r2, #8]
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 800357e:	f3c3 1303 	ubfx	r3, r3, #4, #4
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003582:	f000 000c 	and.w	r0, r0, #12
{
 8003586:	b510      	push	{r4, lr}
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 8003588:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 800358c:	4611      	mov	r1, r2
 800358e:	4a20      	ldr	r2, [pc, #128]	; (8003610 <SystemCoreClockUpdate+0x9c>)
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003590:	280c      	cmp	r0, #12
 8003592:	d839      	bhi.n	8003608 <SystemCoreClockUpdate+0x94>
 8003594:	e8df f000 	tbb	[pc, r0]
 8003598:	38383838 	.word	0x38383838
 800359c:	38383807 	.word	0x38383807
 80035a0:	38383816 	.word	0x38383816
 80035a4:	18          	.byte	0x18
 80035a5:	00          	.byte	0x00
      SystemCoreClock = msirange;
      break;

    case 0x04:  /* HSI used as system clock source */
      /* HSI used as system clock source */
        SystemCoreClock = HSI_VALUE;
 80035a6:	4b1b      	ldr	r3, [pc, #108]	; (8003614 <SystemCoreClockUpdate+0xa0>)
      }
      
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
      
      SystemCoreClock = pllvco/pllr;
 80035a8:	6013      	str	r3, [r2, #0]
      break;
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80035aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 80035ae:	481a      	ldr	r0, [pc, #104]	; (8003618 <SystemCoreClockUpdate+0xa4>)
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80035b0:	6899      	ldr	r1, [r3, #8]
  SystemCoreClock = SystemCoreClock / tmp;
 80035b2:	6813      	ldr	r3, [r2, #0]
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80035b4:	f3c1 1103 	ubfx	r1, r1, #4, #4
  SystemCoreClock = SystemCoreClock / tmp;
 80035b8:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 80035bc:	fbb3 f3f1 	udiv	r3, r3, r1
 80035c0:	6013      	str	r3, [r2, #0]
 80035c2:	bd10      	pop	{r4, pc}
      SystemCoreClock = HSE_VALUE;
 80035c4:	4b15      	ldr	r3, [pc, #84]	; (800361c <SystemCoreClockUpdate+0xa8>)
 80035c6:	e7ef      	b.n	80035a8 <SystemCoreClockUpdate+0x34>
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80035c8:	68c8      	ldr	r0, [r1, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 80035ca:	68cb      	ldr	r3, [r1, #12]
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80035cc:	f000 0003 	and.w	r0, r0, #3
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 80035d0:	f3c3 1302 	ubfx	r3, r3, #4, #3
      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 80035d4:	2802      	cmp	r0, #2
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 80035d6:	f103 0301 	add.w	r3, r3, #1
      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 80035da:	d10e      	bne.n	80035fa <SystemCoreClockUpdate+0x86>
        pllvco = (HSI_VALUE / pllm);
 80035dc:	490d      	ldr	r1, [pc, #52]	; (8003614 <SystemCoreClockUpdate+0xa0>)
        pllvco = (HSE_VALUE / pllm);
 80035de:	fbb1 f3f3 	udiv	r3, r1, r3
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80035e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80035e6:	68c8      	ldr	r0, [r1, #12]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 80035e8:	68c9      	ldr	r1, [r1, #12]
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80035ea:	f3c0 2006 	ubfx	r0, r0, #8, #7
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 80035ee:	0f49      	lsrs	r1, r1, #29
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80035f0:	4343      	muls	r3, r0
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 80035f2:	3101      	adds	r1, #1
      SystemCoreClock = pllvco/pllr;
 80035f4:	fbb3 f3f1 	udiv	r3, r3, r1
 80035f8:	e7d6      	b.n	80035a8 <SystemCoreClockUpdate+0x34>
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 80035fa:	2803      	cmp	r0, #3
 80035fc:	d101      	bne.n	8003602 <SystemCoreClockUpdate+0x8e>
        pllvco = (HSE_VALUE / pllm);
 80035fe:	4907      	ldr	r1, [pc, #28]	; (800361c <SystemCoreClockUpdate+0xa8>)
 8003600:	e7ed      	b.n	80035de <SystemCoreClockUpdate+0x6a>
        pllvco = (msirange / pllm);
 8003602:	fbb4 f3f3 	udiv	r3, r4, r3
 8003606:	e7ec      	b.n	80035e2 <SystemCoreClockUpdate+0x6e>
      SystemCoreClock = msirange;
 8003608:	6014      	str	r4, [r2, #0]
      break;
 800360a:	e7ce      	b.n	80035aa <SystemCoreClockUpdate+0x36>
 800360c:	08003778 	.word	0x08003778
 8003610:	20000018 	.word	0x20000018
 8003614:	00f42400 	.word	0x00f42400
 8003618:	08003718 	.word	0x08003718
 800361c:	01e84800 	.word	0x01e84800

08003620 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003620:	480d      	ldr	r0, [pc, #52]	; (8003658 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003622:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003624:	480d      	ldr	r0, [pc, #52]	; (800365c <LoopForever+0x6>)
  ldr r1, =_edata
 8003626:	490e      	ldr	r1, [pc, #56]	; (8003660 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003628:	4a0e      	ldr	r2, [pc, #56]	; (8003664 <LoopForever+0xe>)
  movs r3, #0
 800362a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800362c:	e002      	b.n	8003634 <LoopCopyDataInit>

0800362e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800362e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003630:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003632:	3304      	adds	r3, #4

08003634 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003634:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003636:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003638:	d3f9      	bcc.n	800362e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800363a:	4a0b      	ldr	r2, [pc, #44]	; (8003668 <LoopForever+0x12>)
  ldr r4, =_ebss
 800363c:	4c0b      	ldr	r4, [pc, #44]	; (800366c <LoopForever+0x16>)
  movs r3, #0
 800363e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003640:	e001      	b.n	8003646 <LoopFillZerobss>

08003642 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003642:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003644:	3204      	adds	r2, #4

08003646 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003646:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003648:	d3fb      	bcc.n	8003642 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800364a:	f7ff ff5f 	bl	800350c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800364e:	f000 f811 	bl	8003674 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8003652:	f7ff fcdd 	bl	8003010 <main>

08003656 <LoopForever>:

LoopForever:
  b LoopForever
 8003656:	e7fe      	b.n	8003656 <LoopForever>
  ldr   r0, =_estack
 8003658:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800365c:	20000004 	.word	0x20000004
  ldr r1, =_edata
 8003660:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8003664:	080037c8 	.word	0x080037c8
  ldr r2, =_sbss
 8003668:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 800366c:	200005f8 	.word	0x200005f8

08003670 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003670:	e7fe      	b.n	8003670 <ADC1_IRQHandler>
	...

08003674 <__libc_init_array>:
 8003674:	b570      	push	{r4, r5, r6, lr}
 8003676:	4e0d      	ldr	r6, [pc, #52]	; (80036ac <__libc_init_array+0x38>)
 8003678:	4c0d      	ldr	r4, [pc, #52]	; (80036b0 <__libc_init_array+0x3c>)
 800367a:	1ba4      	subs	r4, r4, r6
 800367c:	10a4      	asrs	r4, r4, #2
 800367e:	2500      	movs	r5, #0
 8003680:	42a5      	cmp	r5, r4
 8003682:	d109      	bne.n	8003698 <__libc_init_array+0x24>
 8003684:	4e0b      	ldr	r6, [pc, #44]	; (80036b4 <__libc_init_array+0x40>)
 8003686:	4c0c      	ldr	r4, [pc, #48]	; (80036b8 <__libc_init_array+0x44>)
 8003688:	f000 f820 	bl	80036cc <_init>
 800368c:	1ba4      	subs	r4, r4, r6
 800368e:	10a4      	asrs	r4, r4, #2
 8003690:	2500      	movs	r5, #0
 8003692:	42a5      	cmp	r5, r4
 8003694:	d105      	bne.n	80036a2 <__libc_init_array+0x2e>
 8003696:	bd70      	pop	{r4, r5, r6, pc}
 8003698:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800369c:	4798      	blx	r3
 800369e:	3501      	adds	r5, #1
 80036a0:	e7ee      	b.n	8003680 <__libc_init_array+0xc>
 80036a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80036a6:	4798      	blx	r3
 80036a8:	3501      	adds	r5, #1
 80036aa:	e7f2      	b.n	8003692 <__libc_init_array+0x1e>
 80036ac:	080037c0 	.word	0x080037c0
 80036b0:	080037c0 	.word	0x080037c0
 80036b4:	080037c0 	.word	0x080037c0
 80036b8:	080037c4 	.word	0x080037c4

080036bc <memset>:
 80036bc:	4402      	add	r2, r0
 80036be:	4603      	mov	r3, r0
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d100      	bne.n	80036c6 <memset+0xa>
 80036c4:	4770      	bx	lr
 80036c6:	f803 1b01 	strb.w	r1, [r3], #1
 80036ca:	e7f9      	b.n	80036c0 <memset+0x4>

080036cc <_init>:
 80036cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036ce:	bf00      	nop
 80036d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036d2:	bc08      	pop	{r3}
 80036d4:	469e      	mov	lr, r3
 80036d6:	4770      	bx	lr

080036d8 <_fini>:
 80036d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036da:	bf00      	nop
 80036dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036de:	bc08      	pop	{r3}
 80036e0:	469e      	mov	lr, r3
 80036e2:	4770      	bx	lr
